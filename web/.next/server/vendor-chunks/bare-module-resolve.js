/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/bare-module-resolve";
exports.ids = ["vendor-chunks/bare-module-resolve"];
exports.modules = {

/***/ "(ssr)/./node_modules/bare-module-resolve/index.js":
/*!***************************************************!*\
  !*** ./node_modules/bare-module-resolve/index.js ***!
  \***************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("const { satisfies } = __webpack_require__(/*! bare-semver */ \"(ssr)/./node_modules/bare-semver/index.js\")\nconst errors = __webpack_require__(/*! ./lib/errors */ \"(ssr)/./node_modules/bare-module-resolve/lib/errors.js\")\n\nmodule.exports = exports = function resolve(\n  specifier,\n  parentURL,\n  opts,\n  readPackage\n) {\n  if (typeof opts === 'function') {\n    readPackage = opts\n    opts = {}\n  } else if (typeof readPackage !== 'function') {\n    readPackage = defaultReadPackage\n  }\n\n  return {\n    *[Symbol.iterator]() {\n      const generator = exports.module(specifier, parentURL, opts)\n\n      let next = generator.next()\n\n      while (next.done !== true) {\n        const value = next.value\n\n        if (value.package) {\n          next = generator.next(readPackage(value.package))\n        } else {\n          next = generator.next(yield value.resolution)\n        }\n      }\n\n      return next.value\n    },\n\n    async *[Symbol.asyncIterator]() {\n      const generator = exports.module(specifier, parentURL, opts)\n\n      let next = generator.next()\n\n      while (next.done !== true) {\n        const value = next.value\n\n        if (value.package) {\n          next = generator.next(await readPackage(value.package))\n        } else {\n          next = generator.next(yield value.resolution)\n        }\n      }\n\n      return next.value\n    }\n  }\n}\n\nfunction defaultReadPackage() {\n  return null\n}\n\n// No resolution candidate was yielded\nconst UNRESOLVED = 0x0\n// At least 1 resolution candidate was yielded\nconst YIELDED = 0x1\n// At least 1 resolution candidate was yielded and resolved\nconst RESOLVED = YIELDED | 0x2\n\nexports.constants = {\n  UNRESOLVED,\n  YIELDED,\n  RESOLVED\n}\n\nexports.module = function* (specifier, parentURL, opts = {}) {\n  const { resolutions = null, imports = null } = opts\n\n  if (exports.startsWithWindowsDriveLetter(specifier)) {\n    specifier = '/' + specifier\n  }\n\n  let status\n\n  if (resolutions) {\n    status = yield* exports.preresolved(specifier, resolutions, parentURL, opts)\n\n    if (status) return status\n  }\n\n  status = yield* exports.url(specifier, parentURL, opts)\n\n  if (status) return status\n\n  status = yield* exports.packageImports(specifier, parentURL, opts)\n\n  if (status) return status\n\n  if (\n    specifier === '.' ||\n    specifier === '..' ||\n    specifier[0] === '/' ||\n    specifier[0] === '\\\\' ||\n    specifier.startsWith('./') ||\n    specifier.startsWith('.\\\\') ||\n    specifier.startsWith('../') ||\n    specifier.startsWith('..\\\\')\n  ) {\n    if (imports) {\n      status = yield* exports.packageImportsExports(\n        specifier,\n        imports,\n        parentURL,\n        true,\n        opts\n      )\n\n      if (status) return status\n    }\n\n    status = yield* exports.deferred(specifier, opts)\n\n    if (status) return status\n\n    status = yield* exports.file(specifier, parentURL, false, opts)\n\n    if (status === RESOLVED) return status\n\n    return yield* exports.directory(specifier, parentURL, opts)\n  }\n\n  return yield* exports.package(specifier, parentURL, opts)\n}\n\nexports.url = function* (url, parentURL, opts = {}) {\n  const { imports = null, deferredProtocol = 'deferred:' } = opts\n\n  let resolution\n  try {\n    resolution = new URL(url)\n  } catch {\n    return UNRESOLVED\n  }\n\n  if (imports) {\n    const status = yield* exports.packageImportsExports(\n      resolution.href,\n      imports,\n      parentURL,\n      true,\n      opts\n    )\n\n    if (status) return status\n  }\n\n  if (resolution.protocol === deferredProtocol) {\n    const specifier = resolution.pathname\n\n    return yield* exports.module(specifier, parentURL, opts)\n  }\n\n  if (resolution.protocol === 'node:') {\n    const specifier = resolution.pathname\n\n    if (\n      specifier === '.' ||\n      specifier === '..' ||\n      specifier[0] === '/' ||\n      specifier.startsWith('./') ||\n      specifier.startsWith('../')\n    ) {\n      throw errors.INVALID_MODULE_SPECIFIER(\n        `Module specifier '${url}' is not a valid package name`\n      )\n    }\n\n    return yield* exports.package(specifier, parentURL, opts)\n  }\n\n  const resolved = yield { resolution }\n\n  return resolved ? RESOLVED : YIELDED\n}\n\nexports.preresolved = function* (specifier, resolutions, parentURL, opts = {}) {\n  const imports = resolutions[parentURL.href]\n\n  if (typeof imports === 'object' && imports !== null) {\n    return yield* exports.packageImportsExports(\n      specifier,\n      imports,\n      parentURL,\n      true,\n      opts\n    )\n  }\n\n  return UNRESOLVED\n}\n\nexports.deferred = function* (specifier, opts = {}) {\n  const { deferredProtocol = 'deferred:', defer = [] } = opts\n\n  if (defer.includes(specifier)) {\n    const resolved = yield { resolution: new URL(deferredProtocol + specifier) }\n\n    return resolved ? RESOLVED : YIELDED\n  }\n\n  return UNRESOLVED\n}\n\nexports[\"package\"] = function* (packageSpecifier, parentURL, opts = {}) {\n  const { builtins = [] } = opts\n\n  if (packageSpecifier === '') {\n    throw errors.INVALID_MODULE_SPECIFIER(\n      `Module specifier '${packageSpecifier}' is not a valid package name`\n    )\n  }\n\n  let packageName\n\n  if (packageSpecifier[0] !== '@') {\n    packageName = packageSpecifier.split('/', 1).join()\n  } else {\n    if (!packageSpecifier.includes('/')) {\n      throw errors.INVALID_MODULE_SPECIFIER(\n        `Module specifier '${packageSpecifier}' is not a valid package name`\n      )\n    }\n\n    packageName = packageSpecifier.split('/', 2).join('/')\n  }\n\n  if (\n    packageName[0] === '.' ||\n    packageName.includes('\\\\') ||\n    packageName.includes('%')\n  ) {\n    throw errors.INVALID_MODULE_SPECIFIER(\n      `Module specifier '${packageSpecifier}' is not a valid package name`\n    )\n  }\n\n  let status\n\n  status = yield* exports.builtinTarget(packageSpecifier, null, builtins, opts)\n\n  if (status) return status\n\n  status = yield* exports.deferred(packageSpecifier, opts)\n\n  if (status) return status\n\n  let packageSubpath = '.' + packageSpecifier.substring(packageName.length)\n\n  status = yield* exports.packageSelf(\n    packageName,\n    packageSubpath,\n    parentURL,\n    opts\n  )\n\n  if (status) return status\n\n  parentURL = new URL(parentURL.href)\n\n  do {\n    const packageURL = new URL('node_modules/' + packageName + '/', parentURL)\n\n    parentURL.pathname = parentURL.pathname.substring(\n      0,\n      parentURL.pathname.lastIndexOf('/')\n    )\n\n    const info = yield { package: new URL('package.json', packageURL) }\n\n    if (info) {\n      if (info.engines) exports.validateEngines(packageURL, info.engines, opts)\n\n      if (info.exports) {\n        return yield* exports.packageExports(\n          packageURL,\n          packageSubpath,\n          info.exports,\n          opts\n        )\n      }\n\n      if (packageSubpath === '.') {\n        if (typeof info.main === 'string' && info.main !== '') {\n          packageSubpath = info.main\n        } else {\n          return yield* exports.file('index', packageURL, true, opts)\n        }\n      }\n\n      status = yield* exports.file(packageSubpath, packageURL, false, opts)\n\n      if (status === RESOLVED) return status\n\n      return yield* exports.directory(packageSubpath, packageURL, opts)\n    }\n  } while (parentURL.pathname !== '' && parentURL.pathname !== '/')\n\n  return UNRESOLVED\n}\n\nexports.packageSelf = function* (\n  packageName,\n  packageSubpath,\n  parentURL,\n  opts = {}\n) {\n  for (const packageURL of exports.lookupPackageScope(parentURL, opts)) {\n    const info = yield { package: packageURL }\n\n    if (info) {\n      if (info.name !== packageName) return false\n\n      if (info.exports) {\n        return yield* exports.packageExports(\n          packageURL,\n          packageSubpath,\n          info.exports,\n          opts\n        )\n      }\n\n      if (packageSubpath === '.') {\n        if (typeof info.main === 'string' && info.main !== '') {\n          packageSubpath = info.main\n        } else {\n          return yield* exports.file('index', packageURL, true, opts)\n        }\n      }\n\n      const status = yield* exports.file(\n        packageSubpath,\n        packageURL,\n        false,\n        opts\n      )\n\n      if (status === RESOLVED) return status\n\n      return yield* exports.directory(packageSubpath, packageURL, opts)\n    }\n  }\n\n  return UNRESOLVED\n}\n\nexports.packageExports = function* (\n  packageURL,\n  subpath,\n  packageExports,\n  opts = {}\n) {\n  if (subpath === '.') {\n    let mainExport\n\n    if (typeof packageExports === 'string' || Array.isArray(packageExports)) {\n      mainExport = packageExports\n    } else if (typeof packageExports === 'object' && packageExports !== null) {\n      const keys = Object.keys(packageExports)\n\n      if (keys.some((key) => key.startsWith('.'))) {\n        if ('.' in packageExports) mainExport = packageExports['.']\n      } else {\n        mainExport = packageExports\n      }\n    }\n\n    if (mainExport) {\n      const status = yield* exports.packageTarget(\n        packageURL,\n        mainExport,\n        null,\n        false,\n        opts\n      )\n\n      if (status) return status\n    }\n  } else if (typeof packageExports === 'object' && packageExports !== null) {\n    const keys = Object.keys(packageExports)\n\n    if (keys.every((key) => key.startsWith('.'))) {\n      const status = yield* exports.packageImportsExports(\n        subpath,\n        packageExports,\n        packageURL,\n        false,\n        opts\n      )\n\n      if (status) return status\n    }\n  }\n\n  packageURL = new URL('package.json', packageURL)\n\n  throw errors.PACKAGE_PATH_NOT_EXPORTED(\n    `Package subpath '${subpath}' is not defined by \"exports\" in '${packageURL}'`\n  )\n}\n\nexports.packageImports = function* (specifier, parentURL, opts = {}) {\n  const { imports = null } = opts\n\n  if (specifier === '#' || specifier.startsWith('#/')) {\n    throw errors.INVALID_MODULE_SPECIFIER(\n      `Module specifier '${specifier}' is not a valid internal imports specifier`\n    )\n  }\n\n  for (const packageURL of exports.lookupPackageScope(parentURL, opts)) {\n    const info = yield { package: packageURL }\n\n    if (info) {\n      if (info.imports) {\n        const status = yield* exports.packageImportsExports(\n          specifier,\n          info.imports,\n          packageURL,\n          true,\n          opts\n        )\n\n        if (status) return status\n      }\n\n      if (specifier.startsWith('#')) {\n        throw errors.PACKAGE_IMPORT_NOT_DEFINED(\n          `Package import specifier '${specifier}' is not defined by \"imports\" in '${packageURL}'`\n        )\n      }\n\n      break\n    }\n  }\n\n  if (imports) {\n    const status = yield* exports.packageImportsExports(\n      specifier,\n      imports,\n      parentURL,\n      true,\n      opts\n    )\n\n    if (status) return status\n  }\n\n  return UNRESOLVED\n}\n\nexports.packageImportsExports = function* (\n  matchKey,\n  matchObject,\n  packageURL,\n  isImports,\n  opts = {}\n) {\n  if (matchKey in matchObject && !matchKey.includes('*')) {\n    const target = matchObject[matchKey]\n\n    return yield* exports.packageTarget(\n      packageURL,\n      target,\n      null,\n      isImports,\n      opts\n    )\n  }\n\n  const expansionKeys = Object.keys(matchObject)\n    .filter((key) => key.includes('*'))\n    .sort(exports.patternKeyCompare)\n\n  for (const expansionKey of expansionKeys) {\n    const patternIndex = expansionKey.indexOf('*')\n    const patternBase = expansionKey.substring(0, patternIndex)\n\n    if (matchKey.startsWith(patternBase) && matchKey !== patternBase) {\n      const patternTrailer = expansionKey.substring(patternIndex + 1)\n\n      if (\n        patternTrailer === '' ||\n        (matchKey.endsWith(patternTrailer) &&\n          matchKey.length >= expansionKey.length)\n      ) {\n        const target = matchObject[expansionKey]\n\n        const patternMatch = matchKey.substring(\n          patternBase.length,\n          matchKey.length - patternTrailer.length\n        )\n\n        return yield* exports.packageTarget(\n          packageURL,\n          target,\n          patternMatch,\n          isImports,\n          opts\n        )\n      }\n    }\n  }\n\n  return UNRESOLVED\n}\n\nexports.validateEngines = function validateEngines(\n  packageURL,\n  packageEngines,\n  opts = {}\n) {\n  const { engines = {} } = opts\n\n  for (const [engine, range] of Object.entries(packageEngines)) {\n    if (engine in engines) {\n      const version = engines[engine]\n\n      if (!satisfies(version, range)) {\n        packageURL = new URL('package.json', packageURL)\n\n        throw errors.UNSUPPORTED_ENGINE(\n          `Package not compatible with engine '${engine}' ${version}, requires range '${range}' defined by \"engines\" in '${packageURL}'`\n        )\n      }\n    }\n  }\n}\n\nexports.patternKeyCompare = function patternKeyCompare(keyA, keyB) {\n  const patternIndexA = keyA.indexOf('*')\n  const patternIndexB = keyB.indexOf('*')\n  const baseLengthA = patternIndexA === -1 ? keyA.length : patternIndexA + 1\n  const baseLengthB = patternIndexB === -1 ? keyB.length : patternIndexB + 1\n  if (baseLengthA > baseLengthB) return -1\n  if (baseLengthB > baseLengthA) return 1\n  if (patternIndexA === -1) return 1\n  if (patternIndexB === -1) return -1\n  if (keyA.length > keyB.length) return -1\n  if (keyB.length > keyA.length) return 1\n  return 0\n}\n\nexports.packageTarget = function* (\n  packageURL,\n  target,\n  patternMatch,\n  isImports,\n  opts = {}\n) {\n  const { conditions = [], matchedConditions = [] } = opts\n\n  if (typeof target === 'string') {\n    if (!target.startsWith('./') && !isImports) {\n      packageURL = new URL('package.json', packageURL)\n\n      throw errors.INVALID_PACKAGE_TARGET(\n        `Invalid target '${target}' defined by \"exports\" in '${packageURL}'`\n      )\n    }\n\n    if (patternMatch !== null) {\n      target = target.replaceAll('*', patternMatch)\n    }\n\n    const status = yield* exports.url(target, packageURL, opts)\n\n    if (status) return status\n\n    if (\n      target === '.' ||\n      target === '..' ||\n      target[0] === '/' ||\n      target.startsWith('./') ||\n      target.startsWith('../')\n    ) {\n      const resolved = yield { resolution: new URL(target, packageURL) }\n\n      return resolved ? RESOLVED : YIELDED\n    }\n\n    return yield* exports.package(target, packageURL, opts)\n  }\n\n  if (Array.isArray(target)) {\n    for (const targetValue of target) {\n      const status = yield* exports.packageTarget(\n        packageURL,\n        targetValue,\n        patternMatch,\n        isImports,\n        opts\n      )\n\n      if (status) return status\n    }\n  } else if (typeof target === 'object' && target !== null) {\n    let status = UNRESOLVED\n\n    for (const [condition, targetValue, subset] of exports.conditionMatches(\n      target,\n      conditions,\n      opts\n    )) {\n      matchedConditions.push(condition)\n\n      status |= yield* exports.packageTarget(\n        packageURL,\n        targetValue,\n        patternMatch,\n        isImports,\n        { ...opts, conditions: subset }\n      )\n\n      matchedConditions.pop()\n    }\n\n    if (status) return status\n  }\n\n  return UNRESOLVED\n}\n\nexports.builtinTarget = function* (\n  packageSpecifier,\n  packageVersion,\n  target,\n  opts = {}\n) {\n  const {\n    builtinProtocol = 'builtin:',\n    conditions = [],\n    matchedConditions = []\n  } = opts\n\n  if (typeof target === 'string') {\n    const targetParts = target.split('@')\n\n    let targetName\n    let targetVersion\n\n    if (target[0] !== '@') {\n      targetName = targetParts[0]\n      targetVersion = targetParts[1] || null\n    } else {\n      targetName = targetParts.slice(0, 2).join('@')\n      targetVersion = targetParts[2] || null\n    }\n\n    if (packageSpecifier === targetName) {\n      if (packageVersion === null && targetVersion === null) {\n        const resolved = yield {\n          resolution: new URL(builtinProtocol + packageSpecifier)\n        }\n\n        return resolved ? RESOLVED : YIELDED\n      }\n\n      let version = null\n\n      if (packageVersion === null) {\n        version = targetVersion\n      } else if (targetVersion === null || packageVersion === targetVersion) {\n        version = packageVersion\n      }\n\n      if (version !== null) {\n        const resolved = yield {\n          resolution: new URL(\n            builtinProtocol + packageSpecifier + '@' + version\n          )\n        }\n\n        return resolved ? RESOLVED : YIELDED\n      }\n    }\n  } else if (Array.isArray(target)) {\n    for (const targetValue of target) {\n      const status = yield* exports.builtinTarget(\n        packageSpecifier,\n        packageVersion,\n        targetValue,\n        opts\n      )\n\n      if (status) return status\n    }\n  } else if (typeof target === 'object' && target !== null) {\n    let status = UNRESOLVED\n\n    for (const [condition, targetValue, subset] of exports.conditionMatches(\n      target,\n      conditions,\n      opts\n    )) {\n      matchedConditions.push(condition)\n\n      status |= yield* exports.builtinTarget(\n        packageSpecifier,\n        packageVersion,\n        targetValue,\n        { ...opts, conditions: subset }\n      )\n\n      matchedConditions.pop()\n    }\n\n    if (status) return status\n  }\n\n  return UNRESOLVED\n}\n\nexports.conditionMatches = function* conditionMatches(\n  target,\n  conditions,\n  opts = {}\n) {\n  if (conditions.every((condition) => typeof condition === 'string')) {\n    const keys = Object.keys(target)\n\n    for (const condition of keys) {\n      if (condition === 'default' || conditions.includes(condition)) {\n        yield [condition, target[condition], conditions]\n\n        return true\n      }\n    }\n\n    return false\n  }\n\n  let yielded = false\n\n  for (const subset of conditions) {\n    if (yield* conditionMatches(target, subset, opts)) {\n      yielded = true\n    }\n  }\n\n  return yielded\n}\n\nexports.lookupPackageScope = function* lookupPackageScope(url, opts = {}) {\n  const { resolutions = null } = opts\n\n  if (resolutions) {\n    for (const { resolution } of exports.preresolved(\n      '#package',\n      resolutions,\n      url,\n      opts\n    )) {\n      if (resolution) return yield resolution\n    }\n\n    // Internal preresolution path, do not depend on this! It will be removed without\n    // warning.\n    for (const { resolution } of exports.preresolved(\n      'bare:package',\n      resolutions,\n      url,\n      opts\n    )) {\n      if (resolution) return yield resolution\n    }\n  }\n\n  const scopeURL = new URL(url.href)\n\n  do {\n    if (scopeURL.pathname.endsWith('/node_modules')) break\n\n    yield new URL('package.json', scopeURL)\n\n    scopeURL.pathname = scopeURL.pathname.substring(\n      0,\n      scopeURL.pathname.lastIndexOf('/')\n    )\n\n    if (\n      scopeURL.pathname.length === 3 &&\n      exports.isWindowsDriveLetter(scopeURL.pathname.substring(1))\n    ) {\n      break\n    }\n  } while (scopeURL.pathname !== '' && scopeURL.pathname !== '/')\n}\n\nexports.file = function* (filename, parentURL, isIndex, opts = {}) {\n  if (\n    filename === '.' ||\n    filename === '..' ||\n    filename[filename.length - 1] === '/' ||\n    filename[filename.length - 1] === '\\\\'\n  ) {\n    return UNRESOLVED\n  }\n\n  if (parentURL.protocol === 'file:' && /%2f|%5c/i.test(filename)) {\n    throw errors.INVALID_MODULE_SPECIFIER(\n      `Module specifier '${filename}' is invalid`\n    )\n  }\n\n  const { extensions = [] } = opts\n\n  let status = UNRESOLVED\n\n  if (!isIndex) {\n    if (yield { resolution: new URL(filename, parentURL) }) {\n      return RESOLVED\n    }\n\n    status = YIELDED\n  }\n\n  for (const ext of extensions) {\n    if (yield { resolution: new URL(filename + ext, parentURL) }) {\n      return RESOLVED\n    }\n\n    status = YIELDED\n  }\n\n  return status\n}\n\nexports.directory = function* (dirname, parentURL, opts = {}) {\n  let directoryURL\n\n  if (\n    dirname[dirname.length - 1] === '/' ||\n    dirname[dirname.length - 1] === '\\\\'\n  ) {\n    directoryURL = new URL(dirname, parentURL)\n  } else {\n    directoryURL = new URL(dirname + '/', parentURL)\n  }\n\n  const info = yield { package: new URL('package.json', directoryURL) }\n\n  if (info) {\n    if (info.exports) {\n      return yield* exports.packageExports(\n        directoryURL,\n        '.',\n        info.exports,\n        opts\n      )\n    }\n\n    if (typeof info.main === 'string' && info.main !== '') {\n      const status = yield* exports.file(info.main, directoryURL, false, opts)\n\n      if (status === RESOLVED) return status\n\n      return yield* exports.directory(info.main, directoryURL, opts)\n    }\n  }\n\n  return yield* exports.file('index', directoryURL, true, opts)\n}\n\n// https://infra.spec.whatwg.org/#ascii-upper-alpha\nfunction isASCIIUpperAlpha(c) {\n  return c >= 0x41 && c <= 0x5a\n}\n\n// https://infra.spec.whatwg.org/#ascii-lower-alpha\nfunction isASCIILowerAlpha(c) {\n  return c >= 0x61 && c <= 0x7a\n}\n\n// https://infra.spec.whatwg.org/#ascii-alpha\nfunction isASCIIAlpha(c) {\n  return isASCIIUpperAlpha(c) || isASCIILowerAlpha(c)\n}\n\n// https://url.spec.whatwg.org/#windows-drive-letter\nexports.isWindowsDriveLetter = function isWindowsDriveLetter(input) {\n  return (\n    input.length >= 2 &&\n    isASCIIAlpha(input.charCodeAt(0)) &&\n    (input.charCodeAt(1) === 0x3a || input.charCodeAt(1) === 0x7c)\n  )\n}\n\n// https://url.spec.whatwg.org/#start-with-a-windows-drive-letter\nexports.startsWithWindowsDriveLetter = function startsWithWindowsDriveLetter(\n  input\n) {\n  return (\n    input.length >= 2 &&\n    exports.isWindowsDriveLetter(input) &&\n    (input.length === 2 ||\n      input.charCodeAt(2) === 0x2f ||\n      input.charCodeAt(2) === 0x5c ||\n      input.charCodeAt(2) === 0x3f ||\n      input.charCodeAt(2) === 0x23)\n  )\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/bare-module-resolve/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/bare-module-resolve/lib/errors.js":
/*!********************************************************!*\
  !*** ./node_modules/bare-module-resolve/lib/errors.js ***!
  \********************************************************/
/***/ ((module) => {

eval("module.exports = class ModuleResolveError extends Error {\n  constructor(msg, code, fn = ModuleResolveError) {\n    super(`${code}: ${msg}`)\n    this.code = code\n\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, fn)\n    }\n  }\n\n  get name() {\n    return 'ModuleResolveError'\n  }\n\n  static INVALID_MODULE_SPECIFIER(msg) {\n    return new ModuleResolveError(\n      msg,\n      'INVALID_MODULE_SPECIFIER',\n      ModuleResolveError.INVALID_MODULE_SPECIFIER\n    )\n  }\n\n  static INVALID_PACKAGE_TARGET(msg) {\n    return new ModuleResolveError(\n      msg,\n      'INVALID_PACKAGE_TARGET',\n      ModuleResolveError.INVALID_PACKAGE_TARGET\n    )\n  }\n\n  static PACKAGE_PATH_NOT_EXPORTED(msg) {\n    return new ModuleResolveError(\n      msg,\n      'PACKAGE_PATH_NOT_EXPORTED',\n      ModuleResolveError.PACKAGE_PATH_NOT_EXPORTED\n    )\n  }\n\n  static PACKAGE_IMPORT_NOT_DEFINED(msg) {\n    return new ModuleResolveError(\n      msg,\n      'PACKAGE_IMPORT_NOT_DEFINED',\n      ModuleResolveError.PACKAGE_IMPORT_NOT_DEFINED\n    )\n  }\n\n  static UNSUPPORTED_ENGINE(msg) {\n    return new ModuleResolveError(\n      msg,\n      'UNSUPPORTED_ENGINE',\n      ModuleResolveError.UNSUPPORTED_ENGINE\n    )\n  }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYmFyZS1tb2R1bGUtcmVzb2x2ZS9saWIvZXJyb3JzLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQSxhQUFhLEtBQUssSUFBSSxJQUFJO0FBQzFCOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXFVTVUFSSU9cXERvY3VtZW50c1xcR2l0aHViXFxHYWxheHlLSi13YWxsZXQtLS1IYWNrXFx3ZWJcXG5vZGVfbW9kdWxlc1xcYmFyZS1tb2R1bGUtcmVzb2x2ZVxcbGliXFxlcnJvcnMuanMiXSwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBjbGFzcyBNb2R1bGVSZXNvbHZlRXJyb3IgZXh0ZW5kcyBFcnJvciB7XG4gIGNvbnN0cnVjdG9yKG1zZywgY29kZSwgZm4gPSBNb2R1bGVSZXNvbHZlRXJyb3IpIHtcbiAgICBzdXBlcihgJHtjb2RlfTogJHttc2d9YClcbiAgICB0aGlzLmNvZGUgPSBjb2RlXG5cbiAgICBpZiAoRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UpIHtcbiAgICAgIEVycm9yLmNhcHR1cmVTdGFja1RyYWNlKHRoaXMsIGZuKVxuICAgIH1cbiAgfVxuXG4gIGdldCBuYW1lKCkge1xuICAgIHJldHVybiAnTW9kdWxlUmVzb2x2ZUVycm9yJ1xuICB9XG5cbiAgc3RhdGljIElOVkFMSURfTU9EVUxFX1NQRUNJRklFUihtc2cpIHtcbiAgICByZXR1cm4gbmV3IE1vZHVsZVJlc29sdmVFcnJvcihcbiAgICAgIG1zZyxcbiAgICAgICdJTlZBTElEX01PRFVMRV9TUEVDSUZJRVInLFxuICAgICAgTW9kdWxlUmVzb2x2ZUVycm9yLklOVkFMSURfTU9EVUxFX1NQRUNJRklFUlxuICAgIClcbiAgfVxuXG4gIHN0YXRpYyBJTlZBTElEX1BBQ0tBR0VfVEFSR0VUKG1zZykge1xuICAgIHJldHVybiBuZXcgTW9kdWxlUmVzb2x2ZUVycm9yKFxuICAgICAgbXNnLFxuICAgICAgJ0lOVkFMSURfUEFDS0FHRV9UQVJHRVQnLFxuICAgICAgTW9kdWxlUmVzb2x2ZUVycm9yLklOVkFMSURfUEFDS0FHRV9UQVJHRVRcbiAgICApXG4gIH1cblxuICBzdGF0aWMgUEFDS0FHRV9QQVRIX05PVF9FWFBPUlRFRChtc2cpIHtcbiAgICByZXR1cm4gbmV3IE1vZHVsZVJlc29sdmVFcnJvcihcbiAgICAgIG1zZyxcbiAgICAgICdQQUNLQUdFX1BBVEhfTk9UX0VYUE9SVEVEJyxcbiAgICAgIE1vZHVsZVJlc29sdmVFcnJvci5QQUNLQUdFX1BBVEhfTk9UX0VYUE9SVEVEXG4gICAgKVxuICB9XG5cbiAgc3RhdGljIFBBQ0tBR0VfSU1QT1JUX05PVF9ERUZJTkVEKG1zZykge1xuICAgIHJldHVybiBuZXcgTW9kdWxlUmVzb2x2ZUVycm9yKFxuICAgICAgbXNnLFxuICAgICAgJ1BBQ0tBR0VfSU1QT1JUX05PVF9ERUZJTkVEJyxcbiAgICAgIE1vZHVsZVJlc29sdmVFcnJvci5QQUNLQUdFX0lNUE9SVF9OT1RfREVGSU5FRFxuICAgIClcbiAgfVxuXG4gIHN0YXRpYyBVTlNVUFBPUlRFRF9FTkdJTkUobXNnKSB7XG4gICAgcmV0dXJuIG5ldyBNb2R1bGVSZXNvbHZlRXJyb3IoXG4gICAgICBtc2csXG4gICAgICAnVU5TVVBQT1JURURfRU5HSU5FJyxcbiAgICAgIE1vZHVsZVJlc29sdmVFcnJvci5VTlNVUFBPUlRFRF9FTkdJTkVcbiAgICApXG4gIH1cbn1cbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/bare-module-resolve/lib/errors.js\n");

/***/ })

};
;