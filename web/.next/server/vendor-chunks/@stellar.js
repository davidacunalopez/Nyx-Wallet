"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@stellar";
exports.ids = ["vendor-chunks/@stellar"];
exports.modules = {

/***/ "(ssr)/./node_modules/@stellar/js-xdr/src/array.js":
/*!***************************************************!*\
  !*** ./node_modules/@stellar/js-xdr/src/array.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Array: () => (/* binding */ Array)\n/* harmony export */ });\n/* harmony import */ var _xdr_type__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./xdr-type */ \"(ssr)/./node_modules/@stellar/js-xdr/src/xdr-type.js\");\n/* harmony import */ var _errors__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./errors */ \"(ssr)/./node_modules/@stellar/js-xdr/src/errors.js\");\n\n\n\nclass Array extends _xdr_type__WEBPACK_IMPORTED_MODULE_0__.XdrCompositeType {\n  constructor(childType, length) {\n    super();\n    this._childType = childType;\n    this._length = length;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  read(reader) {\n    // allocate array of specified length\n    const result = new global.Array(this._length);\n    // read values\n    for (let i = 0; i < this._length; i++) {\n      result[i] = this._childType.read(reader);\n    }\n    return result;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  write(value, writer) {\n    if (!global.Array.isArray(value))\n      throw new _errors__WEBPACK_IMPORTED_MODULE_1__.XdrWriterError(`value is not array`);\n\n    if (value.length !== this._length)\n      throw new _errors__WEBPACK_IMPORTED_MODULE_1__.XdrWriterError(\n        `got array of size ${value.length}, expected ${this._length}`\n      );\n\n    for (const child of value) {\n      this._childType.write(child, writer);\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  isValid(value) {\n    if (!(value instanceof global.Array) || value.length !== this._length) {\n      return false;\n    }\n\n    for (const child of value) {\n      if (!this._childType.isValid(child)) return false;\n    }\n    return true;\n  }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHN0ZWxsYXIvanMteGRyL3NyYy9hcnJheS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBOEM7QUFDSjs7QUFFbkMsb0JBQW9CLHVEQUFnQjtBQUMzQztBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLGtCQUFrQjtBQUN0QztBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLG1EQUFjOztBQUU5QjtBQUNBLGdCQUFnQixtREFBYztBQUM5Qiw2QkFBNkIsYUFBYSxhQUFhLGFBQWE7QUFDcEU7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXFVTVUFSSU9cXERvY3VtZW50c1xcR2l0aHViXFxHYWxheHlLSi13YWxsZXQtLS1IYWNrXFx3ZWJcXG5vZGVfbW9kdWxlc1xcQHN0ZWxsYXJcXGpzLXhkclxcc3JjXFxhcnJheS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBYZHJDb21wb3NpdGVUeXBlIH0gZnJvbSAnLi94ZHItdHlwZSc7XG5pbXBvcnQgeyBYZHJXcml0ZXJFcnJvciB9IGZyb20gJy4vZXJyb3JzJztcblxuZXhwb3J0IGNsYXNzIEFycmF5IGV4dGVuZHMgWGRyQ29tcG9zaXRlVHlwZSB7XG4gIGNvbnN0cnVjdG9yKGNoaWxkVHlwZSwgbGVuZ3RoKSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLl9jaGlsZFR5cGUgPSBjaGlsZFR5cGU7XG4gICAgdGhpcy5fbGVuZ3RoID0gbGVuZ3RoO1xuICB9XG5cbiAgLyoqXG4gICAqIEBpbmhlcml0RG9jXG4gICAqL1xuICByZWFkKHJlYWRlcikge1xuICAgIC8vIGFsbG9jYXRlIGFycmF5IG9mIHNwZWNpZmllZCBsZW5ndGhcbiAgICBjb25zdCByZXN1bHQgPSBuZXcgZ2xvYmFsLkFycmF5KHRoaXMuX2xlbmd0aCk7XG4gICAgLy8gcmVhZCB2YWx1ZXNcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuX2xlbmd0aDsgaSsrKSB7XG4gICAgICByZXN1bHRbaV0gPSB0aGlzLl9jaGlsZFR5cGUucmVhZChyZWFkZXIpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIEBpbmhlcml0RG9jXG4gICAqL1xuICB3cml0ZSh2YWx1ZSwgd3JpdGVyKSB7XG4gICAgaWYgKCFnbG9iYWwuQXJyYXkuaXNBcnJheSh2YWx1ZSkpXG4gICAgICB0aHJvdyBuZXcgWGRyV3JpdGVyRXJyb3IoYHZhbHVlIGlzIG5vdCBhcnJheWApO1xuXG4gICAgaWYgKHZhbHVlLmxlbmd0aCAhPT0gdGhpcy5fbGVuZ3RoKVxuICAgICAgdGhyb3cgbmV3IFhkcldyaXRlckVycm9yKFxuICAgICAgICBgZ290IGFycmF5IG9mIHNpemUgJHt2YWx1ZS5sZW5ndGh9LCBleHBlY3RlZCAke3RoaXMuX2xlbmd0aH1gXG4gICAgICApO1xuXG4gICAgZm9yIChjb25zdCBjaGlsZCBvZiB2YWx1ZSkge1xuICAgICAgdGhpcy5fY2hpbGRUeXBlLndyaXRlKGNoaWxkLCB3cml0ZXIpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBAaW5oZXJpdERvY1xuICAgKi9cbiAgaXNWYWxpZCh2YWx1ZSkge1xuICAgIGlmICghKHZhbHVlIGluc3RhbmNlb2YgZ2xvYmFsLkFycmF5KSB8fCB2YWx1ZS5sZW5ndGggIT09IHRoaXMuX2xlbmd0aCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIGZvciAoY29uc3QgY2hpbGQgb2YgdmFsdWUpIHtcbiAgICAgIGlmICghdGhpcy5fY2hpbGRUeXBlLmlzVmFsaWQoY2hpbGQpKSByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xuICB9XG59XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@stellar/js-xdr/src/array.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@stellar/js-xdr/src/bigint-encoder.js":
/*!************************************************************!*\
  !*** ./node_modules/@stellar/js-xdr/src/bigint-encoder.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   calculateBigIntBoundaries: () => (/* binding */ calculateBigIntBoundaries),\n/* harmony export */   encodeBigIntFromBits: () => (/* binding */ encodeBigIntFromBits),\n/* harmony export */   formatIntName: () => (/* binding */ formatIntName),\n/* harmony export */   sliceBigInt: () => (/* binding */ sliceBigInt)\n/* harmony export */ });\n/**\n * Encode a native `bigint` value from a list of arbitrary integer-like values.\n *\n * @param {Array<number|bigint|string>} parts - Slices to encode in big-endian\n *    format (i.e. earlier elements are higher bits)\n * @param {64|128|256} size - Number of bits in the target integer type\n * @param {boolean} unsigned - Whether it's an unsigned integer\n *\n * @returns {bigint}\n */\nfunction encodeBigIntFromBits(parts, size, unsigned) {\n  if (!(parts instanceof Array)) {\n    // allow a single parameter instead of an array\n    parts = [parts];\n  } else if (parts.length && parts[0] instanceof Array) {\n    // unpack nested array param\n    parts = parts[0];\n  }\n\n  const total = parts.length;\n  const sliceSize = size / total;\n  switch (sliceSize) {\n    case 32:\n    case 64:\n    case 128:\n    case 256:\n      break;\n\n    default:\n      throw new RangeError(\n        `expected slices to fit in 32/64/128/256 bits, got ${parts}`\n      );\n  }\n\n  // normalize all inputs to bigint\n  try {\n    for (let i = 0; i < parts.length; i++) {\n      if (typeof parts[i] !== 'bigint') {\n        parts[i] = BigInt(parts[i].valueOf());\n      }\n    }\n  } catch (e) {\n    throw new TypeError(`expected bigint-like values, got: ${parts} (${e})`);\n  }\n\n  // check for sign mismatches for single inputs (this is a special case to\n  // handle one parameter passed to e.g. UnsignedHyper et al.)\n  // see https://github.com/stellar/js-xdr/pull/100#discussion_r1228770845\n  if (unsigned && parts.length === 1 && parts[0] < 0n) {\n    throw new RangeError(`expected a positive value, got: ${parts}`);\n  }\n\n  // encode in big-endian fashion, shifting each slice by the slice size\n  let result = BigInt.asUintN(sliceSize, parts[0]); // safe: len >= 1\n  for (let i = 1; i < parts.length; i++) {\n    result |= BigInt.asUintN(sliceSize, parts[i]) << BigInt(i * sliceSize);\n  }\n\n  // interpret value as signed if necessary and clamp it\n  if (!unsigned) {\n    result = BigInt.asIntN(size, result);\n  }\n\n  // check boundaries\n  const [min, max] = calculateBigIntBoundaries(size, unsigned);\n  if (result >= min && result <= max) {\n    return result;\n  }\n\n  // failed to encode\n  throw new TypeError(\n    `bigint values [${parts}] for ${formatIntName(\n      size,\n      unsigned\n    )} out of range [${min}, ${max}]: ${result}`\n  );\n}\n\n/**\n * Transforms a single bigint value that's supposed to represent a `size`-bit\n * integer into a list of `sliceSize`d chunks.\n *\n * @param {bigint} value - Single bigint value to decompose\n * @param {64|128|256} iSize - Number of bits represented by `value`\n * @param {32|64|128} sliceSize - Number of chunks to decompose into\n * @return {bigint[]}\n */\nfunction sliceBigInt(value, iSize, sliceSize) {\n  if (typeof value !== 'bigint') {\n    throw new TypeError(`Expected bigint 'value', got ${typeof value}`);\n  }\n\n  const total = iSize / sliceSize;\n  if (total === 1) {\n    return [value];\n  }\n\n  if (\n    sliceSize < 32 ||\n    sliceSize > 128 ||\n    (total !== 2 && total !== 4 && total !== 8)\n  ) {\n    throw new TypeError(\n      `invalid bigint (${value}) and slice size (${iSize} -> ${sliceSize}) combination`\n    );\n  }\n\n  const shift = BigInt(sliceSize);\n\n  // iterate shift and mask application\n  const result = new Array(total);\n  for (let i = 0; i < total; i++) {\n    // we force a signed interpretation to preserve sign in each slice value,\n    // but downstream can convert to unsigned if it's appropriate\n    result[i] = BigInt.asIntN(sliceSize, value); // clamps to size\n\n    // move on to the next chunk\n    value >>= shift;\n  }\n\n  return result;\n}\n\nfunction formatIntName(precision, unsigned) {\n  return `${unsigned ? 'u' : 'i'}${precision}`;\n}\n\n/**\n * Get min|max boundaries for an integer with a specified bits size\n * @param {64|128|256} size - Number of bits in the source integer type\n * @param {Boolean} unsigned - Whether it's an unsigned integer\n * @return {BigInt[]}\n */\nfunction calculateBigIntBoundaries(size, unsigned) {\n  if (unsigned) {\n    return [0n, (1n << BigInt(size)) - 1n];\n  }\n\n  const boundary = 1n << BigInt(size - 1);\n  return [0n - boundary, boundary - 1n];\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHN0ZWxsYXIvanMteGRyL3NyYy9iaWdpbnQtZW5jb2Rlci5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyw2QkFBNkI7QUFDeEM7QUFDQSxXQUFXLFlBQVk7QUFDdkIsV0FBVyxTQUFTO0FBQ3BCO0FBQ0EsYUFBYTtBQUNiO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLDZEQUE2RCxNQUFNO0FBQ25FO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLG9CQUFvQixrQkFBa0I7QUFDdEM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0osNkRBQTZELE9BQU8sR0FBRyxFQUFFO0FBQ3pFOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNERBQTRELE1BQU07QUFDbEU7O0FBRUE7QUFDQSxvREFBb0Q7QUFDcEQsa0JBQWtCLGtCQUFrQjtBQUNwQztBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLHNCQUFzQixNQUFNLFFBQVE7QUFDcEM7QUFDQTtBQUNBLE9BQU8sZ0JBQWdCLElBQUksSUFBSSxJQUFJLEtBQUssT0FBTztBQUMvQztBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CLFdBQVcsWUFBWTtBQUN2QixXQUFXLFdBQVc7QUFDdEIsWUFBWTtBQUNaO0FBQ087QUFDUDtBQUNBLHdEQUF3RCxhQUFhO0FBQ3JFOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlCQUF5QixNQUFNLG9CQUFvQixPQUFPLEtBQUssVUFBVTtBQUN6RTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQSxrQkFBa0IsV0FBVztBQUM3QjtBQUNBO0FBQ0EsaURBQWlEOztBQUVqRDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFTztBQUNQLFlBQVkscUJBQXFCLEVBQUUsVUFBVTtBQUM3Qzs7QUFFQTtBQUNBO0FBQ0EsV0FBVyxZQUFZO0FBQ3ZCLFdBQVcsU0FBUztBQUNwQixZQUFZO0FBQ1o7QUFDTztBQUNQO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcVVNVQVJJT1xcRG9jdW1lbnRzXFxHaXRodWJcXEdhbGF4eUtKLXdhbGxldC0tLUhhY2tcXHdlYlxcbm9kZV9tb2R1bGVzXFxAc3RlbGxhclxcanMteGRyXFxzcmNcXGJpZ2ludC1lbmNvZGVyLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogRW5jb2RlIGEgbmF0aXZlIGBiaWdpbnRgIHZhbHVlIGZyb20gYSBsaXN0IG9mIGFyYml0cmFyeSBpbnRlZ2VyLWxpa2UgdmFsdWVzLlxuICpcbiAqIEBwYXJhbSB7QXJyYXk8bnVtYmVyfGJpZ2ludHxzdHJpbmc+fSBwYXJ0cyAtIFNsaWNlcyB0byBlbmNvZGUgaW4gYmlnLWVuZGlhblxuICogICAgZm9ybWF0IChpLmUuIGVhcmxpZXIgZWxlbWVudHMgYXJlIGhpZ2hlciBiaXRzKVxuICogQHBhcmFtIHs2NHwxMjh8MjU2fSBzaXplIC0gTnVtYmVyIG9mIGJpdHMgaW4gdGhlIHRhcmdldCBpbnRlZ2VyIHR5cGVcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gdW5zaWduZWQgLSBXaGV0aGVyIGl0J3MgYW4gdW5zaWduZWQgaW50ZWdlclxuICpcbiAqIEByZXR1cm5zIHtiaWdpbnR9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBlbmNvZGVCaWdJbnRGcm9tQml0cyhwYXJ0cywgc2l6ZSwgdW5zaWduZWQpIHtcbiAgaWYgKCEocGFydHMgaW5zdGFuY2VvZiBBcnJheSkpIHtcbiAgICAvLyBhbGxvdyBhIHNpbmdsZSBwYXJhbWV0ZXIgaW5zdGVhZCBvZiBhbiBhcnJheVxuICAgIHBhcnRzID0gW3BhcnRzXTtcbiAgfSBlbHNlIGlmIChwYXJ0cy5sZW5ndGggJiYgcGFydHNbMF0gaW5zdGFuY2VvZiBBcnJheSkge1xuICAgIC8vIHVucGFjayBuZXN0ZWQgYXJyYXkgcGFyYW1cbiAgICBwYXJ0cyA9IHBhcnRzWzBdO1xuICB9XG5cbiAgY29uc3QgdG90YWwgPSBwYXJ0cy5sZW5ndGg7XG4gIGNvbnN0IHNsaWNlU2l6ZSA9IHNpemUgLyB0b3RhbDtcbiAgc3dpdGNoIChzbGljZVNpemUpIHtcbiAgICBjYXNlIDMyOlxuICAgIGNhc2UgNjQ6XG4gICAgY2FzZSAxMjg6XG4gICAgY2FzZSAyNTY6XG4gICAgICBicmVhaztcblxuICAgIGRlZmF1bHQ6XG4gICAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcihcbiAgICAgICAgYGV4cGVjdGVkIHNsaWNlcyB0byBmaXQgaW4gMzIvNjQvMTI4LzI1NiBiaXRzLCBnb3QgJHtwYXJ0c31gXG4gICAgICApO1xuICB9XG5cbiAgLy8gbm9ybWFsaXplIGFsbCBpbnB1dHMgdG8gYmlnaW50XG4gIHRyeSB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwYXJ0cy5sZW5ndGg7IGkrKykge1xuICAgICAgaWYgKHR5cGVvZiBwYXJ0c1tpXSAhPT0gJ2JpZ2ludCcpIHtcbiAgICAgICAgcGFydHNbaV0gPSBCaWdJbnQocGFydHNbaV0udmFsdWVPZigpKTtcbiAgICAgIH1cbiAgICB9XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKGBleHBlY3RlZCBiaWdpbnQtbGlrZSB2YWx1ZXMsIGdvdDogJHtwYXJ0c30gKCR7ZX0pYCk7XG4gIH1cblxuICAvLyBjaGVjayBmb3Igc2lnbiBtaXNtYXRjaGVzIGZvciBzaW5nbGUgaW5wdXRzICh0aGlzIGlzIGEgc3BlY2lhbCBjYXNlIHRvXG4gIC8vIGhhbmRsZSBvbmUgcGFyYW1ldGVyIHBhc3NlZCB0byBlLmcuIFVuc2lnbmVkSHlwZXIgZXQgYWwuKVxuICAvLyBzZWUgaHR0cHM6Ly9naXRodWIuY29tL3N0ZWxsYXIvanMteGRyL3B1bGwvMTAwI2Rpc2N1c3Npb25fcjEyMjg3NzA4NDVcbiAgaWYgKHVuc2lnbmVkICYmIHBhcnRzLmxlbmd0aCA9PT0gMSAmJiBwYXJ0c1swXSA8IDBuKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoYGV4cGVjdGVkIGEgcG9zaXRpdmUgdmFsdWUsIGdvdDogJHtwYXJ0c31gKTtcbiAgfVxuXG4gIC8vIGVuY29kZSBpbiBiaWctZW5kaWFuIGZhc2hpb24sIHNoaWZ0aW5nIGVhY2ggc2xpY2UgYnkgdGhlIHNsaWNlIHNpemVcbiAgbGV0IHJlc3VsdCA9IEJpZ0ludC5hc1VpbnROKHNsaWNlU2l6ZSwgcGFydHNbMF0pOyAvLyBzYWZlOiBsZW4gPj0gMVxuICBmb3IgKGxldCBpID0gMTsgaSA8IHBhcnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgcmVzdWx0IHw9IEJpZ0ludC5hc1VpbnROKHNsaWNlU2l6ZSwgcGFydHNbaV0pIDw8IEJpZ0ludChpICogc2xpY2VTaXplKTtcbiAgfVxuXG4gIC8vIGludGVycHJldCB2YWx1ZSBhcyBzaWduZWQgaWYgbmVjZXNzYXJ5IGFuZCBjbGFtcCBpdFxuICBpZiAoIXVuc2lnbmVkKSB7XG4gICAgcmVzdWx0ID0gQmlnSW50LmFzSW50TihzaXplLCByZXN1bHQpO1xuICB9XG5cbiAgLy8gY2hlY2sgYm91bmRhcmllc1xuICBjb25zdCBbbWluLCBtYXhdID0gY2FsY3VsYXRlQmlnSW50Qm91bmRhcmllcyhzaXplLCB1bnNpZ25lZCk7XG4gIGlmIChyZXN1bHQgPj0gbWluICYmIHJlc3VsdCA8PSBtYXgpIHtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLy8gZmFpbGVkIHRvIGVuY29kZVxuICB0aHJvdyBuZXcgVHlwZUVycm9yKFxuICAgIGBiaWdpbnQgdmFsdWVzIFske3BhcnRzfV0gZm9yICR7Zm9ybWF0SW50TmFtZShcbiAgICAgIHNpemUsXG4gICAgICB1bnNpZ25lZFxuICAgICl9IG91dCBvZiByYW5nZSBbJHttaW59LCAke21heH1dOiAke3Jlc3VsdH1gXG4gICk7XG59XG5cbi8qKlxuICogVHJhbnNmb3JtcyBhIHNpbmdsZSBiaWdpbnQgdmFsdWUgdGhhdCdzIHN1cHBvc2VkIHRvIHJlcHJlc2VudCBhIGBzaXplYC1iaXRcbiAqIGludGVnZXIgaW50byBhIGxpc3Qgb2YgYHNsaWNlU2l6ZWBkIGNodW5rcy5cbiAqXG4gKiBAcGFyYW0ge2JpZ2ludH0gdmFsdWUgLSBTaW5nbGUgYmlnaW50IHZhbHVlIHRvIGRlY29tcG9zZVxuICogQHBhcmFtIHs2NHwxMjh8MjU2fSBpU2l6ZSAtIE51bWJlciBvZiBiaXRzIHJlcHJlc2VudGVkIGJ5IGB2YWx1ZWBcbiAqIEBwYXJhbSB7MzJ8NjR8MTI4fSBzbGljZVNpemUgLSBOdW1iZXIgb2YgY2h1bmtzIHRvIGRlY29tcG9zZSBpbnRvXG4gKiBAcmV0dXJuIHtiaWdpbnRbXX1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNsaWNlQmlnSW50KHZhbHVlLCBpU2l6ZSwgc2xpY2VTaXplKSB7XG4gIGlmICh0eXBlb2YgdmFsdWUgIT09ICdiaWdpbnQnKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihgRXhwZWN0ZWQgYmlnaW50ICd2YWx1ZScsIGdvdCAke3R5cGVvZiB2YWx1ZX1gKTtcbiAgfVxuXG4gIGNvbnN0IHRvdGFsID0gaVNpemUgLyBzbGljZVNpemU7XG4gIGlmICh0b3RhbCA9PT0gMSkge1xuICAgIHJldHVybiBbdmFsdWVdO1xuICB9XG5cbiAgaWYgKFxuICAgIHNsaWNlU2l6ZSA8IDMyIHx8XG4gICAgc2xpY2VTaXplID4gMTI4IHx8XG4gICAgKHRvdGFsICE9PSAyICYmIHRvdGFsICE9PSA0ICYmIHRvdGFsICE9PSA4KVxuICApIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFxuICAgICAgYGludmFsaWQgYmlnaW50ICgke3ZhbHVlfSkgYW5kIHNsaWNlIHNpemUgKCR7aVNpemV9IC0+ICR7c2xpY2VTaXplfSkgY29tYmluYXRpb25gXG4gICAgKTtcbiAgfVxuXG4gIGNvbnN0IHNoaWZ0ID0gQmlnSW50KHNsaWNlU2l6ZSk7XG5cbiAgLy8gaXRlcmF0ZSBzaGlmdCBhbmQgbWFzayBhcHBsaWNhdGlvblxuICBjb25zdCByZXN1bHQgPSBuZXcgQXJyYXkodG90YWwpO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IHRvdGFsOyBpKyspIHtcbiAgICAvLyB3ZSBmb3JjZSBhIHNpZ25lZCBpbnRlcnByZXRhdGlvbiB0byBwcmVzZXJ2ZSBzaWduIGluIGVhY2ggc2xpY2UgdmFsdWUsXG4gICAgLy8gYnV0IGRvd25zdHJlYW0gY2FuIGNvbnZlcnQgdG8gdW5zaWduZWQgaWYgaXQncyBhcHByb3ByaWF0ZVxuICAgIHJlc3VsdFtpXSA9IEJpZ0ludC5hc0ludE4oc2xpY2VTaXplLCB2YWx1ZSk7IC8vIGNsYW1wcyB0byBzaXplXG5cbiAgICAvLyBtb3ZlIG9uIHRvIHRoZSBuZXh0IGNodW5rXG4gICAgdmFsdWUgPj49IHNoaWZ0O1xuICB9XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGZvcm1hdEludE5hbWUocHJlY2lzaW9uLCB1bnNpZ25lZCkge1xuICByZXR1cm4gYCR7dW5zaWduZWQgPyAndScgOiAnaSd9JHtwcmVjaXNpb259YDtcbn1cblxuLyoqXG4gKiBHZXQgbWlufG1heCBib3VuZGFyaWVzIGZvciBhbiBpbnRlZ2VyIHdpdGggYSBzcGVjaWZpZWQgYml0cyBzaXplXG4gKiBAcGFyYW0gezY0fDEyOHwyNTZ9IHNpemUgLSBOdW1iZXIgb2YgYml0cyBpbiB0aGUgc291cmNlIGludGVnZXIgdHlwZVxuICogQHBhcmFtIHtCb29sZWFufSB1bnNpZ25lZCAtIFdoZXRoZXIgaXQncyBhbiB1bnNpZ25lZCBpbnRlZ2VyXG4gKiBAcmV0dXJuIHtCaWdJbnRbXX1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNhbGN1bGF0ZUJpZ0ludEJvdW5kYXJpZXMoc2l6ZSwgdW5zaWduZWQpIHtcbiAgaWYgKHVuc2lnbmVkKSB7XG4gICAgcmV0dXJuIFswbiwgKDFuIDw8IEJpZ0ludChzaXplKSkgLSAxbl07XG4gIH1cblxuICBjb25zdCBib3VuZGFyeSA9IDFuIDw8IEJpZ0ludChzaXplIC0gMSk7XG4gIHJldHVybiBbMG4gLSBib3VuZGFyeSwgYm91bmRhcnkgLSAxbl07XG59XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@stellar/js-xdr/src/bigint-encoder.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@stellar/js-xdr/src/bool.js":
/*!**************************************************!*\
  !*** ./node_modules/@stellar/js-xdr/src/bool.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Bool: () => (/* binding */ Bool)\n/* harmony export */ });\n/* harmony import */ var _int__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./int */ \"(ssr)/./node_modules/@stellar/js-xdr/src/int.js\");\n/* harmony import */ var _xdr_type__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./xdr-type */ \"(ssr)/./node_modules/@stellar/js-xdr/src/xdr-type.js\");\n/* harmony import */ var _errors__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./errors */ \"(ssr)/./node_modules/@stellar/js-xdr/src/errors.js\");\n\n\n\n\nclass Bool extends _xdr_type__WEBPACK_IMPORTED_MODULE_1__.XdrPrimitiveType {\n  /**\n   * @inheritDoc\n   */\n  static read(reader) {\n    const value = _int__WEBPACK_IMPORTED_MODULE_0__.Int.read(reader);\n\n    switch (value) {\n      case 0:\n        return false;\n      case 1:\n        return true;\n      default:\n        throw new _errors__WEBPACK_IMPORTED_MODULE_2__.XdrReaderError(`got ${value} when trying to read a bool`);\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  static write(value, writer) {\n    const intVal = value ? 1 : 0;\n    _int__WEBPACK_IMPORTED_MODULE_0__.Int.write(intVal, writer);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  static isValid(value) {\n    return typeof value === 'boolean';\n  }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHN0ZWxsYXIvanMteGRyL3NyYy9ib29sLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBNEI7QUFDa0I7QUFDSjs7QUFFbkMsbUJBQW1CLHVEQUFnQjtBQUMxQztBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQixxQ0FBRzs7QUFFckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCLG1EQUFjLFFBQVEsT0FBTztBQUMvQztBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJLHFDQUFHO0FBQ1A7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcVVNVQVJJT1xcRG9jdW1lbnRzXFxHaXRodWJcXEdhbGF4eUtKLXdhbGxldC0tLUhhY2tcXHdlYlxcbm9kZV9tb2R1bGVzXFxAc3RlbGxhclxcanMteGRyXFxzcmNcXGJvb2wuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW50IH0gZnJvbSAnLi9pbnQnO1xuaW1wb3J0IHsgWGRyUHJpbWl0aXZlVHlwZSB9IGZyb20gJy4veGRyLXR5cGUnO1xuaW1wb3J0IHsgWGRyUmVhZGVyRXJyb3IgfSBmcm9tICcuL2Vycm9ycyc7XG5cbmV4cG9ydCBjbGFzcyBCb29sIGV4dGVuZHMgWGRyUHJpbWl0aXZlVHlwZSB7XG4gIC8qKlxuICAgKiBAaW5oZXJpdERvY1xuICAgKi9cbiAgc3RhdGljIHJlYWQocmVhZGVyKSB7XG4gICAgY29uc3QgdmFsdWUgPSBJbnQucmVhZChyZWFkZXIpO1xuXG4gICAgc3dpdGNoICh2YWx1ZSkge1xuICAgICAgY2FzZSAwOlxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICBjYXNlIDE6XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgdGhyb3cgbmV3IFhkclJlYWRlckVycm9yKGBnb3QgJHt2YWx1ZX0gd2hlbiB0cnlpbmcgdG8gcmVhZCBhIGJvb2xgKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQGluaGVyaXREb2NcbiAgICovXG4gIHN0YXRpYyB3cml0ZSh2YWx1ZSwgd3JpdGVyKSB7XG4gICAgY29uc3QgaW50VmFsID0gdmFsdWUgPyAxIDogMDtcbiAgICBJbnQud3JpdGUoaW50VmFsLCB3cml0ZXIpO1xuICB9XG5cbiAgLyoqXG4gICAqIEBpbmhlcml0RG9jXG4gICAqL1xuICBzdGF0aWMgaXNWYWxpZCh2YWx1ZSkge1xuICAgIHJldHVybiB0eXBlb2YgdmFsdWUgPT09ICdib29sZWFuJztcbiAgfVxufVxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@stellar/js-xdr/src/bool.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@stellar/js-xdr/src/config.js":
/*!****************************************************!*\
  !*** ./node_modules/@stellar/js-xdr/src/config.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Reference: () => (/* reexport safe */ _reference__WEBPACK_IMPORTED_MODULE_1__.Reference),\n/* harmony export */   config: () => (/* binding */ config)\n/* harmony export */ });\n/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./types */ \"(ssr)/./node_modules/@stellar/js-xdr/src/types.js\");\n/* harmony import */ var _reference__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./reference */ \"(ssr)/./node_modules/@stellar/js-xdr/src/reference.js\");\n/* harmony import */ var _errors__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./errors */ \"(ssr)/./node_modules/@stellar/js-xdr/src/errors.js\");\n// eslint-disable-next-line max-classes-per-file\n\n\n\n\n\n\nclass SimpleReference extends _reference__WEBPACK_IMPORTED_MODULE_1__.Reference {\n  constructor(name) {\n    super();\n    this.name = name;\n  }\n\n  resolve(context) {\n    const defn = context.definitions[this.name];\n    return defn.resolve(context);\n  }\n}\n\nclass ArrayReference extends _reference__WEBPACK_IMPORTED_MODULE_1__.Reference {\n  constructor(childReference, length, variable = false) {\n    super();\n    this.childReference = childReference;\n    this.length = length;\n    this.variable = variable;\n  }\n\n  resolve(context) {\n    let resolvedChild = this.childReference;\n    let length = this.length;\n\n    if (resolvedChild instanceof _reference__WEBPACK_IMPORTED_MODULE_1__.Reference) {\n      resolvedChild = resolvedChild.resolve(context);\n    }\n\n    if (length instanceof _reference__WEBPACK_IMPORTED_MODULE_1__.Reference) {\n      length = length.resolve(context);\n    }\n\n    if (this.variable) {\n      return new _types__WEBPACK_IMPORTED_MODULE_0__.VarArray(resolvedChild, length);\n    }\n    return new _types__WEBPACK_IMPORTED_MODULE_0__.Array(resolvedChild, length);\n  }\n}\n\nclass OptionReference extends _reference__WEBPACK_IMPORTED_MODULE_1__.Reference {\n  constructor(childReference) {\n    super();\n    this.childReference = childReference;\n    this.name = childReference.name;\n  }\n\n  resolve(context) {\n    let resolvedChild = this.childReference;\n\n    if (resolvedChild instanceof _reference__WEBPACK_IMPORTED_MODULE_1__.Reference) {\n      resolvedChild = resolvedChild.resolve(context);\n    }\n\n    return new _types__WEBPACK_IMPORTED_MODULE_0__.Option(resolvedChild);\n  }\n}\n\nclass SizedReference extends _reference__WEBPACK_IMPORTED_MODULE_1__.Reference {\n  constructor(sizedType, length) {\n    super();\n    this.sizedType = sizedType;\n    this.length = length;\n  }\n\n  resolve(context) {\n    let length = this.length;\n\n    if (length instanceof _reference__WEBPACK_IMPORTED_MODULE_1__.Reference) {\n      length = length.resolve(context);\n    }\n\n    return new this.sizedType(length);\n  }\n}\n\nclass Definition {\n  constructor(constructor, name, cfg) {\n    this.constructor = constructor;\n    this.name = name;\n    this.config = cfg;\n  }\n\n  // resolve calls the constructor of this definition with the provided context\n  // and this definitions config values.  The definitions constructor should\n  // populate the final type on `context.results`, and may refer to other\n  // definitions through `context.definitions`\n  resolve(context) {\n    if (this.name in context.results) {\n      return context.results[this.name];\n    }\n\n    return this.constructor(context, this.name, this.config);\n  }\n}\n\n// let the reference resolution system do its thing\n// the \"constructor\" for a typedef just returns the resolved value\nfunction createTypedef(context, typeName, value) {\n  if (value instanceof _reference__WEBPACK_IMPORTED_MODULE_1__.Reference) {\n    value = value.resolve(context);\n  }\n  context.results[typeName] = value;\n  return value;\n}\n\nfunction createConst(context, name, value) {\n  context.results[name] = value;\n  return value;\n}\n\nclass TypeBuilder {\n  constructor(destination) {\n    this._destination = destination;\n    this._definitions = {};\n  }\n\n  enum(name, members) {\n    const result = new Definition(_types__WEBPACK_IMPORTED_MODULE_0__.Enum.create, name, members);\n    this.define(name, result);\n  }\n\n  struct(name, members) {\n    const result = new Definition(_types__WEBPACK_IMPORTED_MODULE_0__.Struct.create, name, members);\n    this.define(name, result);\n  }\n\n  union(name, cfg) {\n    const result = new Definition(_types__WEBPACK_IMPORTED_MODULE_0__.Union.create, name, cfg);\n    this.define(name, result);\n  }\n\n  typedef(name, cfg) {\n    const result = new Definition(createTypedef, name, cfg);\n    this.define(name, result);\n  }\n\n  const(name, cfg) {\n    const result = new Definition(createConst, name, cfg);\n    this.define(name, result);\n  }\n\n  void() {\n    return _types__WEBPACK_IMPORTED_MODULE_0__.Void;\n  }\n\n  bool() {\n    return _types__WEBPACK_IMPORTED_MODULE_0__.Bool;\n  }\n\n  int() {\n    return _types__WEBPACK_IMPORTED_MODULE_0__.Int;\n  }\n\n  hyper() {\n    return _types__WEBPACK_IMPORTED_MODULE_0__.Hyper;\n  }\n\n  uint() {\n    return _types__WEBPACK_IMPORTED_MODULE_0__.UnsignedInt;\n  }\n\n  uhyper() {\n    return _types__WEBPACK_IMPORTED_MODULE_0__.UnsignedHyper;\n  }\n\n  float() {\n    return _types__WEBPACK_IMPORTED_MODULE_0__.Float;\n  }\n\n  double() {\n    return _types__WEBPACK_IMPORTED_MODULE_0__.Double;\n  }\n\n  quadruple() {\n    return _types__WEBPACK_IMPORTED_MODULE_0__.Quadruple;\n  }\n\n  string(length) {\n    return new SizedReference(_types__WEBPACK_IMPORTED_MODULE_0__.String, length);\n  }\n\n  opaque(length) {\n    return new SizedReference(_types__WEBPACK_IMPORTED_MODULE_0__.Opaque, length);\n  }\n\n  varOpaque(length) {\n    return new SizedReference(_types__WEBPACK_IMPORTED_MODULE_0__.VarOpaque, length);\n  }\n\n  array(childType, length) {\n    return new ArrayReference(childType, length);\n  }\n\n  varArray(childType, maxLength) {\n    return new ArrayReference(childType, maxLength, true);\n  }\n\n  option(childType) {\n    return new OptionReference(childType);\n  }\n\n  define(name, definition) {\n    if (this._destination[name] === undefined) {\n      this._definitions[name] = definition;\n    } else {\n      throw new _errors__WEBPACK_IMPORTED_MODULE_2__.XdrDefinitionError(`${name} is already defined`);\n    }\n  }\n\n  lookup(name) {\n    return new SimpleReference(name);\n  }\n\n  resolve() {\n    for (const defn of Object.values(this._definitions)) {\n      defn.resolve({\n        definitions: this._definitions,\n        results: this._destination\n      });\n    }\n  }\n}\n\nfunction config(fn, types = {}) {\n  if (fn) {\n    const builder = new TypeBuilder(types);\n    fn(builder);\n    builder.resolve();\n  }\n\n  return types;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@stellar/js-xdr/src/config.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@stellar/js-xdr/src/double.js":
/*!****************************************************!*\
  !*** ./node_modules/@stellar/js-xdr/src/double.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Double: () => (/* binding */ Double)\n/* harmony export */ });\n/* harmony import */ var _xdr_type__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./xdr-type */ \"(ssr)/./node_modules/@stellar/js-xdr/src/xdr-type.js\");\n/* harmony import */ var _errors__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./errors */ \"(ssr)/./node_modules/@stellar/js-xdr/src/errors.js\");\n\n\n\nclass Double extends _xdr_type__WEBPACK_IMPORTED_MODULE_0__.XdrPrimitiveType {\n  /**\n   * @inheritDoc\n   */\n  static read(reader) {\n    return reader.readDoubleBE();\n  }\n\n  /**\n   * @inheritDoc\n   */\n  static write(value, writer) {\n    if (typeof value !== 'number') throw new _errors__WEBPACK_IMPORTED_MODULE_1__.XdrWriterError('not a number');\n\n    writer.writeDoubleBE(value);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  static isValid(value) {\n    return typeof value === 'number';\n  }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHN0ZWxsYXIvanMteGRyL3NyYy9kb3VibGUuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQThDO0FBQ0o7O0FBRW5DLHFCQUFxQix1REFBZ0I7QUFDNUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkNBQTZDLG1EQUFjOztBQUUzRDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXFVTVUFSSU9cXERvY3VtZW50c1xcR2l0aHViXFxHYWxheHlLSi13YWxsZXQtLS1IYWNrXFx3ZWJcXG5vZGVfbW9kdWxlc1xcQHN0ZWxsYXJcXGpzLXhkclxcc3JjXFxkb3VibGUuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgWGRyUHJpbWl0aXZlVHlwZSB9IGZyb20gJy4veGRyLXR5cGUnO1xuaW1wb3J0IHsgWGRyV3JpdGVyRXJyb3IgfSBmcm9tICcuL2Vycm9ycyc7XG5cbmV4cG9ydCBjbGFzcyBEb3VibGUgZXh0ZW5kcyBYZHJQcmltaXRpdmVUeXBlIHtcbiAgLyoqXG4gICAqIEBpbmhlcml0RG9jXG4gICAqL1xuICBzdGF0aWMgcmVhZChyZWFkZXIpIHtcbiAgICByZXR1cm4gcmVhZGVyLnJlYWREb3VibGVCRSgpO1xuICB9XG5cbiAgLyoqXG4gICAqIEBpbmhlcml0RG9jXG4gICAqL1xuICBzdGF0aWMgd3JpdGUodmFsdWUsIHdyaXRlcikge1xuICAgIGlmICh0eXBlb2YgdmFsdWUgIT09ICdudW1iZXInKSB0aHJvdyBuZXcgWGRyV3JpdGVyRXJyb3IoJ25vdCBhIG51bWJlcicpO1xuXG4gICAgd3JpdGVyLndyaXRlRG91YmxlQkUodmFsdWUpO1xuICB9XG5cbiAgLyoqXG4gICAqIEBpbmhlcml0RG9jXG4gICAqL1xuICBzdGF0aWMgaXNWYWxpZCh2YWx1ZSkge1xuICAgIHJldHVybiB0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInO1xuICB9XG59XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@stellar/js-xdr/src/double.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@stellar/js-xdr/src/enum.js":
/*!**************************************************!*\
  !*** ./node_modules/@stellar/js-xdr/src/enum.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Enum: () => (/* binding */ Enum)\n/* harmony export */ });\n/* harmony import */ var _int__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./int */ \"(ssr)/./node_modules/@stellar/js-xdr/src/int.js\");\n/* harmony import */ var _xdr_type__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./xdr-type */ \"(ssr)/./node_modules/@stellar/js-xdr/src/xdr-type.js\");\n/* harmony import */ var _errors__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./errors */ \"(ssr)/./node_modules/@stellar/js-xdr/src/errors.js\");\n\n\n\n\nclass Enum extends _xdr_type__WEBPACK_IMPORTED_MODULE_1__.XdrPrimitiveType {\n  constructor(name, value) {\n    super();\n    this.name = name;\n    this.value = value;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  static read(reader) {\n    const intVal = _int__WEBPACK_IMPORTED_MODULE_0__.Int.read(reader);\n    const res = this._byValue[intVal];\n    if (res === undefined)\n      throw new _errors__WEBPACK_IMPORTED_MODULE_2__.XdrReaderError(\n        `unknown ${this.enumName} member for value ${intVal}`\n      );\n    return res;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  static write(value, writer) {\n    if (!this.isValid(value)) {\n      throw new _errors__WEBPACK_IMPORTED_MODULE_2__.XdrWriterError(\n        `${value} has enum name ${value?.enumName}, not ${\n          this.enumName\n        }: ${JSON.stringify(value)}`\n      );\n    }\n\n    _int__WEBPACK_IMPORTED_MODULE_0__.Int.write(value.value, writer);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  static isValid(value) {\n    return (\n      value?.constructor?.enumName === this.enumName ||\n      (0,_xdr_type__WEBPACK_IMPORTED_MODULE_1__.isSerializableIsh)(value, this)\n    );\n  }\n\n  static members() {\n    return this._members;\n  }\n\n  static values() {\n    return Object.values(this._members);\n  }\n\n  static fromName(name) {\n    const result = this._members[name];\n\n    if (!result)\n      throw new TypeError(`${name} is not a member of ${this.enumName}`);\n\n    return result;\n  }\n\n  static fromValue(value) {\n    const result = this._byValue[value];\n    if (result === undefined)\n      throw new TypeError(\n        `${value} is not a value of any member of ${this.enumName}`\n      );\n    return result;\n  }\n\n  static create(context, name, members) {\n    const ChildEnum = class extends Enum {};\n\n    ChildEnum.enumName = name;\n    context.results[name] = ChildEnum;\n\n    ChildEnum._members = {};\n    ChildEnum._byValue = {};\n\n    for (const [key, value] of Object.entries(members)) {\n      const inst = new ChildEnum(key, value);\n      ChildEnum._members[key] = inst;\n      ChildEnum._byValue[value] = inst;\n      ChildEnum[key] = () => inst;\n    }\n\n    return ChildEnum;\n  }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHN0ZWxsYXIvanMteGRyL3NyYy9lbnVtLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBNEI7QUFDcUM7QUFDUDs7QUFFbkQsbUJBQW1CLHVEQUFnQjtBQUMxQztBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CLHFDQUFHO0FBQ3RCO0FBQ0E7QUFDQSxnQkFBZ0IsbURBQWM7QUFDOUIsbUJBQW1CLGVBQWUsbUJBQW1CLE9BQU87QUFDNUQ7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0IsbURBQWM7QUFDOUIsV0FBVyxPQUFPLGdCQUFnQixnQkFBZ0I7QUFDbEQ7QUFDQSxTQUFTLElBQUksc0JBQXNCO0FBQ25DO0FBQ0E7O0FBRUEsSUFBSSxxQ0FBRztBQUNQOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU0sNERBQWlCO0FBQ3ZCO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0EsNkJBQTZCLE1BQU0scUJBQXFCLGNBQWM7O0FBRXRFO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLE9BQU8sa0NBQWtDLGNBQWM7QUFDbEU7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcVVNVQVJJT1xcRG9jdW1lbnRzXFxHaXRodWJcXEdhbGF4eUtKLXdhbGxldC0tLUhhY2tcXHdlYlxcbm9kZV9tb2R1bGVzXFxAc3RlbGxhclxcanMteGRyXFxzcmNcXGVudW0uanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW50IH0gZnJvbSAnLi9pbnQnO1xuaW1wb3J0IHsgWGRyUHJpbWl0aXZlVHlwZSwgaXNTZXJpYWxpemFibGVJc2ggfSBmcm9tICcuL3hkci10eXBlJztcbmltcG9ydCB7IFhkclJlYWRlckVycm9yLCBYZHJXcml0ZXJFcnJvciB9IGZyb20gJy4vZXJyb3JzJztcblxuZXhwb3J0IGNsYXNzIEVudW0gZXh0ZW5kcyBYZHJQcmltaXRpdmVUeXBlIHtcbiAgY29uc3RydWN0b3IobmFtZSwgdmFsdWUpIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMubmFtZSA9IG5hbWU7XG4gICAgdGhpcy52YWx1ZSA9IHZhbHVlO1xuICB9XG5cbiAgLyoqXG4gICAqIEBpbmhlcml0RG9jXG4gICAqL1xuICBzdGF0aWMgcmVhZChyZWFkZXIpIHtcbiAgICBjb25zdCBpbnRWYWwgPSBJbnQucmVhZChyZWFkZXIpO1xuICAgIGNvbnN0IHJlcyA9IHRoaXMuX2J5VmFsdWVbaW50VmFsXTtcbiAgICBpZiAocmVzID09PSB1bmRlZmluZWQpXG4gICAgICB0aHJvdyBuZXcgWGRyUmVhZGVyRXJyb3IoXG4gICAgICAgIGB1bmtub3duICR7dGhpcy5lbnVtTmFtZX0gbWVtYmVyIGZvciB2YWx1ZSAke2ludFZhbH1gXG4gICAgICApO1xuICAgIHJldHVybiByZXM7XG4gIH1cblxuICAvKipcbiAgICogQGluaGVyaXREb2NcbiAgICovXG4gIHN0YXRpYyB3cml0ZSh2YWx1ZSwgd3JpdGVyKSB7XG4gICAgaWYgKCF0aGlzLmlzVmFsaWQodmFsdWUpKSB7XG4gICAgICB0aHJvdyBuZXcgWGRyV3JpdGVyRXJyb3IoXG4gICAgICAgIGAke3ZhbHVlfSBoYXMgZW51bSBuYW1lICR7dmFsdWU/LmVudW1OYW1lfSwgbm90ICR7XG4gICAgICAgICAgdGhpcy5lbnVtTmFtZVxuICAgICAgICB9OiAke0pTT04uc3RyaW5naWZ5KHZhbHVlKX1gXG4gICAgICApO1xuICAgIH1cblxuICAgIEludC53cml0ZSh2YWx1ZS52YWx1ZSwgd3JpdGVyKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAaW5oZXJpdERvY1xuICAgKi9cbiAgc3RhdGljIGlzVmFsaWQodmFsdWUpIHtcbiAgICByZXR1cm4gKFxuICAgICAgdmFsdWU/LmNvbnN0cnVjdG9yPy5lbnVtTmFtZSA9PT0gdGhpcy5lbnVtTmFtZSB8fFxuICAgICAgaXNTZXJpYWxpemFibGVJc2godmFsdWUsIHRoaXMpXG4gICAgKTtcbiAgfVxuXG4gIHN0YXRpYyBtZW1iZXJzKCkge1xuICAgIHJldHVybiB0aGlzLl9tZW1iZXJzO1xuICB9XG5cbiAgc3RhdGljIHZhbHVlcygpIHtcbiAgICByZXR1cm4gT2JqZWN0LnZhbHVlcyh0aGlzLl9tZW1iZXJzKTtcbiAgfVxuXG4gIHN0YXRpYyBmcm9tTmFtZShuYW1lKSB7XG4gICAgY29uc3QgcmVzdWx0ID0gdGhpcy5fbWVtYmVyc1tuYW1lXTtcblxuICAgIGlmICghcmVzdWx0KVxuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihgJHtuYW1lfSBpcyBub3QgYSBtZW1iZXIgb2YgJHt0aGlzLmVudW1OYW1lfWApO1xuXG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIHN0YXRpYyBmcm9tVmFsdWUodmFsdWUpIHtcbiAgICBjb25zdCByZXN1bHQgPSB0aGlzLl9ieVZhbHVlW3ZhbHVlXTtcbiAgICBpZiAocmVzdWx0ID09PSB1bmRlZmluZWQpXG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFxuICAgICAgICBgJHt2YWx1ZX0gaXMgbm90IGEgdmFsdWUgb2YgYW55IG1lbWJlciBvZiAke3RoaXMuZW51bU5hbWV9YFxuICAgICAgKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgc3RhdGljIGNyZWF0ZShjb250ZXh0LCBuYW1lLCBtZW1iZXJzKSB7XG4gICAgY29uc3QgQ2hpbGRFbnVtID0gY2xhc3MgZXh0ZW5kcyBFbnVtIHt9O1xuXG4gICAgQ2hpbGRFbnVtLmVudW1OYW1lID0gbmFtZTtcbiAgICBjb250ZXh0LnJlc3VsdHNbbmFtZV0gPSBDaGlsZEVudW07XG5cbiAgICBDaGlsZEVudW0uX21lbWJlcnMgPSB7fTtcbiAgICBDaGlsZEVudW0uX2J5VmFsdWUgPSB7fTtcblxuICAgIGZvciAoY29uc3QgW2tleSwgdmFsdWVdIG9mIE9iamVjdC5lbnRyaWVzKG1lbWJlcnMpKSB7XG4gICAgICBjb25zdCBpbnN0ID0gbmV3IENoaWxkRW51bShrZXksIHZhbHVlKTtcbiAgICAgIENoaWxkRW51bS5fbWVtYmVyc1trZXldID0gaW5zdDtcbiAgICAgIENoaWxkRW51bS5fYnlWYWx1ZVt2YWx1ZV0gPSBpbnN0O1xuICAgICAgQ2hpbGRFbnVtW2tleV0gPSAoKSA9PiBpbnN0O1xuICAgIH1cblxuICAgIHJldHVybiBDaGlsZEVudW07XG4gIH1cbn1cbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@stellar/js-xdr/src/enum.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@stellar/js-xdr/src/errors.js":
/*!****************************************************!*\
  !*** ./node_modules/@stellar/js-xdr/src/errors.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   XdrDefinitionError: () => (/* binding */ XdrDefinitionError),\n/* harmony export */   XdrNotImplementedDefinitionError: () => (/* binding */ XdrNotImplementedDefinitionError),\n/* harmony export */   XdrReaderError: () => (/* binding */ XdrReaderError),\n/* harmony export */   XdrWriterError: () => (/* binding */ XdrWriterError)\n/* harmony export */ });\nclass XdrWriterError extends TypeError {\n  constructor(message) {\n    super(`XDR Write Error: ${message}`);\n  }\n}\n\nclass XdrReaderError extends TypeError {\n  constructor(message) {\n    super(`XDR Read Error: ${message}`);\n  }\n}\n\nclass XdrDefinitionError extends TypeError {\n  constructor(message) {\n    super(`XDR Type Definition Error: ${message}`);\n  }\n}\n\nclass XdrNotImplementedDefinitionError extends XdrDefinitionError {\n  constructor() {\n    super(\n      `method not implemented, it should be overloaded in the descendant class.`\n    );\n  }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHN0ZWxsYXIvanMteGRyL3NyYy9lcnJvcnMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFPO0FBQ1A7QUFDQSw4QkFBOEIsUUFBUTtBQUN0QztBQUNBOztBQUVPO0FBQ1A7QUFDQSw2QkFBNkIsUUFBUTtBQUNyQztBQUNBOztBQUVPO0FBQ1A7QUFDQSx3Q0FBd0MsUUFBUTtBQUNoRDtBQUNBOztBQUVPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXFVTVUFSSU9cXERvY3VtZW50c1xcR2l0aHViXFxHYWxheHlLSi13YWxsZXQtLS1IYWNrXFx3ZWJcXG5vZGVfbW9kdWxlc1xcQHN0ZWxsYXJcXGpzLXhkclxcc3JjXFxlcnJvcnMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGNsYXNzIFhkcldyaXRlckVycm9yIGV4dGVuZHMgVHlwZUVycm9yIHtcbiAgY29uc3RydWN0b3IobWVzc2FnZSkge1xuICAgIHN1cGVyKGBYRFIgV3JpdGUgRXJyb3I6ICR7bWVzc2FnZX1gKTtcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgWGRyUmVhZGVyRXJyb3IgZXh0ZW5kcyBUeXBlRXJyb3Ige1xuICBjb25zdHJ1Y3RvcihtZXNzYWdlKSB7XG4gICAgc3VwZXIoYFhEUiBSZWFkIEVycm9yOiAke21lc3NhZ2V9YCk7XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIFhkckRlZmluaXRpb25FcnJvciBleHRlbmRzIFR5cGVFcnJvciB7XG4gIGNvbnN0cnVjdG9yKG1lc3NhZ2UpIHtcbiAgICBzdXBlcihgWERSIFR5cGUgRGVmaW5pdGlvbiBFcnJvcjogJHttZXNzYWdlfWApO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBYZHJOb3RJbXBsZW1lbnRlZERlZmluaXRpb25FcnJvciBleHRlbmRzIFhkckRlZmluaXRpb25FcnJvciB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKFxuICAgICAgYG1ldGhvZCBub3QgaW1wbGVtZW50ZWQsIGl0IHNob3VsZCBiZSBvdmVybG9hZGVkIGluIHRoZSBkZXNjZW5kYW50IGNsYXNzLmBcbiAgICApO1xuICB9XG59XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@stellar/js-xdr/src/errors.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@stellar/js-xdr/src/float.js":
/*!***************************************************!*\
  !*** ./node_modules/@stellar/js-xdr/src/float.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Float: () => (/* binding */ Float)\n/* harmony export */ });\n/* harmony import */ var _xdr_type__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./xdr-type */ \"(ssr)/./node_modules/@stellar/js-xdr/src/xdr-type.js\");\n/* harmony import */ var _errors__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./errors */ \"(ssr)/./node_modules/@stellar/js-xdr/src/errors.js\");\n\n\n\nclass Float extends _xdr_type__WEBPACK_IMPORTED_MODULE_0__.XdrPrimitiveType {\n  /**\n   * @inheritDoc\n   */\n  static read(reader) {\n    return reader.readFloatBE();\n  }\n\n  /**\n   * @inheritDoc\n   */\n  static write(value, writer) {\n    if (typeof value !== 'number') throw new _errors__WEBPACK_IMPORTED_MODULE_1__.XdrWriterError('not a number');\n\n    writer.writeFloatBE(value);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  static isValid(value) {\n    return typeof value === 'number';\n  }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHN0ZWxsYXIvanMteGRyL3NyYy9mbG9hdC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBOEM7QUFDSjs7QUFFbkMsb0JBQW9CLHVEQUFnQjtBQUMzQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2Q0FBNkMsbURBQWM7O0FBRTNEO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcVVNVQVJJT1xcRG9jdW1lbnRzXFxHaXRodWJcXEdhbGF4eUtKLXdhbGxldC0tLUhhY2tcXHdlYlxcbm9kZV9tb2R1bGVzXFxAc3RlbGxhclxcanMteGRyXFxzcmNcXGZsb2F0LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFhkclByaW1pdGl2ZVR5cGUgfSBmcm9tICcuL3hkci10eXBlJztcbmltcG9ydCB7IFhkcldyaXRlckVycm9yIH0gZnJvbSAnLi9lcnJvcnMnO1xuXG5leHBvcnQgY2xhc3MgRmxvYXQgZXh0ZW5kcyBYZHJQcmltaXRpdmVUeXBlIHtcbiAgLyoqXG4gICAqIEBpbmhlcml0RG9jXG4gICAqL1xuICBzdGF0aWMgcmVhZChyZWFkZXIpIHtcbiAgICByZXR1cm4gcmVhZGVyLnJlYWRGbG9hdEJFKCk7XG4gIH1cblxuICAvKipcbiAgICogQGluaGVyaXREb2NcbiAgICovXG4gIHN0YXRpYyB3cml0ZSh2YWx1ZSwgd3JpdGVyKSB7XG4gICAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gJ251bWJlcicpIHRocm93IG5ldyBYZHJXcml0ZXJFcnJvcignbm90IGEgbnVtYmVyJyk7XG5cbiAgICB3cml0ZXIud3JpdGVGbG9hdEJFKHZhbHVlKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAaW5oZXJpdERvY1xuICAgKi9cbiAgc3RhdGljIGlzVmFsaWQodmFsdWUpIHtcbiAgICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJztcbiAgfVxufVxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@stellar/js-xdr/src/float.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@stellar/js-xdr/src/hyper.js":
/*!***************************************************!*\
  !*** ./node_modules/@stellar/js-xdr/src/hyper.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Hyper: () => (/* binding */ Hyper)\n/* harmony export */ });\n/* harmony import */ var _large_int__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./large-int */ \"(ssr)/./node_modules/@stellar/js-xdr/src/large-int.js\");\n\n\nclass Hyper extends _large_int__WEBPACK_IMPORTED_MODULE_0__.LargeInt {\n  /**\n   * @param {Array<Number|BigInt|String>} parts - Slices to encode\n   */\n  constructor(...args) {\n    super(args);\n  }\n\n  get low() {\n    return Number(this._value & 0xffffffffn) << 0;\n  }\n\n  get high() {\n    return Number(this._value >> 32n) >> 0;\n  }\n\n  get size() {\n    return 64;\n  }\n\n  get unsigned() {\n    return false;\n  }\n\n  /**\n   * Create Hyper instance from two [high][low] i32 values\n   * @param {Number} low - Low part of i64 number\n   * @param {Number} high - High part of i64 number\n   * @return {LargeInt}\n   */\n  static fromBits(low, high) {\n    return new this(low, high);\n  }\n}\n\nHyper.defineIntBoundaries();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHN0ZWxsYXIvanMteGRyL3NyYy9oeXBlci5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUF1Qzs7QUFFaEMsb0JBQW9CLGdEQUFRO0FBQ25DO0FBQ0EsYUFBYSw2QkFBNkI7QUFDMUM7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxhQUFhLFFBQVE7QUFDckIsYUFBYSxRQUFRO0FBQ3JCLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXFVTVUFSSU9cXERvY3VtZW50c1xcR2l0aHViXFxHYWxheHlLSi13YWxsZXQtLS1IYWNrXFx3ZWJcXG5vZGVfbW9kdWxlc1xcQHN0ZWxsYXJcXGpzLXhkclxcc3JjXFxoeXBlci5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBMYXJnZUludCB9IGZyb20gJy4vbGFyZ2UtaW50JztcblxuZXhwb3J0IGNsYXNzIEh5cGVyIGV4dGVuZHMgTGFyZ2VJbnQge1xuICAvKipcbiAgICogQHBhcmFtIHtBcnJheTxOdW1iZXJ8QmlnSW50fFN0cmluZz59IHBhcnRzIC0gU2xpY2VzIHRvIGVuY29kZVxuICAgKi9cbiAgY29uc3RydWN0b3IoLi4uYXJncykge1xuICAgIHN1cGVyKGFyZ3MpO1xuICB9XG5cbiAgZ2V0IGxvdygpIHtcbiAgICByZXR1cm4gTnVtYmVyKHRoaXMuX3ZhbHVlICYgMHhmZmZmZmZmZm4pIDw8IDA7XG4gIH1cblxuICBnZXQgaGlnaCgpIHtcbiAgICByZXR1cm4gTnVtYmVyKHRoaXMuX3ZhbHVlID4+IDMybikgPj4gMDtcbiAgfVxuXG4gIGdldCBzaXplKCkge1xuICAgIHJldHVybiA2NDtcbiAgfVxuXG4gIGdldCB1bnNpZ25lZCgpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlIEh5cGVyIGluc3RhbmNlIGZyb20gdHdvIFtoaWdoXVtsb3ddIGkzMiB2YWx1ZXNcbiAgICogQHBhcmFtIHtOdW1iZXJ9IGxvdyAtIExvdyBwYXJ0IG9mIGk2NCBudW1iZXJcbiAgICogQHBhcmFtIHtOdW1iZXJ9IGhpZ2ggLSBIaWdoIHBhcnQgb2YgaTY0IG51bWJlclxuICAgKiBAcmV0dXJuIHtMYXJnZUludH1cbiAgICovXG4gIHN0YXRpYyBmcm9tQml0cyhsb3csIGhpZ2gpIHtcbiAgICByZXR1cm4gbmV3IHRoaXMobG93LCBoaWdoKTtcbiAgfVxufVxuXG5IeXBlci5kZWZpbmVJbnRCb3VuZGFyaWVzKCk7XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@stellar/js-xdr/src/hyper.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@stellar/js-xdr/src/index.js":
/*!***************************************************!*\
  !*** ./node_modules/@stellar/js-xdr/src/index.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Array: () => (/* reexport safe */ _types__WEBPACK_IMPORTED_MODULE_0__.Array),\n/* harmony export */   Bool: () => (/* reexport safe */ _types__WEBPACK_IMPORTED_MODULE_0__.Bool),\n/* harmony export */   Double: () => (/* reexport safe */ _types__WEBPACK_IMPORTED_MODULE_0__.Double),\n/* harmony export */   Enum: () => (/* reexport safe */ _types__WEBPACK_IMPORTED_MODULE_0__.Enum),\n/* harmony export */   Float: () => (/* reexport safe */ _types__WEBPACK_IMPORTED_MODULE_0__.Float),\n/* harmony export */   Hyper: () => (/* reexport safe */ _types__WEBPACK_IMPORTED_MODULE_0__.Hyper),\n/* harmony export */   Int: () => (/* reexport safe */ _types__WEBPACK_IMPORTED_MODULE_0__.Int),\n/* harmony export */   LargeInt: () => (/* reexport safe */ _types__WEBPACK_IMPORTED_MODULE_0__.LargeInt),\n/* harmony export */   Opaque: () => (/* reexport safe */ _types__WEBPACK_IMPORTED_MODULE_0__.Opaque),\n/* harmony export */   Option: () => (/* reexport safe */ _types__WEBPACK_IMPORTED_MODULE_0__.Option),\n/* harmony export */   Quadruple: () => (/* reexport safe */ _types__WEBPACK_IMPORTED_MODULE_0__.Quadruple),\n/* harmony export */   Reference: () => (/* reexport safe */ _config__WEBPACK_IMPORTED_MODULE_1__.Reference),\n/* harmony export */   String: () => (/* reexport safe */ _types__WEBPACK_IMPORTED_MODULE_0__.String),\n/* harmony export */   Struct: () => (/* reexport safe */ _types__WEBPACK_IMPORTED_MODULE_0__.Struct),\n/* harmony export */   Union: () => (/* reexport safe */ _types__WEBPACK_IMPORTED_MODULE_0__.Union),\n/* harmony export */   UnsignedHyper: () => (/* reexport safe */ _types__WEBPACK_IMPORTED_MODULE_0__.UnsignedHyper),\n/* harmony export */   UnsignedInt: () => (/* reexport safe */ _types__WEBPACK_IMPORTED_MODULE_0__.UnsignedInt),\n/* harmony export */   VarArray: () => (/* reexport safe */ _types__WEBPACK_IMPORTED_MODULE_0__.VarArray),\n/* harmony export */   VarOpaque: () => (/* reexport safe */ _types__WEBPACK_IMPORTED_MODULE_0__.VarOpaque),\n/* harmony export */   Void: () => (/* reexport safe */ _types__WEBPACK_IMPORTED_MODULE_0__.Void),\n/* harmony export */   XdrReader: () => (/* reexport safe */ _serialization_xdr_reader__WEBPACK_IMPORTED_MODULE_2__.XdrReader),\n/* harmony export */   XdrWriter: () => (/* reexport safe */ _serialization_xdr_writer__WEBPACK_IMPORTED_MODULE_3__.XdrWriter),\n/* harmony export */   config: () => (/* reexport safe */ _config__WEBPACK_IMPORTED_MODULE_1__.config)\n/* harmony export */ });\n/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./types */ \"(ssr)/./node_modules/@stellar/js-xdr/src/types.js\");\n/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./config */ \"(ssr)/./node_modules/@stellar/js-xdr/src/config.js\");\n/* harmony import */ var _serialization_xdr_reader__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./serialization/xdr-reader */ \"(ssr)/./node_modules/@stellar/js-xdr/src/serialization/xdr-reader.js\");\n/* harmony import */ var _serialization_xdr_writer__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./serialization/xdr-writer */ \"(ssr)/./node_modules/@stellar/js-xdr/src/serialization/xdr-writer.js\");\n\n\n\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHN0ZWxsYXIvanMteGRyL3NyYy9pbmRleC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBd0I7QUFDQzs7QUFFOEI7QUFDQSIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxVU1VBUklPXFxEb2N1bWVudHNcXEdpdGh1YlxcR2FsYXh5S0otd2FsbGV0LS0tSGFja1xcd2ViXFxub2RlX21vZHVsZXNcXEBzdGVsbGFyXFxqcy14ZHJcXHNyY1xcaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0ICogZnJvbSAnLi90eXBlcyc7XG5leHBvcnQgKiBmcm9tICcuL2NvbmZpZyc7XG5cbmV4cG9ydCB7IFhkclJlYWRlciB9IGZyb20gJy4vc2VyaWFsaXphdGlvbi94ZHItcmVhZGVyJztcbmV4cG9ydCB7IFhkcldyaXRlciB9IGZyb20gJy4vc2VyaWFsaXphdGlvbi94ZHItd3JpdGVyJztcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@stellar/js-xdr/src/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@stellar/js-xdr/src/int.js":
/*!*************************************************!*\
  !*** ./node_modules/@stellar/js-xdr/src/int.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Int: () => (/* binding */ Int)\n/* harmony export */ });\n/* harmony import */ var _xdr_type__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./xdr-type */ \"(ssr)/./node_modules/@stellar/js-xdr/src/xdr-type.js\");\n/* harmony import */ var _errors__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./errors */ \"(ssr)/./node_modules/@stellar/js-xdr/src/errors.js\");\n\n\n\nconst MAX_VALUE = 2147483647;\nconst MIN_VALUE = -2147483648;\n\nclass Int extends _xdr_type__WEBPACK_IMPORTED_MODULE_0__.XdrPrimitiveType {\n  /**\n   * @inheritDoc\n   */\n  static read(reader) {\n    return reader.readInt32BE();\n  }\n\n  /**\n   * @inheritDoc\n   */\n  static write(value, writer) {\n    if (typeof value !== 'number') throw new _errors__WEBPACK_IMPORTED_MODULE_1__.XdrWriterError('not a number');\n\n    if ((value | 0) !== value) throw new _errors__WEBPACK_IMPORTED_MODULE_1__.XdrWriterError('invalid i32 value');\n\n    writer.writeInt32BE(value);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  static isValid(value) {\n    if (typeof value !== 'number' || (value | 0) !== value) {\n      return false;\n    }\n\n    return value >= MIN_VALUE && value <= MAX_VALUE;\n  }\n}\n\nInt.MAX_VALUE = MAX_VALUE;\nInt.MIN_VALUE = -MIN_VALUE;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHN0ZWxsYXIvanMteGRyL3NyYy9pbnQuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQThDO0FBQ0o7O0FBRTFDO0FBQ0E7O0FBRU8sa0JBQWtCLHVEQUFnQjtBQUN6QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2Q0FBNkMsbURBQWM7O0FBRTNELHlDQUF5QyxtREFBYzs7QUFFdkQ7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxVU1VBUklPXFxEb2N1bWVudHNcXEdpdGh1YlxcR2FsYXh5S0otd2FsbGV0LS0tSGFja1xcd2ViXFxub2RlX21vZHVsZXNcXEBzdGVsbGFyXFxqcy14ZHJcXHNyY1xcaW50LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFhkclByaW1pdGl2ZVR5cGUgfSBmcm9tICcuL3hkci10eXBlJztcbmltcG9ydCB7IFhkcldyaXRlckVycm9yIH0gZnJvbSAnLi9lcnJvcnMnO1xuXG5jb25zdCBNQVhfVkFMVUUgPSAyMTQ3NDgzNjQ3O1xuY29uc3QgTUlOX1ZBTFVFID0gLTIxNDc0ODM2NDg7XG5cbmV4cG9ydCBjbGFzcyBJbnQgZXh0ZW5kcyBYZHJQcmltaXRpdmVUeXBlIHtcbiAgLyoqXG4gICAqIEBpbmhlcml0RG9jXG4gICAqL1xuICBzdGF0aWMgcmVhZChyZWFkZXIpIHtcbiAgICByZXR1cm4gcmVhZGVyLnJlYWRJbnQzMkJFKCk7XG4gIH1cblxuICAvKipcbiAgICogQGluaGVyaXREb2NcbiAgICovXG4gIHN0YXRpYyB3cml0ZSh2YWx1ZSwgd3JpdGVyKSB7XG4gICAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gJ251bWJlcicpIHRocm93IG5ldyBYZHJXcml0ZXJFcnJvcignbm90IGEgbnVtYmVyJyk7XG5cbiAgICBpZiAoKHZhbHVlIHwgMCkgIT09IHZhbHVlKSB0aHJvdyBuZXcgWGRyV3JpdGVyRXJyb3IoJ2ludmFsaWQgaTMyIHZhbHVlJyk7XG5cbiAgICB3cml0ZXIud3JpdGVJbnQzMkJFKHZhbHVlKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAaW5oZXJpdERvY1xuICAgKi9cbiAgc3RhdGljIGlzVmFsaWQodmFsdWUpIHtcbiAgICBpZiAodHlwZW9mIHZhbHVlICE9PSAnbnVtYmVyJyB8fCAodmFsdWUgfCAwKSAhPT0gdmFsdWUpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICByZXR1cm4gdmFsdWUgPj0gTUlOX1ZBTFVFICYmIHZhbHVlIDw9IE1BWF9WQUxVRTtcbiAgfVxufVxuXG5JbnQuTUFYX1ZBTFVFID0gTUFYX1ZBTFVFO1xuSW50Lk1JTl9WQUxVRSA9IC1NSU5fVkFMVUU7XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@stellar/js-xdr/src/int.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@stellar/js-xdr/src/large-int.js":
/*!*******************************************************!*\
  !*** ./node_modules/@stellar/js-xdr/src/large-int.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   LargeInt: () => (/* binding */ LargeInt)\n/* harmony export */ });\n/* harmony import */ var _xdr_type__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./xdr-type */ \"(ssr)/./node_modules/@stellar/js-xdr/src/xdr-type.js\");\n/* harmony import */ var _bigint_encoder__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./bigint-encoder */ \"(ssr)/./node_modules/@stellar/js-xdr/src/bigint-encoder.js\");\n/* harmony import */ var _errors__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./errors */ \"(ssr)/./node_modules/@stellar/js-xdr/src/errors.js\");\n\n\n\n\nclass LargeInt extends _xdr_type__WEBPACK_IMPORTED_MODULE_0__.XdrPrimitiveType {\n  /**\n   * @param {Array<Number|BigInt|String>} parts - Slices to encode\n   */\n  constructor(args) {\n    super();\n    this._value = (0,_bigint_encoder__WEBPACK_IMPORTED_MODULE_1__.encodeBigIntFromBits)(args, this.size, this.unsigned);\n  }\n\n  /**\n   * Signed/unsigned representation\n   * @type {Boolean}\n   * @abstract\n   */\n  get unsigned() {\n    throw new _errors__WEBPACK_IMPORTED_MODULE_2__.XdrNotImplementedDefinitionError();\n  }\n\n  /**\n   * Size of the integer in bits\n   * @type {Number}\n   * @abstract\n   */\n  get size() {\n    throw new _errors__WEBPACK_IMPORTED_MODULE_2__.XdrNotImplementedDefinitionError();\n  }\n\n  /**\n   * Slice integer to parts with smaller bit size\n   * @param {32|64|128} sliceSize - Size of each part in bits\n   * @return {BigInt[]}\n   */\n  slice(sliceSize) {\n    return (0,_bigint_encoder__WEBPACK_IMPORTED_MODULE_1__.sliceBigInt)(this._value, this.size, sliceSize);\n  }\n\n  toString() {\n    return this._value.toString();\n  }\n\n  toJSON() {\n    return { _value: this._value.toString() };\n  }\n\n  toBigInt() {\n    return BigInt(this._value);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  static read(reader) {\n    const { size } = this.prototype;\n    if (size === 64) return new this(reader.readBigUInt64BE());\n    return new this(\n      ...Array.from({ length: size / 64 }, () =>\n        reader.readBigUInt64BE()\n      ).reverse()\n    );\n  }\n\n  /**\n   * @inheritDoc\n   */\n  static write(value, writer) {\n    if (value instanceof this) {\n      value = value._value;\n    } else if (\n      typeof value !== 'bigint' ||\n      value > this.MAX_VALUE ||\n      value < this.MIN_VALUE\n    )\n      throw new _errors__WEBPACK_IMPORTED_MODULE_2__.XdrWriterError(`${value} is not a ${this.name}`);\n\n    const { unsigned, size } = this.prototype;\n    if (size === 64) {\n      if (unsigned) {\n        writer.writeBigUInt64BE(value);\n      } else {\n        writer.writeBigInt64BE(value);\n      }\n    } else {\n      for (const part of (0,_bigint_encoder__WEBPACK_IMPORTED_MODULE_1__.sliceBigInt)(value, size, 64).reverse()) {\n        if (unsigned) {\n          writer.writeBigUInt64BE(part);\n        } else {\n          writer.writeBigInt64BE(part);\n        }\n      }\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  static isValid(value) {\n    return typeof value === 'bigint' || value instanceof this;\n  }\n\n  /**\n   * Create instance from string\n   * @param {String} string - Numeric representation\n   * @return {LargeInt}\n   */\n  static fromString(string) {\n    return new this(string);\n  }\n\n  static MAX_VALUE = 0n;\n\n  static MIN_VALUE = 0n;\n\n  /**\n   * @internal\n   * @return {void}\n   */\n  static defineIntBoundaries() {\n    const [min, max] = (0,_bigint_encoder__WEBPACK_IMPORTED_MODULE_1__.calculateBigIntBoundaries)(\n      this.prototype.size,\n      this.prototype.unsigned\n    );\n    this.MIN_VALUE = min;\n    this.MAX_VALUE = max;\n  }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHN0ZWxsYXIvanMteGRyL3NyYy9sYXJnZS1pbnQuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUE4QztBQUtwQjtBQUNrRDs7QUFFckUsdUJBQXVCLHVEQUFnQjtBQUM5QztBQUNBLGFBQWEsNkJBQTZCO0FBQzFDO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQixxRUFBb0I7QUFDdEM7O0FBRUE7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQSxjQUFjLHFFQUFnQztBQUM5Qzs7QUFFQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBLGNBQWMscUVBQWdDO0FBQzlDOztBQUVBO0FBQ0E7QUFDQSxhQUFhLFdBQVc7QUFDeEIsY0FBYztBQUNkO0FBQ0E7QUFDQSxXQUFXLDREQUFXO0FBQ3RCOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLGFBQWE7QUFDYjs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLE9BQU87QUFDbkI7QUFDQTtBQUNBLHNCQUFzQixtQkFBbUI7QUFDekM7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLG1EQUFjLElBQUksT0FBTyxXQUFXLFVBQVU7O0FBRTlELFlBQVksaUJBQWlCO0FBQzdCO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0EsTUFBTTtBQUNOLHlCQUF5Qiw0REFBVztBQUNwQztBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxhQUFhLFFBQVE7QUFDckIsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBLHVCQUF1QiwwRUFBeUI7QUFDaEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcVVNVQVJJT1xcRG9jdW1lbnRzXFxHaXRodWJcXEdhbGF4eUtKLXdhbGxldC0tLUhhY2tcXHdlYlxcbm9kZV9tb2R1bGVzXFxAc3RlbGxhclxcanMteGRyXFxzcmNcXGxhcmdlLWludC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBYZHJQcmltaXRpdmVUeXBlIH0gZnJvbSAnLi94ZHItdHlwZSc7XG5pbXBvcnQge1xuICBjYWxjdWxhdGVCaWdJbnRCb3VuZGFyaWVzLFxuICBlbmNvZGVCaWdJbnRGcm9tQml0cyxcbiAgc2xpY2VCaWdJbnRcbn0gZnJvbSAnLi9iaWdpbnQtZW5jb2Rlcic7XG5pbXBvcnQgeyBYZHJOb3RJbXBsZW1lbnRlZERlZmluaXRpb25FcnJvciwgWGRyV3JpdGVyRXJyb3IgfSBmcm9tICcuL2Vycm9ycyc7XG5cbmV4cG9ydCBjbGFzcyBMYXJnZUludCBleHRlbmRzIFhkclByaW1pdGl2ZVR5cGUge1xuICAvKipcbiAgICogQHBhcmFtIHtBcnJheTxOdW1iZXJ8QmlnSW50fFN0cmluZz59IHBhcnRzIC0gU2xpY2VzIHRvIGVuY29kZVxuICAgKi9cbiAgY29uc3RydWN0b3IoYXJncykge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy5fdmFsdWUgPSBlbmNvZGVCaWdJbnRGcm9tQml0cyhhcmdzLCB0aGlzLnNpemUsIHRoaXMudW5zaWduZWQpO1xuICB9XG5cbiAgLyoqXG4gICAqIFNpZ25lZC91bnNpZ25lZCByZXByZXNlbnRhdGlvblxuICAgKiBAdHlwZSB7Qm9vbGVhbn1cbiAgICogQGFic3RyYWN0XG4gICAqL1xuICBnZXQgdW5zaWduZWQoKSB7XG4gICAgdGhyb3cgbmV3IFhkck5vdEltcGxlbWVudGVkRGVmaW5pdGlvbkVycm9yKCk7XG4gIH1cblxuICAvKipcbiAgICogU2l6ZSBvZiB0aGUgaW50ZWdlciBpbiBiaXRzXG4gICAqIEB0eXBlIHtOdW1iZXJ9XG4gICAqIEBhYnN0cmFjdFxuICAgKi9cbiAgZ2V0IHNpemUoKSB7XG4gICAgdGhyb3cgbmV3IFhkck5vdEltcGxlbWVudGVkRGVmaW5pdGlvbkVycm9yKCk7XG4gIH1cblxuICAvKipcbiAgICogU2xpY2UgaW50ZWdlciB0byBwYXJ0cyB3aXRoIHNtYWxsZXIgYml0IHNpemVcbiAgICogQHBhcmFtIHszMnw2NHwxMjh9IHNsaWNlU2l6ZSAtIFNpemUgb2YgZWFjaCBwYXJ0IGluIGJpdHNcbiAgICogQHJldHVybiB7QmlnSW50W119XG4gICAqL1xuICBzbGljZShzbGljZVNpemUpIHtcbiAgICByZXR1cm4gc2xpY2VCaWdJbnQodGhpcy5fdmFsdWUsIHRoaXMuc2l6ZSwgc2xpY2VTaXplKTtcbiAgfVxuXG4gIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiB0aGlzLl92YWx1ZS50b1N0cmluZygpO1xuICB9XG5cbiAgdG9KU09OKCkge1xuICAgIHJldHVybiB7IF92YWx1ZTogdGhpcy5fdmFsdWUudG9TdHJpbmcoKSB9O1xuICB9XG5cbiAgdG9CaWdJbnQoKSB7XG4gICAgcmV0dXJuIEJpZ0ludCh0aGlzLl92YWx1ZSk7XG4gIH1cblxuICAvKipcbiAgICogQGluaGVyaXREb2NcbiAgICovXG4gIHN0YXRpYyByZWFkKHJlYWRlcikge1xuICAgIGNvbnN0IHsgc2l6ZSB9ID0gdGhpcy5wcm90b3R5cGU7XG4gICAgaWYgKHNpemUgPT09IDY0KSByZXR1cm4gbmV3IHRoaXMocmVhZGVyLnJlYWRCaWdVSW50NjRCRSgpKTtcbiAgICByZXR1cm4gbmV3IHRoaXMoXG4gICAgICAuLi5BcnJheS5mcm9tKHsgbGVuZ3RoOiBzaXplIC8gNjQgfSwgKCkgPT5cbiAgICAgICAgcmVhZGVyLnJlYWRCaWdVSW50NjRCRSgpXG4gICAgICApLnJldmVyc2UoKVxuICAgICk7XG4gIH1cblxuICAvKipcbiAgICogQGluaGVyaXREb2NcbiAgICovXG4gIHN0YXRpYyB3cml0ZSh2YWx1ZSwgd3JpdGVyKSB7XG4gICAgaWYgKHZhbHVlIGluc3RhbmNlb2YgdGhpcykge1xuICAgICAgdmFsdWUgPSB2YWx1ZS5fdmFsdWU7XG4gICAgfSBlbHNlIGlmIChcbiAgICAgIHR5cGVvZiB2YWx1ZSAhPT0gJ2JpZ2ludCcgfHxcbiAgICAgIHZhbHVlID4gdGhpcy5NQVhfVkFMVUUgfHxcbiAgICAgIHZhbHVlIDwgdGhpcy5NSU5fVkFMVUVcbiAgICApXG4gICAgICB0aHJvdyBuZXcgWGRyV3JpdGVyRXJyb3IoYCR7dmFsdWV9IGlzIG5vdCBhICR7dGhpcy5uYW1lfWApO1xuXG4gICAgY29uc3QgeyB1bnNpZ25lZCwgc2l6ZSB9ID0gdGhpcy5wcm90b3R5cGU7XG4gICAgaWYgKHNpemUgPT09IDY0KSB7XG4gICAgICBpZiAodW5zaWduZWQpIHtcbiAgICAgICAgd3JpdGVyLndyaXRlQmlnVUludDY0QkUodmFsdWUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgd3JpdGVyLndyaXRlQmlnSW50NjRCRSh2YWx1ZSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGZvciAoY29uc3QgcGFydCBvZiBzbGljZUJpZ0ludCh2YWx1ZSwgc2l6ZSwgNjQpLnJldmVyc2UoKSkge1xuICAgICAgICBpZiAodW5zaWduZWQpIHtcbiAgICAgICAgICB3cml0ZXIud3JpdGVCaWdVSW50NjRCRShwYXJ0KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB3cml0ZXIud3JpdGVCaWdJbnQ2NEJFKHBhcnQpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEBpbmhlcml0RG9jXG4gICAqL1xuICBzdGF0aWMgaXNWYWxpZCh2YWx1ZSkge1xuICAgIHJldHVybiB0eXBlb2YgdmFsdWUgPT09ICdiaWdpbnQnIHx8IHZhbHVlIGluc3RhbmNlb2YgdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGUgaW5zdGFuY2UgZnJvbSBzdHJpbmdcbiAgICogQHBhcmFtIHtTdHJpbmd9IHN0cmluZyAtIE51bWVyaWMgcmVwcmVzZW50YXRpb25cbiAgICogQHJldHVybiB7TGFyZ2VJbnR9XG4gICAqL1xuICBzdGF0aWMgZnJvbVN0cmluZyhzdHJpbmcpIHtcbiAgICByZXR1cm4gbmV3IHRoaXMoc3RyaW5nKTtcbiAgfVxuXG4gIHN0YXRpYyBNQVhfVkFMVUUgPSAwbjtcblxuICBzdGF0aWMgTUlOX1ZBTFVFID0gMG47XG5cbiAgLyoqXG4gICAqIEBpbnRlcm5hbFxuICAgKiBAcmV0dXJuIHt2b2lkfVxuICAgKi9cbiAgc3RhdGljIGRlZmluZUludEJvdW5kYXJpZXMoKSB7XG4gICAgY29uc3QgW21pbiwgbWF4XSA9IGNhbGN1bGF0ZUJpZ0ludEJvdW5kYXJpZXMoXG4gICAgICB0aGlzLnByb3RvdHlwZS5zaXplLFxuICAgICAgdGhpcy5wcm90b3R5cGUudW5zaWduZWRcbiAgICApO1xuICAgIHRoaXMuTUlOX1ZBTFVFID0gbWluO1xuICAgIHRoaXMuTUFYX1ZBTFVFID0gbWF4O1xuICB9XG59XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@stellar/js-xdr/src/large-int.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@stellar/js-xdr/src/opaque.js":
/*!****************************************************!*\
  !*** ./node_modules/@stellar/js-xdr/src/opaque.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Opaque: () => (/* binding */ Opaque)\n/* harmony export */ });\n/* harmony import */ var _xdr_type__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./xdr-type */ \"(ssr)/./node_modules/@stellar/js-xdr/src/xdr-type.js\");\n/* harmony import */ var _errors__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./errors */ \"(ssr)/./node_modules/@stellar/js-xdr/src/errors.js\");\n\n\n\nclass Opaque extends _xdr_type__WEBPACK_IMPORTED_MODULE_0__.XdrCompositeType {\n  constructor(length) {\n    super();\n    this._length = length;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  read(reader) {\n    return reader.read(this._length);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  write(value, writer) {\n    const { length } = value;\n    if (length !== this._length)\n      throw new _errors__WEBPACK_IMPORTED_MODULE_1__.XdrWriterError(\n        `got ${value.length} bytes, expected ${this._length}`\n      );\n    writer.write(value, length);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  isValid(value) {\n    return Buffer.isBuffer(value) && value.length === this._length;\n  }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHN0ZWxsYXIvanMteGRyL3NyYy9vcGFxdWUuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQThDO0FBQ0o7O0FBRW5DLHFCQUFxQix1REFBZ0I7QUFDNUM7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSxTQUFTO0FBQ3JCO0FBQ0EsZ0JBQWdCLG1EQUFjO0FBQzlCLGVBQWUsY0FBYyxrQkFBa0IsYUFBYTtBQUM1RDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcVVNVQVJJT1xcRG9jdW1lbnRzXFxHaXRodWJcXEdhbGF4eUtKLXdhbGxldC0tLUhhY2tcXHdlYlxcbm9kZV9tb2R1bGVzXFxAc3RlbGxhclxcanMteGRyXFxzcmNcXG9wYXF1ZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBYZHJDb21wb3NpdGVUeXBlIH0gZnJvbSAnLi94ZHItdHlwZSc7XG5pbXBvcnQgeyBYZHJXcml0ZXJFcnJvciB9IGZyb20gJy4vZXJyb3JzJztcblxuZXhwb3J0IGNsYXNzIE9wYXF1ZSBleHRlbmRzIFhkckNvbXBvc2l0ZVR5cGUge1xuICBjb25zdHJ1Y3RvcihsZW5ndGgpIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMuX2xlbmd0aCA9IGxlbmd0aDtcbiAgfVxuXG4gIC8qKlxuICAgKiBAaW5oZXJpdERvY1xuICAgKi9cbiAgcmVhZChyZWFkZXIpIHtcbiAgICByZXR1cm4gcmVhZGVyLnJlYWQodGhpcy5fbGVuZ3RoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAaW5oZXJpdERvY1xuICAgKi9cbiAgd3JpdGUodmFsdWUsIHdyaXRlcikge1xuICAgIGNvbnN0IHsgbGVuZ3RoIH0gPSB2YWx1ZTtcbiAgICBpZiAobGVuZ3RoICE9PSB0aGlzLl9sZW5ndGgpXG4gICAgICB0aHJvdyBuZXcgWGRyV3JpdGVyRXJyb3IoXG4gICAgICAgIGBnb3QgJHt2YWx1ZS5sZW5ndGh9IGJ5dGVzLCBleHBlY3RlZCAke3RoaXMuX2xlbmd0aH1gXG4gICAgICApO1xuICAgIHdyaXRlci53cml0ZSh2YWx1ZSwgbGVuZ3RoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAaW5oZXJpdERvY1xuICAgKi9cbiAgaXNWYWxpZCh2YWx1ZSkge1xuICAgIHJldHVybiBCdWZmZXIuaXNCdWZmZXIodmFsdWUpICYmIHZhbHVlLmxlbmd0aCA9PT0gdGhpcy5fbGVuZ3RoO1xuICB9XG59XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@stellar/js-xdr/src/opaque.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@stellar/js-xdr/src/option.js":
/*!****************************************************!*\
  !*** ./node_modules/@stellar/js-xdr/src/option.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Option: () => (/* binding */ Option)\n/* harmony export */ });\n/* harmony import */ var _bool__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./bool */ \"(ssr)/./node_modules/@stellar/js-xdr/src/bool.js\");\n/* harmony import */ var _xdr_type__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./xdr-type */ \"(ssr)/./node_modules/@stellar/js-xdr/src/xdr-type.js\");\n\n\n\nclass Option extends _xdr_type__WEBPACK_IMPORTED_MODULE_1__.XdrPrimitiveType {\n  constructor(childType) {\n    super();\n    this._childType = childType;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  read(reader) {\n    if (_bool__WEBPACK_IMPORTED_MODULE_0__.Bool.read(reader)) {\n      return this._childType.read(reader);\n    }\n\n    return undefined;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  write(value, writer) {\n    const isPresent = value !== null && value !== undefined;\n\n    _bool__WEBPACK_IMPORTED_MODULE_0__.Bool.write(isPresent, writer);\n\n    if (isPresent) {\n      this._childType.write(value, writer);\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  isValid(value) {\n    if (value === null || value === undefined) {\n      return true;\n    }\n    return this._childType.isValid(value);\n  }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHN0ZWxsYXIvanMteGRyL3NyYy9vcHRpb24uanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQThCO0FBQ2dCOztBQUV2QyxxQkFBcUIsdURBQWdCO0FBQzVDO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUSx1Q0FBSTtBQUNaO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLElBQUksdUNBQUk7O0FBRVI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcVVNVQVJJT1xcRG9jdW1lbnRzXFxHaXRodWJcXEdhbGF4eUtKLXdhbGxldC0tLUhhY2tcXHdlYlxcbm9kZV9tb2R1bGVzXFxAc3RlbGxhclxcanMteGRyXFxzcmNcXG9wdGlvbi5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBCb29sIH0gZnJvbSAnLi9ib29sJztcbmltcG9ydCB7IFhkclByaW1pdGl2ZVR5cGUgfSBmcm9tICcuL3hkci10eXBlJztcblxuZXhwb3J0IGNsYXNzIE9wdGlvbiBleHRlbmRzIFhkclByaW1pdGl2ZVR5cGUge1xuICBjb25zdHJ1Y3RvcihjaGlsZFR5cGUpIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMuX2NoaWxkVHlwZSA9IGNoaWxkVHlwZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAaW5oZXJpdERvY1xuICAgKi9cbiAgcmVhZChyZWFkZXIpIHtcbiAgICBpZiAoQm9vbC5yZWFkKHJlYWRlcikpIHtcbiAgICAgIHJldHVybiB0aGlzLl9jaGlsZFR5cGUucmVhZChyZWFkZXIpO1xuICAgIH1cblxuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH1cblxuICAvKipcbiAgICogQGluaGVyaXREb2NcbiAgICovXG4gIHdyaXRlKHZhbHVlLCB3cml0ZXIpIHtcbiAgICBjb25zdCBpc1ByZXNlbnQgPSB2YWx1ZSAhPT0gbnVsbCAmJiB2YWx1ZSAhPT0gdW5kZWZpbmVkO1xuXG4gICAgQm9vbC53cml0ZShpc1ByZXNlbnQsIHdyaXRlcik7XG5cbiAgICBpZiAoaXNQcmVzZW50KSB7XG4gICAgICB0aGlzLl9jaGlsZFR5cGUud3JpdGUodmFsdWUsIHdyaXRlcik7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEBpbmhlcml0RG9jXG4gICAqL1xuICBpc1ZhbGlkKHZhbHVlKSB7XG4gICAgaWYgKHZhbHVlID09PSBudWxsIHx8IHZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5fY2hpbGRUeXBlLmlzVmFsaWQodmFsdWUpO1xuICB9XG59XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@stellar/js-xdr/src/option.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@stellar/js-xdr/src/quadruple.js":
/*!*******************************************************!*\
  !*** ./node_modules/@stellar/js-xdr/src/quadruple.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Quadruple: () => (/* binding */ Quadruple)\n/* harmony export */ });\n/* harmony import */ var _xdr_type__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./xdr-type */ \"(ssr)/./node_modules/@stellar/js-xdr/src/xdr-type.js\");\n/* harmony import */ var _errors__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./errors */ \"(ssr)/./node_modules/@stellar/js-xdr/src/errors.js\");\n\n\n\nclass Quadruple extends _xdr_type__WEBPACK_IMPORTED_MODULE_0__.XdrPrimitiveType {\n  static read() {\n    throw new _errors__WEBPACK_IMPORTED_MODULE_1__.XdrDefinitionError('quadruple not supported');\n  }\n\n  static write() {\n    throw new _errors__WEBPACK_IMPORTED_MODULE_1__.XdrDefinitionError('quadruple not supported');\n  }\n\n  static isValid() {\n    return false;\n  }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHN0ZWxsYXIvanMteGRyL3NyYy9xdWFkcnVwbGUuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQThDO0FBQ0E7O0FBRXZDLHdCQUF3Qix1REFBZ0I7QUFDL0M7QUFDQSxjQUFjLHVEQUFrQjtBQUNoQzs7QUFFQTtBQUNBLGNBQWMsdURBQWtCO0FBQ2hDOztBQUVBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXFVTVUFSSU9cXERvY3VtZW50c1xcR2l0aHViXFxHYWxheHlLSi13YWxsZXQtLS1IYWNrXFx3ZWJcXG5vZGVfbW9kdWxlc1xcQHN0ZWxsYXJcXGpzLXhkclxcc3JjXFxxdWFkcnVwbGUuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgWGRyUHJpbWl0aXZlVHlwZSB9IGZyb20gJy4veGRyLXR5cGUnO1xuaW1wb3J0IHsgWGRyRGVmaW5pdGlvbkVycm9yIH0gZnJvbSAnLi9lcnJvcnMnO1xuXG5leHBvcnQgY2xhc3MgUXVhZHJ1cGxlIGV4dGVuZHMgWGRyUHJpbWl0aXZlVHlwZSB7XG4gIHN0YXRpYyByZWFkKCkge1xuICAgIHRocm93IG5ldyBYZHJEZWZpbml0aW9uRXJyb3IoJ3F1YWRydXBsZSBub3Qgc3VwcG9ydGVkJyk7XG4gIH1cblxuICBzdGF0aWMgd3JpdGUoKSB7XG4gICAgdGhyb3cgbmV3IFhkckRlZmluaXRpb25FcnJvcigncXVhZHJ1cGxlIG5vdCBzdXBwb3J0ZWQnKTtcbiAgfVxuXG4gIHN0YXRpYyBpc1ZhbGlkKCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxufVxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@stellar/js-xdr/src/quadruple.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@stellar/js-xdr/src/reference.js":
/*!*******************************************************!*\
  !*** ./node_modules/@stellar/js-xdr/src/reference.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Reference: () => (/* binding */ Reference)\n/* harmony export */ });\n/* harmony import */ var _xdr_type__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./xdr-type */ \"(ssr)/./node_modules/@stellar/js-xdr/src/xdr-type.js\");\n/* harmony import */ var _errors__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./errors */ \"(ssr)/./node_modules/@stellar/js-xdr/src/errors.js\");\n\n\n\nclass Reference extends _xdr_type__WEBPACK_IMPORTED_MODULE_0__.XdrPrimitiveType {\n  /* jshint unused: false */\n  resolve() {\n    throw new _errors__WEBPACK_IMPORTED_MODULE_1__.XdrDefinitionError(\n      '\"resolve\" method should be implemented in the descendant class'\n    );\n  }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHN0ZWxsYXIvanMteGRyL3NyYy9yZWZlcmVuY2UuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQThDO0FBQ0E7O0FBRXZDLHdCQUF3Qix1REFBZ0I7QUFDL0M7QUFDQTtBQUNBLGNBQWMsdURBQWtCO0FBQ2hDO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXFVTVUFSSU9cXERvY3VtZW50c1xcR2l0aHViXFxHYWxheHlLSi13YWxsZXQtLS1IYWNrXFx3ZWJcXG5vZGVfbW9kdWxlc1xcQHN0ZWxsYXJcXGpzLXhkclxcc3JjXFxyZWZlcmVuY2UuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgWGRyUHJpbWl0aXZlVHlwZSB9IGZyb20gJy4veGRyLXR5cGUnO1xuaW1wb3J0IHsgWGRyRGVmaW5pdGlvbkVycm9yIH0gZnJvbSAnLi9lcnJvcnMnO1xuXG5leHBvcnQgY2xhc3MgUmVmZXJlbmNlIGV4dGVuZHMgWGRyUHJpbWl0aXZlVHlwZSB7XG4gIC8qIGpzaGludCB1bnVzZWQ6IGZhbHNlICovXG4gIHJlc29sdmUoKSB7XG4gICAgdGhyb3cgbmV3IFhkckRlZmluaXRpb25FcnJvcihcbiAgICAgICdcInJlc29sdmVcIiBtZXRob2Qgc2hvdWxkIGJlIGltcGxlbWVudGVkIGluIHRoZSBkZXNjZW5kYW50IGNsYXNzJ1xuICAgICk7XG4gIH1cbn1cbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@stellar/js-xdr/src/reference.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@stellar/js-xdr/src/serialization/xdr-reader.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@stellar/js-xdr/src/serialization/xdr-reader.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   XdrReader: () => (/* binding */ XdrReader)\n/* harmony export */ });\n/* harmony import */ var _errors__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../errors */ \"(ssr)/./node_modules/@stellar/js-xdr/src/errors.js\");\n/**\n * @internal\n */\n\n\nclass XdrReader {\n  /**\n   * @constructor\n   * @param {Buffer} source - Buffer containing serialized data\n   */\n  constructor(source) {\n    if (!Buffer.isBuffer(source)) {\n      if (\n        source instanceof Array ||\n        Array.isArray(source) ||\n        ArrayBuffer.isView(source)\n      ) {\n        source = Buffer.from(source);\n      } else {\n        throw new _errors__WEBPACK_IMPORTED_MODULE_0__.XdrReaderError(`source invalid: ${source}`);\n      }\n    }\n\n    this._buffer = source;\n    this._length = source.length;\n    this._index = 0;\n  }\n\n  /**\n   * @type {Buffer}\n   * @private\n   * @readonly\n   */\n  _buffer;\n  /**\n   * @type {Number}\n   * @private\n   * @readonly\n   */\n  _length;\n  /**\n   * @type {Number}\n   * @private\n   * @readonly\n   */\n  _index;\n\n  /**\n   * Check if the reader reached the end of the input buffer\n   * @return {Boolean}\n   */\n  get eof() {\n    return this._index === this._length;\n  }\n\n  /**\n   * Advance reader position, check padding and overflow\n   * @param {Number} size - Bytes to read\n   * @return {Number} Position to read from\n   * @private\n   */\n  advance(size) {\n    const from = this._index;\n    // advance cursor position\n    this._index += size;\n    // check buffer boundaries\n    if (this._length < this._index)\n      throw new _errors__WEBPACK_IMPORTED_MODULE_0__.XdrReaderError(\n        'attempt to read outside the boundary of the buffer'\n      );\n    // check that padding is correct for Opaque and String\n    const padding = 4 - (size % 4 || 4);\n    if (padding > 0) {\n      for (let i = 0; i < padding; i++)\n        if (this._buffer[this._index + i] !== 0)\n          // all bytes in the padding should be zeros\n          throw new _errors__WEBPACK_IMPORTED_MODULE_0__.XdrReaderError('invalid padding');\n      this._index += padding;\n    }\n    return from;\n  }\n\n  /**\n   * Reset reader position\n   * @return {void}\n   */\n  rewind() {\n    this._index = 0;\n  }\n\n  /**\n   * Read byte array from the buffer\n   * @param {Number} size - Bytes to read\n   * @return {Buffer} - Sliced portion of the underlying buffer\n   */\n  read(size) {\n    const from = this.advance(size);\n    return this._buffer.subarray(from, from + size);\n  }\n\n  /**\n   * Read i32 from buffer\n   * @return {Number}\n   */\n  readInt32BE() {\n    return this._buffer.readInt32BE(this.advance(4));\n  }\n\n  /**\n   * Read u32 from buffer\n   * @return {Number}\n   */\n  readUInt32BE() {\n    return this._buffer.readUInt32BE(this.advance(4));\n  }\n\n  /**\n   * Read i64 from buffer\n   * @return {BigInt}\n   */\n  readBigInt64BE() {\n    return this._buffer.readBigInt64BE(this.advance(8));\n  }\n\n  /**\n   * Read u64 from buffer\n   * @return {BigInt}\n   */\n  readBigUInt64BE() {\n    return this._buffer.readBigUInt64BE(this.advance(8));\n  }\n\n  /**\n   * Read float from buffer\n   * @return {Number}\n   */\n  readFloatBE() {\n    return this._buffer.readFloatBE(this.advance(4));\n  }\n\n  /**\n   * Read double from buffer\n   * @return {Number}\n   */\n  readDoubleBE() {\n    return this._buffer.readDoubleBE(this.advance(8));\n  }\n\n  /**\n   * Ensure that input buffer has been consumed in full, otherwise it's a type mismatch\n   * @return {void}\n   * @throws {XdrReaderError}\n   */\n  ensureInputConsumed() {\n    if (this._index !== this._length)\n      throw new _errors__WEBPACK_IMPORTED_MODULE_0__.XdrReaderError(\n        `invalid XDR contract typecast - source buffer not entirely consumed`\n      );\n  }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHN0ZWxsYXIvanMteGRyL3NyYy9zZXJpYWxpemF0aW9uL3hkci1yZWFkZXIuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDMkM7O0FBRXBDO0FBQ1A7QUFDQTtBQUNBLGFBQWEsUUFBUTtBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1Isa0JBQWtCLG1EQUFjLG9CQUFvQixPQUFPO0FBQzNEO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGFBQWEsUUFBUTtBQUNyQixjQUFjLFFBQVE7QUFDdEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQixtREFBYztBQUM5QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCLGFBQWE7QUFDbkM7QUFDQTtBQUNBLG9CQUFvQixtREFBYztBQUNsQztBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxhQUFhLFFBQVE7QUFDckIsY0FBYyxRQUFRO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGNBQWM7QUFDZCxjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLG1EQUFjO0FBQzlCO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXFVTVUFSSU9cXERvY3VtZW50c1xcR2l0aHViXFxHYWxheHlLSi13YWxsZXQtLS1IYWNrXFx3ZWJcXG5vZGVfbW9kdWxlc1xcQHN0ZWxsYXJcXGpzLXhkclxcc3JjXFxzZXJpYWxpemF0aW9uXFx4ZHItcmVhZGVyLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGludGVybmFsXG4gKi9cbmltcG9ydCB7IFhkclJlYWRlckVycm9yIH0gZnJvbSAnLi4vZXJyb3JzJztcblxuZXhwb3J0IGNsYXNzIFhkclJlYWRlciB7XG4gIC8qKlxuICAgKiBAY29uc3RydWN0b3JcbiAgICogQHBhcmFtIHtCdWZmZXJ9IHNvdXJjZSAtIEJ1ZmZlciBjb250YWluaW5nIHNlcmlhbGl6ZWQgZGF0YVxuICAgKi9cbiAgY29uc3RydWN0b3Ioc291cmNlKSB7XG4gICAgaWYgKCFCdWZmZXIuaXNCdWZmZXIoc291cmNlKSkge1xuICAgICAgaWYgKFxuICAgICAgICBzb3VyY2UgaW5zdGFuY2VvZiBBcnJheSB8fFxuICAgICAgICBBcnJheS5pc0FycmF5KHNvdXJjZSkgfHxcbiAgICAgICAgQXJyYXlCdWZmZXIuaXNWaWV3KHNvdXJjZSlcbiAgICAgICkge1xuICAgICAgICBzb3VyY2UgPSBCdWZmZXIuZnJvbShzb3VyY2UpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhyb3cgbmV3IFhkclJlYWRlckVycm9yKGBzb3VyY2UgaW52YWxpZDogJHtzb3VyY2V9YCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy5fYnVmZmVyID0gc291cmNlO1xuICAgIHRoaXMuX2xlbmd0aCA9IHNvdXJjZS5sZW5ndGg7XG4gICAgdGhpcy5faW5kZXggPSAwO1xuICB9XG5cbiAgLyoqXG4gICAqIEB0eXBlIHtCdWZmZXJ9XG4gICAqIEBwcml2YXRlXG4gICAqIEByZWFkb25seVxuICAgKi9cbiAgX2J1ZmZlcjtcbiAgLyoqXG4gICAqIEB0eXBlIHtOdW1iZXJ9XG4gICAqIEBwcml2YXRlXG4gICAqIEByZWFkb25seVxuICAgKi9cbiAgX2xlbmd0aDtcbiAgLyoqXG4gICAqIEB0eXBlIHtOdW1iZXJ9XG4gICAqIEBwcml2YXRlXG4gICAqIEByZWFkb25seVxuICAgKi9cbiAgX2luZGV4O1xuXG4gIC8qKlxuICAgKiBDaGVjayBpZiB0aGUgcmVhZGVyIHJlYWNoZWQgdGhlIGVuZCBvZiB0aGUgaW5wdXQgYnVmZmVyXG4gICAqIEByZXR1cm4ge0Jvb2xlYW59XG4gICAqL1xuICBnZXQgZW9mKCkge1xuICAgIHJldHVybiB0aGlzLl9pbmRleCA9PT0gdGhpcy5fbGVuZ3RoO1xuICB9XG5cbiAgLyoqXG4gICAqIEFkdmFuY2UgcmVhZGVyIHBvc2l0aW9uLCBjaGVjayBwYWRkaW5nIGFuZCBvdmVyZmxvd1xuICAgKiBAcGFyYW0ge051bWJlcn0gc2l6ZSAtIEJ5dGVzIHRvIHJlYWRcbiAgICogQHJldHVybiB7TnVtYmVyfSBQb3NpdGlvbiB0byByZWFkIGZyb21cbiAgICogQHByaXZhdGVcbiAgICovXG4gIGFkdmFuY2Uoc2l6ZSkge1xuICAgIGNvbnN0IGZyb20gPSB0aGlzLl9pbmRleDtcbiAgICAvLyBhZHZhbmNlIGN1cnNvciBwb3NpdGlvblxuICAgIHRoaXMuX2luZGV4ICs9IHNpemU7XG4gICAgLy8gY2hlY2sgYnVmZmVyIGJvdW5kYXJpZXNcbiAgICBpZiAodGhpcy5fbGVuZ3RoIDwgdGhpcy5faW5kZXgpXG4gICAgICB0aHJvdyBuZXcgWGRyUmVhZGVyRXJyb3IoXG4gICAgICAgICdhdHRlbXB0IHRvIHJlYWQgb3V0c2lkZSB0aGUgYm91bmRhcnkgb2YgdGhlIGJ1ZmZlcidcbiAgICAgICk7XG4gICAgLy8gY2hlY2sgdGhhdCBwYWRkaW5nIGlzIGNvcnJlY3QgZm9yIE9wYXF1ZSBhbmQgU3RyaW5nXG4gICAgY29uc3QgcGFkZGluZyA9IDQgLSAoc2l6ZSAlIDQgfHwgNCk7XG4gICAgaWYgKHBhZGRpbmcgPiAwKSB7XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHBhZGRpbmc7IGkrKylcbiAgICAgICAgaWYgKHRoaXMuX2J1ZmZlclt0aGlzLl9pbmRleCArIGldICE9PSAwKVxuICAgICAgICAgIC8vIGFsbCBieXRlcyBpbiB0aGUgcGFkZGluZyBzaG91bGQgYmUgemVyb3NcbiAgICAgICAgICB0aHJvdyBuZXcgWGRyUmVhZGVyRXJyb3IoJ2ludmFsaWQgcGFkZGluZycpO1xuICAgICAgdGhpcy5faW5kZXggKz0gcGFkZGluZztcbiAgICB9XG4gICAgcmV0dXJuIGZyb207XG4gIH1cblxuICAvKipcbiAgICogUmVzZXQgcmVhZGVyIHBvc2l0aW9uXG4gICAqIEByZXR1cm4ge3ZvaWR9XG4gICAqL1xuICByZXdpbmQoKSB7XG4gICAgdGhpcy5faW5kZXggPSAwO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlYWQgYnl0ZSBhcnJheSBmcm9tIHRoZSBidWZmZXJcbiAgICogQHBhcmFtIHtOdW1iZXJ9IHNpemUgLSBCeXRlcyB0byByZWFkXG4gICAqIEByZXR1cm4ge0J1ZmZlcn0gLSBTbGljZWQgcG9ydGlvbiBvZiB0aGUgdW5kZXJseWluZyBidWZmZXJcbiAgICovXG4gIHJlYWQoc2l6ZSkge1xuICAgIGNvbnN0IGZyb20gPSB0aGlzLmFkdmFuY2Uoc2l6ZSk7XG4gICAgcmV0dXJuIHRoaXMuX2J1ZmZlci5zdWJhcnJheShmcm9tLCBmcm9tICsgc2l6ZSk7XG4gIH1cblxuICAvKipcbiAgICogUmVhZCBpMzIgZnJvbSBidWZmZXJcbiAgICogQHJldHVybiB7TnVtYmVyfVxuICAgKi9cbiAgcmVhZEludDMyQkUoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2J1ZmZlci5yZWFkSW50MzJCRSh0aGlzLmFkdmFuY2UoNCkpO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlYWQgdTMyIGZyb20gYnVmZmVyXG4gICAqIEByZXR1cm4ge051bWJlcn1cbiAgICovXG4gIHJlYWRVSW50MzJCRSgpIHtcbiAgICByZXR1cm4gdGhpcy5fYnVmZmVyLnJlYWRVSW50MzJCRSh0aGlzLmFkdmFuY2UoNCkpO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlYWQgaTY0IGZyb20gYnVmZmVyXG4gICAqIEByZXR1cm4ge0JpZ0ludH1cbiAgICovXG4gIHJlYWRCaWdJbnQ2NEJFKCkge1xuICAgIHJldHVybiB0aGlzLl9idWZmZXIucmVhZEJpZ0ludDY0QkUodGhpcy5hZHZhbmNlKDgpKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZWFkIHU2NCBmcm9tIGJ1ZmZlclxuICAgKiBAcmV0dXJuIHtCaWdJbnR9XG4gICAqL1xuICByZWFkQmlnVUludDY0QkUoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2J1ZmZlci5yZWFkQmlnVUludDY0QkUodGhpcy5hZHZhbmNlKDgpKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZWFkIGZsb2F0IGZyb20gYnVmZmVyXG4gICAqIEByZXR1cm4ge051bWJlcn1cbiAgICovXG4gIHJlYWRGbG9hdEJFKCkge1xuICAgIHJldHVybiB0aGlzLl9idWZmZXIucmVhZEZsb2F0QkUodGhpcy5hZHZhbmNlKDQpKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZWFkIGRvdWJsZSBmcm9tIGJ1ZmZlclxuICAgKiBAcmV0dXJuIHtOdW1iZXJ9XG4gICAqL1xuICByZWFkRG91YmxlQkUoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2J1ZmZlci5yZWFkRG91YmxlQkUodGhpcy5hZHZhbmNlKDgpKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBFbnN1cmUgdGhhdCBpbnB1dCBidWZmZXIgaGFzIGJlZW4gY29uc3VtZWQgaW4gZnVsbCwgb3RoZXJ3aXNlIGl0J3MgYSB0eXBlIG1pc21hdGNoXG4gICAqIEByZXR1cm4ge3ZvaWR9XG4gICAqIEB0aHJvd3Mge1hkclJlYWRlckVycm9yfVxuICAgKi9cbiAgZW5zdXJlSW5wdXRDb25zdW1lZCgpIHtcbiAgICBpZiAodGhpcy5faW5kZXggIT09IHRoaXMuX2xlbmd0aClcbiAgICAgIHRocm93IG5ldyBYZHJSZWFkZXJFcnJvcihcbiAgICAgICAgYGludmFsaWQgWERSIGNvbnRyYWN0IHR5cGVjYXN0IC0gc291cmNlIGJ1ZmZlciBub3QgZW50aXJlbHkgY29uc3VtZWRgXG4gICAgICApO1xuICB9XG59XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@stellar/js-xdr/src/serialization/xdr-reader.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@stellar/js-xdr/src/serialization/xdr-writer.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@stellar/js-xdr/src/serialization/xdr-writer.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   XdrWriter: () => (/* binding */ XdrWriter)\n/* harmony export */ });\nconst BUFFER_CHUNK = 8192; // 8 KB chunk size increment\n\n/**\n * @internal\n */\nclass XdrWriter {\n  /**\n   * @param {Buffer|Number} [buffer] - Optional destination buffer\n   */\n  constructor(buffer) {\n    if (typeof buffer === 'number') {\n      buffer = Buffer.allocUnsafe(buffer);\n    } else if (!(buffer instanceof Buffer)) {\n      buffer = Buffer.allocUnsafe(BUFFER_CHUNK);\n    }\n    this._buffer = buffer;\n    this._length = buffer.length;\n  }\n\n  /**\n   * @type {Buffer}\n   * @private\n   * @readonly\n   */\n  _buffer;\n  /**\n   * @type {Number}\n   * @private\n   * @readonly\n   */\n  _length;\n  /**\n   * @type {Number}\n   * @private\n   * @readonly\n   */\n  _index = 0;\n\n  /**\n   * Advance writer position, write padding if needed, auto-resize the buffer\n   * @param {Number} size - Bytes to write\n   * @return {Number} Position to read from\n   * @private\n   */\n  alloc(size) {\n    const from = this._index;\n    // advance cursor position\n    this._index += size;\n    // ensure sufficient buffer size\n    if (this._length < this._index) {\n      this.resize(this._index);\n    }\n    return from;\n  }\n\n  /**\n   * Increase size of the underlying buffer\n   * @param {Number} minRequiredSize - Minimum required buffer size\n   * @return {void}\n   * @private\n   */\n  resize(minRequiredSize) {\n    // calculate new length, align new buffer length by chunk size\n    const newLength = Math.ceil(minRequiredSize / BUFFER_CHUNK) * BUFFER_CHUNK;\n    // create new buffer and copy previous data\n    const newBuffer = Buffer.allocUnsafe(newLength);\n    this._buffer.copy(newBuffer, 0, 0, this._length);\n    // update references\n    this._buffer = newBuffer;\n    this._length = newLength;\n  }\n\n  /**\n   * Return XDR-serialized value\n   * @return {Buffer}\n   */\n  finalize() {\n    // clip underlying buffer to the actually written value\n    return this._buffer.subarray(0, this._index);\n  }\n\n  /**\n   * Return XDR-serialized value as byte array\n   * @return {Number[]}\n   */\n  toArray() {\n    return [...this.finalize()];\n  }\n\n  /**\n   * Write byte array from the buffer\n   * @param {Buffer|String} value - Bytes/string to write\n   * @param {Number} size - Size in bytes\n   * @return {XdrReader} - XdrReader wrapper on top of a subarray\n   */\n  write(value, size) {\n    if (typeof value === 'string') {\n      // serialize string directly to the output buffer\n      const offset = this.alloc(size);\n      this._buffer.write(value, offset, 'utf8');\n    } else {\n      // copy data to the output buffer\n      if (!(value instanceof Buffer)) {\n        value = Buffer.from(value);\n      }\n      const offset = this.alloc(size);\n      value.copy(this._buffer, offset, 0, size);\n    }\n\n    // add padding for 4-byte XDR alignment\n    const padding = 4 - (size % 4 || 4);\n    if (padding > 0) {\n      const offset = this.alloc(padding);\n      this._buffer.fill(0, offset, this._index);\n    }\n  }\n\n  /**\n   * Write i32 from buffer\n   * @param {Number} value - Value to serialize\n   * @return {void}\n   */\n  writeInt32BE(value) {\n    const offset = this.alloc(4);\n    this._buffer.writeInt32BE(value, offset);\n  }\n\n  /**\n   * Write u32 from buffer\n   * @param {Number} value - Value to serialize\n   * @return {void}\n   */\n  writeUInt32BE(value) {\n    const offset = this.alloc(4);\n    this._buffer.writeUInt32BE(value, offset);\n  }\n\n  /**\n   * Write i64 from buffer\n   * @param {BigInt} value - Value to serialize\n   * @return {void}\n   */\n  writeBigInt64BE(value) {\n    const offset = this.alloc(8);\n    this._buffer.writeBigInt64BE(value, offset);\n  }\n\n  /**\n   * Write u64 from buffer\n   * @param {BigInt} value - Value to serialize\n   * @return {void}\n   */\n  writeBigUInt64BE(value) {\n    const offset = this.alloc(8);\n    this._buffer.writeBigUInt64BE(value, offset);\n  }\n\n  /**\n   * Write float from buffer\n   * @param {Number} value - Value to serialize\n   * @return {void}\n   */\n  writeFloatBE(value) {\n    const offset = this.alloc(4);\n    this._buffer.writeFloatBE(value, offset);\n  }\n\n  /**\n   * Write double from buffer\n   * @param {Number} value - Value to serialize\n   * @return {void}\n   */\n  writeDoubleBE(value) {\n    const offset = this.alloc(8);\n    this._buffer.writeDoubleBE(value, offset);\n  }\n\n  static bufferChunkSize = BUFFER_CHUNK;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHN0ZWxsYXIvanMteGRyL3NyYy9zZXJpYWxpemF0aW9uL3hkci13cml0ZXIuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBLDJCQUEyQjs7QUFFM0I7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBLGFBQWEsZUFBZTtBQUM1QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsYUFBYSxRQUFRO0FBQ3JCLGNBQWMsUUFBUTtBQUN0QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGFBQWEsUUFBUTtBQUNyQixjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxhQUFhLGVBQWU7QUFDNUIsYUFBYSxRQUFRO0FBQ3JCLGNBQWMsV0FBVztBQUN6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGFBQWEsUUFBUTtBQUNyQixjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsYUFBYSxRQUFRO0FBQ3JCLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxhQUFhLFFBQVE7QUFDckIsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGFBQWEsUUFBUTtBQUNyQixjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsYUFBYSxRQUFRO0FBQ3JCLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxhQUFhLFFBQVE7QUFDckIsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxVU1VBUklPXFxEb2N1bWVudHNcXEdpdGh1YlxcR2FsYXh5S0otd2FsbGV0LS0tSGFja1xcd2ViXFxub2RlX21vZHVsZXNcXEBzdGVsbGFyXFxqcy14ZHJcXHNyY1xcc2VyaWFsaXphdGlvblxceGRyLXdyaXRlci5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBCVUZGRVJfQ0hVTksgPSA4MTkyOyAvLyA4IEtCIGNodW5rIHNpemUgaW5jcmVtZW50XG5cbi8qKlxuICogQGludGVybmFsXG4gKi9cbmV4cG9ydCBjbGFzcyBYZHJXcml0ZXIge1xuICAvKipcbiAgICogQHBhcmFtIHtCdWZmZXJ8TnVtYmVyfSBbYnVmZmVyXSAtIE9wdGlvbmFsIGRlc3RpbmF0aW9uIGJ1ZmZlclxuICAgKi9cbiAgY29uc3RydWN0b3IoYnVmZmVyKSB7XG4gICAgaWYgKHR5cGVvZiBidWZmZXIgPT09ICdudW1iZXInKSB7XG4gICAgICBidWZmZXIgPSBCdWZmZXIuYWxsb2NVbnNhZmUoYnVmZmVyKTtcbiAgICB9IGVsc2UgaWYgKCEoYnVmZmVyIGluc3RhbmNlb2YgQnVmZmVyKSkge1xuICAgICAgYnVmZmVyID0gQnVmZmVyLmFsbG9jVW5zYWZlKEJVRkZFUl9DSFVOSyk7XG4gICAgfVxuICAgIHRoaXMuX2J1ZmZlciA9IGJ1ZmZlcjtcbiAgICB0aGlzLl9sZW5ndGggPSBidWZmZXIubGVuZ3RoO1xuICB9XG5cbiAgLyoqXG4gICAqIEB0eXBlIHtCdWZmZXJ9XG4gICAqIEBwcml2YXRlXG4gICAqIEByZWFkb25seVxuICAgKi9cbiAgX2J1ZmZlcjtcbiAgLyoqXG4gICAqIEB0eXBlIHtOdW1iZXJ9XG4gICAqIEBwcml2YXRlXG4gICAqIEByZWFkb25seVxuICAgKi9cbiAgX2xlbmd0aDtcbiAgLyoqXG4gICAqIEB0eXBlIHtOdW1iZXJ9XG4gICAqIEBwcml2YXRlXG4gICAqIEByZWFkb25seVxuICAgKi9cbiAgX2luZGV4ID0gMDtcblxuICAvKipcbiAgICogQWR2YW5jZSB3cml0ZXIgcG9zaXRpb24sIHdyaXRlIHBhZGRpbmcgaWYgbmVlZGVkLCBhdXRvLXJlc2l6ZSB0aGUgYnVmZmVyXG4gICAqIEBwYXJhbSB7TnVtYmVyfSBzaXplIC0gQnl0ZXMgdG8gd3JpdGVcbiAgICogQHJldHVybiB7TnVtYmVyfSBQb3NpdGlvbiB0byByZWFkIGZyb21cbiAgICogQHByaXZhdGVcbiAgICovXG4gIGFsbG9jKHNpemUpIHtcbiAgICBjb25zdCBmcm9tID0gdGhpcy5faW5kZXg7XG4gICAgLy8gYWR2YW5jZSBjdXJzb3IgcG9zaXRpb25cbiAgICB0aGlzLl9pbmRleCArPSBzaXplO1xuICAgIC8vIGVuc3VyZSBzdWZmaWNpZW50IGJ1ZmZlciBzaXplXG4gICAgaWYgKHRoaXMuX2xlbmd0aCA8IHRoaXMuX2luZGV4KSB7XG4gICAgICB0aGlzLnJlc2l6ZSh0aGlzLl9pbmRleCk7XG4gICAgfVxuICAgIHJldHVybiBmcm9tO1xuICB9XG5cbiAgLyoqXG4gICAqIEluY3JlYXNlIHNpemUgb2YgdGhlIHVuZGVybHlpbmcgYnVmZmVyXG4gICAqIEBwYXJhbSB7TnVtYmVyfSBtaW5SZXF1aXJlZFNpemUgLSBNaW5pbXVtIHJlcXVpcmVkIGJ1ZmZlciBzaXplXG4gICAqIEByZXR1cm4ge3ZvaWR9XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICByZXNpemUobWluUmVxdWlyZWRTaXplKSB7XG4gICAgLy8gY2FsY3VsYXRlIG5ldyBsZW5ndGgsIGFsaWduIG5ldyBidWZmZXIgbGVuZ3RoIGJ5IGNodW5rIHNpemVcbiAgICBjb25zdCBuZXdMZW5ndGggPSBNYXRoLmNlaWwobWluUmVxdWlyZWRTaXplIC8gQlVGRkVSX0NIVU5LKSAqIEJVRkZFUl9DSFVOSztcbiAgICAvLyBjcmVhdGUgbmV3IGJ1ZmZlciBhbmQgY29weSBwcmV2aW91cyBkYXRhXG4gICAgY29uc3QgbmV3QnVmZmVyID0gQnVmZmVyLmFsbG9jVW5zYWZlKG5ld0xlbmd0aCk7XG4gICAgdGhpcy5fYnVmZmVyLmNvcHkobmV3QnVmZmVyLCAwLCAwLCB0aGlzLl9sZW5ndGgpO1xuICAgIC8vIHVwZGF0ZSByZWZlcmVuY2VzXG4gICAgdGhpcy5fYnVmZmVyID0gbmV3QnVmZmVyO1xuICAgIHRoaXMuX2xlbmd0aCA9IG5ld0xlbmd0aDtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm4gWERSLXNlcmlhbGl6ZWQgdmFsdWVcbiAgICogQHJldHVybiB7QnVmZmVyfVxuICAgKi9cbiAgZmluYWxpemUoKSB7XG4gICAgLy8gY2xpcCB1bmRlcmx5aW5nIGJ1ZmZlciB0byB0aGUgYWN0dWFsbHkgd3JpdHRlbiB2YWx1ZVxuICAgIHJldHVybiB0aGlzLl9idWZmZXIuc3ViYXJyYXkoMCwgdGhpcy5faW5kZXgpO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybiBYRFItc2VyaWFsaXplZCB2YWx1ZSBhcyBieXRlIGFycmF5XG4gICAqIEByZXR1cm4ge051bWJlcltdfVxuICAgKi9cbiAgdG9BcnJheSgpIHtcbiAgICByZXR1cm4gWy4uLnRoaXMuZmluYWxpemUoKV07XG4gIH1cblxuICAvKipcbiAgICogV3JpdGUgYnl0ZSBhcnJheSBmcm9tIHRoZSBidWZmZXJcbiAgICogQHBhcmFtIHtCdWZmZXJ8U3RyaW5nfSB2YWx1ZSAtIEJ5dGVzL3N0cmluZyB0byB3cml0ZVxuICAgKiBAcGFyYW0ge051bWJlcn0gc2l6ZSAtIFNpemUgaW4gYnl0ZXNcbiAgICogQHJldHVybiB7WGRyUmVhZGVyfSAtIFhkclJlYWRlciB3cmFwcGVyIG9uIHRvcCBvZiBhIHN1YmFycmF5XG4gICAqL1xuICB3cml0ZSh2YWx1ZSwgc2l6ZSkge1xuICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnKSB7XG4gICAgICAvLyBzZXJpYWxpemUgc3RyaW5nIGRpcmVjdGx5IHRvIHRoZSBvdXRwdXQgYnVmZmVyXG4gICAgICBjb25zdCBvZmZzZXQgPSB0aGlzLmFsbG9jKHNpemUpO1xuICAgICAgdGhpcy5fYnVmZmVyLndyaXRlKHZhbHVlLCBvZmZzZXQsICd1dGY4Jyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIGNvcHkgZGF0YSB0byB0aGUgb3V0cHV0IGJ1ZmZlclxuICAgICAgaWYgKCEodmFsdWUgaW5zdGFuY2VvZiBCdWZmZXIpKSB7XG4gICAgICAgIHZhbHVlID0gQnVmZmVyLmZyb20odmFsdWUpO1xuICAgICAgfVxuICAgICAgY29uc3Qgb2Zmc2V0ID0gdGhpcy5hbGxvYyhzaXplKTtcbiAgICAgIHZhbHVlLmNvcHkodGhpcy5fYnVmZmVyLCBvZmZzZXQsIDAsIHNpemUpO1xuICAgIH1cblxuICAgIC8vIGFkZCBwYWRkaW5nIGZvciA0LWJ5dGUgWERSIGFsaWdubWVudFxuICAgIGNvbnN0IHBhZGRpbmcgPSA0IC0gKHNpemUgJSA0IHx8IDQpO1xuICAgIGlmIChwYWRkaW5nID4gMCkge1xuICAgICAgY29uc3Qgb2Zmc2V0ID0gdGhpcy5hbGxvYyhwYWRkaW5nKTtcbiAgICAgIHRoaXMuX2J1ZmZlci5maWxsKDAsIG9mZnNldCwgdGhpcy5faW5kZXgpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBXcml0ZSBpMzIgZnJvbSBidWZmZXJcbiAgICogQHBhcmFtIHtOdW1iZXJ9IHZhbHVlIC0gVmFsdWUgdG8gc2VyaWFsaXplXG4gICAqIEByZXR1cm4ge3ZvaWR9XG4gICAqL1xuICB3cml0ZUludDMyQkUodmFsdWUpIHtcbiAgICBjb25zdCBvZmZzZXQgPSB0aGlzLmFsbG9jKDQpO1xuICAgIHRoaXMuX2J1ZmZlci53cml0ZUludDMyQkUodmFsdWUsIG9mZnNldCk7XG4gIH1cblxuICAvKipcbiAgICogV3JpdGUgdTMyIGZyb20gYnVmZmVyXG4gICAqIEBwYXJhbSB7TnVtYmVyfSB2YWx1ZSAtIFZhbHVlIHRvIHNlcmlhbGl6ZVxuICAgKiBAcmV0dXJuIHt2b2lkfVxuICAgKi9cbiAgd3JpdGVVSW50MzJCRSh2YWx1ZSkge1xuICAgIGNvbnN0IG9mZnNldCA9IHRoaXMuYWxsb2MoNCk7XG4gICAgdGhpcy5fYnVmZmVyLndyaXRlVUludDMyQkUodmFsdWUsIG9mZnNldCk7XG4gIH1cblxuICAvKipcbiAgICogV3JpdGUgaTY0IGZyb20gYnVmZmVyXG4gICAqIEBwYXJhbSB7QmlnSW50fSB2YWx1ZSAtIFZhbHVlIHRvIHNlcmlhbGl6ZVxuICAgKiBAcmV0dXJuIHt2b2lkfVxuICAgKi9cbiAgd3JpdGVCaWdJbnQ2NEJFKHZhbHVlKSB7XG4gICAgY29uc3Qgb2Zmc2V0ID0gdGhpcy5hbGxvYyg4KTtcbiAgICB0aGlzLl9idWZmZXIud3JpdGVCaWdJbnQ2NEJFKHZhbHVlLCBvZmZzZXQpO1xuICB9XG5cbiAgLyoqXG4gICAqIFdyaXRlIHU2NCBmcm9tIGJ1ZmZlclxuICAgKiBAcGFyYW0ge0JpZ0ludH0gdmFsdWUgLSBWYWx1ZSB0byBzZXJpYWxpemVcbiAgICogQHJldHVybiB7dm9pZH1cbiAgICovXG4gIHdyaXRlQmlnVUludDY0QkUodmFsdWUpIHtcbiAgICBjb25zdCBvZmZzZXQgPSB0aGlzLmFsbG9jKDgpO1xuICAgIHRoaXMuX2J1ZmZlci53cml0ZUJpZ1VJbnQ2NEJFKHZhbHVlLCBvZmZzZXQpO1xuICB9XG5cbiAgLyoqXG4gICAqIFdyaXRlIGZsb2F0IGZyb20gYnVmZmVyXG4gICAqIEBwYXJhbSB7TnVtYmVyfSB2YWx1ZSAtIFZhbHVlIHRvIHNlcmlhbGl6ZVxuICAgKiBAcmV0dXJuIHt2b2lkfVxuICAgKi9cbiAgd3JpdGVGbG9hdEJFKHZhbHVlKSB7XG4gICAgY29uc3Qgb2Zmc2V0ID0gdGhpcy5hbGxvYyg0KTtcbiAgICB0aGlzLl9idWZmZXIud3JpdGVGbG9hdEJFKHZhbHVlLCBvZmZzZXQpO1xuICB9XG5cbiAgLyoqXG4gICAqIFdyaXRlIGRvdWJsZSBmcm9tIGJ1ZmZlclxuICAgKiBAcGFyYW0ge051bWJlcn0gdmFsdWUgLSBWYWx1ZSB0byBzZXJpYWxpemVcbiAgICogQHJldHVybiB7dm9pZH1cbiAgICovXG4gIHdyaXRlRG91YmxlQkUodmFsdWUpIHtcbiAgICBjb25zdCBvZmZzZXQgPSB0aGlzLmFsbG9jKDgpO1xuICAgIHRoaXMuX2J1ZmZlci53cml0ZURvdWJsZUJFKHZhbHVlLCBvZmZzZXQpO1xuICB9XG5cbiAgc3RhdGljIGJ1ZmZlckNodW5rU2l6ZSA9IEJVRkZFUl9DSFVOSztcbn1cbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@stellar/js-xdr/src/serialization/xdr-writer.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@stellar/js-xdr/src/string.js":
/*!****************************************************!*\
  !*** ./node_modules/@stellar/js-xdr/src/string.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   String: () => (/* binding */ String)\n/* harmony export */ });\n/* harmony import */ var _unsigned_int__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./unsigned-int */ \"(ssr)/./node_modules/@stellar/js-xdr/src/unsigned-int.js\");\n/* harmony import */ var _xdr_type__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./xdr-type */ \"(ssr)/./node_modules/@stellar/js-xdr/src/xdr-type.js\");\n/* harmony import */ var _errors__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./errors */ \"(ssr)/./node_modules/@stellar/js-xdr/src/errors.js\");\n\n\n\n\nclass String extends _xdr_type__WEBPACK_IMPORTED_MODULE_1__.XdrCompositeType {\n  constructor(maxLength = _unsigned_int__WEBPACK_IMPORTED_MODULE_0__.UnsignedInt.MAX_VALUE) {\n    super();\n    this._maxLength = maxLength;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  read(reader) {\n    const size = _unsigned_int__WEBPACK_IMPORTED_MODULE_0__.UnsignedInt.read(reader);\n    if (size > this._maxLength)\n      throw new _errors__WEBPACK_IMPORTED_MODULE_2__.XdrReaderError(\n        `saw ${size} length String, max allowed is ${this._maxLength}`\n      );\n\n    return reader.read(size);\n  }\n\n  readString(reader) {\n    return this.read(reader).toString('utf8');\n  }\n\n  /**\n   * @inheritDoc\n   */\n  write(value, writer) {\n    // calculate string byte size before writing\n    const size =\n      typeof value === 'string'\n        ? Buffer.byteLength(value, 'utf8')\n        : value.length;\n    if (size > this._maxLength)\n      throw new _errors__WEBPACK_IMPORTED_MODULE_2__.XdrWriterError(\n        `got ${value.length} bytes, max allowed is ${this._maxLength}`\n      );\n    // write size info\n    _unsigned_int__WEBPACK_IMPORTED_MODULE_0__.UnsignedInt.write(size, writer);\n    writer.write(value, size);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  isValid(value) {\n    if (typeof value === 'string') {\n      return Buffer.byteLength(value, 'utf8') <= this._maxLength;\n    }\n    if (value instanceof Array || Buffer.isBuffer(value)) {\n      return value.length <= this._maxLength;\n    }\n    return false;\n  }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHN0ZWxsYXIvanMteGRyL3NyYy9zdHJpbmcuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUE2QztBQUNDO0FBQ1k7O0FBRW5ELHFCQUFxQix1REFBZ0I7QUFDNUMsMEJBQTBCLHNEQUFXO0FBQ3JDO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQixzREFBVztBQUM1QjtBQUNBLGdCQUFnQixtREFBYztBQUM5QixlQUFlLE1BQU0sZ0NBQWdDLGdCQUFnQjtBQUNyRTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQixtREFBYztBQUM5QixlQUFlLGNBQWMsd0JBQXdCLGdCQUFnQjtBQUNyRTtBQUNBO0FBQ0EsSUFBSSxzREFBVztBQUNmO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcVVNVQVJJT1xcRG9jdW1lbnRzXFxHaXRodWJcXEdhbGF4eUtKLXdhbGxldC0tLUhhY2tcXHdlYlxcbm9kZV9tb2R1bGVzXFxAc3RlbGxhclxcanMteGRyXFxzcmNcXHN0cmluZy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBVbnNpZ25lZEludCB9IGZyb20gJy4vdW5zaWduZWQtaW50JztcbmltcG9ydCB7IFhkckNvbXBvc2l0ZVR5cGUgfSBmcm9tICcuL3hkci10eXBlJztcbmltcG9ydCB7IFhkclJlYWRlckVycm9yLCBYZHJXcml0ZXJFcnJvciB9IGZyb20gJy4vZXJyb3JzJztcblxuZXhwb3J0IGNsYXNzIFN0cmluZyBleHRlbmRzIFhkckNvbXBvc2l0ZVR5cGUge1xuICBjb25zdHJ1Y3RvcihtYXhMZW5ndGggPSBVbnNpZ25lZEludC5NQVhfVkFMVUUpIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMuX21heExlbmd0aCA9IG1heExlbmd0aDtcbiAgfVxuXG4gIC8qKlxuICAgKiBAaW5oZXJpdERvY1xuICAgKi9cbiAgcmVhZChyZWFkZXIpIHtcbiAgICBjb25zdCBzaXplID0gVW5zaWduZWRJbnQucmVhZChyZWFkZXIpO1xuICAgIGlmIChzaXplID4gdGhpcy5fbWF4TGVuZ3RoKVxuICAgICAgdGhyb3cgbmV3IFhkclJlYWRlckVycm9yKFxuICAgICAgICBgc2F3ICR7c2l6ZX0gbGVuZ3RoIFN0cmluZywgbWF4IGFsbG93ZWQgaXMgJHt0aGlzLl9tYXhMZW5ndGh9YFxuICAgICAgKTtcblxuICAgIHJldHVybiByZWFkZXIucmVhZChzaXplKTtcbiAgfVxuXG4gIHJlYWRTdHJpbmcocmVhZGVyKSB7XG4gICAgcmV0dXJuIHRoaXMucmVhZChyZWFkZXIpLnRvU3RyaW5nKCd1dGY4Jyk7XG4gIH1cblxuICAvKipcbiAgICogQGluaGVyaXREb2NcbiAgICovXG4gIHdyaXRlKHZhbHVlLCB3cml0ZXIpIHtcbiAgICAvLyBjYWxjdWxhdGUgc3RyaW5nIGJ5dGUgc2l6ZSBiZWZvcmUgd3JpdGluZ1xuICAgIGNvbnN0IHNpemUgPVxuICAgICAgdHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJ1xuICAgICAgICA/IEJ1ZmZlci5ieXRlTGVuZ3RoKHZhbHVlLCAndXRmOCcpXG4gICAgICAgIDogdmFsdWUubGVuZ3RoO1xuICAgIGlmIChzaXplID4gdGhpcy5fbWF4TGVuZ3RoKVxuICAgICAgdGhyb3cgbmV3IFhkcldyaXRlckVycm9yKFxuICAgICAgICBgZ290ICR7dmFsdWUubGVuZ3RofSBieXRlcywgbWF4IGFsbG93ZWQgaXMgJHt0aGlzLl9tYXhMZW5ndGh9YFxuICAgICAgKTtcbiAgICAvLyB3cml0ZSBzaXplIGluZm9cbiAgICBVbnNpZ25lZEludC53cml0ZShzaXplLCB3cml0ZXIpO1xuICAgIHdyaXRlci53cml0ZSh2YWx1ZSwgc2l6ZSk7XG4gIH1cblxuICAvKipcbiAgICogQGluaGVyaXREb2NcbiAgICovXG4gIGlzVmFsaWQodmFsdWUpIHtcbiAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJykge1xuICAgICAgcmV0dXJuIEJ1ZmZlci5ieXRlTGVuZ3RoKHZhbHVlLCAndXRmOCcpIDw9IHRoaXMuX21heExlbmd0aDtcbiAgICB9XG4gICAgaWYgKHZhbHVlIGluc3RhbmNlb2YgQXJyYXkgfHwgQnVmZmVyLmlzQnVmZmVyKHZhbHVlKSkge1xuICAgICAgcmV0dXJuIHZhbHVlLmxlbmd0aCA8PSB0aGlzLl9tYXhMZW5ndGg7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxufVxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@stellar/js-xdr/src/string.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@stellar/js-xdr/src/struct.js":
/*!****************************************************!*\
  !*** ./node_modules/@stellar/js-xdr/src/struct.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Struct: () => (/* binding */ Struct)\n/* harmony export */ });\n/* harmony import */ var _reference__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./reference */ \"(ssr)/./node_modules/@stellar/js-xdr/src/reference.js\");\n/* harmony import */ var _xdr_type__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./xdr-type */ \"(ssr)/./node_modules/@stellar/js-xdr/src/xdr-type.js\");\n/* harmony import */ var _errors__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./errors */ \"(ssr)/./node_modules/@stellar/js-xdr/src/errors.js\");\n\n\n\n\nclass Struct extends _xdr_type__WEBPACK_IMPORTED_MODULE_1__.XdrCompositeType {\n  constructor(attributes) {\n    super();\n    this._attributes = attributes || {};\n  }\n\n  /**\n   * @inheritDoc\n   */\n  static read(reader) {\n    const attributes = {};\n    for (const [fieldName, type] of this._fields) {\n      attributes[fieldName] = type.read(reader);\n    }\n    return new this(attributes);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  static write(value, writer) {\n    if (!this.isValid(value)) {\n      throw new _errors__WEBPACK_IMPORTED_MODULE_2__.XdrWriterError(\n        `${value} has struct name ${value?.constructor?.structName}, not ${\n          this.structName\n        }: ${JSON.stringify(value)}`\n      );\n    }\n\n    for (const [fieldName, type] of this._fields) {\n      const attribute = value._attributes[fieldName];\n      type.write(attribute, writer);\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  static isValid(value) {\n    return (\n      value?.constructor?.structName === this.structName ||\n      (0,_xdr_type__WEBPACK_IMPORTED_MODULE_1__.isSerializableIsh)(value, this)\n    );\n  }\n\n  static create(context, name, fields) {\n    const ChildStruct = class extends Struct {};\n\n    ChildStruct.structName = name;\n\n    context.results[name] = ChildStruct;\n\n    const mappedFields = new Array(fields.length);\n    for (let i = 0; i < fields.length; i++) {\n      const fieldDescriptor = fields[i];\n      const fieldName = fieldDescriptor[0];\n      let field = fieldDescriptor[1];\n      if (field instanceof _reference__WEBPACK_IMPORTED_MODULE_0__.Reference) {\n        field = field.resolve(context);\n      }\n      mappedFields[i] = [fieldName, field];\n      // create accessors\n      ChildStruct.prototype[fieldName] = createAccessorMethod(fieldName);\n    }\n\n    ChildStruct._fields = mappedFields;\n\n    return ChildStruct;\n  }\n}\n\nfunction createAccessorMethod(name) {\n  return function readOrWriteAttribute(value) {\n    if (value !== undefined) {\n      this._attributes[name] = value;\n    }\n    return this._attributes[name];\n  };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHN0ZWxsYXIvanMteGRyL3NyYy9zdHJ1Y3QuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUF3QztBQUN5QjtBQUN2Qjs7QUFFbkMscUJBQXFCLHVEQUFnQjtBQUM1QztBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLG1EQUFjO0FBQzlCLFdBQVcsT0FBTyxrQkFBa0IsK0JBQStCO0FBQ25FO0FBQ0EsU0FBUyxJQUFJLHNCQUFzQjtBQUNuQztBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTSw0REFBaUI7QUFDdkI7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBOztBQUVBO0FBQ0Esb0JBQW9CLG1CQUFtQjtBQUN2QztBQUNBO0FBQ0E7QUFDQSwyQkFBMkIsaURBQVM7QUFDcEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXFVTVUFSSU9cXERvY3VtZW50c1xcR2l0aHViXFxHYWxheHlLSi13YWxsZXQtLS1IYWNrXFx3ZWJcXG5vZGVfbW9kdWxlc1xcQHN0ZWxsYXJcXGpzLXhkclxcc3JjXFxzdHJ1Y3QuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUmVmZXJlbmNlIH0gZnJvbSAnLi9yZWZlcmVuY2UnO1xuaW1wb3J0IHsgWGRyQ29tcG9zaXRlVHlwZSwgaXNTZXJpYWxpemFibGVJc2ggfSBmcm9tICcuL3hkci10eXBlJztcbmltcG9ydCB7IFhkcldyaXRlckVycm9yIH0gZnJvbSAnLi9lcnJvcnMnO1xuXG5leHBvcnQgY2xhc3MgU3RydWN0IGV4dGVuZHMgWGRyQ29tcG9zaXRlVHlwZSB7XG4gIGNvbnN0cnVjdG9yKGF0dHJpYnV0ZXMpIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMuX2F0dHJpYnV0ZXMgPSBhdHRyaWJ1dGVzIHx8IHt9O1xuICB9XG5cbiAgLyoqXG4gICAqIEBpbmhlcml0RG9jXG4gICAqL1xuICBzdGF0aWMgcmVhZChyZWFkZXIpIHtcbiAgICBjb25zdCBhdHRyaWJ1dGVzID0ge307XG4gICAgZm9yIChjb25zdCBbZmllbGROYW1lLCB0eXBlXSBvZiB0aGlzLl9maWVsZHMpIHtcbiAgICAgIGF0dHJpYnV0ZXNbZmllbGROYW1lXSA9IHR5cGUucmVhZChyZWFkZXIpO1xuICAgIH1cbiAgICByZXR1cm4gbmV3IHRoaXMoYXR0cmlidXRlcyk7XG4gIH1cblxuICAvKipcbiAgICogQGluaGVyaXREb2NcbiAgICovXG4gIHN0YXRpYyB3cml0ZSh2YWx1ZSwgd3JpdGVyKSB7XG4gICAgaWYgKCF0aGlzLmlzVmFsaWQodmFsdWUpKSB7XG4gICAgICB0aHJvdyBuZXcgWGRyV3JpdGVyRXJyb3IoXG4gICAgICAgIGAke3ZhbHVlfSBoYXMgc3RydWN0IG5hbWUgJHt2YWx1ZT8uY29uc3RydWN0b3I/LnN0cnVjdE5hbWV9LCBub3QgJHtcbiAgICAgICAgICB0aGlzLnN0cnVjdE5hbWVcbiAgICAgICAgfTogJHtKU09OLnN0cmluZ2lmeSh2YWx1ZSl9YFxuICAgICAgKTtcbiAgICB9XG5cbiAgICBmb3IgKGNvbnN0IFtmaWVsZE5hbWUsIHR5cGVdIG9mIHRoaXMuX2ZpZWxkcykge1xuICAgICAgY29uc3QgYXR0cmlidXRlID0gdmFsdWUuX2F0dHJpYnV0ZXNbZmllbGROYW1lXTtcbiAgICAgIHR5cGUud3JpdGUoYXR0cmlidXRlLCB3cml0ZXIpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBAaW5oZXJpdERvY1xuICAgKi9cbiAgc3RhdGljIGlzVmFsaWQodmFsdWUpIHtcbiAgICByZXR1cm4gKFxuICAgICAgdmFsdWU/LmNvbnN0cnVjdG9yPy5zdHJ1Y3ROYW1lID09PSB0aGlzLnN0cnVjdE5hbWUgfHxcbiAgICAgIGlzU2VyaWFsaXphYmxlSXNoKHZhbHVlLCB0aGlzKVxuICAgICk7XG4gIH1cblxuICBzdGF0aWMgY3JlYXRlKGNvbnRleHQsIG5hbWUsIGZpZWxkcykge1xuICAgIGNvbnN0IENoaWxkU3RydWN0ID0gY2xhc3MgZXh0ZW5kcyBTdHJ1Y3Qge307XG5cbiAgICBDaGlsZFN0cnVjdC5zdHJ1Y3ROYW1lID0gbmFtZTtcblxuICAgIGNvbnRleHQucmVzdWx0c1tuYW1lXSA9IENoaWxkU3RydWN0O1xuXG4gICAgY29uc3QgbWFwcGVkRmllbGRzID0gbmV3IEFycmF5KGZpZWxkcy5sZW5ndGgpO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZmllbGRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBjb25zdCBmaWVsZERlc2NyaXB0b3IgPSBmaWVsZHNbaV07XG4gICAgICBjb25zdCBmaWVsZE5hbWUgPSBmaWVsZERlc2NyaXB0b3JbMF07XG4gICAgICBsZXQgZmllbGQgPSBmaWVsZERlc2NyaXB0b3JbMV07XG4gICAgICBpZiAoZmllbGQgaW5zdGFuY2VvZiBSZWZlcmVuY2UpIHtcbiAgICAgICAgZmllbGQgPSBmaWVsZC5yZXNvbHZlKGNvbnRleHQpO1xuICAgICAgfVxuICAgICAgbWFwcGVkRmllbGRzW2ldID0gW2ZpZWxkTmFtZSwgZmllbGRdO1xuICAgICAgLy8gY3JlYXRlIGFjY2Vzc29yc1xuICAgICAgQ2hpbGRTdHJ1Y3QucHJvdG90eXBlW2ZpZWxkTmFtZV0gPSBjcmVhdGVBY2Nlc3Nvck1ldGhvZChmaWVsZE5hbWUpO1xuICAgIH1cblxuICAgIENoaWxkU3RydWN0Ll9maWVsZHMgPSBtYXBwZWRGaWVsZHM7XG5cbiAgICByZXR1cm4gQ2hpbGRTdHJ1Y3Q7XG4gIH1cbn1cblxuZnVuY3Rpb24gY3JlYXRlQWNjZXNzb3JNZXRob2QobmFtZSkge1xuICByZXR1cm4gZnVuY3Rpb24gcmVhZE9yV3JpdGVBdHRyaWJ1dGUodmFsdWUpIHtcbiAgICBpZiAodmFsdWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhpcy5fYXR0cmlidXRlc1tuYW1lXSA9IHZhbHVlO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5fYXR0cmlidXRlc1tuYW1lXTtcbiAgfTtcbn1cbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@stellar/js-xdr/src/struct.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@stellar/js-xdr/src/types.js":
/*!***************************************************!*\
  !*** ./node_modules/@stellar/js-xdr/src/types.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Array: () => (/* reexport safe */ _array__WEBPACK_IMPORTED_MODULE_12__.Array),\n/* harmony export */   Bool: () => (/* reexport safe */ _bool__WEBPACK_IMPORTED_MODULE_8__.Bool),\n/* harmony export */   Double: () => (/* reexport safe */ _double__WEBPACK_IMPORTED_MODULE_6__.Double),\n/* harmony export */   Enum: () => (/* reexport safe */ _enum__WEBPACK_IMPORTED_MODULE_16__.Enum),\n/* harmony export */   Float: () => (/* reexport safe */ _float__WEBPACK_IMPORTED_MODULE_5__.Float),\n/* harmony export */   Hyper: () => (/* reexport safe */ _hyper__WEBPACK_IMPORTED_MODULE_1__.Hyper),\n/* harmony export */   Int: () => (/* reexport safe */ _int__WEBPACK_IMPORTED_MODULE_0__.Int),\n/* harmony export */   LargeInt: () => (/* reexport safe */ _large_int__WEBPACK_IMPORTED_MODULE_4__.LargeInt),\n/* harmony export */   Opaque: () => (/* reexport safe */ _opaque__WEBPACK_IMPORTED_MODULE_10__.Opaque),\n/* harmony export */   Option: () => (/* reexport safe */ _option__WEBPACK_IMPORTED_MODULE_14__.Option),\n/* harmony export */   Quadruple: () => (/* reexport safe */ _quadruple__WEBPACK_IMPORTED_MODULE_7__.Quadruple),\n/* harmony export */   String: () => (/* reexport safe */ _string__WEBPACK_IMPORTED_MODULE_9__.String),\n/* harmony export */   Struct: () => (/* reexport safe */ _struct__WEBPACK_IMPORTED_MODULE_17__.Struct),\n/* harmony export */   Union: () => (/* reexport safe */ _union__WEBPACK_IMPORTED_MODULE_18__.Union),\n/* harmony export */   UnsignedHyper: () => (/* reexport safe */ _unsigned_hyper__WEBPACK_IMPORTED_MODULE_3__.UnsignedHyper),\n/* harmony export */   UnsignedInt: () => (/* reexport safe */ _unsigned_int__WEBPACK_IMPORTED_MODULE_2__.UnsignedInt),\n/* harmony export */   VarArray: () => (/* reexport safe */ _var_array__WEBPACK_IMPORTED_MODULE_13__.VarArray),\n/* harmony export */   VarOpaque: () => (/* reexport safe */ _var_opaque__WEBPACK_IMPORTED_MODULE_11__.VarOpaque),\n/* harmony export */   Void: () => (/* reexport safe */ _void__WEBPACK_IMPORTED_MODULE_15__.Void)\n/* harmony export */ });\n/* harmony import */ var _int__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./int */ \"(ssr)/./node_modules/@stellar/js-xdr/src/int.js\");\n/* harmony import */ var _hyper__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./hyper */ \"(ssr)/./node_modules/@stellar/js-xdr/src/hyper.js\");\n/* harmony import */ var _unsigned_int__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./unsigned-int */ \"(ssr)/./node_modules/@stellar/js-xdr/src/unsigned-int.js\");\n/* harmony import */ var _unsigned_hyper__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./unsigned-hyper */ \"(ssr)/./node_modules/@stellar/js-xdr/src/unsigned-hyper.js\");\n/* harmony import */ var _large_int__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./large-int */ \"(ssr)/./node_modules/@stellar/js-xdr/src/large-int.js\");\n/* harmony import */ var _float__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./float */ \"(ssr)/./node_modules/@stellar/js-xdr/src/float.js\");\n/* harmony import */ var _double__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./double */ \"(ssr)/./node_modules/@stellar/js-xdr/src/double.js\");\n/* harmony import */ var _quadruple__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./quadruple */ \"(ssr)/./node_modules/@stellar/js-xdr/src/quadruple.js\");\n/* harmony import */ var _bool__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./bool */ \"(ssr)/./node_modules/@stellar/js-xdr/src/bool.js\");\n/* harmony import */ var _string__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./string */ \"(ssr)/./node_modules/@stellar/js-xdr/src/string.js\");\n/* harmony import */ var _opaque__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./opaque */ \"(ssr)/./node_modules/@stellar/js-xdr/src/opaque.js\");\n/* harmony import */ var _var_opaque__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./var-opaque */ \"(ssr)/./node_modules/@stellar/js-xdr/src/var-opaque.js\");\n/* harmony import */ var _array__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./array */ \"(ssr)/./node_modules/@stellar/js-xdr/src/array.js\");\n/* harmony import */ var _var_array__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./var-array */ \"(ssr)/./node_modules/@stellar/js-xdr/src/var-array.js\");\n/* harmony import */ var _option__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./option */ \"(ssr)/./node_modules/@stellar/js-xdr/src/option.js\");\n/* harmony import */ var _void__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./void */ \"(ssr)/./node_modules/@stellar/js-xdr/src/void.js\");\n/* harmony import */ var _enum__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./enum */ \"(ssr)/./node_modules/@stellar/js-xdr/src/enum.js\");\n/* harmony import */ var _struct__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./struct */ \"(ssr)/./node_modules/@stellar/js-xdr/src/struct.js\");\n/* harmony import */ var _union__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./union */ \"(ssr)/./node_modules/@stellar/js-xdr/src/union.js\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHN0ZWxsYXIvanMteGRyL3NyYy90eXBlcy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFzQjtBQUNFO0FBQ087QUFDRTtBQUNMOztBQUVKO0FBQ0M7QUFDRzs7QUFFTDs7QUFFRTs7QUFFQTtBQUNJOztBQUVMO0FBQ0k7O0FBRUg7QUFDRjs7QUFFQTtBQUNFO0FBQ0QiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcVVNVQVJJT1xcRG9jdW1lbnRzXFxHaXRodWJcXEdhbGF4eUtKLXdhbGxldC0tLUhhY2tcXHdlYlxcbm9kZV9tb2R1bGVzXFxAc3RlbGxhclxcanMteGRyXFxzcmNcXHR5cGVzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCAqIGZyb20gJy4vaW50JztcbmV4cG9ydCAqIGZyb20gJy4vaHlwZXInO1xuZXhwb3J0ICogZnJvbSAnLi91bnNpZ25lZC1pbnQnO1xuZXhwb3J0ICogZnJvbSAnLi91bnNpZ25lZC1oeXBlcic7XG5leHBvcnQgKiBmcm9tICcuL2xhcmdlLWludCc7XG5cbmV4cG9ydCAqIGZyb20gJy4vZmxvYXQnO1xuZXhwb3J0ICogZnJvbSAnLi9kb3VibGUnO1xuZXhwb3J0ICogZnJvbSAnLi9xdWFkcnVwbGUnO1xuXG5leHBvcnQgKiBmcm9tICcuL2Jvb2wnO1xuXG5leHBvcnQgKiBmcm9tICcuL3N0cmluZyc7XG5cbmV4cG9ydCAqIGZyb20gJy4vb3BhcXVlJztcbmV4cG9ydCAqIGZyb20gJy4vdmFyLW9wYXF1ZSc7XG5cbmV4cG9ydCAqIGZyb20gJy4vYXJyYXknO1xuZXhwb3J0ICogZnJvbSAnLi92YXItYXJyYXknO1xuXG5leHBvcnQgKiBmcm9tICcuL29wdGlvbic7XG5leHBvcnQgKiBmcm9tICcuL3ZvaWQnO1xuXG5leHBvcnQgKiBmcm9tICcuL2VudW0nO1xuZXhwb3J0ICogZnJvbSAnLi9zdHJ1Y3QnO1xuZXhwb3J0ICogZnJvbSAnLi91bmlvbic7XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@stellar/js-xdr/src/types.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@stellar/js-xdr/src/union.js":
/*!***************************************************!*\
  !*** ./node_modules/@stellar/js-xdr/src/union.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Union: () => (/* binding */ Union)\n/* harmony export */ });\n/* harmony import */ var _void__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./void */ \"(ssr)/./node_modules/@stellar/js-xdr/src/void.js\");\n/* harmony import */ var _reference__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./reference */ \"(ssr)/./node_modules/@stellar/js-xdr/src/reference.js\");\n/* harmony import */ var _xdr_type__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./xdr-type */ \"(ssr)/./node_modules/@stellar/js-xdr/src/xdr-type.js\");\n/* harmony import */ var _errors__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./errors */ \"(ssr)/./node_modules/@stellar/js-xdr/src/errors.js\");\n\n\n\n\n\nclass Union extends _xdr_type__WEBPACK_IMPORTED_MODULE_2__.XdrCompositeType {\n  constructor(aSwitch, value) {\n    super();\n    this.set(aSwitch, value);\n  }\n\n  set(aSwitch, value) {\n    if (typeof aSwitch === 'string') {\n      aSwitch = this.constructor._switchOn.fromName(aSwitch);\n    }\n\n    this._switch = aSwitch;\n    const arm = this.constructor.armForSwitch(this._switch);\n    this._arm = arm;\n    this._armType = arm === _void__WEBPACK_IMPORTED_MODULE_0__.Void ? _void__WEBPACK_IMPORTED_MODULE_0__.Void : this.constructor._arms[arm];\n    this._value = value;\n  }\n\n  get(armName = this._arm) {\n    if (this._arm !== _void__WEBPACK_IMPORTED_MODULE_0__.Void && this._arm !== armName)\n      throw new TypeError(`${armName} not set`);\n    return this._value;\n  }\n\n  switch() {\n    return this._switch;\n  }\n\n  arm() {\n    return this._arm;\n  }\n\n  armType() {\n    return this._armType;\n  }\n\n  value() {\n    return this._value;\n  }\n\n  static armForSwitch(aSwitch) {\n    const member = this._switches.get(aSwitch);\n    if (member !== undefined) {\n      return member;\n    }\n    if (this._defaultArm) {\n      return this._defaultArm;\n    }\n    throw new TypeError(`Bad union switch: ${aSwitch}`);\n  }\n\n  static armTypeForArm(arm) {\n    if (arm === _void__WEBPACK_IMPORTED_MODULE_0__.Void) {\n      return _void__WEBPACK_IMPORTED_MODULE_0__.Void;\n    }\n    return this._arms[arm];\n  }\n\n  /**\n   * @inheritDoc\n   */\n  static read(reader) {\n    const aSwitch = this._switchOn.read(reader);\n    const arm = this.armForSwitch(aSwitch);\n    const armType = arm === _void__WEBPACK_IMPORTED_MODULE_0__.Void ? _void__WEBPACK_IMPORTED_MODULE_0__.Void : this._arms[arm];\n    let value;\n    if (armType !== undefined) {\n      value = armType.read(reader);\n    } else {\n      value = arm.read(reader);\n    }\n    return new this(aSwitch, value);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  static write(value, writer) {\n    if (!this.isValid(value)) {\n      throw new _errors__WEBPACK_IMPORTED_MODULE_3__.XdrWriterError(\n        `${value} has union name ${value?.unionName}, not ${\n          this.unionName\n        }: ${JSON.stringify(value)}`\n      );\n    }\n\n    this._switchOn.write(value.switch(), writer);\n    value.armType().write(value.value(), writer);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  static isValid(value) {\n    return (\n      value?.constructor?.unionName === this.unionName ||\n      (0,_xdr_type__WEBPACK_IMPORTED_MODULE_2__.isSerializableIsh)(value, this)\n    );\n  }\n\n  static create(context, name, config) {\n    const ChildUnion = class extends Union {};\n\n    ChildUnion.unionName = name;\n    context.results[name] = ChildUnion;\n\n    if (config.switchOn instanceof _reference__WEBPACK_IMPORTED_MODULE_1__.Reference) {\n      ChildUnion._switchOn = config.switchOn.resolve(context);\n    } else {\n      ChildUnion._switchOn = config.switchOn;\n    }\n\n    ChildUnion._switches = new Map();\n    ChildUnion._arms = {};\n\n    // resolve default arm\n    let defaultArm = config.defaultArm;\n    if (defaultArm instanceof _reference__WEBPACK_IMPORTED_MODULE_1__.Reference) {\n      defaultArm = defaultArm.resolve(context);\n    }\n\n    ChildUnion._defaultArm = defaultArm;\n\n    for (const [aSwitch, armName] of config.switches) {\n      const key =\n        typeof aSwitch === 'string'\n          ? ChildUnion._switchOn.fromName(aSwitch)\n          : aSwitch;\n\n      ChildUnion._switches.set(key, armName);\n    }\n\n    // add enum-based helpers\n    // NOTE: we don't have good notation for \"is a subclass of XDR.Enum\",\n    //  and so we use the following check (does _switchOn have a `values`\n    //  attribute) to approximate the intent.\n    if (ChildUnion._switchOn.values !== undefined) {\n      for (const aSwitch of ChildUnion._switchOn.values()) {\n        // Add enum-based constructors\n        ChildUnion[aSwitch.name] = function ctr(value) {\n          return new ChildUnion(aSwitch, value);\n        };\n\n        // Add enum-based \"set\" helpers\n        ChildUnion.prototype[aSwitch.name] = function set(value) {\n          return this.set(aSwitch, value);\n        };\n      }\n    }\n\n    if (config.arms) {\n      for (const [armsName, value] of Object.entries(config.arms)) {\n        ChildUnion._arms[armsName] =\n          value instanceof _reference__WEBPACK_IMPORTED_MODULE_1__.Reference ? value.resolve(context) : value;\n        // Add arm accessor helpers\n        if (value !== _void__WEBPACK_IMPORTED_MODULE_0__.Void) {\n          ChildUnion.prototype[armsName] = function get() {\n            return this.get(armsName);\n          };\n        }\n      }\n    }\n\n    return ChildUnion;\n  }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHN0ZWxsYXIvanMteGRyL3NyYy91bmlvbi5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUE4QjtBQUNVO0FBQ3lCO0FBQ3ZCOztBQUVuQyxvQkFBb0IsdURBQWdCO0FBQzNDO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLDRCQUE0Qix1Q0FBSSxHQUFHLHVDQUFJO0FBQ3ZDO0FBQ0E7O0FBRUE7QUFDQSxzQkFBc0IsdUNBQUk7QUFDMUIsNkJBQTZCLFNBQVM7QUFDdEM7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZDQUE2QyxRQUFRO0FBQ3JEOztBQUVBO0FBQ0EsZ0JBQWdCLHVDQUFJO0FBQ3BCLGFBQWEsdUNBQUk7QUFDakI7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRCQUE0Qix1Q0FBSSxHQUFHLHVDQUFJO0FBQ3ZDO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLG1EQUFjO0FBQzlCLFdBQVcsT0FBTyxpQkFBaUIsaUJBQWlCO0FBQ3BEO0FBQ0EsU0FBUyxJQUFJLHNCQUFzQjtBQUNuQztBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNLDREQUFpQjtBQUN2QjtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQSxtQ0FBbUMsaURBQVM7QUFDNUM7QUFDQSxNQUFNO0FBQ047QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSw4QkFBOEIsaURBQVM7QUFDdkM7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLDJCQUEyQixpREFBUztBQUNwQztBQUNBLHNCQUFzQix1Q0FBSTtBQUMxQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXFVTVUFSSU9cXERvY3VtZW50c1xcR2l0aHViXFxHYWxheHlLSi13YWxsZXQtLS1IYWNrXFx3ZWJcXG5vZGVfbW9kdWxlc1xcQHN0ZWxsYXJcXGpzLXhkclxcc3JjXFx1bmlvbi5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBWb2lkIH0gZnJvbSAnLi92b2lkJztcbmltcG9ydCB7IFJlZmVyZW5jZSB9IGZyb20gJy4vcmVmZXJlbmNlJztcbmltcG9ydCB7IFhkckNvbXBvc2l0ZVR5cGUsIGlzU2VyaWFsaXphYmxlSXNoIH0gZnJvbSAnLi94ZHItdHlwZSc7XG5pbXBvcnQgeyBYZHJXcml0ZXJFcnJvciB9IGZyb20gJy4vZXJyb3JzJztcblxuZXhwb3J0IGNsYXNzIFVuaW9uIGV4dGVuZHMgWGRyQ29tcG9zaXRlVHlwZSB7XG4gIGNvbnN0cnVjdG9yKGFTd2l0Y2gsIHZhbHVlKSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLnNldChhU3dpdGNoLCB2YWx1ZSk7XG4gIH1cblxuICBzZXQoYVN3aXRjaCwgdmFsdWUpIHtcbiAgICBpZiAodHlwZW9mIGFTd2l0Y2ggPT09ICdzdHJpbmcnKSB7XG4gICAgICBhU3dpdGNoID0gdGhpcy5jb25zdHJ1Y3Rvci5fc3dpdGNoT24uZnJvbU5hbWUoYVN3aXRjaCk7XG4gICAgfVxuXG4gICAgdGhpcy5fc3dpdGNoID0gYVN3aXRjaDtcbiAgICBjb25zdCBhcm0gPSB0aGlzLmNvbnN0cnVjdG9yLmFybUZvclN3aXRjaCh0aGlzLl9zd2l0Y2gpO1xuICAgIHRoaXMuX2FybSA9IGFybTtcbiAgICB0aGlzLl9hcm1UeXBlID0gYXJtID09PSBWb2lkID8gVm9pZCA6IHRoaXMuY29uc3RydWN0b3IuX2FybXNbYXJtXTtcbiAgICB0aGlzLl92YWx1ZSA9IHZhbHVlO1xuICB9XG5cbiAgZ2V0KGFybU5hbWUgPSB0aGlzLl9hcm0pIHtcbiAgICBpZiAodGhpcy5fYXJtICE9PSBWb2lkICYmIHRoaXMuX2FybSAhPT0gYXJtTmFtZSlcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoYCR7YXJtTmFtZX0gbm90IHNldGApO1xuICAgIHJldHVybiB0aGlzLl92YWx1ZTtcbiAgfVxuXG4gIHN3aXRjaCgpIHtcbiAgICByZXR1cm4gdGhpcy5fc3dpdGNoO1xuICB9XG5cbiAgYXJtKCkge1xuICAgIHJldHVybiB0aGlzLl9hcm07XG4gIH1cblxuICBhcm1UeXBlKCkge1xuICAgIHJldHVybiB0aGlzLl9hcm1UeXBlO1xuICB9XG5cbiAgdmFsdWUoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3ZhbHVlO1xuICB9XG5cbiAgc3RhdGljIGFybUZvclN3aXRjaChhU3dpdGNoKSB7XG4gICAgY29uc3QgbWVtYmVyID0gdGhpcy5fc3dpdGNoZXMuZ2V0KGFTd2l0Y2gpO1xuICAgIGlmIChtZW1iZXIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIG1lbWJlcjtcbiAgICB9XG4gICAgaWYgKHRoaXMuX2RlZmF1bHRBcm0pIHtcbiAgICAgIHJldHVybiB0aGlzLl9kZWZhdWx0QXJtO1xuICAgIH1cbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKGBCYWQgdW5pb24gc3dpdGNoOiAke2FTd2l0Y2h9YCk7XG4gIH1cblxuICBzdGF0aWMgYXJtVHlwZUZvckFybShhcm0pIHtcbiAgICBpZiAoYXJtID09PSBWb2lkKSB7XG4gICAgICByZXR1cm4gVm9pZDtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuX2FybXNbYXJtXTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAaW5oZXJpdERvY1xuICAgKi9cbiAgc3RhdGljIHJlYWQocmVhZGVyKSB7XG4gICAgY29uc3QgYVN3aXRjaCA9IHRoaXMuX3N3aXRjaE9uLnJlYWQocmVhZGVyKTtcbiAgICBjb25zdCBhcm0gPSB0aGlzLmFybUZvclN3aXRjaChhU3dpdGNoKTtcbiAgICBjb25zdCBhcm1UeXBlID0gYXJtID09PSBWb2lkID8gVm9pZCA6IHRoaXMuX2FybXNbYXJtXTtcbiAgICBsZXQgdmFsdWU7XG4gICAgaWYgKGFybVR5cGUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgdmFsdWUgPSBhcm1UeXBlLnJlYWQocmVhZGVyKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFsdWUgPSBhcm0ucmVhZChyZWFkZXIpO1xuICAgIH1cbiAgICByZXR1cm4gbmV3IHRoaXMoYVN3aXRjaCwgdmFsdWUpO1xuICB9XG5cbiAgLyoqXG4gICAqIEBpbmhlcml0RG9jXG4gICAqL1xuICBzdGF0aWMgd3JpdGUodmFsdWUsIHdyaXRlcikge1xuICAgIGlmICghdGhpcy5pc1ZhbGlkKHZhbHVlKSkge1xuICAgICAgdGhyb3cgbmV3IFhkcldyaXRlckVycm9yKFxuICAgICAgICBgJHt2YWx1ZX0gaGFzIHVuaW9uIG5hbWUgJHt2YWx1ZT8udW5pb25OYW1lfSwgbm90ICR7XG4gICAgICAgICAgdGhpcy51bmlvbk5hbWVcbiAgICAgICAgfTogJHtKU09OLnN0cmluZ2lmeSh2YWx1ZSl9YFxuICAgICAgKTtcbiAgICB9XG5cbiAgICB0aGlzLl9zd2l0Y2hPbi53cml0ZSh2YWx1ZS5zd2l0Y2goKSwgd3JpdGVyKTtcbiAgICB2YWx1ZS5hcm1UeXBlKCkud3JpdGUodmFsdWUudmFsdWUoKSwgd3JpdGVyKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAaW5oZXJpdERvY1xuICAgKi9cbiAgc3RhdGljIGlzVmFsaWQodmFsdWUpIHtcbiAgICByZXR1cm4gKFxuICAgICAgdmFsdWU/LmNvbnN0cnVjdG9yPy51bmlvbk5hbWUgPT09IHRoaXMudW5pb25OYW1lIHx8XG4gICAgICBpc1NlcmlhbGl6YWJsZUlzaCh2YWx1ZSwgdGhpcylcbiAgICApO1xuICB9XG5cbiAgc3RhdGljIGNyZWF0ZShjb250ZXh0LCBuYW1lLCBjb25maWcpIHtcbiAgICBjb25zdCBDaGlsZFVuaW9uID0gY2xhc3MgZXh0ZW5kcyBVbmlvbiB7fTtcblxuICAgIENoaWxkVW5pb24udW5pb25OYW1lID0gbmFtZTtcbiAgICBjb250ZXh0LnJlc3VsdHNbbmFtZV0gPSBDaGlsZFVuaW9uO1xuXG4gICAgaWYgKGNvbmZpZy5zd2l0Y2hPbiBpbnN0YW5jZW9mIFJlZmVyZW5jZSkge1xuICAgICAgQ2hpbGRVbmlvbi5fc3dpdGNoT24gPSBjb25maWcuc3dpdGNoT24ucmVzb2x2ZShjb250ZXh0KTtcbiAgICB9IGVsc2Uge1xuICAgICAgQ2hpbGRVbmlvbi5fc3dpdGNoT24gPSBjb25maWcuc3dpdGNoT247XG4gICAgfVxuXG4gICAgQ2hpbGRVbmlvbi5fc3dpdGNoZXMgPSBuZXcgTWFwKCk7XG4gICAgQ2hpbGRVbmlvbi5fYXJtcyA9IHt9O1xuXG4gICAgLy8gcmVzb2x2ZSBkZWZhdWx0IGFybVxuICAgIGxldCBkZWZhdWx0QXJtID0gY29uZmlnLmRlZmF1bHRBcm07XG4gICAgaWYgKGRlZmF1bHRBcm0gaW5zdGFuY2VvZiBSZWZlcmVuY2UpIHtcbiAgICAgIGRlZmF1bHRBcm0gPSBkZWZhdWx0QXJtLnJlc29sdmUoY29udGV4dCk7XG4gICAgfVxuXG4gICAgQ2hpbGRVbmlvbi5fZGVmYXVsdEFybSA9IGRlZmF1bHRBcm07XG5cbiAgICBmb3IgKGNvbnN0IFthU3dpdGNoLCBhcm1OYW1lXSBvZiBjb25maWcuc3dpdGNoZXMpIHtcbiAgICAgIGNvbnN0IGtleSA9XG4gICAgICAgIHR5cGVvZiBhU3dpdGNoID09PSAnc3RyaW5nJ1xuICAgICAgICAgID8gQ2hpbGRVbmlvbi5fc3dpdGNoT24uZnJvbU5hbWUoYVN3aXRjaClcbiAgICAgICAgICA6IGFTd2l0Y2g7XG5cbiAgICAgIENoaWxkVW5pb24uX3N3aXRjaGVzLnNldChrZXksIGFybU5hbWUpO1xuICAgIH1cblxuICAgIC8vIGFkZCBlbnVtLWJhc2VkIGhlbHBlcnNcbiAgICAvLyBOT1RFOiB3ZSBkb24ndCBoYXZlIGdvb2Qgbm90YXRpb24gZm9yIFwiaXMgYSBzdWJjbGFzcyBvZiBYRFIuRW51bVwiLFxuICAgIC8vICBhbmQgc28gd2UgdXNlIHRoZSBmb2xsb3dpbmcgY2hlY2sgKGRvZXMgX3N3aXRjaE9uIGhhdmUgYSBgdmFsdWVzYFxuICAgIC8vICBhdHRyaWJ1dGUpIHRvIGFwcHJveGltYXRlIHRoZSBpbnRlbnQuXG4gICAgaWYgKENoaWxkVW5pb24uX3N3aXRjaE9uLnZhbHVlcyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBmb3IgKGNvbnN0IGFTd2l0Y2ggb2YgQ2hpbGRVbmlvbi5fc3dpdGNoT24udmFsdWVzKCkpIHtcbiAgICAgICAgLy8gQWRkIGVudW0tYmFzZWQgY29uc3RydWN0b3JzXG4gICAgICAgIENoaWxkVW5pb25bYVN3aXRjaC5uYW1lXSA9IGZ1bmN0aW9uIGN0cih2YWx1ZSkge1xuICAgICAgICAgIHJldHVybiBuZXcgQ2hpbGRVbmlvbihhU3dpdGNoLCB2YWx1ZSk7XG4gICAgICAgIH07XG5cbiAgICAgICAgLy8gQWRkIGVudW0tYmFzZWQgXCJzZXRcIiBoZWxwZXJzXG4gICAgICAgIENoaWxkVW5pb24ucHJvdG90eXBlW2FTd2l0Y2gubmFtZV0gPSBmdW5jdGlvbiBzZXQodmFsdWUpIHtcbiAgICAgICAgICByZXR1cm4gdGhpcy5zZXQoYVN3aXRjaCwgdmFsdWUpO1xuICAgICAgICB9O1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChjb25maWcuYXJtcykge1xuICAgICAgZm9yIChjb25zdCBbYXJtc05hbWUsIHZhbHVlXSBvZiBPYmplY3QuZW50cmllcyhjb25maWcuYXJtcykpIHtcbiAgICAgICAgQ2hpbGRVbmlvbi5fYXJtc1thcm1zTmFtZV0gPVxuICAgICAgICAgIHZhbHVlIGluc3RhbmNlb2YgUmVmZXJlbmNlID8gdmFsdWUucmVzb2x2ZShjb250ZXh0KSA6IHZhbHVlO1xuICAgICAgICAvLyBBZGQgYXJtIGFjY2Vzc29yIGhlbHBlcnNcbiAgICAgICAgaWYgKHZhbHVlICE9PSBWb2lkKSB7XG4gICAgICAgICAgQ2hpbGRVbmlvbi5wcm90b3R5cGVbYXJtc05hbWVdID0gZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0KGFybXNOYW1lKTtcbiAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIENoaWxkVW5pb247XG4gIH1cbn1cbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@stellar/js-xdr/src/union.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@stellar/js-xdr/src/unsigned-hyper.js":
/*!************************************************************!*\
  !*** ./node_modules/@stellar/js-xdr/src/unsigned-hyper.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   UnsignedHyper: () => (/* binding */ UnsignedHyper)\n/* harmony export */ });\n/* harmony import */ var _large_int__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./large-int */ \"(ssr)/./node_modules/@stellar/js-xdr/src/large-int.js\");\n\n\nclass UnsignedHyper extends _large_int__WEBPACK_IMPORTED_MODULE_0__.LargeInt {\n  /**\n   * @param {Array<Number|BigInt|String>} parts - Slices to encode\n   */\n  constructor(...args) {\n    super(args);\n  }\n\n  get low() {\n    return Number(this._value & 0xffffffffn) << 0;\n  }\n\n  get high() {\n    return Number(this._value >> 32n) >> 0;\n  }\n\n  get size() {\n    return 64;\n  }\n\n  get unsigned() {\n    return true;\n  }\n\n  /**\n   * Create UnsignedHyper instance from two [high][low] i32 values\n   * @param {Number} low - Low part of u64 number\n   * @param {Number} high - High part of u64 number\n   * @return {UnsignedHyper}\n   */\n  static fromBits(low, high) {\n    return new this(low, high);\n  }\n}\n\nUnsignedHyper.defineIntBoundaries();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHN0ZWxsYXIvanMteGRyL3NyYy91bnNpZ25lZC1oeXBlci5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUF1Qzs7QUFFaEMsNEJBQTRCLGdEQUFRO0FBQzNDO0FBQ0EsYUFBYSw2QkFBNkI7QUFDMUM7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxhQUFhLFFBQVE7QUFDckIsYUFBYSxRQUFRO0FBQ3JCLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXFVTVUFSSU9cXERvY3VtZW50c1xcR2l0aHViXFxHYWxheHlLSi13YWxsZXQtLS1IYWNrXFx3ZWJcXG5vZGVfbW9kdWxlc1xcQHN0ZWxsYXJcXGpzLXhkclxcc3JjXFx1bnNpZ25lZC1oeXBlci5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBMYXJnZUludCB9IGZyb20gJy4vbGFyZ2UtaW50JztcblxuZXhwb3J0IGNsYXNzIFVuc2lnbmVkSHlwZXIgZXh0ZW5kcyBMYXJnZUludCB7XG4gIC8qKlxuICAgKiBAcGFyYW0ge0FycmF5PE51bWJlcnxCaWdJbnR8U3RyaW5nPn0gcGFydHMgLSBTbGljZXMgdG8gZW5jb2RlXG4gICAqL1xuICBjb25zdHJ1Y3RvciguLi5hcmdzKSB7XG4gICAgc3VwZXIoYXJncyk7XG4gIH1cblxuICBnZXQgbG93KCkge1xuICAgIHJldHVybiBOdW1iZXIodGhpcy5fdmFsdWUgJiAweGZmZmZmZmZmbikgPDwgMDtcbiAgfVxuXG4gIGdldCBoaWdoKCkge1xuICAgIHJldHVybiBOdW1iZXIodGhpcy5fdmFsdWUgPj4gMzJuKSA+PiAwO1xuICB9XG5cbiAgZ2V0IHNpemUoKSB7XG4gICAgcmV0dXJuIDY0O1xuICB9XG5cbiAgZ2V0IHVuc2lnbmVkKCkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZSBVbnNpZ25lZEh5cGVyIGluc3RhbmNlIGZyb20gdHdvIFtoaWdoXVtsb3ddIGkzMiB2YWx1ZXNcbiAgICogQHBhcmFtIHtOdW1iZXJ9IGxvdyAtIExvdyBwYXJ0IG9mIHU2NCBudW1iZXJcbiAgICogQHBhcmFtIHtOdW1iZXJ9IGhpZ2ggLSBIaWdoIHBhcnQgb2YgdTY0IG51bWJlclxuICAgKiBAcmV0dXJuIHtVbnNpZ25lZEh5cGVyfVxuICAgKi9cbiAgc3RhdGljIGZyb21CaXRzKGxvdywgaGlnaCkge1xuICAgIHJldHVybiBuZXcgdGhpcyhsb3csIGhpZ2gpO1xuICB9XG59XG5cblVuc2lnbmVkSHlwZXIuZGVmaW5lSW50Qm91bmRhcmllcygpO1xuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@stellar/js-xdr/src/unsigned-hyper.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@stellar/js-xdr/src/unsigned-int.js":
/*!**********************************************************!*\
  !*** ./node_modules/@stellar/js-xdr/src/unsigned-int.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   UnsignedInt: () => (/* binding */ UnsignedInt)\n/* harmony export */ });\n/* harmony import */ var _xdr_type__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./xdr-type */ \"(ssr)/./node_modules/@stellar/js-xdr/src/xdr-type.js\");\n/* harmony import */ var _errors__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./errors */ \"(ssr)/./node_modules/@stellar/js-xdr/src/errors.js\");\n\n\n\nconst MAX_VALUE = 4294967295;\nconst MIN_VALUE = 0;\n\nclass UnsignedInt extends _xdr_type__WEBPACK_IMPORTED_MODULE_0__.XdrPrimitiveType {\n  /**\n   * @inheritDoc\n   */\n  static read(reader) {\n    return reader.readUInt32BE();\n  }\n\n  /**\n   * @inheritDoc\n   */\n  static write(value, writer) {\n    if (\n      typeof value !== 'number' ||\n      !(value >= MIN_VALUE && value <= MAX_VALUE) ||\n      value % 1 !== 0\n    )\n      throw new _errors__WEBPACK_IMPORTED_MODULE_1__.XdrWriterError('invalid u32 value');\n\n    writer.writeUInt32BE(value);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  static isValid(value) {\n    if (typeof value !== 'number' || value % 1 !== 0) {\n      return false;\n    }\n\n    return value >= MIN_VALUE && value <= MAX_VALUE;\n  }\n}\n\nUnsignedInt.MAX_VALUE = MAX_VALUE;\nUnsignedInt.MIN_VALUE = MIN_VALUE;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHN0ZWxsYXIvanMteGRyL3NyYy91bnNpZ25lZC1pbnQuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQThDO0FBQ0o7O0FBRTFDO0FBQ0E7O0FBRU8sMEJBQTBCLHVEQUFnQjtBQUNqRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLG1EQUFjOztBQUU5QjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXFVTVUFSSU9cXERvY3VtZW50c1xcR2l0aHViXFxHYWxheHlLSi13YWxsZXQtLS1IYWNrXFx3ZWJcXG5vZGVfbW9kdWxlc1xcQHN0ZWxsYXJcXGpzLXhkclxcc3JjXFx1bnNpZ25lZC1pbnQuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgWGRyUHJpbWl0aXZlVHlwZSB9IGZyb20gJy4veGRyLXR5cGUnO1xuaW1wb3J0IHsgWGRyV3JpdGVyRXJyb3IgfSBmcm9tICcuL2Vycm9ycyc7XG5cbmNvbnN0IE1BWF9WQUxVRSA9IDQyOTQ5NjcyOTU7XG5jb25zdCBNSU5fVkFMVUUgPSAwO1xuXG5leHBvcnQgY2xhc3MgVW5zaWduZWRJbnQgZXh0ZW5kcyBYZHJQcmltaXRpdmVUeXBlIHtcbiAgLyoqXG4gICAqIEBpbmhlcml0RG9jXG4gICAqL1xuICBzdGF0aWMgcmVhZChyZWFkZXIpIHtcbiAgICByZXR1cm4gcmVhZGVyLnJlYWRVSW50MzJCRSgpO1xuICB9XG5cbiAgLyoqXG4gICAqIEBpbmhlcml0RG9jXG4gICAqL1xuICBzdGF0aWMgd3JpdGUodmFsdWUsIHdyaXRlcikge1xuICAgIGlmIChcbiAgICAgIHR5cGVvZiB2YWx1ZSAhPT0gJ251bWJlcicgfHxcbiAgICAgICEodmFsdWUgPj0gTUlOX1ZBTFVFICYmIHZhbHVlIDw9IE1BWF9WQUxVRSkgfHxcbiAgICAgIHZhbHVlICUgMSAhPT0gMFxuICAgIClcbiAgICAgIHRocm93IG5ldyBYZHJXcml0ZXJFcnJvcignaW52YWxpZCB1MzIgdmFsdWUnKTtcblxuICAgIHdyaXRlci53cml0ZVVJbnQzMkJFKHZhbHVlKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAaW5oZXJpdERvY1xuICAgKi9cbiAgc3RhdGljIGlzVmFsaWQodmFsdWUpIHtcbiAgICBpZiAodHlwZW9mIHZhbHVlICE9PSAnbnVtYmVyJyB8fCB2YWx1ZSAlIDEgIT09IDApIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICByZXR1cm4gdmFsdWUgPj0gTUlOX1ZBTFVFICYmIHZhbHVlIDw9IE1BWF9WQUxVRTtcbiAgfVxufVxuXG5VbnNpZ25lZEludC5NQVhfVkFMVUUgPSBNQVhfVkFMVUU7XG5VbnNpZ25lZEludC5NSU5fVkFMVUUgPSBNSU5fVkFMVUU7XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@stellar/js-xdr/src/unsigned-int.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@stellar/js-xdr/src/var-array.js":
/*!*******************************************************!*\
  !*** ./node_modules/@stellar/js-xdr/src/var-array.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   VarArray: () => (/* binding */ VarArray)\n/* harmony export */ });\n/* harmony import */ var _unsigned_int__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./unsigned-int */ \"(ssr)/./node_modules/@stellar/js-xdr/src/unsigned-int.js\");\n/* harmony import */ var _xdr_type__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./xdr-type */ \"(ssr)/./node_modules/@stellar/js-xdr/src/xdr-type.js\");\n/* harmony import */ var _errors__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./errors */ \"(ssr)/./node_modules/@stellar/js-xdr/src/errors.js\");\n\n\n\n\nclass VarArray extends _xdr_type__WEBPACK_IMPORTED_MODULE_1__.XdrCompositeType {\n  constructor(childType, maxLength = _unsigned_int__WEBPACK_IMPORTED_MODULE_0__.UnsignedInt.MAX_VALUE) {\n    super();\n    this._childType = childType;\n    this._maxLength = maxLength;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  read(reader) {\n    const length = _unsigned_int__WEBPACK_IMPORTED_MODULE_0__.UnsignedInt.read(reader);\n    if (length > this._maxLength)\n      throw new _errors__WEBPACK_IMPORTED_MODULE_2__.XdrReaderError(\n        `saw ${length} length VarArray, max allowed is ${this._maxLength}`\n      );\n\n    const result = new Array(length);\n    for (let i = 0; i < length; i++) {\n      result[i] = this._childType.read(reader);\n    }\n    return result;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  write(value, writer) {\n    if (!(value instanceof Array))\n      throw new _errors__WEBPACK_IMPORTED_MODULE_2__.XdrWriterError(`value is not array`);\n\n    if (value.length > this._maxLength)\n      throw new _errors__WEBPACK_IMPORTED_MODULE_2__.XdrWriterError(\n        `got array of size ${value.length}, max allowed is ${this._maxLength}`\n      );\n\n    _unsigned_int__WEBPACK_IMPORTED_MODULE_0__.UnsignedInt.write(value.length, writer);\n    for (const child of value) {\n      this._childType.write(child, writer);\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  isValid(value) {\n    if (!(value instanceof Array) || value.length > this._maxLength) {\n      return false;\n    }\n    for (const child of value) {\n      if (!this._childType.isValid(child)) return false;\n    }\n    return true;\n  }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHN0ZWxsYXIvanMteGRyL3NyYy92YXItYXJyYXkuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUE2QztBQUNDO0FBQ1k7O0FBRW5ELHVCQUF1Qix1REFBZ0I7QUFDOUMscUNBQXFDLHNEQUFXO0FBQ2hEO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CLHNEQUFXO0FBQzlCO0FBQ0EsZ0JBQWdCLG1EQUFjO0FBQzlCLGVBQWUsUUFBUSxrQ0FBa0MsZ0JBQWdCO0FBQ3pFOztBQUVBO0FBQ0Esb0JBQW9CLFlBQVk7QUFDaEM7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQixtREFBYzs7QUFFOUI7QUFDQSxnQkFBZ0IsbURBQWM7QUFDOUIsNkJBQTZCLGFBQWEsbUJBQW1CLGdCQUFnQjtBQUM3RTs7QUFFQSxJQUFJLHNEQUFXO0FBQ2Y7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcVVNVQVJJT1xcRG9jdW1lbnRzXFxHaXRodWJcXEdhbGF4eUtKLXdhbGxldC0tLUhhY2tcXHdlYlxcbm9kZV9tb2R1bGVzXFxAc3RlbGxhclxcanMteGRyXFxzcmNcXHZhci1hcnJheS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBVbnNpZ25lZEludCB9IGZyb20gJy4vdW5zaWduZWQtaW50JztcbmltcG9ydCB7IFhkckNvbXBvc2l0ZVR5cGUgfSBmcm9tICcuL3hkci10eXBlJztcbmltcG9ydCB7IFhkclJlYWRlckVycm9yLCBYZHJXcml0ZXJFcnJvciB9IGZyb20gJy4vZXJyb3JzJztcblxuZXhwb3J0IGNsYXNzIFZhckFycmF5IGV4dGVuZHMgWGRyQ29tcG9zaXRlVHlwZSB7XG4gIGNvbnN0cnVjdG9yKGNoaWxkVHlwZSwgbWF4TGVuZ3RoID0gVW5zaWduZWRJbnQuTUFYX1ZBTFVFKSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLl9jaGlsZFR5cGUgPSBjaGlsZFR5cGU7XG4gICAgdGhpcy5fbWF4TGVuZ3RoID0gbWF4TGVuZ3RoO1xuICB9XG5cbiAgLyoqXG4gICAqIEBpbmhlcml0RG9jXG4gICAqL1xuICByZWFkKHJlYWRlcikge1xuICAgIGNvbnN0IGxlbmd0aCA9IFVuc2lnbmVkSW50LnJlYWQocmVhZGVyKTtcbiAgICBpZiAobGVuZ3RoID4gdGhpcy5fbWF4TGVuZ3RoKVxuICAgICAgdGhyb3cgbmV3IFhkclJlYWRlckVycm9yKFxuICAgICAgICBgc2F3ICR7bGVuZ3RofSBsZW5ndGggVmFyQXJyYXksIG1heCBhbGxvd2VkIGlzICR7dGhpcy5fbWF4TGVuZ3RofWBcbiAgICAgICk7XG5cbiAgICBjb25zdCByZXN1bHQgPSBuZXcgQXJyYXkobGVuZ3RoKTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICByZXN1bHRbaV0gPSB0aGlzLl9jaGlsZFR5cGUucmVhZChyZWFkZXIpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIEBpbmhlcml0RG9jXG4gICAqL1xuICB3cml0ZSh2YWx1ZSwgd3JpdGVyKSB7XG4gICAgaWYgKCEodmFsdWUgaW5zdGFuY2VvZiBBcnJheSkpXG4gICAgICB0aHJvdyBuZXcgWGRyV3JpdGVyRXJyb3IoYHZhbHVlIGlzIG5vdCBhcnJheWApO1xuXG4gICAgaWYgKHZhbHVlLmxlbmd0aCA+IHRoaXMuX21heExlbmd0aClcbiAgICAgIHRocm93IG5ldyBYZHJXcml0ZXJFcnJvcihcbiAgICAgICAgYGdvdCBhcnJheSBvZiBzaXplICR7dmFsdWUubGVuZ3RofSwgbWF4IGFsbG93ZWQgaXMgJHt0aGlzLl9tYXhMZW5ndGh9YFxuICAgICAgKTtcblxuICAgIFVuc2lnbmVkSW50LndyaXRlKHZhbHVlLmxlbmd0aCwgd3JpdGVyKTtcbiAgICBmb3IgKGNvbnN0IGNoaWxkIG9mIHZhbHVlKSB7XG4gICAgICB0aGlzLl9jaGlsZFR5cGUud3JpdGUoY2hpbGQsIHdyaXRlcik7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEBpbmhlcml0RG9jXG4gICAqL1xuICBpc1ZhbGlkKHZhbHVlKSB7XG4gICAgaWYgKCEodmFsdWUgaW5zdGFuY2VvZiBBcnJheSkgfHwgdmFsdWUubGVuZ3RoID4gdGhpcy5fbWF4TGVuZ3RoKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGZvciAoY29uc3QgY2hpbGQgb2YgdmFsdWUpIHtcbiAgICAgIGlmICghdGhpcy5fY2hpbGRUeXBlLmlzVmFsaWQoY2hpbGQpKSByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xuICB9XG59XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@stellar/js-xdr/src/var-array.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@stellar/js-xdr/src/var-opaque.js":
/*!********************************************************!*\
  !*** ./node_modules/@stellar/js-xdr/src/var-opaque.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   VarOpaque: () => (/* binding */ VarOpaque)\n/* harmony export */ });\n/* harmony import */ var _unsigned_int__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./unsigned-int */ \"(ssr)/./node_modules/@stellar/js-xdr/src/unsigned-int.js\");\n/* harmony import */ var _xdr_type__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./xdr-type */ \"(ssr)/./node_modules/@stellar/js-xdr/src/xdr-type.js\");\n/* harmony import */ var _errors__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./errors */ \"(ssr)/./node_modules/@stellar/js-xdr/src/errors.js\");\n\n\n\n\nclass VarOpaque extends _xdr_type__WEBPACK_IMPORTED_MODULE_1__.XdrCompositeType {\n  constructor(maxLength = _unsigned_int__WEBPACK_IMPORTED_MODULE_0__.UnsignedInt.MAX_VALUE) {\n    super();\n    this._maxLength = maxLength;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  read(reader) {\n    const size = _unsigned_int__WEBPACK_IMPORTED_MODULE_0__.UnsignedInt.read(reader);\n    if (size > this._maxLength)\n      throw new _errors__WEBPACK_IMPORTED_MODULE_2__.XdrReaderError(\n        `saw ${size} length VarOpaque, max allowed is ${this._maxLength}`\n      );\n    return reader.read(size);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  write(value, writer) {\n    const { length } = value;\n    if (value.length > this._maxLength)\n      throw new _errors__WEBPACK_IMPORTED_MODULE_2__.XdrWriterError(\n        `got ${value.length} bytes, max allowed is ${this._maxLength}`\n      );\n    // write size info\n    _unsigned_int__WEBPACK_IMPORTED_MODULE_0__.UnsignedInt.write(length, writer);\n    writer.write(value, length);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  isValid(value) {\n    return Buffer.isBuffer(value) && value.length <= this._maxLength;\n  }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHN0ZWxsYXIvanMteGRyL3NyYy92YXItb3BhcXVlLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBNkM7QUFDQztBQUNZOztBQUVuRCx3QkFBd0IsdURBQWdCO0FBQy9DLDBCQUEwQixzREFBVztBQUNyQztBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUIsc0RBQVc7QUFDNUI7QUFDQSxnQkFBZ0IsbURBQWM7QUFDOUIsZUFBZSxNQUFNLG1DQUFtQyxnQkFBZ0I7QUFDeEU7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSxTQUFTO0FBQ3JCO0FBQ0EsZ0JBQWdCLG1EQUFjO0FBQzlCLGVBQWUsY0FBYyx3QkFBd0IsZ0JBQWdCO0FBQ3JFO0FBQ0E7QUFDQSxJQUFJLHNEQUFXO0FBQ2Y7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxVU1VBUklPXFxEb2N1bWVudHNcXEdpdGh1YlxcR2FsYXh5S0otd2FsbGV0LS0tSGFja1xcd2ViXFxub2RlX21vZHVsZXNcXEBzdGVsbGFyXFxqcy14ZHJcXHNyY1xcdmFyLW9wYXF1ZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBVbnNpZ25lZEludCB9IGZyb20gJy4vdW5zaWduZWQtaW50JztcbmltcG9ydCB7IFhkckNvbXBvc2l0ZVR5cGUgfSBmcm9tICcuL3hkci10eXBlJztcbmltcG9ydCB7IFhkclJlYWRlckVycm9yLCBYZHJXcml0ZXJFcnJvciB9IGZyb20gJy4vZXJyb3JzJztcblxuZXhwb3J0IGNsYXNzIFZhck9wYXF1ZSBleHRlbmRzIFhkckNvbXBvc2l0ZVR5cGUge1xuICBjb25zdHJ1Y3RvcihtYXhMZW5ndGggPSBVbnNpZ25lZEludC5NQVhfVkFMVUUpIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMuX21heExlbmd0aCA9IG1heExlbmd0aDtcbiAgfVxuXG4gIC8qKlxuICAgKiBAaW5oZXJpdERvY1xuICAgKi9cbiAgcmVhZChyZWFkZXIpIHtcbiAgICBjb25zdCBzaXplID0gVW5zaWduZWRJbnQucmVhZChyZWFkZXIpO1xuICAgIGlmIChzaXplID4gdGhpcy5fbWF4TGVuZ3RoKVxuICAgICAgdGhyb3cgbmV3IFhkclJlYWRlckVycm9yKFxuICAgICAgICBgc2F3ICR7c2l6ZX0gbGVuZ3RoIFZhck9wYXF1ZSwgbWF4IGFsbG93ZWQgaXMgJHt0aGlzLl9tYXhMZW5ndGh9YFxuICAgICAgKTtcbiAgICByZXR1cm4gcmVhZGVyLnJlYWQoc2l6ZSk7XG4gIH1cblxuICAvKipcbiAgICogQGluaGVyaXREb2NcbiAgICovXG4gIHdyaXRlKHZhbHVlLCB3cml0ZXIpIHtcbiAgICBjb25zdCB7IGxlbmd0aCB9ID0gdmFsdWU7XG4gICAgaWYgKHZhbHVlLmxlbmd0aCA+IHRoaXMuX21heExlbmd0aClcbiAgICAgIHRocm93IG5ldyBYZHJXcml0ZXJFcnJvcihcbiAgICAgICAgYGdvdCAke3ZhbHVlLmxlbmd0aH0gYnl0ZXMsIG1heCBhbGxvd2VkIGlzICR7dGhpcy5fbWF4TGVuZ3RofWBcbiAgICAgICk7XG4gICAgLy8gd3JpdGUgc2l6ZSBpbmZvXG4gICAgVW5zaWduZWRJbnQud3JpdGUobGVuZ3RoLCB3cml0ZXIpO1xuICAgIHdyaXRlci53cml0ZSh2YWx1ZSwgbGVuZ3RoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAaW5oZXJpdERvY1xuICAgKi9cbiAgaXNWYWxpZCh2YWx1ZSkge1xuICAgIHJldHVybiBCdWZmZXIuaXNCdWZmZXIodmFsdWUpICYmIHZhbHVlLmxlbmd0aCA8PSB0aGlzLl9tYXhMZW5ndGg7XG4gIH1cbn1cbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@stellar/js-xdr/src/var-opaque.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@stellar/js-xdr/src/void.js":
/*!**************************************************!*\
  !*** ./node_modules/@stellar/js-xdr/src/void.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Void: () => (/* binding */ Void)\n/* harmony export */ });\n/* harmony import */ var _xdr_type__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./xdr-type */ \"(ssr)/./node_modules/@stellar/js-xdr/src/xdr-type.js\");\n/* harmony import */ var _errors__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./errors */ \"(ssr)/./node_modules/@stellar/js-xdr/src/errors.js\");\n\n\n\nclass Void extends _xdr_type__WEBPACK_IMPORTED_MODULE_0__.XdrPrimitiveType {\n  /* jshint unused: false */\n\n  static read() {\n    return undefined;\n  }\n\n  static write(value) {\n    if (value !== undefined)\n      throw new _errors__WEBPACK_IMPORTED_MODULE_1__.XdrWriterError('trying to write value to a void slot');\n  }\n\n  static isValid(value) {\n    return value === undefined;\n  }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHN0ZWxsYXIvanMteGRyL3NyYy92b2lkLmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUE4QztBQUNKOztBQUVuQyxtQkFBbUIsdURBQWdCO0FBQzFDOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsZ0JBQWdCLG1EQUFjO0FBQzlCOztBQUVBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXFVTVUFSSU9cXERvY3VtZW50c1xcR2l0aHViXFxHYWxheHlLSi13YWxsZXQtLS1IYWNrXFx3ZWJcXG5vZGVfbW9kdWxlc1xcQHN0ZWxsYXJcXGpzLXhkclxcc3JjXFx2b2lkLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFhkclByaW1pdGl2ZVR5cGUgfSBmcm9tICcuL3hkci10eXBlJztcbmltcG9ydCB7IFhkcldyaXRlckVycm9yIH0gZnJvbSAnLi9lcnJvcnMnO1xuXG5leHBvcnQgY2xhc3MgVm9pZCBleHRlbmRzIFhkclByaW1pdGl2ZVR5cGUge1xuICAvKiBqc2hpbnQgdW51c2VkOiBmYWxzZSAqL1xuXG4gIHN0YXRpYyByZWFkKCkge1xuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH1cblxuICBzdGF0aWMgd3JpdGUodmFsdWUpIHtcbiAgICBpZiAodmFsdWUgIT09IHVuZGVmaW5lZClcbiAgICAgIHRocm93IG5ldyBYZHJXcml0ZXJFcnJvcigndHJ5aW5nIHRvIHdyaXRlIHZhbHVlIHRvIGEgdm9pZCBzbG90Jyk7XG4gIH1cblxuICBzdGF0aWMgaXNWYWxpZCh2YWx1ZSkge1xuICAgIHJldHVybiB2YWx1ZSA9PT0gdW5kZWZpbmVkO1xuICB9XG59XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@stellar/js-xdr/src/void.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@stellar/js-xdr/src/xdr-type.js":
/*!******************************************************!*\
  !*** ./node_modules/@stellar/js-xdr/src/xdr-type.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   XdrCompositeType: () => (/* binding */ XdrCompositeType),\n/* harmony export */   XdrPrimitiveType: () => (/* binding */ XdrPrimitiveType),\n/* harmony export */   hasConstructor: () => (/* binding */ hasConstructor),\n/* harmony export */   isSerializableIsh: () => (/* binding */ isSerializableIsh)\n/* harmony export */ });\n/* harmony import */ var _serialization_xdr_reader__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./serialization/xdr-reader */ \"(ssr)/./node_modules/@stellar/js-xdr/src/serialization/xdr-reader.js\");\n/* harmony import */ var _serialization_xdr_writer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./serialization/xdr-writer */ \"(ssr)/./node_modules/@stellar/js-xdr/src/serialization/xdr-writer.js\");\n/* harmony import */ var _errors__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./errors */ \"(ssr)/./node_modules/@stellar/js-xdr/src/errors.js\");\n\n\n\n\nclass XdrType {\n  /**\n   * Encode value to XDR format\n   * @param {XdrEncodingFormat} [format] - Encoding format (one of \"raw\", \"hex\", \"base64\")\n   * @return {String|Buffer}\n   */\n  toXDR(format = 'raw') {\n    if (!this.write) return this.constructor.toXDR(this, format);\n\n    const writer = new _serialization_xdr_writer__WEBPACK_IMPORTED_MODULE_1__.XdrWriter();\n    this.write(this, writer);\n    return encodeResult(writer.finalize(), format);\n  }\n\n  /**\n   * Decode XDR-encoded value\n   * @param {Buffer|String} input - XDR-encoded input data\n   * @param {XdrEncodingFormat} [format] - Encoding format (one of \"raw\", \"hex\", \"base64\")\n   * @return {this}\n   */\n  fromXDR(input, format = 'raw') {\n    if (!this.read) return this.constructor.fromXDR(input, format);\n\n    const reader = new _serialization_xdr_reader__WEBPACK_IMPORTED_MODULE_0__.XdrReader(decodeInput(input, format));\n    const result = this.read(reader);\n    reader.ensureInputConsumed();\n    return result;\n  }\n\n  /**\n   * Check whether input contains a valid XDR-encoded value\n   * @param {Buffer|String} input - XDR-encoded input data\n   * @param {XdrEncodingFormat} [format] - Encoding format (one of \"raw\", \"hex\", \"base64\")\n   * @return {Boolean}\n   */\n  validateXDR(input, format = 'raw') {\n    try {\n      this.fromXDR(input, format);\n      return true;\n    } catch (e) {\n      return false;\n    }\n  }\n\n  /**\n   * Encode value to XDR format\n   * @param {this} value - Value to serialize\n   * @param {XdrEncodingFormat} [format] - Encoding format (one of \"raw\", \"hex\", \"base64\")\n   * @return {Buffer}\n   */\n  static toXDR(value, format = 'raw') {\n    const writer = new _serialization_xdr_writer__WEBPACK_IMPORTED_MODULE_1__.XdrWriter();\n    this.write(value, writer);\n    return encodeResult(writer.finalize(), format);\n  }\n\n  /**\n   * Decode XDR-encoded value\n   * @param {Buffer|String} input - XDR-encoded input data\n   * @param {XdrEncodingFormat} [format] - Encoding format (one of \"raw\", \"hex\", \"base64\")\n   * @return {this}\n   */\n  static fromXDR(input, format = 'raw') {\n    const reader = new _serialization_xdr_reader__WEBPACK_IMPORTED_MODULE_0__.XdrReader(decodeInput(input, format));\n    const result = this.read(reader);\n    reader.ensureInputConsumed();\n    return result;\n  }\n\n  /**\n   * Check whether input contains a valid XDR-encoded value\n   * @param {Buffer|String} input - XDR-encoded input data\n   * @param {XdrEncodingFormat} [format] - Encoding format (one of \"raw\", \"hex\", \"base64\")\n   * @return {Boolean}\n   */\n  static validateXDR(input, format = 'raw') {\n    try {\n      this.fromXDR(input, format);\n      return true;\n    } catch (e) {\n      return false;\n    }\n  }\n}\n\nclass XdrPrimitiveType extends XdrType {\n  /**\n   * Read value from the XDR-serialized input\n   * @param {XdrReader} reader - XdrReader instance\n   * @return {this}\n   * @abstract\n   */\n  // eslint-disable-next-line no-unused-vars\n  static read(reader) {\n    throw new _errors__WEBPACK_IMPORTED_MODULE_2__.XdrNotImplementedDefinitionError();\n  }\n\n  /**\n   * Write XDR value to the buffer\n   * @param {this} value - Value to write\n   * @param {XdrWriter} writer - XdrWriter instance\n   * @return {void}\n   * @abstract\n   */\n  // eslint-disable-next-line no-unused-vars\n  static write(value, writer) {\n    throw new _errors__WEBPACK_IMPORTED_MODULE_2__.XdrNotImplementedDefinitionError();\n  }\n\n  /**\n   * Check whether XDR primitive value is valid\n   * @param {this} value - Value to check\n   * @return {Boolean}\n   * @abstract\n   */\n  // eslint-disable-next-line no-unused-vars\n  static isValid(value) {\n    return false;\n  }\n}\n\nclass XdrCompositeType extends XdrType {\n  // Every descendant should implement two methods: read(reader) and write(value, writer)\n\n  /**\n   * Check whether XDR primitive value is valid\n   * @param {this} value - Value to check\n   * @return {Boolean}\n   * @abstract\n   */\n  // eslint-disable-next-line no-unused-vars\n  isValid(value) {\n    return false;\n  }\n}\n\nclass InvalidXdrEncodingFormatError extends TypeError {\n  constructor(format) {\n    super(`Invalid format ${format}, must be one of \"raw\", \"hex\", \"base64\"`);\n  }\n}\n\nfunction encodeResult(buffer, format) {\n  switch (format) {\n    case 'raw':\n      return buffer;\n    case 'hex':\n      return buffer.toString('hex');\n    case 'base64':\n      return buffer.toString('base64');\n    default:\n      throw new InvalidXdrEncodingFormatError(format);\n  }\n}\n\nfunction decodeInput(input, format) {\n  switch (format) {\n    case 'raw':\n      return input;\n    case 'hex':\n      return Buffer.from(input, 'hex');\n    case 'base64':\n      return Buffer.from(input, 'base64');\n    default:\n      throw new InvalidXdrEncodingFormatError(format);\n  }\n}\n\n/**\n * Provides a \"duck typed\" version of the native `instanceof` for read/write.\n *\n * \"Duck typing\" means if the parameter _looks like_ and _acts like_ a duck\n * (i.e. the type we're checking), it will be treated as that type.\n *\n * In this case, the \"type\" we're looking for is \"like XdrType\" but also \"like\n * XdrCompositeType|XdrPrimitiveType\" (i.e. serializable), but also conditioned\n * on a particular subclass of \"XdrType\" (e.g. {@link Union} which extends\n * XdrType).\n *\n * This makes the package resilient to downstream systems that may be combining\n * many versions of a package across its stack that are technically compatible\n * but fail `instanceof` checks due to cross-pollination.\n */\nfunction isSerializableIsh(value, subtype) {\n  return (\n    value !== undefined &&\n    value !== null && // prereqs, otherwise `getPrototypeOf` pops\n    (value instanceof subtype || // quickest check\n      // Do an initial constructor check (anywhere is fine so that children of\n      // `subtype` still work), then\n      (hasConstructor(value, subtype) &&\n        // ensure it has read/write methods, then\n        typeof value.constructor.read === 'function' &&\n        typeof value.constructor.write === 'function' &&\n        // ensure XdrType is in the prototype chain\n        hasConstructor(value, 'XdrType')))\n  );\n}\n\n/** Tries to find `subtype` in any of the constructors or meta of `instance`. */\nfunction hasConstructor(instance, subtype) {\n  do {\n    const ctor = instance.constructor;\n    if (ctor.name === subtype) {\n      return true;\n    }\n  } while ((instance = Object.getPrototypeOf(instance)));\n  return false;\n}\n\n/**\n * @typedef {'raw'|'hex'|'base64'} XdrEncodingFormat\n */\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@stellar/js-xdr/src/xdr-type.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@stellar/stellar-base/lib/account.js":
/*!***********************************************************!*\
  !*** ./node_modules/@stellar/stellar-base/lib/account.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.Account = void 0;\nvar _bignumber = _interopRequireDefault(__webpack_require__(/*! ./util/bignumber */ \"(ssr)/./node_modules/@stellar/stellar-base/lib/util/bignumber.js\"));\nvar _strkey = __webpack_require__(/*! ./strkey */ \"(ssr)/./node_modules/@stellar/stellar-base/lib/strkey.js\");\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { \"default\": e }; }\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\nfunction _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }\nfunction _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\n/**\n * Create a new Account object.\n *\n * `Account` represents a single account in the Stellar network and its sequence\n * number. Account tracks the sequence number as it is used by {@link\n * TransactionBuilder}. See\n * [Accounts](https://developers.stellar.org/docs/glossary/accounts/) for\n * more information about how accounts work in Stellar.\n *\n * @constructor\n *\n * @param {string} accountId - ID of the account (ex.\n *     `GB3KJPLFUYN5VL6R3GU3EGCGVCKFDSD7BEDX42HWG5BWFKB3KQGJJRMA`). If you\n *     provide a muxed account address, this will throw; use {@link\n *     MuxedAccount} instead.\n * @param {string} sequence  - current sequence number of the account\n */\nvar Account = exports.Account = /*#__PURE__*/function () {\n  function Account(accountId, sequence) {\n    _classCallCheck(this, Account);\n    if (_strkey.StrKey.isValidMed25519PublicKey(accountId)) {\n      throw new Error('accountId is an M-address; use MuxedAccount instead');\n    }\n    if (!_strkey.StrKey.isValidEd25519PublicKey(accountId)) {\n      throw new Error('accountId is invalid');\n    }\n    if (!(typeof sequence === 'string')) {\n      throw new Error('sequence must be of type string');\n    }\n    this._accountId = accountId;\n    this.sequence = new _bignumber[\"default\"](sequence);\n  }\n\n  /**\n   * Returns Stellar account ID, ex.\n   * `GB3KJPLFUYN5VL6R3GU3EGCGVCKFDSD7BEDX42HWG5BWFKB3KQGJJRMA`.\n   * @returns {string}\n   */\n  return _createClass(Account, [{\n    key: \"accountId\",\n    value: function accountId() {\n      return this._accountId;\n    }\n\n    /**\n     * @returns {string}  sequence number for the account as a string\n     */\n  }, {\n    key: \"sequenceNumber\",\n    value: function sequenceNumber() {\n      return this.sequence.toString();\n    }\n\n    /**\n     * Increments sequence number in this object by one.\n     * @returns {void}\n     */\n  }, {\n    key: \"incrementSequenceNumber\",\n    value: function incrementSequenceNumber() {\n      this.sequence = this.sequence.plus(1);\n    }\n  }]);\n}();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHN0ZWxsYXIvc3RlbGxhci1iYXNlL2xpYi9hY2NvdW50LmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLDhDQUE2QztBQUM3QztBQUNBLENBQUMsRUFBQztBQUNGLGVBQWU7QUFDZix3Q0FBd0MsbUJBQU8sQ0FBQywwRkFBa0I7QUFDbEUsY0FBYyxtQkFBTyxDQUFDLDBFQUFVO0FBQ2hDLHFDQUFxQyxpQ0FBaUM7QUFDdEUsc0JBQXNCLDJCQUEyQixvR0FBb0csbUJBQW1CLGlCQUFpQixzSEFBc0g7QUFDL1MsaUNBQWlDO0FBQ2pDLG1DQUFtQyxnQkFBZ0IsY0FBYyxPQUFPLGNBQWM7QUFDdEYsaUNBQWlDLHFIQUFxSCxjQUFjO0FBQ3BLLDZCQUE2QixtQ0FBbUM7QUFDaEUsOEJBQThCLDRDQUE0QywrQkFBK0Isb0JBQW9CLG1DQUFtQyxzQ0FBc0MsdUVBQXVFO0FBQzdRO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0VBQWdFO0FBQ2hFLHNCQUFzQjtBQUN0QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CO0FBQ0EseURBQXlELEtBQUs7QUFDOUQscUJBQXFCO0FBQ3JCLFdBQVcsUUFBUTtBQUNuQjtBQUNBLGNBQWMsZUFBZTtBQUM3QjtBQUNBO0FBQ0E7QUFDQSxrREFBa0Q7QUFDbEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsZUFBZTtBQUNmO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLGlCQUFpQixTQUFTO0FBQzFCO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0gsQ0FBQyIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxVU1VBUklPXFxEb2N1bWVudHNcXEdpdGh1YlxcR2FsYXh5S0otd2FsbGV0LS0tSGFja1xcd2ViXFxub2RlX21vZHVsZXNcXEBzdGVsbGFyXFxzdGVsbGFyLWJhc2VcXGxpYlxcYWNjb3VudC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuQWNjb3VudCA9IHZvaWQgMDtcbnZhciBfYmlnbnVtYmVyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi91dGlsL2JpZ251bWJlclwiKSk7XG52YXIgX3N0cmtleSA9IHJlcXVpcmUoXCIuL3N0cmtleVwiKTtcbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoZSkgeyByZXR1cm4gZSAmJiBlLl9fZXNNb2R1bGUgPyBlIDogeyBcImRlZmF1bHRcIjogZSB9OyB9XG5mdW5jdGlvbiBfdHlwZW9mKG8pIHsgXCJAYmFiZWwvaGVscGVycyAtIHR5cGVvZlwiOyByZXR1cm4gX3R5cGVvZiA9IFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgU3ltYm9sICYmIFwic3ltYm9sXCIgPT0gdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA/IGZ1bmN0aW9uIChvKSB7IHJldHVybiB0eXBlb2YgbzsgfSA6IGZ1bmN0aW9uIChvKSB7IHJldHVybiBvICYmIFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgU3ltYm9sICYmIG8uY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvOyB9LCBfdHlwZW9mKG8pOyB9XG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soYSwgbikgeyBpZiAoIShhIGluc3RhbmNlb2YgbikpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH1cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKGUsIHIpIHsgZm9yICh2YXIgdCA9IDA7IHQgPCByLmxlbmd0aDsgdCsrKSB7IHZhciBvID0gclt0XTsgby5lbnVtZXJhYmxlID0gby5lbnVtZXJhYmxlIHx8ICExLCBvLmNvbmZpZ3VyYWJsZSA9ICEwLCBcInZhbHVlXCIgaW4gbyAmJiAoby53cml0YWJsZSA9ICEwKSwgT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsIF90b1Byb3BlcnR5S2V5KG8ua2V5KSwgbyk7IH0gfVxuZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKGUsIHIsIHQpIHsgcmV0dXJuIHIgJiYgX2RlZmluZVByb3BlcnRpZXMoZS5wcm90b3R5cGUsIHIpLCB0ICYmIF9kZWZpbmVQcm9wZXJ0aWVzKGUsIHQpLCBPYmplY3QuZGVmaW5lUHJvcGVydHkoZSwgXCJwcm90b3R5cGVcIiwgeyB3cml0YWJsZTogITEgfSksIGU7IH1cbmZ1bmN0aW9uIF90b1Byb3BlcnR5S2V5KHQpIHsgdmFyIGkgPSBfdG9QcmltaXRpdmUodCwgXCJzdHJpbmdcIik7IHJldHVybiBcInN5bWJvbFwiID09IF90eXBlb2YoaSkgPyBpIDogaSArIFwiXCI7IH1cbmZ1bmN0aW9uIF90b1ByaW1pdGl2ZSh0LCByKSB7IGlmIChcIm9iamVjdFwiICE9IF90eXBlb2YodCkgfHwgIXQpIHJldHVybiB0OyB2YXIgZSA9IHRbU3ltYm9sLnRvUHJpbWl0aXZlXTsgaWYgKHZvaWQgMCAhPT0gZSkgeyB2YXIgaSA9IGUuY2FsbCh0LCByIHx8IFwiZGVmYXVsdFwiKTsgaWYgKFwib2JqZWN0XCIgIT0gX3R5cGVvZihpKSkgcmV0dXJuIGk7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJAQHRvUHJpbWl0aXZlIG11c3QgcmV0dXJuIGEgcHJpbWl0aXZlIHZhbHVlLlwiKTsgfSByZXR1cm4gKFwic3RyaW5nXCIgPT09IHIgPyBTdHJpbmcgOiBOdW1iZXIpKHQpOyB9XG4vKipcbiAqIENyZWF0ZSBhIG5ldyBBY2NvdW50IG9iamVjdC5cbiAqXG4gKiBgQWNjb3VudGAgcmVwcmVzZW50cyBhIHNpbmdsZSBhY2NvdW50IGluIHRoZSBTdGVsbGFyIG5ldHdvcmsgYW5kIGl0cyBzZXF1ZW5jZVxuICogbnVtYmVyLiBBY2NvdW50IHRyYWNrcyB0aGUgc2VxdWVuY2UgbnVtYmVyIGFzIGl0IGlzIHVzZWQgYnkge0BsaW5rXG4gKiBUcmFuc2FjdGlvbkJ1aWxkZXJ9LiBTZWVcbiAqIFtBY2NvdW50c10oaHR0cHM6Ly9kZXZlbG9wZXJzLnN0ZWxsYXIub3JnL2RvY3MvZ2xvc3NhcnkvYWNjb3VudHMvKSBmb3JcbiAqIG1vcmUgaW5mb3JtYXRpb24gYWJvdXQgaG93IGFjY291bnRzIHdvcmsgaW4gU3RlbGxhci5cbiAqXG4gKiBAY29uc3RydWN0b3JcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gYWNjb3VudElkIC0gSUQgb2YgdGhlIGFjY291bnQgKGV4LlxuICogICAgIGBHQjNLSlBMRlVZTjVWTDZSM0dVM0VHQ0dWQ0tGRFNEN0JFRFg0MkhXRzVCV0ZLQjNLUUdKSlJNQWApLiBJZiB5b3VcbiAqICAgICBwcm92aWRlIGEgbXV4ZWQgYWNjb3VudCBhZGRyZXNzLCB0aGlzIHdpbGwgdGhyb3c7IHVzZSB7QGxpbmtcbiAqICAgICBNdXhlZEFjY291bnR9IGluc3RlYWQuXG4gKiBAcGFyYW0ge3N0cmluZ30gc2VxdWVuY2UgIC0gY3VycmVudCBzZXF1ZW5jZSBudW1iZXIgb2YgdGhlIGFjY291bnRcbiAqL1xudmFyIEFjY291bnQgPSBleHBvcnRzLkFjY291bnQgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBBY2NvdW50KGFjY291bnRJZCwgc2VxdWVuY2UpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgQWNjb3VudCk7XG4gICAgaWYgKF9zdHJrZXkuU3RyS2V5LmlzVmFsaWRNZWQyNTUxOVB1YmxpY0tleShhY2NvdW50SWQpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ2FjY291bnRJZCBpcyBhbiBNLWFkZHJlc3M7IHVzZSBNdXhlZEFjY291bnQgaW5zdGVhZCcpO1xuICAgIH1cbiAgICBpZiAoIV9zdHJrZXkuU3RyS2V5LmlzVmFsaWRFZDI1NTE5UHVibGljS2V5KGFjY291bnRJZCkpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignYWNjb3VudElkIGlzIGludmFsaWQnKTtcbiAgICB9XG4gICAgaWYgKCEodHlwZW9mIHNlcXVlbmNlID09PSAnc3RyaW5nJykpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignc2VxdWVuY2UgbXVzdCBiZSBvZiB0eXBlIHN0cmluZycpO1xuICAgIH1cbiAgICB0aGlzLl9hY2NvdW50SWQgPSBhY2NvdW50SWQ7XG4gICAgdGhpcy5zZXF1ZW5jZSA9IG5ldyBfYmlnbnVtYmVyW1wiZGVmYXVsdFwiXShzZXF1ZW5jZSk7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyBTdGVsbGFyIGFjY291bnQgSUQsIGV4LlxuICAgKiBgR0IzS0pQTEZVWU41Vkw2UjNHVTNFR0NHVkNLRkRTRDdCRURYNDJIV0c1QldGS0IzS1FHSkpSTUFgLlxuICAgKiBAcmV0dXJucyB7c3RyaW5nfVxuICAgKi9cbiAgcmV0dXJuIF9jcmVhdGVDbGFzcyhBY2NvdW50LCBbe1xuICAgIGtleTogXCJhY2NvdW50SWRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gYWNjb3VudElkKCkge1xuICAgICAgcmV0dXJuIHRoaXMuX2FjY291bnRJZDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSAgc2VxdWVuY2UgbnVtYmVyIGZvciB0aGUgYWNjb3VudCBhcyBhIHN0cmluZ1xuICAgICAqL1xuICB9LCB7XG4gICAga2V5OiBcInNlcXVlbmNlTnVtYmVyXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHNlcXVlbmNlTnVtYmVyKCkge1xuICAgICAgcmV0dXJuIHRoaXMuc2VxdWVuY2UudG9TdHJpbmcoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBJbmNyZW1lbnRzIHNlcXVlbmNlIG51bWJlciBpbiB0aGlzIG9iamVjdCBieSBvbmUuXG4gICAgICogQHJldHVybnMge3ZvaWR9XG4gICAgICovXG4gIH0sIHtcbiAgICBrZXk6IFwiaW5jcmVtZW50U2VxdWVuY2VOdW1iZXJcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gaW5jcmVtZW50U2VxdWVuY2VOdW1iZXIoKSB7XG4gICAgICB0aGlzLnNlcXVlbmNlID0gdGhpcy5zZXF1ZW5jZS5wbHVzKDEpO1xuICAgIH1cbiAgfV0pO1xufSgpOyJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@stellar/stellar-base/lib/account.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@stellar/stellar-base/lib/address.js":
/*!***********************************************************!*\
  !*** ./node_modules/@stellar/stellar-base/lib/address.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.Address = void 0;\nvar _strkey = __webpack_require__(/*! ./strkey */ \"(ssr)/./node_modules/@stellar/stellar-base/lib/strkey.js\");\nvar _xdr = _interopRequireDefault(__webpack_require__(/*! ./xdr */ \"(ssr)/./node_modules/@stellar/stellar-base/lib/xdr.js\"));\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { \"default\": e }; }\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\nfunction _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }\nfunction _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\n/**\n * Create a new Address object.\n *\n * `Address` represents a single address in the Stellar network. An address can\n * represent an account or a contract.\n *\n * @constructor\n *\n * @param {string} address - ID of the account (ex.\n *     `GB3KJPLFUYN5VL6R3GU3EGCGVCKFDSD7BEDX42HWG5BWFKB3KQGJJRMA`). If you\n *     provide a muxed account address, this will throw; use {@link\n *     MuxedAccount} instead.\n */\nvar Address = exports.Address = /*#__PURE__*/function () {\n  function Address(address) {\n    _classCallCheck(this, Address);\n    if (_strkey.StrKey.isValidEd25519PublicKey(address)) {\n      this._type = 'account';\n      this._key = _strkey.StrKey.decodeEd25519PublicKey(address);\n    } else if (_strkey.StrKey.isValidContract(address)) {\n      this._type = 'contract';\n      this._key = _strkey.StrKey.decodeContract(address);\n    } else {\n      throw new Error(\"Unsupported address type: \".concat(address));\n    }\n  }\n\n  /**\n   * Parses a string and returns an Address object.\n   *\n   * @param {string} address - The address to parse. ex. `GB3KJPLFUYN5VL6R3GU3EGCGVCKFDSD7BEDX42HWG5BWFKB3KQGJJRMA`\n   * @returns {Address}\n   */\n  return _createClass(Address, [{\n    key: \"toString\",\n    value:\n    /**\n     * Serialize an address to string.\n     *\n     * @returns {string}\n     */\n    function toString() {\n      switch (this._type) {\n        case 'account':\n          return _strkey.StrKey.encodeEd25519PublicKey(this._key);\n        case 'contract':\n          return _strkey.StrKey.encodeContract(this._key);\n        default:\n          throw new Error('Unsupported address type');\n      }\n    }\n\n    /**\n     * Convert this Address to an xdr.ScVal type.\n     *\n     * @returns {xdr.ScVal}\n     */\n  }, {\n    key: \"toScVal\",\n    value: function toScVal() {\n      return _xdr[\"default\"].ScVal.scvAddress(this.toScAddress());\n    }\n\n    /**\n     * Convert this Address to an xdr.ScAddress type.\n     *\n     * @returns {xdr.ScAddress}\n     */\n  }, {\n    key: \"toScAddress\",\n    value: function toScAddress() {\n      switch (this._type) {\n        case 'account':\n          return _xdr[\"default\"].ScAddress.scAddressTypeAccount(_xdr[\"default\"].PublicKey.publicKeyTypeEd25519(this._key));\n        case 'contract':\n          return _xdr[\"default\"].ScAddress.scAddressTypeContract(this._key);\n        default:\n          throw new Error('Unsupported address type');\n      }\n    }\n\n    /**\n     * Return the raw public key bytes for this address.\n     *\n     * @returns {Buffer}\n     */\n  }, {\n    key: \"toBuffer\",\n    value: function toBuffer() {\n      return this._key;\n    }\n  }], [{\n    key: \"fromString\",\n    value: function fromString(address) {\n      return new Address(address);\n    }\n\n    /**\n     * Creates a new account Address object from a buffer of raw bytes.\n     *\n     * @param {Buffer} buffer - The bytes of an address to parse.\n     * @returns {Address}\n     */\n  }, {\n    key: \"account\",\n    value: function account(buffer) {\n      return new Address(_strkey.StrKey.encodeEd25519PublicKey(buffer));\n    }\n\n    /**\n     * Creates a new contract Address object from a buffer of raw bytes.\n     *\n     * @param {Buffer} buffer - The bytes of an address to parse.\n     * @returns {Address}\n     */\n  }, {\n    key: \"contract\",\n    value: function contract(buffer) {\n      return new Address(_strkey.StrKey.encodeContract(buffer));\n    }\n\n    /**\n     * Convert this from an xdr.ScVal type\n     *\n     * @param {xdr.ScVal} scVal - The xdr.ScVal type to parse\n     * @returns {Address}\n     */\n  }, {\n    key: \"fromScVal\",\n    value: function fromScVal(scVal) {\n      return Address.fromScAddress(scVal.address());\n    }\n\n    /**\n     * Convert this from an xdr.ScAddress type\n     *\n     * @param {xdr.ScAddress} scAddress - The xdr.ScAddress type to parse\n     * @returns {Address}\n     */\n  }, {\n    key: \"fromScAddress\",\n    value: function fromScAddress(scAddress) {\n      switch (scAddress[\"switch\"]().value) {\n        case _xdr[\"default\"].ScAddressType.scAddressTypeAccount().value:\n          return Address.account(scAddress.accountId().ed25519());\n        case _xdr[\"default\"].ScAddressType.scAddressTypeContract().value:\n          return Address.contract(scAddress.contractId());\n        default:\n          throw new Error('Unsupported address type');\n      }\n    }\n  }]);\n}();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@stellar/stellar-base/lib/address.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@stellar/stellar-base/lib/asset.js":
/*!*********************************************************!*\
  !*** ./node_modules/@stellar/stellar-base/lib/asset.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.Asset = void 0;\nvar _util = __webpack_require__(/*! ./util/util */ \"(ssr)/./node_modules/@stellar/stellar-base/lib/util/util.js\");\nvar _xdr = _interopRequireDefault(__webpack_require__(/*! ./xdr */ \"(ssr)/./node_modules/@stellar/stellar-base/lib/xdr.js\"));\nvar _keypair = __webpack_require__(/*! ./keypair */ \"(ssr)/./node_modules/@stellar/stellar-base/lib/keypair.js\");\nvar _strkey = __webpack_require__(/*! ./strkey */ \"(ssr)/./node_modules/@stellar/stellar-base/lib/strkey.js\");\nvar _hashing = __webpack_require__(/*! ./hashing */ \"(ssr)/./node_modules/@stellar/stellar-base/lib/hashing.js\");\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { \"default\": e }; }\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\nfunction _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }\nfunction _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\n/**\n * Asset class represents an asset, either the native asset (`XLM`)\n * or an asset code / issuer account ID pair.\n *\n * An asset code describes an asset code and issuer pair. In the case of the native\n * asset XLM, the issuer will be null.\n *\n * @constructor\n * @param {string} code - The asset code.\n * @param {string} issuer - The account ID of the issuer.\n */\nvar Asset = exports.Asset = /*#__PURE__*/function () {\n  function Asset(code, issuer) {\n    _classCallCheck(this, Asset);\n    if (!/^[a-zA-Z0-9]{1,12}$/.test(code)) {\n      throw new Error('Asset code is invalid (maximum alphanumeric, 12 characters at max)');\n    }\n    if (String(code).toLowerCase() !== 'xlm' && !issuer) {\n      throw new Error('Issuer cannot be null');\n    }\n    if (issuer && !_strkey.StrKey.isValidEd25519PublicKey(issuer)) {\n      throw new Error('Issuer is invalid');\n    }\n    if (String(code).toLowerCase() === 'xlm') {\n      // transform all xLM, Xlm, etc. variants -> XLM\n      this.code = 'XLM';\n    } else {\n      this.code = code;\n    }\n    this.issuer = issuer;\n  }\n\n  /**\n   * Returns an asset object for the native asset.\n   * @Return {Asset}\n   */\n  return _createClass(Asset, [{\n    key: \"toXDRObject\",\n    value:\n    /**\n     * Returns the xdr.Asset object for this asset.\n     * @returns {xdr.Asset} XDR asset object\n     */\n    function toXDRObject() {\n      return this._toXDRObject(_xdr[\"default\"].Asset);\n    }\n\n    /**\n     * Returns the xdr.ChangeTrustAsset object for this asset.\n     * @returns {xdr.ChangeTrustAsset} XDR asset object\n     */\n  }, {\n    key: \"toChangeTrustXDRObject\",\n    value: function toChangeTrustXDRObject() {\n      return this._toXDRObject(_xdr[\"default\"].ChangeTrustAsset);\n    }\n\n    /**\n     * Returns the xdr.TrustLineAsset object for this asset.\n     * @returns {xdr.TrustLineAsset} XDR asset object\n     */\n  }, {\n    key: \"toTrustLineXDRObject\",\n    value: function toTrustLineXDRObject() {\n      return this._toXDRObject(_xdr[\"default\"].TrustLineAsset);\n    }\n\n    /**\n     * Returns the would-be contract ID (`C...` format) for this asset on a given\n     * network.\n     *\n     * @param {string}    networkPassphrase   indicates which network the contract\n     *    ID should refer to, since every network will have a unique ID for the\n     *    same contract (see {@link Networks} for options)\n     *\n     * @returns {string}  the strkey-encoded (`C...`) contract ID for this asset\n     *\n     * @warning This makes no guarantee that this contract actually *exists*.\n     */\n  }, {\n    key: \"contractId\",\n    value: function contractId(networkPassphrase) {\n      var networkId = (0, _hashing.hash)(Buffer.from(networkPassphrase));\n      var preimage = _xdr[\"default\"].HashIdPreimage.envelopeTypeContractId(new _xdr[\"default\"].HashIdPreimageContractId({\n        networkId: networkId,\n        contractIdPreimage: _xdr[\"default\"].ContractIdPreimage.contractIdPreimageFromAsset(this.toXDRObject())\n      }));\n      return _strkey.StrKey.encodeContract((0, _hashing.hash)(preimage.toXDR()));\n    }\n\n    /**\n     * Returns the xdr object for this asset.\n     * @param {xdr.Asset | xdr.ChangeTrustAsset} xdrAsset - The asset xdr object.\n     * @returns {xdr.Asset | xdr.ChangeTrustAsset | xdr.TrustLineAsset} XDR Asset object\n     */\n  }, {\n    key: \"_toXDRObject\",\n    value: function _toXDRObject() {\n      var xdrAsset = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _xdr[\"default\"].Asset;\n      if (this.isNative()) {\n        return xdrAsset.assetTypeNative();\n      }\n      var xdrType;\n      var xdrTypeString;\n      if (this.code.length <= 4) {\n        xdrType = _xdr[\"default\"].AlphaNum4;\n        xdrTypeString = 'assetTypeCreditAlphanum4';\n      } else {\n        xdrType = _xdr[\"default\"].AlphaNum12;\n        xdrTypeString = 'assetTypeCreditAlphanum12';\n      }\n\n      // pad code with null bytes if necessary\n      var padLength = this.code.length <= 4 ? 4 : 12;\n      var paddedCode = this.code.padEnd(padLength, '\\0');\n\n      // eslint-disable-next-line new-cap\n      var assetType = new xdrType({\n        assetCode: paddedCode,\n        issuer: _keypair.Keypair.fromPublicKey(this.issuer).xdrAccountId()\n      });\n      return new xdrAsset(xdrTypeString, assetType);\n    }\n\n    /**\n     * @returns {string} Asset code\n     */\n  }, {\n    key: \"getCode\",\n    value: function getCode() {\n      if (this.code === undefined) {\n        return undefined;\n      }\n      return String(this.code);\n    }\n\n    /**\n     * @returns {string} Asset issuer\n     */\n  }, {\n    key: \"getIssuer\",\n    value: function getIssuer() {\n      if (this.issuer === undefined) {\n        return undefined;\n      }\n      return String(this.issuer);\n    }\n\n    /**\n     * @see [Assets concept](https://developers.stellar.org/docs/glossary/assets/)\n     * @returns {string} Asset type. Can be one of following types:\n     *\n     *  - `native`,\n     *  - `credit_alphanum4`,\n     *  - `credit_alphanum12`, or\n     *  - `unknown` as the error case (which should never occur)\n     */\n  }, {\n    key: \"getAssetType\",\n    value: function getAssetType() {\n      switch (this.getRawAssetType().value) {\n        case _xdr[\"default\"].AssetType.assetTypeNative().value:\n          return 'native';\n        case _xdr[\"default\"].AssetType.assetTypeCreditAlphanum4().value:\n          return 'credit_alphanum4';\n        case _xdr[\"default\"].AssetType.assetTypeCreditAlphanum12().value:\n          return 'credit_alphanum12';\n        default:\n          return 'unknown';\n      }\n    }\n\n    /**\n     * @returns {xdr.AssetType}  the raw XDR representation of the asset type\n     */\n  }, {\n    key: \"getRawAssetType\",\n    value: function getRawAssetType() {\n      if (this.isNative()) {\n        return _xdr[\"default\"].AssetType.assetTypeNative();\n      }\n      if (this.code.length <= 4) {\n        return _xdr[\"default\"].AssetType.assetTypeCreditAlphanum4();\n      }\n      return _xdr[\"default\"].AssetType.assetTypeCreditAlphanum12();\n    }\n\n    /**\n     * @returns {boolean}  true if this asset object is the native asset.\n     */\n  }, {\n    key: \"isNative\",\n    value: function isNative() {\n      return !this.issuer;\n    }\n\n    /**\n     * @param {Asset} asset Asset to compare\n     * @returns {boolean} true if this asset equals the given asset.\n     */\n  }, {\n    key: \"equals\",\n    value: function equals(asset) {\n      return this.code === asset.getCode() && this.issuer === asset.getIssuer();\n    }\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      if (this.isNative()) {\n        return 'native';\n      }\n      return \"\".concat(this.getCode(), \":\").concat(this.getIssuer());\n    }\n\n    /**\n     * Compares two assets according to the criteria:\n     *\n     *  1. First compare the type (native < alphanum4 < alphanum12).\n     *  2. If the types are equal, compare the assets codes.\n     *  3. If the asset codes are equal, compare the issuers.\n     *\n     * @param   {Asset} assetA - the first asset\n     * @param   {Asset} assetB - the second asset\n     * @returns {number} `-1` if assetA < assetB, `0` if assetA == assetB, `1` if assetA > assetB.\n     *\n     * @static\n     * @memberof Asset\n     */\n  }], [{\n    key: \"native\",\n    value: function _native() {\n      return new Asset('XLM');\n    }\n\n    /**\n     * Returns an asset object from its XDR object representation.\n     * @param {xdr.Asset} assetXdr - The asset xdr object.\n     * @returns {Asset}\n     */\n  }, {\n    key: \"fromOperation\",\n    value: function fromOperation(assetXdr) {\n      var anum;\n      var code;\n      var issuer;\n      switch (assetXdr[\"switch\"]()) {\n        case _xdr[\"default\"].AssetType.assetTypeNative():\n          return this[\"native\"]();\n        case _xdr[\"default\"].AssetType.assetTypeCreditAlphanum4():\n          anum = assetXdr.alphaNum4();\n        /* falls through */\n        case _xdr[\"default\"].AssetType.assetTypeCreditAlphanum12():\n          anum = anum || assetXdr.alphaNum12();\n          issuer = _strkey.StrKey.encodeEd25519PublicKey(anum.issuer().ed25519());\n          code = (0, _util.trimEnd)(anum.assetCode(), '\\0');\n          return new this(code, issuer);\n        default:\n          throw new Error(\"Invalid asset type: \".concat(assetXdr[\"switch\"]().name));\n      }\n    }\n  }, {\n    key: \"compare\",\n    value: function compare(assetA, assetB) {\n      if (!assetA || !(assetA instanceof Asset)) {\n        throw new Error('assetA is invalid');\n      }\n      if (!assetB || !(assetB instanceof Asset)) {\n        throw new Error('assetB is invalid');\n      }\n      if (assetA.equals(assetB)) {\n        return 0;\n      }\n\n      // Compare asset types.\n      var xdrAtype = assetA.getRawAssetType().value;\n      var xdrBtype = assetB.getRawAssetType().value;\n      if (xdrAtype !== xdrBtype) {\n        return xdrAtype < xdrBtype ? -1 : 1;\n      }\n\n      // Compare asset codes.\n      var result = asciiCompare(assetA.getCode(), assetB.getCode());\n      if (result !== 0) {\n        return result;\n      }\n\n      // Compare asset issuers.\n      return asciiCompare(assetA.getIssuer(), assetB.getIssuer());\n    }\n  }]);\n}();\n/**\n * Compares two ASCII strings in lexographic order with uppercase precedence.\n *\n * @param   {string} a - the first string to compare\n * @param   {string} b - the second\n * @returns {number} like all `compare()`s:\n *     -1 if `a < b`, 0 if `a == b`, and 1 if `a > b`\n *\n * @warning No type-checks are done on the parameters\n */\nfunction asciiCompare(a, b) {\n  return Buffer.compare(Buffer.from(a, 'ascii'), Buffer.from(b, 'ascii'));\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@stellar/stellar-base/lib/asset.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@stellar/stellar-base/lib/auth.js":
/*!********************************************************!*\
  !*** ./node_modules/@stellar/stellar-base/lib/auth.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.authorizeEntry = authorizeEntry;\nexports.authorizeInvocation = authorizeInvocation;\nvar _xdr = _interopRequireDefault(__webpack_require__(/*! ./xdr */ \"(ssr)/./node_modules/@stellar/stellar-base/lib/xdr.js\"));\nvar _keypair = __webpack_require__(/*! ./keypair */ \"(ssr)/./node_modules/@stellar/stellar-base/lib/keypair.js\");\nvar _strkey = __webpack_require__(/*! ./strkey */ \"(ssr)/./node_modules/@stellar/stellar-base/lib/strkey.js\");\nvar _network = __webpack_require__(/*! ./network */ \"(ssr)/./node_modules/@stellar/stellar-base/lib/network.js\");\nvar _hashing = __webpack_require__(/*! ./hashing */ \"(ssr)/./node_modules/@stellar/stellar-base/lib/hashing.js\");\nvar _address = __webpack_require__(/*! ./address */ \"(ssr)/./node_modules/@stellar/stellar-base/lib/address.js\");\nvar _scval = __webpack_require__(/*! ./scval */ \"(ssr)/./node_modules/@stellar/stellar-base/lib/scval.js\");\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { \"default\": e }; }\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = \"function\" == typeof Symbol ? Symbol : {}, a = i.iterator || \"@@iterator\", c = i.asyncIterator || \"@@asyncIterator\", u = i.toStringTag || \"@@toStringTag\"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, \"\"); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, \"_invoke\", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: \"normal\", arg: t.call(e, r) }; } catch (t) { return { type: \"throw\", arg: t }; } } e.wrap = wrap; var h = \"suspendedStart\", l = \"suspendedYield\", f = \"executing\", s = \"completed\", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { [\"next\", \"throw\", \"return\"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if (\"throw\" !== c.type) { var u = c.arg, h = u.value; return h && \"object\" == _typeof(h) && n.call(h, \"__await\") ? e.resolve(h.__await).then(function (t) { invoke(\"next\", t, i, a); }, function (t) { invoke(\"throw\", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke(\"throw\", t, i, a); }); } a(c.arg); } var r; o(this, \"_invoke\", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw Error(\"Generator is already running\"); if (o === s) { if (\"throw\" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if (\"next\" === n.method) n.sent = n._sent = n.arg;else if (\"throw\" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else \"return\" === n.method && n.abrupt(\"return\", n.arg); o = f; var p = tryCatch(e, r, n); if (\"normal\" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } \"throw\" === p.type && (o = s, n.method = \"throw\", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, \"throw\" === n && e.iterator[\"return\"] && (r.method = \"return\", r.arg = t, maybeInvokeDelegate(e, r), \"throw\" === r.method) || \"return\" !== n && (r.method = \"throw\", r.arg = new TypeError(\"The iterator does not provide a '\" + n + \"' method\")), y; var i = tryCatch(o, e.iterator, r.arg); if (\"throw\" === i.type) return r.method = \"throw\", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, \"return\" !== r.method && (r.method = \"next\", r.arg = t), r.delegate = null, y) : a : (r.method = \"throw\", r.arg = new TypeError(\"iterator result is not an object\"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = \"normal\", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: \"root\" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || \"\" === e) { var r = e[a]; if (r) return r.call(e); if (\"function\" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(_typeof(e) + \" is not iterable\"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, \"constructor\", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, \"constructor\", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, \"GeneratorFunction\"), e.isGeneratorFunction = function (t) { var e = \"function\" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || \"GeneratorFunction\" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, \"GeneratorFunction\")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, \"Generator\"), define(g, a, function () { return this; }), define(g, \"toString\", function () { return \"[object Generator]\"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) \"t\" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if (\"throw\" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = \"throw\", a.arg = e, r.next = n, o && (r.method = \"next\", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if (\"root\" === i.tryLoc) return handle(\"end\"); if (i.tryLoc <= this.prev) { var c = n.call(i, \"catchLoc\"), u = n.call(i, \"finallyLoc\"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw Error(\"try statement without catch or finally\"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, \"finallyLoc\") && this.prev < o.finallyLoc) { var i = o; break; } } i && (\"break\" === t || \"continue\" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = \"next\", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if (\"throw\" === t.type) throw t.arg; return \"break\" === t.type || \"continue\" === t.type ? this.next = t.arg : \"return\" === t.type ? (this.rval = this.arg = t.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, \"catch\": function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if (\"throw\" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, \"next\" === this.method && (this.arg = t), y; } }, e; }\nfunction asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }\nfunction _asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, \"next\", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, \"throw\", n); } _next(void 0); }); }; }\n/**\n * @async\n * @callback SigningCallback A callback for signing an XDR structure\n * representing all of the details necessary to authorize an invocation tree.\n *\n * @param {xdr.HashIdPreimage} preimage   the entire authorization envelope\n *    whose hash you should sign, so that you can inspect the entire structure\n *    if necessary (rather than blindly signing a hash)\n *\n * @returns {\n *    Promise<Uint8Array> |\n *    Promise<{signature: Uint8Array, publicKey: string}\n * }  the signature of the raw payload (which is the sha256 hash of the preimage\n *    bytes, so `hash(preimage.toXDR())`) either naked, implying it is signed\n *    by the key corresponding to the public key in the entry you pass to\n *    {@link authorizeEntry} (decipherable from its\n *    `credentials().address().address()`), or alongside an explicit `publicKey`.\n */\n/**\n * Actually authorizes an existing authorization entry using the given the\n * credentials and expiration details, returning a signed copy.\n *\n * This \"fills out\" the authorization entry with a signature, indicating to the\n * {@link Operation.invokeHostFunction} its attached to that:\n *   - a particular identity (i.e. signing {@link Keypair} or other signer)\n *   - approving the execution of an invocation tree (i.e. a simulation-acquired\n *     {@link xdr.SorobanAuthorizedInvocation} or otherwise built)\n *   - on a particular network (uniquely identified by its passphrase, see\n *     {@link Networks})\n *   - until a particular ledger sequence is reached.\n *\n * This one lets you pass a either a {@link Keypair} (or, more accurately,\n * anything with a `sign(Buffer): Buffer` method) or a callback function (see\n * {@link SigningCallback}) to handle signing the envelope hash.\n *\n * @param {xdr.SorobanAuthorizationEntry} entry   an unsigned authorization entr\n * @param {Keypair | SigningCallback} signer  either a {@link Keypair} instance\n *    or a function which takes a {@link xdr.HashIdPreimageSorobanAuthorization}\n *    input payload and returns EITHER\n *\n *      (a) an object containing a `signature` of the hash of the raw payload bytes\n *          as a Buffer-like and a `publicKey` string representing who just\n *          created this signature, or\n *      (b) just the naked signature of the hash of the raw payload bytes (where\n *          the signing key is implied to be the address in the `entry`).\n *\n *    The latter option (b) is JUST for backwards compatibility and will be\n *    removed in the future.\n * @param {number} validUntilLedgerSeq   the (exclusive) future ledger sequence\n *    number until which this authorization entry should be valid (if\n *    `currentLedgerSeq==validUntil`, this is expired))\n * @param {string} [networkPassphrase]  the network passphrase is incorprated\n *    into the signature (see {@link Networks} for options)\n *\n * @returns {Promise<xdr.SorobanAuthorizationEntry>} a promise for an\n *    authorization entry that you can pass along to\n *    {@link Operation.invokeHostFunction}\n *\n * @note If using the `SigningCallback` variation, the signer is assumed to be\n *    the entry's credential address unless you use the variant that returns\n *    the object.\n *\n * @see authorizeInvocation\n * @example\n * import {\n *   SorobanRpc,\n *   Transaction,\n *   Networks,\n *   authorizeEntry\n * } from '@stellar/stellar-sdk';\n *\n * // Assume signPayloadCallback is a well-formed signing callback.\n * //\n * // It might, for example, pop up a modal from a browser extension, send the\n * // transaction to a third-party service for signing, or just do simple\n * // signing via Keypair like it does here:\n * function signPayloadCallback(payload) {\n *    return signer.sign(hash(payload.toXDR());\n * }\n *\n * function multiPartyAuth(\n *    server: SorobanRpc.Server,\n *    // assume this involves multi-party auth\n *    tx: Transaction,\n * ) {\n *    return server\n *      .simulateTransaction(tx)\n *      .then((simResult) => {\n *          tx.operations[0].auth.map(entry =>\n *            authorizeEntry(\n *              entry,\n *              signPayloadCallback,\n *              currentLedger + 1000,\n *              Networks.TESTNET);\n *          ));\n *\n *          return server.prepareTransaction(tx, simResult);\n *      })\n *      .then((preppedTx) => {\n *        preppedTx.sign(source);\n *        return server.sendTransaction(preppedTx);\n *      });\n * }\n */\nfunction authorizeEntry(_x, _x2, _x3) {\n  return _authorizeEntry.apply(this, arguments);\n}\n/**\n * This builds an entry from scratch, allowing you to express authorization as a\n * function of:\n *   - a particular identity (i.e. signing {@link Keypair} or other signer)\n *   - approving the execution of an invocation tree (i.e. a simulation-acquired\n *     {@link xdr.SorobanAuthorizedInvocation} or otherwise built)\n *   - on a particular network (uniquely identified by its passphrase, see\n *     {@link Networks})\n *   - until a particular ledger sequence is reached.\n *\n * This is in contrast to {@link authorizeEntry}, which signs an existing entry.\n *\n * @param {Keypair | SigningCallback} signer  either a {@link Keypair} instance\n *    (or anything with a `.sign(buf): Buffer-like` method) or a function which\n *    takes a payload (a {@link xdr.HashIdPreimageSorobanAuthorization}\n *    instance) input and returns the signature of the hash of the raw payload\n *    bytes (where the signing key should correspond to the address in the\n *    `entry`)\n * @param {number}  validUntilLedgerSeq  the (exclusive) future ledger sequence\n *    number until which this authorization entry should be valid (if\n *    `currentLedgerSeq==validUntilLedgerSeq`, this is expired))\n * @param {xdr.SorobanAuthorizedInvocation} invocation the invocation tree that\n *    we're authorizing (likely, this comes from transaction simulation)\n * @param {string}  [publicKey]   the public identity of the signer (when\n *    providing a {@link Keypair} to `signer`, this can be omitted, as it just\n *    uses {@link Keypair.publicKey})\n * @param {string}  [networkPassphrase]   the network passphrase is incorprated\n *    into the signature (see {@link Networks} for options, default:\n *    {@link Networks.FUTURENET})\n *\n * @returns {Promise<xdr.SorobanAuthorizationEntry>} a promise for an\n *    authorization entry that you can pass along to\n *    {@link Operation.invokeHostFunction}\n *\n * @see authorizeEntry\n */\nfunction _authorizeEntry() {\n  _authorizeEntry = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee(entry, signer, validUntilLedgerSeq) {\n    var networkPassphrase,\n      clone,\n      addrAuth,\n      networkId,\n      preimage,\n      payload,\n      signature,\n      publicKey,\n      sigResult,\n      sigScVal,\n      _args = arguments;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          networkPassphrase = _args.length > 3 && _args[3] !== undefined ? _args[3] : _network.Networks.FUTURENET;\n          if (!(entry.credentials()[\"switch\"]().value !== _xdr[\"default\"].SorobanCredentialsType.sorobanCredentialsAddress().value)) {\n            _context.next = 3;\n            break;\n          }\n          return _context.abrupt(\"return\", entry);\n        case 3:\n          clone = _xdr[\"default\"].SorobanAuthorizationEntry.fromXDR(entry.toXDR());\n          /** @type {xdr.SorobanAddressCredentials} */\n          addrAuth = clone.credentials().address();\n          addrAuth.signatureExpirationLedger(validUntilLedgerSeq);\n          networkId = (0, _hashing.hash)(Buffer.from(networkPassphrase));\n          preimage = _xdr[\"default\"].HashIdPreimage.envelopeTypeSorobanAuthorization(new _xdr[\"default\"].HashIdPreimageSorobanAuthorization({\n            networkId: networkId,\n            nonce: addrAuth.nonce(),\n            invocation: clone.rootInvocation(),\n            signatureExpirationLedger: addrAuth.signatureExpirationLedger()\n          }));\n          payload = (0, _hashing.hash)(preimage.toXDR());\n          if (!(typeof signer === 'function')) {\n            _context.next = 16;\n            break;\n          }\n          _context.next = 12;\n          return signer(preimage);\n        case 12:\n          sigResult = _context.sent;\n          if (sigResult !== null && sigResult !== void 0 && sigResult.signature) {\n            signature = Buffer.from(sigResult.signature);\n            publicKey = sigResult.publicKey;\n          } else {\n            // if using the deprecated form, assume it's for the entry\n            signature = Buffer.from(sigResult);\n            publicKey = _address.Address.fromScAddress(addrAuth.address()).toString();\n          }\n          _context.next = 18;\n          break;\n        case 16:\n          signature = Buffer.from(signer.sign(payload));\n          publicKey = signer.publicKey();\n        case 18:\n          if (_keypair.Keypair.fromPublicKey(publicKey).verify(payload, signature)) {\n            _context.next = 20;\n            break;\n          }\n          throw new Error(\"signature doesn't match payload\");\n        case 20:\n          // This structure is defined here:\n          // https://soroban.stellar.org/docs/fundamentals-and-concepts/invoking-contracts-with-transactions#stellar-account-signatures\n          //\n          // Encoding a contract structure as an ScVal means the map keys are supposed\n          // to be symbols, hence the forced typing here.\n          sigScVal = (0, _scval.nativeToScVal)({\n            public_key: _strkey.StrKey.decodeEd25519PublicKey(publicKey),\n            signature: signature\n          }, {\n            type: {\n              public_key: ['symbol', null],\n              signature: ['symbol', null]\n            }\n          });\n          addrAuth.signature(_xdr[\"default\"].ScVal.scvVec([sigScVal]));\n          return _context.abrupt(\"return\", clone);\n        case 23:\n        case \"end\":\n          return _context.stop();\n      }\n    }, _callee);\n  }));\n  return _authorizeEntry.apply(this, arguments);\n}\nfunction authorizeInvocation(signer, validUntilLedgerSeq, invocation) {\n  var publicKey = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : '';\n  var networkPassphrase = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : _network.Networks.FUTURENET;\n  // We use keypairs as a source of randomness for the nonce to avoid mucking\n  // with any crypto dependencies. Note that this just has to be random and\n  // unique, not cryptographically secure, so it's fine.\n  var kp = _keypair.Keypair.random().rawPublicKey();\n  var nonce = new _xdr[\"default\"].Int64(bytesToInt64(kp));\n  var pk = publicKey || signer.publicKey();\n  if (!pk) {\n    throw new Error(\"authorizeInvocation requires publicKey parameter\");\n  }\n  var entry = new _xdr[\"default\"].SorobanAuthorizationEntry({\n    rootInvocation: invocation,\n    credentials: _xdr[\"default\"].SorobanCredentials.sorobanCredentialsAddress(new _xdr[\"default\"].SorobanAddressCredentials({\n      address: new _address.Address(pk).toScAddress(),\n      nonce: nonce,\n      signatureExpirationLedger: 0,\n      // replaced\n      signature: _xdr[\"default\"].ScVal.scvVec([]) // replaced\n    }))\n  });\n  return authorizeEntry(entry, signer, validUntilLedgerSeq, networkPassphrase);\n}\nfunction bytesToInt64(bytes) {\n  // eslint-disable-next-line no-bitwise\n  return bytes.subarray(0, 8).reduce(function (accum, b) {\n    return accum << 8 | b;\n  }, 0);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@stellar/stellar-base/lib/auth.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@stellar/stellar-base/lib/claimant.js":
/*!************************************************************!*\
  !*** ./node_modules/@stellar/stellar-base/lib/claimant.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.Claimant = void 0;\nvar _xdr = _interopRequireDefault(__webpack_require__(/*! ./xdr */ \"(ssr)/./node_modules/@stellar/stellar-base/lib/xdr.js\"));\nvar _keypair = __webpack_require__(/*! ./keypair */ \"(ssr)/./node_modules/@stellar/stellar-base/lib/keypair.js\");\nvar _strkey = __webpack_require__(/*! ./strkey */ \"(ssr)/./node_modules/@stellar/stellar-base/lib/strkey.js\");\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { \"default\": e }; }\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\nfunction _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }\nfunction _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\n/**\n * Claimant class represents an xdr.Claimant\n *\n * The claim predicate is optional, it defaults to unconditional if none is specified.\n *\n * @constructor\n * @param {string} destination - The destination account ID.\n * @param {xdr.ClaimPredicate} [predicate] - The claim predicate.\n */\nvar Claimant = exports.Claimant = /*#__PURE__*/function () {\n  function Claimant(destination, predicate) {\n    _classCallCheck(this, Claimant);\n    if (destination && !_strkey.StrKey.isValidEd25519PublicKey(destination)) {\n      throw new Error('Destination is invalid');\n    }\n    this._destination = destination;\n    if (!predicate) {\n      this._predicate = _xdr[\"default\"].ClaimPredicate.claimPredicateUnconditional();\n    } else if (predicate instanceof _xdr[\"default\"].ClaimPredicate) {\n      this._predicate = predicate;\n    } else {\n      throw new Error('Predicate should be an xdr.ClaimPredicate');\n    }\n  }\n\n  /**\n   * Returns an unconditional claim predicate\n   * @Return {xdr.ClaimPredicate}\n   */\n  return _createClass(Claimant, [{\n    key: \"toXDRObject\",\n    value:\n    /**\n     * Returns the xdr object for this claimant.\n     * @returns {xdr.Claimant} XDR Claimant object\n     */\n    function toXDRObject() {\n      var claimant = new _xdr[\"default\"].ClaimantV0({\n        destination: _keypair.Keypair.fromPublicKey(this._destination).xdrAccountId(),\n        predicate: this._predicate\n      });\n      return _xdr[\"default\"].Claimant.claimantTypeV0(claimant);\n    }\n\n    /**\n     * @type {string}\n     * @readonly\n     */\n  }, {\n    key: \"destination\",\n    get: function get() {\n      return this._destination;\n    },\n    set: function set(value) {\n      throw new Error('Claimant is immutable');\n    }\n\n    /**\n     * @type {xdr.ClaimPredicate}\n     * @readonly\n     */\n  }, {\n    key: \"predicate\",\n    get: function get() {\n      return this._predicate;\n    },\n    set: function set(value) {\n      throw new Error('Claimant is immutable');\n    }\n  }], [{\n    key: \"predicateUnconditional\",\n    value: function predicateUnconditional() {\n      return _xdr[\"default\"].ClaimPredicate.claimPredicateUnconditional();\n    }\n\n    /**\n     * Returns an `and` claim predicate\n     * @param {xdr.ClaimPredicate} left an xdr.ClaimPredicate\n     * @param {xdr.ClaimPredicate} right an xdr.ClaimPredicate\n     * @Return {xdr.ClaimPredicate}\n     */\n  }, {\n    key: \"predicateAnd\",\n    value: function predicateAnd(left, right) {\n      if (!(left instanceof _xdr[\"default\"].ClaimPredicate)) {\n        throw new Error('left Predicate should be an xdr.ClaimPredicate');\n      }\n      if (!(right instanceof _xdr[\"default\"].ClaimPredicate)) {\n        throw new Error('right Predicate should be an xdr.ClaimPredicate');\n      }\n      return _xdr[\"default\"].ClaimPredicate.claimPredicateAnd([left, right]);\n    }\n\n    /**\n     * Returns an `or` claim predicate\n     * @param {xdr.ClaimPredicate} left an xdr.ClaimPredicate\n     * @param {xdr.ClaimPredicate} right an xdr.ClaimPredicate\n     * @Return {xdr.ClaimPredicate}\n     */\n  }, {\n    key: \"predicateOr\",\n    value: function predicateOr(left, right) {\n      if (!(left instanceof _xdr[\"default\"].ClaimPredicate)) {\n        throw new Error('left Predicate should be an xdr.ClaimPredicate');\n      }\n      if (!(right instanceof _xdr[\"default\"].ClaimPredicate)) {\n        throw new Error('right Predicate should be an xdr.ClaimPredicate');\n      }\n      return _xdr[\"default\"].ClaimPredicate.claimPredicateOr([left, right]);\n    }\n\n    /**\n     * Returns a `not` claim predicate\n     * @param {xdr.ClaimPredicate} predicate an xdr.ClaimPredicate\n     * @Return {xdr.ClaimPredicate}\n     */\n  }, {\n    key: \"predicateNot\",\n    value: function predicateNot(predicate) {\n      if (!(predicate instanceof _xdr[\"default\"].ClaimPredicate)) {\n        throw new Error('right Predicate should be an xdr.ClaimPredicate');\n      }\n      return _xdr[\"default\"].ClaimPredicate.claimPredicateNot(predicate);\n    }\n\n    /**\n     * Returns a `BeforeAbsoluteTime` claim predicate\n     *\n     * This predicate will be fulfilled if the closing time of the ledger that\n     * includes the CreateClaimableBalance operation is less than this (absolute)\n     * Unix timestamp (expressed in seconds).\n     *\n     * @param {string} absBefore Unix epoch (in seconds) as a string\n     * @Return {xdr.ClaimPredicate}\n     */\n  }, {\n    key: \"predicateBeforeAbsoluteTime\",\n    value: function predicateBeforeAbsoluteTime(absBefore) {\n      return _xdr[\"default\"].ClaimPredicate.claimPredicateBeforeAbsoluteTime(_xdr[\"default\"].Int64.fromString(absBefore));\n    }\n\n    /**\n     * Returns a `BeforeRelativeTime` claim predicate\n     *\n     * This predicate will be fulfilled if the closing time of the ledger that\n     * includes the CreateClaimableBalance operation plus this relative time delta\n     * (in seconds) is less than the current time.\n     *\n     * @param {strings} seconds seconds since closeTime of the ledger in which the ClaimableBalanceEntry was created (as string)\n     * @Return {xdr.ClaimPredicate}\n     */\n  }, {\n    key: \"predicateBeforeRelativeTime\",\n    value: function predicateBeforeRelativeTime(seconds) {\n      return _xdr[\"default\"].ClaimPredicate.claimPredicateBeforeRelativeTime(_xdr[\"default\"].Int64.fromString(seconds));\n    }\n\n    /**\n     * Returns a claimant object from its XDR object representation.\n     * @param {xdr.Claimant} claimantXdr - The claimant xdr object.\n     * @returns {Claimant}\n     */\n  }, {\n    key: \"fromXDR\",\n    value: function fromXDR(claimantXdr) {\n      var value;\n      switch (claimantXdr[\"switch\"]()) {\n        case _xdr[\"default\"].ClaimantType.claimantTypeV0():\n          value = claimantXdr.v0();\n          return new this(_strkey.StrKey.encodeEd25519PublicKey(value.destination().ed25519()), value.predicate());\n        default:\n          throw new Error(\"Invalid claimant type: \".concat(claimantXdr[\"switch\"]().name));\n      }\n    }\n  }]);\n}();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@stellar/stellar-base/lib/claimant.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@stellar/stellar-base/lib/contract.js":
/*!************************************************************!*\
  !*** ./node_modules/@stellar/stellar-base/lib/contract.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.Contract = void 0;\nvar _address = __webpack_require__(/*! ./address */ \"(ssr)/./node_modules/@stellar/stellar-base/lib/address.js\");\nvar _operation = __webpack_require__(/*! ./operation */ \"(ssr)/./node_modules/@stellar/stellar-base/lib/operation.js\");\nvar _xdr = _interopRequireDefault(__webpack_require__(/*! ./xdr */ \"(ssr)/./node_modules/@stellar/stellar-base/lib/xdr.js\"));\nvar _strkey = __webpack_require__(/*! ./strkey */ \"(ssr)/./node_modules/@stellar/stellar-base/lib/strkey.js\");\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { \"default\": e }; }\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\nfunction _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }\nfunction _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\n/**\n * Create a new Contract object.\n *\n * `Contract` represents a single contract in the Stellar network, embodying the\n * interface of the contract. See\n * [Contracts](https://soroban.stellar.org/docs/learn/interacting-with-contracts)\n * for more information about how contracts work in Stellar.\n *\n * @constructor\n *\n * @param {string} contractId - ID of the contract (ex.\n *     `CA3D5KRYM6CB7OWQ6TWYRR3Z4T7GNZLKERYNZGGA5SOAOPIFY6YQGAXE`).\n */\nvar Contract = exports.Contract = /*#__PURE__*/function () {\n  function Contract(contractId) {\n    _classCallCheck(this, Contract);\n    try {\n      // First, try it as a strkey\n      this._id = _strkey.StrKey.decodeContract(contractId);\n    } catch (_) {\n      throw new Error(\"Invalid contract ID: \".concat(contractId));\n    }\n  }\n\n  /**\n   * Returns Stellar contract ID as a strkey, ex.\n   * `CA3D5KRYM6CB7OWQ6TWYRR3Z4T7GNZLKERYNZGGA5SOAOPIFY6YQGAXE`.\n   * @returns {string}\n   */\n  return _createClass(Contract, [{\n    key: \"contractId\",\n    value: function contractId() {\n      return _strkey.StrKey.encodeContract(this._id);\n    }\n\n    /** @returns {string} the ID as a strkey (C...) */\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return this.contractId();\n    }\n\n    /** @returns {Address} the wrapped address of this contract */\n  }, {\n    key: \"address\",\n    value: function address() {\n      return _address.Address.contract(this._id);\n    }\n\n    /**\n     * Returns an operation that will invoke this contract call.\n     *\n     * @param {string}        method   name of the method to call\n     * @param {...xdr.ScVal}  params   arguments to pass to the function call\n     *\n     * @returns {xdr.Operation}   an InvokeHostFunctionOp operation to call the\n     *    contract with the given method and parameters\n     *\n     * @see Operation.invokeHostFunction\n     * @see Operation.invokeContractFunction\n     * @see Operation.createCustomContract\n     * @see Operation.createStellarAssetContract\n     * @see Operation.uploadContractWasm\n     */\n  }, {\n    key: \"call\",\n    value: function call(method) {\n      for (var _len = arguments.length, params = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        params[_key - 1] = arguments[_key];\n      }\n      return _operation.Operation.invokeContractFunction({\n        contract: this.address().toString(),\n        \"function\": method,\n        args: params\n      });\n    }\n\n    /**\n     * Returns the read-only footprint entries necessary for any invocations to\n     * this contract, for convenience when manually adding it to your\n     * transaction's overall footprint or doing bump/restore operations.\n     *\n     * @returns {xdr.LedgerKey} the ledger key for the deployed contract instance\n     */\n  }, {\n    key: \"getFootprint\",\n    value: function getFootprint() {\n      return _xdr[\"default\"].LedgerKey.contractData(new _xdr[\"default\"].LedgerKeyContractData({\n        contract: this.address().toScAddress(),\n        key: _xdr[\"default\"].ScVal.scvLedgerKeyContractInstance(),\n        durability: _xdr[\"default\"].ContractDataDurability.persistent()\n      }));\n    }\n  }]);\n}();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@stellar/stellar-base/lib/contract.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@stellar/stellar-base/lib/events.js":
/*!**********************************************************!*\
  !*** ./node_modules/@stellar/stellar-base/lib/events.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.humanizeEvents = humanizeEvents;\nvar _strkey = __webpack_require__(/*! ./strkey */ \"(ssr)/./node_modules/@stellar/stellar-base/lib/strkey.js\");\nvar _scval = __webpack_require__(/*! ./scval */ \"(ssr)/./node_modules/@stellar/stellar-base/lib/scval.js\");\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\n/**\n * Converts raw diagnostic or contract events into something with a flatter,\n * human-readable, and understandable structure.\n *\n * @param {xdr.DiagnosticEvent[] | xdr.ContractEvent[]} events  either contract\n *    events or diagnostic events to parse into a friendly format\n *\n * @returns {SorobanEvent[]}  a list of human-readable event structures, where\n *    each element has the following properties:\n *  - type: a string of one of 'system', 'contract', 'diagnostic\n *  - contractId?: optionally, a `C...` encoded strkey\n *  - topics: a list of {@link scValToNative} invocations on the topics\n *  - data: similarly, a {@link scValToNative} invocation on the raw event data\n */\nfunction humanizeEvents(events) {\n  return events.map(function (e) {\n    // A pseudo-instanceof check for xdr.DiagnosticEvent more reliable\n    // in mixed SDK environments:\n    if (e.inSuccessfulContractCall) {\n      return extractEvent(e.event());\n    }\n    return extractEvent(e);\n  });\n}\nfunction extractEvent(event) {\n  return _objectSpread(_objectSpread({}, typeof event.contractId === 'function' && event.contractId() != null && {\n    contractId: _strkey.StrKey.encodeContract(event.contractId())\n  }), {}, {\n    type: event.type().name,\n    topics: event.body().value().topics().map(function (t) {\n      return (0, _scval.scValToNative)(t);\n    }),\n    data: (0, _scval.scValToNative)(event.body().value().data())\n  });\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHN0ZWxsYXIvc3RlbGxhci1iYXNlL2xpYi9ldmVudHMuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsOENBQTZDO0FBQzdDO0FBQ0EsQ0FBQyxFQUFDO0FBQ0Ysc0JBQXNCO0FBQ3RCLGNBQWMsbUJBQU8sQ0FBQywwRUFBVTtBQUNoQyxhQUFhLG1CQUFPLENBQUMsd0VBQVM7QUFDOUIsc0JBQXNCLDJCQUEyQixvR0FBb0csbUJBQW1CLGlCQUFpQixzSEFBc0g7QUFDL1MseUJBQXlCLHdCQUF3QixvQ0FBb0MseUNBQXlDLGtDQUFrQywwREFBMEQsMEJBQTBCO0FBQ3BQLDRCQUE0QixnQkFBZ0Isc0JBQXNCLE9BQU8sa0RBQWtELHNEQUFzRCw4QkFBOEIsbUpBQW1KLHFFQUFxRSxLQUFLO0FBQzVhLG9DQUFvQyxvRUFBb0UsMERBQTBEO0FBQ2xLLDZCQUE2QixtQ0FBbUM7QUFDaEUsOEJBQThCLDRDQUE0QywrQkFBK0Isb0JBQW9CLG1DQUFtQyxzQ0FBc0MsdUVBQXVFO0FBQzdRO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyw2Q0FBNkM7QUFDeEQ7QUFDQTtBQUNBLGFBQWEsaUJBQWlCO0FBQzlCO0FBQ0E7QUFDQTtBQUNBLHlCQUF5QixxQkFBcUI7QUFDOUMsMEJBQTBCLHFCQUFxQjtBQUMvQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBLHVDQUF1QztBQUN2QztBQUNBLEdBQUcsS0FBSztBQUNSO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBLEdBQUc7QUFDSCIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxVU1VBUklPXFxEb2N1bWVudHNcXEdpdGh1YlxcR2FsYXh5S0otd2FsbGV0LS0tSGFja1xcd2ViXFxub2RlX21vZHVsZXNcXEBzdGVsbGFyXFxzdGVsbGFyLWJhc2VcXGxpYlxcZXZlbnRzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5odW1hbml6ZUV2ZW50cyA9IGh1bWFuaXplRXZlbnRzO1xudmFyIF9zdHJrZXkgPSByZXF1aXJlKFwiLi9zdHJrZXlcIik7XG52YXIgX3NjdmFsID0gcmVxdWlyZShcIi4vc2N2YWxcIik7XG5mdW5jdGlvbiBfdHlwZW9mKG8pIHsgXCJAYmFiZWwvaGVscGVycyAtIHR5cGVvZlwiOyByZXR1cm4gX3R5cGVvZiA9IFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgU3ltYm9sICYmIFwic3ltYm9sXCIgPT0gdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA/IGZ1bmN0aW9uIChvKSB7IHJldHVybiB0eXBlb2YgbzsgfSA6IGZ1bmN0aW9uIChvKSB7IHJldHVybiBvICYmIFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgU3ltYm9sICYmIG8uY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvOyB9LCBfdHlwZW9mKG8pOyB9XG5mdW5jdGlvbiBvd25LZXlzKGUsIHIpIHsgdmFyIHQgPSBPYmplY3Qua2V5cyhlKTsgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHsgdmFyIG8gPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKGUpOyByICYmIChvID0gby5maWx0ZXIoZnVuY3Rpb24gKHIpIHsgcmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoZSwgcikuZW51bWVyYWJsZTsgfSkpLCB0LnB1c2guYXBwbHkodCwgbyk7IH0gcmV0dXJuIHQ7IH1cbmZ1bmN0aW9uIF9vYmplY3RTcHJlYWQoZSkgeyBmb3IgKHZhciByID0gMTsgciA8IGFyZ3VtZW50cy5sZW5ndGg7IHIrKykgeyB2YXIgdCA9IG51bGwgIT0gYXJndW1lbnRzW3JdID8gYXJndW1lbnRzW3JdIDoge307IHIgJSAyID8gb3duS2V5cyhPYmplY3QodCksICEwKS5mb3JFYWNoKGZ1bmN0aW9uIChyKSB7IF9kZWZpbmVQcm9wZXJ0eShlLCByLCB0W3JdKTsgfSkgOiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyA/IE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKGUsIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKHQpKSA6IG93bktleXMoT2JqZWN0KHQpKS5mb3JFYWNoKGZ1bmN0aW9uIChyKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLCByLCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHQsIHIpKTsgfSk7IH0gcmV0dXJuIGU7IH1cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShlLCByLCB0KSB7IHJldHVybiAociA9IF90b1Byb3BlcnR5S2V5KHIpKSBpbiBlID8gT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsIHIsIHsgdmFsdWU6IHQsIGVudW1lcmFibGU6ICEwLCBjb25maWd1cmFibGU6ICEwLCB3cml0YWJsZTogITAgfSkgOiBlW3JdID0gdCwgZTsgfVxuZnVuY3Rpb24gX3RvUHJvcGVydHlLZXkodCkgeyB2YXIgaSA9IF90b1ByaW1pdGl2ZSh0LCBcInN0cmluZ1wiKTsgcmV0dXJuIFwic3ltYm9sXCIgPT0gX3R5cGVvZihpKSA/IGkgOiBpICsgXCJcIjsgfVxuZnVuY3Rpb24gX3RvUHJpbWl0aXZlKHQsIHIpIHsgaWYgKFwib2JqZWN0XCIgIT0gX3R5cGVvZih0KSB8fCAhdCkgcmV0dXJuIHQ7IHZhciBlID0gdFtTeW1ib2wudG9QcmltaXRpdmVdOyBpZiAodm9pZCAwICE9PSBlKSB7IHZhciBpID0gZS5jYWxsKHQsIHIgfHwgXCJkZWZhdWx0XCIpOyBpZiAoXCJvYmplY3RcIiAhPSBfdHlwZW9mKGkpKSByZXR1cm4gaTsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkBAdG9QcmltaXRpdmUgbXVzdCByZXR1cm4gYSBwcmltaXRpdmUgdmFsdWUuXCIpOyB9IHJldHVybiAoXCJzdHJpbmdcIiA9PT0gciA/IFN0cmluZyA6IE51bWJlcikodCk7IH1cbi8qKlxuICogQ29udmVydHMgcmF3IGRpYWdub3N0aWMgb3IgY29udHJhY3QgZXZlbnRzIGludG8gc29tZXRoaW5nIHdpdGggYSBmbGF0dGVyLFxuICogaHVtYW4tcmVhZGFibGUsIGFuZCB1bmRlcnN0YW5kYWJsZSBzdHJ1Y3R1cmUuXG4gKlxuICogQHBhcmFtIHt4ZHIuRGlhZ25vc3RpY0V2ZW50W10gfCB4ZHIuQ29udHJhY3RFdmVudFtdfSBldmVudHMgIGVpdGhlciBjb250cmFjdFxuICogICAgZXZlbnRzIG9yIGRpYWdub3N0aWMgZXZlbnRzIHRvIHBhcnNlIGludG8gYSBmcmllbmRseSBmb3JtYXRcbiAqXG4gKiBAcmV0dXJucyB7U29yb2JhbkV2ZW50W119ICBhIGxpc3Qgb2YgaHVtYW4tcmVhZGFibGUgZXZlbnQgc3RydWN0dXJlcywgd2hlcmVcbiAqICAgIGVhY2ggZWxlbWVudCBoYXMgdGhlIGZvbGxvd2luZyBwcm9wZXJ0aWVzOlxuICogIC0gdHlwZTogYSBzdHJpbmcgb2Ygb25lIG9mICdzeXN0ZW0nLCAnY29udHJhY3QnLCAnZGlhZ25vc3RpY1xuICogIC0gY29udHJhY3RJZD86IG9wdGlvbmFsbHksIGEgYEMuLi5gIGVuY29kZWQgc3Rya2V5XG4gKiAgLSB0b3BpY3M6IGEgbGlzdCBvZiB7QGxpbmsgc2NWYWxUb05hdGl2ZX0gaW52b2NhdGlvbnMgb24gdGhlIHRvcGljc1xuICogIC0gZGF0YTogc2ltaWxhcmx5LCBhIHtAbGluayBzY1ZhbFRvTmF0aXZlfSBpbnZvY2F0aW9uIG9uIHRoZSByYXcgZXZlbnQgZGF0YVxuICovXG5mdW5jdGlvbiBodW1hbml6ZUV2ZW50cyhldmVudHMpIHtcbiAgcmV0dXJuIGV2ZW50cy5tYXAoZnVuY3Rpb24gKGUpIHtcbiAgICAvLyBBIHBzZXVkby1pbnN0YW5jZW9mIGNoZWNrIGZvciB4ZHIuRGlhZ25vc3RpY0V2ZW50IG1vcmUgcmVsaWFibGVcbiAgICAvLyBpbiBtaXhlZCBTREsgZW52aXJvbm1lbnRzOlxuICAgIGlmIChlLmluU3VjY2Vzc2Z1bENvbnRyYWN0Q2FsbCkge1xuICAgICAgcmV0dXJuIGV4dHJhY3RFdmVudChlLmV2ZW50KCkpO1xuICAgIH1cbiAgICByZXR1cm4gZXh0cmFjdEV2ZW50KGUpO1xuICB9KTtcbn1cbmZ1bmN0aW9uIGV4dHJhY3RFdmVudChldmVudCkge1xuICByZXR1cm4gX29iamVjdFNwcmVhZChfb2JqZWN0U3ByZWFkKHt9LCB0eXBlb2YgZXZlbnQuY29udHJhY3RJZCA9PT0gJ2Z1bmN0aW9uJyAmJiBldmVudC5jb250cmFjdElkKCkgIT0gbnVsbCAmJiB7XG4gICAgY29udHJhY3RJZDogX3N0cmtleS5TdHJLZXkuZW5jb2RlQ29udHJhY3QoZXZlbnQuY29udHJhY3RJZCgpKVxuICB9KSwge30sIHtcbiAgICB0eXBlOiBldmVudC50eXBlKCkubmFtZSxcbiAgICB0b3BpY3M6IGV2ZW50LmJvZHkoKS52YWx1ZSgpLnRvcGljcygpLm1hcChmdW5jdGlvbiAodCkge1xuICAgICAgcmV0dXJuICgwLCBfc2N2YWwuc2NWYWxUb05hdGl2ZSkodCk7XG4gICAgfSksXG4gICAgZGF0YTogKDAsIF9zY3ZhbC5zY1ZhbFRvTmF0aXZlKShldmVudC5ib2R5KCkudmFsdWUoKS5kYXRhKCkpXG4gIH0pO1xufSJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@stellar/stellar-base/lib/events.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@stellar/stellar-base/lib/fee_bump_transaction.js":
/*!************************************************************************!*\
  !*** ./node_modules/@stellar/stellar-base/lib/fee_bump_transaction.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.FeeBumpTransaction = void 0;\nvar _xdr = _interopRequireDefault(__webpack_require__(/*! ./xdr */ \"(ssr)/./node_modules/@stellar/stellar-base/lib/xdr.js\"));\nvar _hashing = __webpack_require__(/*! ./hashing */ \"(ssr)/./node_modules/@stellar/stellar-base/lib/hashing.js\");\nvar _transaction = __webpack_require__(/*! ./transaction */ \"(ssr)/./node_modules/@stellar/stellar-base/lib/transaction.js\");\nvar _transaction_base = __webpack_require__(/*! ./transaction_base */ \"(ssr)/./node_modules/@stellar/stellar-base/lib/transaction_base.js\");\nvar _decode_encode_muxed_account = __webpack_require__(/*! ./util/decode_encode_muxed_account */ \"(ssr)/./node_modules/@stellar/stellar-base/lib/util/decode_encode_muxed_account.js\");\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { \"default\": e }; }\nfunction _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\nfunction _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }\nfunction _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nfunction _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }\nfunction _possibleConstructorReturn(t, e) { if (e && (\"object\" == _typeof(e) || \"function\" == typeof e)) return e; if (void 0 !== e) throw new TypeError(\"Derived constructors may only return object or undefined\"); return _assertThisInitialized(t); }\nfunction _assertThisInitialized(e) { if (void 0 === e) throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); return e; }\nfunction _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }\nfunction _getPrototypeOf(t) { return _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function (t) { return t.__proto__ || Object.getPrototypeOf(t); }, _getPrototypeOf(t); }\nfunction _inherits(t, e) { if (\"function\" != typeof e && null !== e) throw new TypeError(\"Super expression must either be null or a function\"); t.prototype = Object.create(e && e.prototype, { constructor: { value: t, writable: !0, configurable: !0 } }), Object.defineProperty(t, \"prototype\", { writable: !1 }), e && _setPrototypeOf(t, e); }\nfunction _setPrototypeOf(t, e) { return _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function (t, e) { return t.__proto__ = e, t; }, _setPrototypeOf(t, e); }\n/**\n * Use {@link TransactionBuilder.buildFeeBumpTransaction} to build a\n * FeeBumpTransaction object. If you have an object or base64-encoded string of\n * the transaction envelope XDR use {@link TransactionBuilder.fromXDR}.\n *\n * Once a {@link FeeBumpTransaction} has been created, its attributes and operations\n * should not be changed. You should only add signatures (using {@link FeeBumpTransaction#sign}) before\n * submitting to the network or forwarding on to additional signers.\n *\n * @param {string|xdr.TransactionEnvelope} envelope - transaction envelope\n *     object or base64 encoded string.\n * @param {string} networkPassphrase - passphrase of the target Stellar network\n *     (e.g. \"Public Global Stellar Network ; September 2015\").\n *\n * @extends TransactionBase\n */\nvar FeeBumpTransaction = exports.FeeBumpTransaction = /*#__PURE__*/function (_TransactionBase) {\n  function FeeBumpTransaction(envelope, networkPassphrase) {\n    var _this;\n    _classCallCheck(this, FeeBumpTransaction);\n    if (typeof envelope === 'string') {\n      var buffer = Buffer.from(envelope, 'base64');\n      envelope = _xdr[\"default\"].TransactionEnvelope.fromXDR(buffer);\n    }\n    var envelopeType = envelope[\"switch\"]();\n    if (envelopeType !== _xdr[\"default\"].EnvelopeType.envelopeTypeTxFeeBump()) {\n      throw new Error(\"Invalid TransactionEnvelope: expected an envelopeTypeTxFeeBump but received an \".concat(envelopeType.name, \".\"));\n    }\n    var txEnvelope = envelope.value();\n    var tx = txEnvelope.tx();\n    var fee = tx.fee().toString();\n    // clone signatures\n    var signatures = (txEnvelope.signatures() || []).slice();\n    _this = _callSuper(this, FeeBumpTransaction, [tx, signatures, fee, networkPassphrase]);\n    var innerTxEnvelope = _xdr[\"default\"].TransactionEnvelope.envelopeTypeTx(tx.innerTx().v1());\n    _this._feeSource = (0, _decode_encode_muxed_account.encodeMuxedAccountToAddress)(_this.tx.feeSource());\n    _this._innerTransaction = new _transaction.Transaction(innerTxEnvelope, networkPassphrase);\n    return _this;\n  }\n\n  /**\n   * @type {Transaction}\n   * @readonly\n   */\n  _inherits(FeeBumpTransaction, _TransactionBase);\n  return _createClass(FeeBumpTransaction, [{\n    key: \"innerTransaction\",\n    get: function get() {\n      return this._innerTransaction;\n    }\n\n    /**\n     * @type {Operation[]}\n     * @readonly\n     */\n  }, {\n    key: \"operations\",\n    get: function get() {\n      return this._innerTransaction.operations;\n    }\n\n    /**\n     * @type {string}\n     * @readonly\n     */\n  }, {\n    key: \"feeSource\",\n    get: function get() {\n      return this._feeSource;\n    }\n\n    /**\n     * Returns the \"signature base\" of this transaction, which is the value\n     * that, when hashed, should be signed to create a signature that\n     * validators on the Stellar Network will accept.\n     *\n     * It is composed of a 4 prefix bytes followed by the xdr-encoded form\n     * of this transaction.\n     * @returns {Buffer}\n     */\n  }, {\n    key: \"signatureBase\",\n    value: function signatureBase() {\n      var taggedTransaction = new _xdr[\"default\"].TransactionSignaturePayloadTaggedTransaction.envelopeTypeTxFeeBump(this.tx);\n      var txSignature = new _xdr[\"default\"].TransactionSignaturePayload({\n        networkId: _xdr[\"default\"].Hash.fromXDR((0, _hashing.hash)(this.networkPassphrase)),\n        taggedTransaction: taggedTransaction\n      });\n      return txSignature.toXDR();\n    }\n\n    /**\n     * To envelope returns a xdr.TransactionEnvelope which can be submitted to the network.\n     * @returns {xdr.TransactionEnvelope}\n     */\n  }, {\n    key: \"toEnvelope\",\n    value: function toEnvelope() {\n      var envelope = new _xdr[\"default\"].FeeBumpTransactionEnvelope({\n        tx: _xdr[\"default\"].FeeBumpTransaction.fromXDR(this.tx.toXDR()),\n        // make a copy of the tx\n        signatures: this.signatures.slice() // make a copy of the signatures\n      });\n      return new _xdr[\"default\"].TransactionEnvelope.envelopeTypeTxFeeBump(envelope);\n    }\n  }]);\n}(_transaction_base.TransactionBase);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@stellar/stellar-base/lib/fee_bump_transaction.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@stellar/stellar-base/lib/generated/curr_generated.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@stellar/stellar-base/lib/generated/curr_generated.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports[\"default\"] = void 0;\nvar XDR = _interopRequireWildcard(__webpack_require__(/*! @stellar/js-xdr */ \"(ssr)/./node_modules/@stellar/js-xdr/src/index.js\"));\nfunction _getRequireWildcardCache(e) { if (\"function\" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }\nfunction _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || \"object\" != _typeof(e) && \"function\" != typeof e) return { \"default\": e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if (\"default\" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n[\"default\"] = e, t && t.set(e, n), n; }\n// Automatically generated by xdrgen on 2024-09-12T11:09:00-08:00\n// DO NOT EDIT or your changes may be overwritten\n\n/* jshint maxstatements:2147483647  */\n/* jshint esnext:true  */\n\nvar types = XDR.config(function (xdr) {\n  // Workaround for https://github.com/stellar/xdrgen/issues/152\n  //\n  // The \"correct\" way would be to replace bare instances of each constant with\n  // xdr.lookup(\"...\"), but that's more error-prone.\n  var SCSYMBOL_LIMIT = 32;\n  var SC_SPEC_DOC_LIMIT = 1024;\n\n  // === xdr source ============================================================\n  //\n  //   typedef opaque Value<>;\n  //\n  // ===========================================================================\n  xdr.typedef(\"Value\", xdr.varOpaque());\n\n  // === xdr source ============================================================\n  //\n  //   struct SCPBallot\n  //   {\n  //       uint32 counter; // n\n  //       Value value;    // x\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"ScpBallot\", [[\"counter\", xdr.lookup(\"Uint32\")], [\"value\", xdr.lookup(\"Value\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   enum SCPStatementType\n  //   {\n  //       SCP_ST_PREPARE = 0,\n  //       SCP_ST_CONFIRM = 1,\n  //       SCP_ST_EXTERNALIZE = 2,\n  //       SCP_ST_NOMINATE = 3\n  //   };\n  //\n  // ===========================================================================\n  xdr[\"enum\"](\"ScpStatementType\", {\n    scpStPrepare: 0,\n    scpStConfirm: 1,\n    scpStExternalize: 2,\n    scpStNominate: 3\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct SCPNomination\n  //   {\n  //       Hash quorumSetHash; // D\n  //       Value votes<>;      // X\n  //       Value accepted<>;   // Y\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"ScpNomination\", [[\"quorumSetHash\", xdr.lookup(\"Hash\")], [\"votes\", xdr.varArray(xdr.lookup(\"Value\"), 2147483647)], [\"accepted\", xdr.varArray(xdr.lookup(\"Value\"), 2147483647)]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct\n  //           {\n  //               Hash quorumSetHash;       // D\n  //               SCPBallot ballot;         // b\n  //               SCPBallot* prepared;      // p\n  //               SCPBallot* preparedPrime; // p'\n  //               uint32 nC;                // c.n\n  //               uint32 nH;                // h.n\n  //           }\n  //\n  // ===========================================================================\n  xdr.struct(\"ScpStatementPrepare\", [[\"quorumSetHash\", xdr.lookup(\"Hash\")], [\"ballot\", xdr.lookup(\"ScpBallot\")], [\"prepared\", xdr.option(xdr.lookup(\"ScpBallot\"))], [\"preparedPrime\", xdr.option(xdr.lookup(\"ScpBallot\"))], [\"nC\", xdr.lookup(\"Uint32\")], [\"nH\", xdr.lookup(\"Uint32\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct\n  //           {\n  //               SCPBallot ballot;   // b\n  //               uint32 nPrepared;   // p.n\n  //               uint32 nCommit;     // c.n\n  //               uint32 nH;          // h.n\n  //               Hash quorumSetHash; // D\n  //           }\n  //\n  // ===========================================================================\n  xdr.struct(\"ScpStatementConfirm\", [[\"ballot\", xdr.lookup(\"ScpBallot\")], [\"nPrepared\", xdr.lookup(\"Uint32\")], [\"nCommit\", xdr.lookup(\"Uint32\")], [\"nH\", xdr.lookup(\"Uint32\")], [\"quorumSetHash\", xdr.lookup(\"Hash\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct\n  //           {\n  //               SCPBallot commit;         // c\n  //               uint32 nH;                // h.n\n  //               Hash commitQuorumSetHash; // D used before EXTERNALIZE\n  //           }\n  //\n  // ===========================================================================\n  xdr.struct(\"ScpStatementExternalize\", [[\"commit\", xdr.lookup(\"ScpBallot\")], [\"nH\", xdr.lookup(\"Uint32\")], [\"commitQuorumSetHash\", xdr.lookup(\"Hash\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   union switch (SCPStatementType type)\n  //       {\n  //       case SCP_ST_PREPARE:\n  //           struct\n  //           {\n  //               Hash quorumSetHash;       // D\n  //               SCPBallot ballot;         // b\n  //               SCPBallot* prepared;      // p\n  //               SCPBallot* preparedPrime; // p'\n  //               uint32 nC;                // c.n\n  //               uint32 nH;                // h.n\n  //           } prepare;\n  //       case SCP_ST_CONFIRM:\n  //           struct\n  //           {\n  //               SCPBallot ballot;   // b\n  //               uint32 nPrepared;   // p.n\n  //               uint32 nCommit;     // c.n\n  //               uint32 nH;          // h.n\n  //               Hash quorumSetHash; // D\n  //           } confirm;\n  //       case SCP_ST_EXTERNALIZE:\n  //           struct\n  //           {\n  //               SCPBallot commit;         // c\n  //               uint32 nH;                // h.n\n  //               Hash commitQuorumSetHash; // D used before EXTERNALIZE\n  //           } externalize;\n  //       case SCP_ST_NOMINATE:\n  //           SCPNomination nominate;\n  //       }\n  //\n  // ===========================================================================\n  xdr.union(\"ScpStatementPledges\", {\n    switchOn: xdr.lookup(\"ScpStatementType\"),\n    switchName: \"type\",\n    switches: [[\"scpStPrepare\", \"prepare\"], [\"scpStConfirm\", \"confirm\"], [\"scpStExternalize\", \"externalize\"], [\"scpStNominate\", \"nominate\"]],\n    arms: {\n      prepare: xdr.lookup(\"ScpStatementPrepare\"),\n      confirm: xdr.lookup(\"ScpStatementConfirm\"),\n      externalize: xdr.lookup(\"ScpStatementExternalize\"),\n      nominate: xdr.lookup(\"ScpNomination\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct SCPStatement\n  //   {\n  //       NodeID nodeID;    // v\n  //       uint64 slotIndex; // i\n  //\n  //       union switch (SCPStatementType type)\n  //       {\n  //       case SCP_ST_PREPARE:\n  //           struct\n  //           {\n  //               Hash quorumSetHash;       // D\n  //               SCPBallot ballot;         // b\n  //               SCPBallot* prepared;      // p\n  //               SCPBallot* preparedPrime; // p'\n  //               uint32 nC;                // c.n\n  //               uint32 nH;                // h.n\n  //           } prepare;\n  //       case SCP_ST_CONFIRM:\n  //           struct\n  //           {\n  //               SCPBallot ballot;   // b\n  //               uint32 nPrepared;   // p.n\n  //               uint32 nCommit;     // c.n\n  //               uint32 nH;          // h.n\n  //               Hash quorumSetHash; // D\n  //           } confirm;\n  //       case SCP_ST_EXTERNALIZE:\n  //           struct\n  //           {\n  //               SCPBallot commit;         // c\n  //               uint32 nH;                // h.n\n  //               Hash commitQuorumSetHash; // D used before EXTERNALIZE\n  //           } externalize;\n  //       case SCP_ST_NOMINATE:\n  //           SCPNomination nominate;\n  //       }\n  //       pledges;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"ScpStatement\", [[\"nodeId\", xdr.lookup(\"NodeId\")], [\"slotIndex\", xdr.lookup(\"Uint64\")], [\"pledges\", xdr.lookup(\"ScpStatementPledges\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct SCPEnvelope\n  //   {\n  //       SCPStatement statement;\n  //       Signature signature;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"ScpEnvelope\", [[\"statement\", xdr.lookup(\"ScpStatement\")], [\"signature\", xdr.lookup(\"Signature\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct SCPQuorumSet\n  //   {\n  //       uint32 threshold;\n  //       NodeID validators<>;\n  //       SCPQuorumSet innerSets<>;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"ScpQuorumSet\", [[\"threshold\", xdr.lookup(\"Uint32\")], [\"validators\", xdr.varArray(xdr.lookup(\"NodeId\"), 2147483647)], [\"innerSets\", xdr.varArray(xdr.lookup(\"ScpQuorumSet\"), 2147483647)]]);\n\n  // === xdr source ============================================================\n  //\n  //   typedef opaque Thresholds[4];\n  //\n  // ===========================================================================\n  xdr.typedef(\"Thresholds\", xdr.opaque(4));\n\n  // === xdr source ============================================================\n  //\n  //   typedef string string32<32>;\n  //\n  // ===========================================================================\n  xdr.typedef(\"String32\", xdr.string(32));\n\n  // === xdr source ============================================================\n  //\n  //   typedef string string64<64>;\n  //\n  // ===========================================================================\n  xdr.typedef(\"String64\", xdr.string(64));\n\n  // === xdr source ============================================================\n  //\n  //   typedef int64 SequenceNumber;\n  //\n  // ===========================================================================\n  xdr.typedef(\"SequenceNumber\", xdr.lookup(\"Int64\"));\n\n  // === xdr source ============================================================\n  //\n  //   typedef opaque DataValue<64>;\n  //\n  // ===========================================================================\n  xdr.typedef(\"DataValue\", xdr.varOpaque(64));\n\n  // === xdr source ============================================================\n  //\n  //   typedef Hash PoolID;\n  //\n  // ===========================================================================\n  xdr.typedef(\"PoolId\", xdr.lookup(\"Hash\"));\n\n  // === xdr source ============================================================\n  //\n  //   typedef opaque AssetCode4[4];\n  //\n  // ===========================================================================\n  xdr.typedef(\"AssetCode4\", xdr.opaque(4));\n\n  // === xdr source ============================================================\n  //\n  //   typedef opaque AssetCode12[12];\n  //\n  // ===========================================================================\n  xdr.typedef(\"AssetCode12\", xdr.opaque(12));\n\n  // === xdr source ============================================================\n  //\n  //   enum AssetType\n  //   {\n  //       ASSET_TYPE_NATIVE = 0,\n  //       ASSET_TYPE_CREDIT_ALPHANUM4 = 1,\n  //       ASSET_TYPE_CREDIT_ALPHANUM12 = 2,\n  //       ASSET_TYPE_POOL_SHARE = 3\n  //   };\n  //\n  // ===========================================================================\n  xdr[\"enum\"](\"AssetType\", {\n    assetTypeNative: 0,\n    assetTypeCreditAlphanum4: 1,\n    assetTypeCreditAlphanum12: 2,\n    assetTypePoolShare: 3\n  });\n\n  // === xdr source ============================================================\n  //\n  //   union AssetCode switch (AssetType type)\n  //   {\n  //   case ASSET_TYPE_CREDIT_ALPHANUM4:\n  //       AssetCode4 assetCode4;\n  //\n  //   case ASSET_TYPE_CREDIT_ALPHANUM12:\n  //       AssetCode12 assetCode12;\n  //\n  //       // add other asset types here in the future\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"AssetCode\", {\n    switchOn: xdr.lookup(\"AssetType\"),\n    switchName: \"type\",\n    switches: [[\"assetTypeCreditAlphanum4\", \"assetCode4\"], [\"assetTypeCreditAlphanum12\", \"assetCode12\"]],\n    arms: {\n      assetCode4: xdr.lookup(\"AssetCode4\"),\n      assetCode12: xdr.lookup(\"AssetCode12\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct AlphaNum4\n  //   {\n  //       AssetCode4 assetCode;\n  //       AccountID issuer;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"AlphaNum4\", [[\"assetCode\", xdr.lookup(\"AssetCode4\")], [\"issuer\", xdr.lookup(\"AccountId\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct AlphaNum12\n  //   {\n  //       AssetCode12 assetCode;\n  //       AccountID issuer;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"AlphaNum12\", [[\"assetCode\", xdr.lookup(\"AssetCode12\")], [\"issuer\", xdr.lookup(\"AccountId\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   union Asset switch (AssetType type)\n  //   {\n  //   case ASSET_TYPE_NATIVE: // Not credit\n  //       void;\n  //\n  //   case ASSET_TYPE_CREDIT_ALPHANUM4:\n  //       AlphaNum4 alphaNum4;\n  //\n  //   case ASSET_TYPE_CREDIT_ALPHANUM12:\n  //       AlphaNum12 alphaNum12;\n  //\n  //       // add other asset types here in the future\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"Asset\", {\n    switchOn: xdr.lookup(\"AssetType\"),\n    switchName: \"type\",\n    switches: [[\"assetTypeNative\", xdr[\"void\"]()], [\"assetTypeCreditAlphanum4\", \"alphaNum4\"], [\"assetTypeCreditAlphanum12\", \"alphaNum12\"]],\n    arms: {\n      alphaNum4: xdr.lookup(\"AlphaNum4\"),\n      alphaNum12: xdr.lookup(\"AlphaNum12\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct Price\n  //   {\n  //       int32 n; // numerator\n  //       int32 d; // denominator\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"Price\", [[\"n\", xdr.lookup(\"Int32\")], [\"d\", xdr.lookup(\"Int32\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct Liabilities\n  //   {\n  //       int64 buying;\n  //       int64 selling;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"Liabilities\", [[\"buying\", xdr.lookup(\"Int64\")], [\"selling\", xdr.lookup(\"Int64\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   enum ThresholdIndexes\n  //   {\n  //       THRESHOLD_MASTER_WEIGHT = 0,\n  //       THRESHOLD_LOW = 1,\n  //       THRESHOLD_MED = 2,\n  //       THRESHOLD_HIGH = 3\n  //   };\n  //\n  // ===========================================================================\n  xdr[\"enum\"](\"ThresholdIndices\", {\n    thresholdMasterWeight: 0,\n    thresholdLow: 1,\n    thresholdMed: 2,\n    thresholdHigh: 3\n  });\n\n  // === xdr source ============================================================\n  //\n  //   enum LedgerEntryType\n  //   {\n  //       ACCOUNT = 0,\n  //       TRUSTLINE = 1,\n  //       OFFER = 2,\n  //       DATA = 3,\n  //       CLAIMABLE_BALANCE = 4,\n  //       LIQUIDITY_POOL = 5,\n  //       CONTRACT_DATA = 6,\n  //       CONTRACT_CODE = 7,\n  //       CONFIG_SETTING = 8,\n  //       TTL = 9\n  //   };\n  //\n  // ===========================================================================\n  xdr[\"enum\"](\"LedgerEntryType\", {\n    account: 0,\n    trustline: 1,\n    offer: 2,\n    data: 3,\n    claimableBalance: 4,\n    liquidityPool: 5,\n    contractData: 6,\n    contractCode: 7,\n    configSetting: 8,\n    ttl: 9\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct Signer\n  //   {\n  //       SignerKey key;\n  //       uint32 weight; // really only need 1 byte\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"Signer\", [[\"key\", xdr.lookup(\"SignerKey\")], [\"weight\", xdr.lookup(\"Uint32\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   enum AccountFlags\n  //   { // masks for each flag\n  //\n  //       // Flags set on issuer accounts\n  //       // TrustLines are created with authorized set to \"false\" requiring\n  //       // the issuer to set it for each TrustLine\n  //       AUTH_REQUIRED_FLAG = 0x1,\n  //       // If set, the authorized flag in TrustLines can be cleared\n  //       // otherwise, authorization cannot be revoked\n  //       AUTH_REVOCABLE_FLAG = 0x2,\n  //       // Once set, causes all AUTH_* flags to be read-only\n  //       AUTH_IMMUTABLE_FLAG = 0x4,\n  //       // Trustlines are created with clawback enabled set to \"true\",\n  //       // and claimable balances created from those trustlines are created\n  //       // with clawback enabled set to \"true\"\n  //       AUTH_CLAWBACK_ENABLED_FLAG = 0x8\n  //   };\n  //\n  // ===========================================================================\n  xdr[\"enum\"](\"AccountFlags\", {\n    authRequiredFlag: 1,\n    authRevocableFlag: 2,\n    authImmutableFlag: 4,\n    authClawbackEnabledFlag: 8\n  });\n\n  // === xdr source ============================================================\n  //\n  //   const MASK_ACCOUNT_FLAGS = 0x7;\n  //\n  // ===========================================================================\n  xdr[\"const\"](\"MASK_ACCOUNT_FLAGS\", 0x7);\n\n  // === xdr source ============================================================\n  //\n  //   const MASK_ACCOUNT_FLAGS_V17 = 0xF;\n  //\n  // ===========================================================================\n  xdr[\"const\"](\"MASK_ACCOUNT_FLAGS_V17\", 0xF);\n\n  // === xdr source ============================================================\n  //\n  //   const MAX_SIGNERS = 20;\n  //\n  // ===========================================================================\n  xdr[\"const\"](\"MAX_SIGNERS\", 20);\n\n  // === xdr source ============================================================\n  //\n  //   typedef AccountID* SponsorshipDescriptor;\n  //\n  // ===========================================================================\n  xdr.typedef(\"SponsorshipDescriptor\", xdr.option(xdr.lookup(\"AccountId\")));\n\n  // === xdr source ============================================================\n  //\n  //   struct AccountEntryExtensionV3\n  //   {\n  //       // We can use this to add more fields, or because it is first, to\n  //       // change AccountEntryExtensionV3 into a union.\n  //       ExtensionPoint ext;\n  //\n  //       // Ledger number at which `seqNum` took on its present value.\n  //       uint32 seqLedger;\n  //\n  //       // Time at which `seqNum` took on its present value.\n  //       TimePoint seqTime;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"AccountEntryExtensionV3\", [[\"ext\", xdr.lookup(\"ExtensionPoint\")], [\"seqLedger\", xdr.lookup(\"Uint32\")], [\"seqTime\", xdr.lookup(\"TimePoint\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   union switch (int v)\n  //       {\n  //       case 0:\n  //           void;\n  //       case 3:\n  //           AccountEntryExtensionV3 v3;\n  //       }\n  //\n  // ===========================================================================\n  xdr.union(\"AccountEntryExtensionV2Ext\", {\n    switchOn: xdr[\"int\"](),\n    switchName: \"v\",\n    switches: [[0, xdr[\"void\"]()], [3, \"v3\"]],\n    arms: {\n      v3: xdr.lookup(\"AccountEntryExtensionV3\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct AccountEntryExtensionV2\n  //   {\n  //       uint32 numSponsored;\n  //       uint32 numSponsoring;\n  //       SponsorshipDescriptor signerSponsoringIDs<MAX_SIGNERS>;\n  //\n  //       union switch (int v)\n  //       {\n  //       case 0:\n  //           void;\n  //       case 3:\n  //           AccountEntryExtensionV3 v3;\n  //       }\n  //       ext;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"AccountEntryExtensionV2\", [[\"numSponsored\", xdr.lookup(\"Uint32\")], [\"numSponsoring\", xdr.lookup(\"Uint32\")], [\"signerSponsoringIDs\", xdr.varArray(xdr.lookup(\"SponsorshipDescriptor\"), xdr.lookup(\"MAX_SIGNERS\"))], [\"ext\", xdr.lookup(\"AccountEntryExtensionV2Ext\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   union switch (int v)\n  //       {\n  //       case 0:\n  //           void;\n  //       case 2:\n  //           AccountEntryExtensionV2 v2;\n  //       }\n  //\n  // ===========================================================================\n  xdr.union(\"AccountEntryExtensionV1Ext\", {\n    switchOn: xdr[\"int\"](),\n    switchName: \"v\",\n    switches: [[0, xdr[\"void\"]()], [2, \"v2\"]],\n    arms: {\n      v2: xdr.lookup(\"AccountEntryExtensionV2\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct AccountEntryExtensionV1\n  //   {\n  //       Liabilities liabilities;\n  //\n  //       union switch (int v)\n  //       {\n  //       case 0:\n  //           void;\n  //       case 2:\n  //           AccountEntryExtensionV2 v2;\n  //       }\n  //       ext;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"AccountEntryExtensionV1\", [[\"liabilities\", xdr.lookup(\"Liabilities\")], [\"ext\", xdr.lookup(\"AccountEntryExtensionV1Ext\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   union switch (int v)\n  //       {\n  //       case 0:\n  //           void;\n  //       case 1:\n  //           AccountEntryExtensionV1 v1;\n  //       }\n  //\n  // ===========================================================================\n  xdr.union(\"AccountEntryExt\", {\n    switchOn: xdr[\"int\"](),\n    switchName: \"v\",\n    switches: [[0, xdr[\"void\"]()], [1, \"v1\"]],\n    arms: {\n      v1: xdr.lookup(\"AccountEntryExtensionV1\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct AccountEntry\n  //   {\n  //       AccountID accountID;      // master public key for this account\n  //       int64 balance;            // in stroops\n  //       SequenceNumber seqNum;    // last sequence number used for this account\n  //       uint32 numSubEntries;     // number of sub-entries this account has\n  //                                 // drives the reserve\n  //       AccountID* inflationDest; // Account to vote for during inflation\n  //       uint32 flags;             // see AccountFlags\n  //\n  //       string32 homeDomain; // can be used for reverse federation and memo lookup\n  //\n  //       // fields used for signatures\n  //       // thresholds stores unsigned bytes: [weight of master|low|medium|high]\n  //       Thresholds thresholds;\n  //\n  //       Signer signers<MAX_SIGNERS>; // possible signers for this account\n  //\n  //       // reserved for future use\n  //       union switch (int v)\n  //       {\n  //       case 0:\n  //           void;\n  //       case 1:\n  //           AccountEntryExtensionV1 v1;\n  //       }\n  //       ext;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"AccountEntry\", [[\"accountId\", xdr.lookup(\"AccountId\")], [\"balance\", xdr.lookup(\"Int64\")], [\"seqNum\", xdr.lookup(\"SequenceNumber\")], [\"numSubEntries\", xdr.lookup(\"Uint32\")], [\"inflationDest\", xdr.option(xdr.lookup(\"AccountId\"))], [\"flags\", xdr.lookup(\"Uint32\")], [\"homeDomain\", xdr.lookup(\"String32\")], [\"thresholds\", xdr.lookup(\"Thresholds\")], [\"signers\", xdr.varArray(xdr.lookup(\"Signer\"), xdr.lookup(\"MAX_SIGNERS\"))], [\"ext\", xdr.lookup(\"AccountEntryExt\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   enum TrustLineFlags\n  //   {\n  //       // issuer has authorized account to perform transactions with its credit\n  //       AUTHORIZED_FLAG = 1,\n  //       // issuer has authorized account to maintain and reduce liabilities for its\n  //       // credit\n  //       AUTHORIZED_TO_MAINTAIN_LIABILITIES_FLAG = 2,\n  //       // issuer has specified that it may clawback its credit, and that claimable\n  //       // balances created with its credit may also be clawed back\n  //       TRUSTLINE_CLAWBACK_ENABLED_FLAG = 4\n  //   };\n  //\n  // ===========================================================================\n  xdr[\"enum\"](\"TrustLineFlags\", {\n    authorizedFlag: 1,\n    authorizedToMaintainLiabilitiesFlag: 2,\n    trustlineClawbackEnabledFlag: 4\n  });\n\n  // === xdr source ============================================================\n  //\n  //   const MASK_TRUSTLINE_FLAGS = 1;\n  //\n  // ===========================================================================\n  xdr[\"const\"](\"MASK_TRUSTLINE_FLAGS\", 1);\n\n  // === xdr source ============================================================\n  //\n  //   const MASK_TRUSTLINE_FLAGS_V13 = 3;\n  //\n  // ===========================================================================\n  xdr[\"const\"](\"MASK_TRUSTLINE_FLAGS_V13\", 3);\n\n  // === xdr source ============================================================\n  //\n  //   const MASK_TRUSTLINE_FLAGS_V17 = 7;\n  //\n  // ===========================================================================\n  xdr[\"const\"](\"MASK_TRUSTLINE_FLAGS_V17\", 7);\n\n  // === xdr source ============================================================\n  //\n  //   enum LiquidityPoolType\n  //   {\n  //       LIQUIDITY_POOL_CONSTANT_PRODUCT = 0\n  //   };\n  //\n  // ===========================================================================\n  xdr[\"enum\"](\"LiquidityPoolType\", {\n    liquidityPoolConstantProduct: 0\n  });\n\n  // === xdr source ============================================================\n  //\n  //   union TrustLineAsset switch (AssetType type)\n  //   {\n  //   case ASSET_TYPE_NATIVE: // Not credit\n  //       void;\n  //\n  //   case ASSET_TYPE_CREDIT_ALPHANUM4:\n  //       AlphaNum4 alphaNum4;\n  //\n  //   case ASSET_TYPE_CREDIT_ALPHANUM12:\n  //       AlphaNum12 alphaNum12;\n  //\n  //   case ASSET_TYPE_POOL_SHARE:\n  //       PoolID liquidityPoolID;\n  //\n  //       // add other asset types here in the future\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"TrustLineAsset\", {\n    switchOn: xdr.lookup(\"AssetType\"),\n    switchName: \"type\",\n    switches: [[\"assetTypeNative\", xdr[\"void\"]()], [\"assetTypeCreditAlphanum4\", \"alphaNum4\"], [\"assetTypeCreditAlphanum12\", \"alphaNum12\"], [\"assetTypePoolShare\", \"liquidityPoolId\"]],\n    arms: {\n      alphaNum4: xdr.lookup(\"AlphaNum4\"),\n      alphaNum12: xdr.lookup(\"AlphaNum12\"),\n      liquidityPoolId: xdr.lookup(\"PoolId\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   union switch (int v)\n  //       {\n  //       case 0:\n  //           void;\n  //       }\n  //\n  // ===========================================================================\n  xdr.union(\"TrustLineEntryExtensionV2Ext\", {\n    switchOn: xdr[\"int\"](),\n    switchName: \"v\",\n    switches: [[0, xdr[\"void\"]()]],\n    arms: {}\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct TrustLineEntryExtensionV2\n  //   {\n  //       int32 liquidityPoolUseCount;\n  //\n  //       union switch (int v)\n  //       {\n  //       case 0:\n  //           void;\n  //       }\n  //       ext;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"TrustLineEntryExtensionV2\", [[\"liquidityPoolUseCount\", xdr.lookup(\"Int32\")], [\"ext\", xdr.lookup(\"TrustLineEntryExtensionV2Ext\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   union switch (int v)\n  //               {\n  //               case 0:\n  //                   void;\n  //               case 2:\n  //                   TrustLineEntryExtensionV2 v2;\n  //               }\n  //\n  // ===========================================================================\n  xdr.union(\"TrustLineEntryV1Ext\", {\n    switchOn: xdr[\"int\"](),\n    switchName: \"v\",\n    switches: [[0, xdr[\"void\"]()], [2, \"v2\"]],\n    arms: {\n      v2: xdr.lookup(\"TrustLineEntryExtensionV2\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct\n  //           {\n  //               Liabilities liabilities;\n  //\n  //               union switch (int v)\n  //               {\n  //               case 0:\n  //                   void;\n  //               case 2:\n  //                   TrustLineEntryExtensionV2 v2;\n  //               }\n  //               ext;\n  //           }\n  //\n  // ===========================================================================\n  xdr.struct(\"TrustLineEntryV1\", [[\"liabilities\", xdr.lookup(\"Liabilities\")], [\"ext\", xdr.lookup(\"TrustLineEntryV1Ext\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   union switch (int v)\n  //       {\n  //       case 0:\n  //           void;\n  //       case 1:\n  //           struct\n  //           {\n  //               Liabilities liabilities;\n  //\n  //               union switch (int v)\n  //               {\n  //               case 0:\n  //                   void;\n  //               case 2:\n  //                   TrustLineEntryExtensionV2 v2;\n  //               }\n  //               ext;\n  //           } v1;\n  //       }\n  //\n  // ===========================================================================\n  xdr.union(\"TrustLineEntryExt\", {\n    switchOn: xdr[\"int\"](),\n    switchName: \"v\",\n    switches: [[0, xdr[\"void\"]()], [1, \"v1\"]],\n    arms: {\n      v1: xdr.lookup(\"TrustLineEntryV1\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct TrustLineEntry\n  //   {\n  //       AccountID accountID;  // account this trustline belongs to\n  //       TrustLineAsset asset; // type of asset (with issuer)\n  //       int64 balance;        // how much of this asset the user has.\n  //                             // Asset defines the unit for this;\n  //\n  //       int64 limit;  // balance cannot be above this\n  //       uint32 flags; // see TrustLineFlags\n  //\n  //       // reserved for future use\n  //       union switch (int v)\n  //       {\n  //       case 0:\n  //           void;\n  //       case 1:\n  //           struct\n  //           {\n  //               Liabilities liabilities;\n  //\n  //               union switch (int v)\n  //               {\n  //               case 0:\n  //                   void;\n  //               case 2:\n  //                   TrustLineEntryExtensionV2 v2;\n  //               }\n  //               ext;\n  //           } v1;\n  //       }\n  //       ext;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"TrustLineEntry\", [[\"accountId\", xdr.lookup(\"AccountId\")], [\"asset\", xdr.lookup(\"TrustLineAsset\")], [\"balance\", xdr.lookup(\"Int64\")], [\"limit\", xdr.lookup(\"Int64\")], [\"flags\", xdr.lookup(\"Uint32\")], [\"ext\", xdr.lookup(\"TrustLineEntryExt\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   enum OfferEntryFlags\n  //   {\n  //       // an offer with this flag will not act on and take a reverse offer of equal\n  //       // price\n  //       PASSIVE_FLAG = 1\n  //   };\n  //\n  // ===========================================================================\n  xdr[\"enum\"](\"OfferEntryFlags\", {\n    passiveFlag: 1\n  });\n\n  // === xdr source ============================================================\n  //\n  //   const MASK_OFFERENTRY_FLAGS = 1;\n  //\n  // ===========================================================================\n  xdr[\"const\"](\"MASK_OFFERENTRY_FLAGS\", 1);\n\n  // === xdr source ============================================================\n  //\n  //   union switch (int v)\n  //       {\n  //       case 0:\n  //           void;\n  //       }\n  //\n  // ===========================================================================\n  xdr.union(\"OfferEntryExt\", {\n    switchOn: xdr[\"int\"](),\n    switchName: \"v\",\n    switches: [[0, xdr[\"void\"]()]],\n    arms: {}\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct OfferEntry\n  //   {\n  //       AccountID sellerID;\n  //       int64 offerID;\n  //       Asset selling; // A\n  //       Asset buying;  // B\n  //       int64 amount;  // amount of A\n  //\n  //       /* price for this offer:\n  //           price of A in terms of B\n  //           price=AmountB/AmountA=priceNumerator/priceDenominator\n  //           price is after fees\n  //       */\n  //       Price price;\n  //       uint32 flags; // see OfferEntryFlags\n  //\n  //       // reserved for future use\n  //       union switch (int v)\n  //       {\n  //       case 0:\n  //           void;\n  //       }\n  //       ext;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"OfferEntry\", [[\"sellerId\", xdr.lookup(\"AccountId\")], [\"offerId\", xdr.lookup(\"Int64\")], [\"selling\", xdr.lookup(\"Asset\")], [\"buying\", xdr.lookup(\"Asset\")], [\"amount\", xdr.lookup(\"Int64\")], [\"price\", xdr.lookup(\"Price\")], [\"flags\", xdr.lookup(\"Uint32\")], [\"ext\", xdr.lookup(\"OfferEntryExt\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   union switch (int v)\n  //       {\n  //       case 0:\n  //           void;\n  //       }\n  //\n  // ===========================================================================\n  xdr.union(\"DataEntryExt\", {\n    switchOn: xdr[\"int\"](),\n    switchName: \"v\",\n    switches: [[0, xdr[\"void\"]()]],\n    arms: {}\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct DataEntry\n  //   {\n  //       AccountID accountID; // account this data belongs to\n  //       string64 dataName;\n  //       DataValue dataValue;\n  //\n  //       // reserved for future use\n  //       union switch (int v)\n  //       {\n  //       case 0:\n  //           void;\n  //       }\n  //       ext;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"DataEntry\", [[\"accountId\", xdr.lookup(\"AccountId\")], [\"dataName\", xdr.lookup(\"String64\")], [\"dataValue\", xdr.lookup(\"DataValue\")], [\"ext\", xdr.lookup(\"DataEntryExt\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   enum ClaimPredicateType\n  //   {\n  //       CLAIM_PREDICATE_UNCONDITIONAL = 0,\n  //       CLAIM_PREDICATE_AND = 1,\n  //       CLAIM_PREDICATE_OR = 2,\n  //       CLAIM_PREDICATE_NOT = 3,\n  //       CLAIM_PREDICATE_BEFORE_ABSOLUTE_TIME = 4,\n  //       CLAIM_PREDICATE_BEFORE_RELATIVE_TIME = 5\n  //   };\n  //\n  // ===========================================================================\n  xdr[\"enum\"](\"ClaimPredicateType\", {\n    claimPredicateUnconditional: 0,\n    claimPredicateAnd: 1,\n    claimPredicateOr: 2,\n    claimPredicateNot: 3,\n    claimPredicateBeforeAbsoluteTime: 4,\n    claimPredicateBeforeRelativeTime: 5\n  });\n\n  // === xdr source ============================================================\n  //\n  //   union ClaimPredicate switch (ClaimPredicateType type)\n  //   {\n  //   case CLAIM_PREDICATE_UNCONDITIONAL:\n  //       void;\n  //   case CLAIM_PREDICATE_AND:\n  //       ClaimPredicate andPredicates<2>;\n  //   case CLAIM_PREDICATE_OR:\n  //       ClaimPredicate orPredicates<2>;\n  //   case CLAIM_PREDICATE_NOT:\n  //       ClaimPredicate* notPredicate;\n  //   case CLAIM_PREDICATE_BEFORE_ABSOLUTE_TIME:\n  //       int64 absBefore; // Predicate will be true if closeTime < absBefore\n  //   case CLAIM_PREDICATE_BEFORE_RELATIVE_TIME:\n  //       int64 relBefore; // Seconds since closeTime of the ledger in which the\n  //                        // ClaimableBalanceEntry was created\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"ClaimPredicate\", {\n    switchOn: xdr.lookup(\"ClaimPredicateType\"),\n    switchName: \"type\",\n    switches: [[\"claimPredicateUnconditional\", xdr[\"void\"]()], [\"claimPredicateAnd\", \"andPredicates\"], [\"claimPredicateOr\", \"orPredicates\"], [\"claimPredicateNot\", \"notPredicate\"], [\"claimPredicateBeforeAbsoluteTime\", \"absBefore\"], [\"claimPredicateBeforeRelativeTime\", \"relBefore\"]],\n    arms: {\n      andPredicates: xdr.varArray(xdr.lookup(\"ClaimPredicate\"), 2),\n      orPredicates: xdr.varArray(xdr.lookup(\"ClaimPredicate\"), 2),\n      notPredicate: xdr.option(xdr.lookup(\"ClaimPredicate\")),\n      absBefore: xdr.lookup(\"Int64\"),\n      relBefore: xdr.lookup(\"Int64\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   enum ClaimantType\n  //   {\n  //       CLAIMANT_TYPE_V0 = 0\n  //   };\n  //\n  // ===========================================================================\n  xdr[\"enum\"](\"ClaimantType\", {\n    claimantTypeV0: 0\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct\n  //       {\n  //           AccountID destination;    // The account that can use this condition\n  //           ClaimPredicate predicate; // Claimable if predicate is true\n  //       }\n  //\n  // ===========================================================================\n  xdr.struct(\"ClaimantV0\", [[\"destination\", xdr.lookup(\"AccountId\")], [\"predicate\", xdr.lookup(\"ClaimPredicate\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   union Claimant switch (ClaimantType type)\n  //   {\n  //   case CLAIMANT_TYPE_V0:\n  //       struct\n  //       {\n  //           AccountID destination;    // The account that can use this condition\n  //           ClaimPredicate predicate; // Claimable if predicate is true\n  //       } v0;\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"Claimant\", {\n    switchOn: xdr.lookup(\"ClaimantType\"),\n    switchName: \"type\",\n    switches: [[\"claimantTypeV0\", \"v0\"]],\n    arms: {\n      v0: xdr.lookup(\"ClaimantV0\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   enum ClaimableBalanceIDType\n  //   {\n  //       CLAIMABLE_BALANCE_ID_TYPE_V0 = 0\n  //   };\n  //\n  // ===========================================================================\n  xdr[\"enum\"](\"ClaimableBalanceIdType\", {\n    claimableBalanceIdTypeV0: 0\n  });\n\n  // === xdr source ============================================================\n  //\n  //   union ClaimableBalanceID switch (ClaimableBalanceIDType type)\n  //   {\n  //   case CLAIMABLE_BALANCE_ID_TYPE_V0:\n  //       Hash v0;\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"ClaimableBalanceId\", {\n    switchOn: xdr.lookup(\"ClaimableBalanceIdType\"),\n    switchName: \"type\",\n    switches: [[\"claimableBalanceIdTypeV0\", \"v0\"]],\n    arms: {\n      v0: xdr.lookup(\"Hash\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   enum ClaimableBalanceFlags\n  //   {\n  //       // If set, the issuer account of the asset held by the claimable balance may\n  //       // clawback the claimable balance\n  //       CLAIMABLE_BALANCE_CLAWBACK_ENABLED_FLAG = 0x1\n  //   };\n  //\n  // ===========================================================================\n  xdr[\"enum\"](\"ClaimableBalanceFlags\", {\n    claimableBalanceClawbackEnabledFlag: 1\n  });\n\n  // === xdr source ============================================================\n  //\n  //   const MASK_CLAIMABLE_BALANCE_FLAGS = 0x1;\n  //\n  // ===========================================================================\n  xdr[\"const\"](\"MASK_CLAIMABLE_BALANCE_FLAGS\", 0x1);\n\n  // === xdr source ============================================================\n  //\n  //   union switch (int v)\n  //       {\n  //       case 0:\n  //           void;\n  //       }\n  //\n  // ===========================================================================\n  xdr.union(\"ClaimableBalanceEntryExtensionV1Ext\", {\n    switchOn: xdr[\"int\"](),\n    switchName: \"v\",\n    switches: [[0, xdr[\"void\"]()]],\n    arms: {}\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct ClaimableBalanceEntryExtensionV1\n  //   {\n  //       union switch (int v)\n  //       {\n  //       case 0:\n  //           void;\n  //       }\n  //       ext;\n  //\n  //       uint32 flags; // see ClaimableBalanceFlags\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"ClaimableBalanceEntryExtensionV1\", [[\"ext\", xdr.lookup(\"ClaimableBalanceEntryExtensionV1Ext\")], [\"flags\", xdr.lookup(\"Uint32\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   union switch (int v)\n  //       {\n  //       case 0:\n  //           void;\n  //       case 1:\n  //           ClaimableBalanceEntryExtensionV1 v1;\n  //       }\n  //\n  // ===========================================================================\n  xdr.union(\"ClaimableBalanceEntryExt\", {\n    switchOn: xdr[\"int\"](),\n    switchName: \"v\",\n    switches: [[0, xdr[\"void\"]()], [1, \"v1\"]],\n    arms: {\n      v1: xdr.lookup(\"ClaimableBalanceEntryExtensionV1\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct ClaimableBalanceEntry\n  //   {\n  //       // Unique identifier for this ClaimableBalanceEntry\n  //       ClaimableBalanceID balanceID;\n  //\n  //       // List of claimants with associated predicate\n  //       Claimant claimants<10>;\n  //\n  //       // Any asset including native\n  //       Asset asset;\n  //\n  //       // Amount of asset\n  //       int64 amount;\n  //\n  //       // reserved for future use\n  //       union switch (int v)\n  //       {\n  //       case 0:\n  //           void;\n  //       case 1:\n  //           ClaimableBalanceEntryExtensionV1 v1;\n  //       }\n  //       ext;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"ClaimableBalanceEntry\", [[\"balanceId\", xdr.lookup(\"ClaimableBalanceId\")], [\"claimants\", xdr.varArray(xdr.lookup(\"Claimant\"), 10)], [\"asset\", xdr.lookup(\"Asset\")], [\"amount\", xdr.lookup(\"Int64\")], [\"ext\", xdr.lookup(\"ClaimableBalanceEntryExt\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct LiquidityPoolConstantProductParameters\n  //   {\n  //       Asset assetA; // assetA < assetB\n  //       Asset assetB;\n  //       int32 fee; // Fee is in basis points, so the actual rate is (fee/100)%\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"LiquidityPoolConstantProductParameters\", [[\"assetA\", xdr.lookup(\"Asset\")], [\"assetB\", xdr.lookup(\"Asset\")], [\"fee\", xdr.lookup(\"Int32\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct\n  //           {\n  //               LiquidityPoolConstantProductParameters params;\n  //\n  //               int64 reserveA;        // amount of A in the pool\n  //               int64 reserveB;        // amount of B in the pool\n  //               int64 totalPoolShares; // total number of pool shares issued\n  //               int64 poolSharesTrustLineCount; // number of trust lines for the\n  //                                               // associated pool shares\n  //           }\n  //\n  // ===========================================================================\n  xdr.struct(\"LiquidityPoolEntryConstantProduct\", [[\"params\", xdr.lookup(\"LiquidityPoolConstantProductParameters\")], [\"reserveA\", xdr.lookup(\"Int64\")], [\"reserveB\", xdr.lookup(\"Int64\")], [\"totalPoolShares\", xdr.lookup(\"Int64\")], [\"poolSharesTrustLineCount\", xdr.lookup(\"Int64\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   union switch (LiquidityPoolType type)\n  //       {\n  //       case LIQUIDITY_POOL_CONSTANT_PRODUCT:\n  //           struct\n  //           {\n  //               LiquidityPoolConstantProductParameters params;\n  //\n  //               int64 reserveA;        // amount of A in the pool\n  //               int64 reserveB;        // amount of B in the pool\n  //               int64 totalPoolShares; // total number of pool shares issued\n  //               int64 poolSharesTrustLineCount; // number of trust lines for the\n  //                                               // associated pool shares\n  //           } constantProduct;\n  //       }\n  //\n  // ===========================================================================\n  xdr.union(\"LiquidityPoolEntryBody\", {\n    switchOn: xdr.lookup(\"LiquidityPoolType\"),\n    switchName: \"type\",\n    switches: [[\"liquidityPoolConstantProduct\", \"constantProduct\"]],\n    arms: {\n      constantProduct: xdr.lookup(\"LiquidityPoolEntryConstantProduct\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct LiquidityPoolEntry\n  //   {\n  //       PoolID liquidityPoolID;\n  //\n  //       union switch (LiquidityPoolType type)\n  //       {\n  //       case LIQUIDITY_POOL_CONSTANT_PRODUCT:\n  //           struct\n  //           {\n  //               LiquidityPoolConstantProductParameters params;\n  //\n  //               int64 reserveA;        // amount of A in the pool\n  //               int64 reserveB;        // amount of B in the pool\n  //               int64 totalPoolShares; // total number of pool shares issued\n  //               int64 poolSharesTrustLineCount; // number of trust lines for the\n  //                                               // associated pool shares\n  //           } constantProduct;\n  //       }\n  //       body;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"LiquidityPoolEntry\", [[\"liquidityPoolId\", xdr.lookup(\"PoolId\")], [\"body\", xdr.lookup(\"LiquidityPoolEntryBody\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   enum ContractDataDurability {\n  //       TEMPORARY = 0,\n  //       PERSISTENT = 1\n  //   };\n  //\n  // ===========================================================================\n  xdr[\"enum\"](\"ContractDataDurability\", {\n    temporary: 0,\n    persistent: 1\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct ContractDataEntry {\n  //       ExtensionPoint ext;\n  //\n  //       SCAddress contract;\n  //       SCVal key;\n  //       ContractDataDurability durability;\n  //       SCVal val;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"ContractDataEntry\", [[\"ext\", xdr.lookup(\"ExtensionPoint\")], [\"contract\", xdr.lookup(\"ScAddress\")], [\"key\", xdr.lookup(\"ScVal\")], [\"durability\", xdr.lookup(\"ContractDataDurability\")], [\"val\", xdr.lookup(\"ScVal\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct ContractCodeCostInputs {\n  //       ExtensionPoint ext;\n  //       uint32 nInstructions;\n  //       uint32 nFunctions;\n  //       uint32 nGlobals;\n  //       uint32 nTableEntries;\n  //       uint32 nTypes;\n  //       uint32 nDataSegments;\n  //       uint32 nElemSegments;\n  //       uint32 nImports;\n  //       uint32 nExports;\n  //       uint32 nDataSegmentBytes;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"ContractCodeCostInputs\", [[\"ext\", xdr.lookup(\"ExtensionPoint\")], [\"nInstructions\", xdr.lookup(\"Uint32\")], [\"nFunctions\", xdr.lookup(\"Uint32\")], [\"nGlobals\", xdr.lookup(\"Uint32\")], [\"nTableEntries\", xdr.lookup(\"Uint32\")], [\"nTypes\", xdr.lookup(\"Uint32\")], [\"nDataSegments\", xdr.lookup(\"Uint32\")], [\"nElemSegments\", xdr.lookup(\"Uint32\")], [\"nImports\", xdr.lookup(\"Uint32\")], [\"nExports\", xdr.lookup(\"Uint32\")], [\"nDataSegmentBytes\", xdr.lookup(\"Uint32\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct\n  //               {\n  //                   ExtensionPoint ext;\n  //                   ContractCodeCostInputs costInputs;\n  //               }\n  //\n  // ===========================================================================\n  xdr.struct(\"ContractCodeEntryV1\", [[\"ext\", xdr.lookup(\"ExtensionPoint\")], [\"costInputs\", xdr.lookup(\"ContractCodeCostInputs\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   union switch (int v)\n  //       {\n  //           case 0:\n  //               void;\n  //           case 1:\n  //               struct\n  //               {\n  //                   ExtensionPoint ext;\n  //                   ContractCodeCostInputs costInputs;\n  //               } v1;\n  //       }\n  //\n  // ===========================================================================\n  xdr.union(\"ContractCodeEntryExt\", {\n    switchOn: xdr[\"int\"](),\n    switchName: \"v\",\n    switches: [[0, xdr[\"void\"]()], [1, \"v1\"]],\n    arms: {\n      v1: xdr.lookup(\"ContractCodeEntryV1\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct ContractCodeEntry {\n  //       union switch (int v)\n  //       {\n  //           case 0:\n  //               void;\n  //           case 1:\n  //               struct\n  //               {\n  //                   ExtensionPoint ext;\n  //                   ContractCodeCostInputs costInputs;\n  //               } v1;\n  //       } ext;\n  //\n  //       Hash hash;\n  //       opaque code<>;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"ContractCodeEntry\", [[\"ext\", xdr.lookup(\"ContractCodeEntryExt\")], [\"hash\", xdr.lookup(\"Hash\")], [\"code\", xdr.varOpaque()]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct TTLEntry {\n  //       // Hash of the LedgerKey that is associated with this TTLEntry\n  //       Hash keyHash;\n  //       uint32 liveUntilLedgerSeq;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"TtlEntry\", [[\"keyHash\", xdr.lookup(\"Hash\")], [\"liveUntilLedgerSeq\", xdr.lookup(\"Uint32\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   union switch (int v)\n  //       {\n  //       case 0:\n  //           void;\n  //       }\n  //\n  // ===========================================================================\n  xdr.union(\"LedgerEntryExtensionV1Ext\", {\n    switchOn: xdr[\"int\"](),\n    switchName: \"v\",\n    switches: [[0, xdr[\"void\"]()]],\n    arms: {}\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct LedgerEntryExtensionV1\n  //   {\n  //       SponsorshipDescriptor sponsoringID;\n  //\n  //       union switch (int v)\n  //       {\n  //       case 0:\n  //           void;\n  //       }\n  //       ext;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"LedgerEntryExtensionV1\", [[\"sponsoringId\", xdr.lookup(\"SponsorshipDescriptor\")], [\"ext\", xdr.lookup(\"LedgerEntryExtensionV1Ext\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   union switch (LedgerEntryType type)\n  //       {\n  //       case ACCOUNT:\n  //           AccountEntry account;\n  //       case TRUSTLINE:\n  //           TrustLineEntry trustLine;\n  //       case OFFER:\n  //           OfferEntry offer;\n  //       case DATA:\n  //           DataEntry data;\n  //       case CLAIMABLE_BALANCE:\n  //           ClaimableBalanceEntry claimableBalance;\n  //       case LIQUIDITY_POOL:\n  //           LiquidityPoolEntry liquidityPool;\n  //       case CONTRACT_DATA:\n  //           ContractDataEntry contractData;\n  //       case CONTRACT_CODE:\n  //           ContractCodeEntry contractCode;\n  //       case CONFIG_SETTING:\n  //           ConfigSettingEntry configSetting;\n  //       case TTL:\n  //           TTLEntry ttl;\n  //       }\n  //\n  // ===========================================================================\n  xdr.union(\"LedgerEntryData\", {\n    switchOn: xdr.lookup(\"LedgerEntryType\"),\n    switchName: \"type\",\n    switches: [[\"account\", \"account\"], [\"trustline\", \"trustLine\"], [\"offer\", \"offer\"], [\"data\", \"data\"], [\"claimableBalance\", \"claimableBalance\"], [\"liquidityPool\", \"liquidityPool\"], [\"contractData\", \"contractData\"], [\"contractCode\", \"contractCode\"], [\"configSetting\", \"configSetting\"], [\"ttl\", \"ttl\"]],\n    arms: {\n      account: xdr.lookup(\"AccountEntry\"),\n      trustLine: xdr.lookup(\"TrustLineEntry\"),\n      offer: xdr.lookup(\"OfferEntry\"),\n      data: xdr.lookup(\"DataEntry\"),\n      claimableBalance: xdr.lookup(\"ClaimableBalanceEntry\"),\n      liquidityPool: xdr.lookup(\"LiquidityPoolEntry\"),\n      contractData: xdr.lookup(\"ContractDataEntry\"),\n      contractCode: xdr.lookup(\"ContractCodeEntry\"),\n      configSetting: xdr.lookup(\"ConfigSettingEntry\"),\n      ttl: xdr.lookup(\"TtlEntry\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   union switch (int v)\n  //       {\n  //       case 0:\n  //           void;\n  //       case 1:\n  //           LedgerEntryExtensionV1 v1;\n  //       }\n  //\n  // ===========================================================================\n  xdr.union(\"LedgerEntryExt\", {\n    switchOn: xdr[\"int\"](),\n    switchName: \"v\",\n    switches: [[0, xdr[\"void\"]()], [1, \"v1\"]],\n    arms: {\n      v1: xdr.lookup(\"LedgerEntryExtensionV1\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct LedgerEntry\n  //   {\n  //       uint32 lastModifiedLedgerSeq; // ledger the LedgerEntry was last changed\n  //\n  //       union switch (LedgerEntryType type)\n  //       {\n  //       case ACCOUNT:\n  //           AccountEntry account;\n  //       case TRUSTLINE:\n  //           TrustLineEntry trustLine;\n  //       case OFFER:\n  //           OfferEntry offer;\n  //       case DATA:\n  //           DataEntry data;\n  //       case CLAIMABLE_BALANCE:\n  //           ClaimableBalanceEntry claimableBalance;\n  //       case LIQUIDITY_POOL:\n  //           LiquidityPoolEntry liquidityPool;\n  //       case CONTRACT_DATA:\n  //           ContractDataEntry contractData;\n  //       case CONTRACT_CODE:\n  //           ContractCodeEntry contractCode;\n  //       case CONFIG_SETTING:\n  //           ConfigSettingEntry configSetting;\n  //       case TTL:\n  //           TTLEntry ttl;\n  //       }\n  //       data;\n  //\n  //       // reserved for future use\n  //       union switch (int v)\n  //       {\n  //       case 0:\n  //           void;\n  //       case 1:\n  //           LedgerEntryExtensionV1 v1;\n  //       }\n  //       ext;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"LedgerEntry\", [[\"lastModifiedLedgerSeq\", xdr.lookup(\"Uint32\")], [\"data\", xdr.lookup(\"LedgerEntryData\")], [\"ext\", xdr.lookup(\"LedgerEntryExt\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct\n  //       {\n  //           AccountID accountID;\n  //       }\n  //\n  // ===========================================================================\n  xdr.struct(\"LedgerKeyAccount\", [[\"accountId\", xdr.lookup(\"AccountId\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct\n  //       {\n  //           AccountID accountID;\n  //           TrustLineAsset asset;\n  //       }\n  //\n  // ===========================================================================\n  xdr.struct(\"LedgerKeyTrustLine\", [[\"accountId\", xdr.lookup(\"AccountId\")], [\"asset\", xdr.lookup(\"TrustLineAsset\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct\n  //       {\n  //           AccountID sellerID;\n  //           int64 offerID;\n  //       }\n  //\n  // ===========================================================================\n  xdr.struct(\"LedgerKeyOffer\", [[\"sellerId\", xdr.lookup(\"AccountId\")], [\"offerId\", xdr.lookup(\"Int64\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct\n  //       {\n  //           AccountID accountID;\n  //           string64 dataName;\n  //       }\n  //\n  // ===========================================================================\n  xdr.struct(\"LedgerKeyData\", [[\"accountId\", xdr.lookup(\"AccountId\")], [\"dataName\", xdr.lookup(\"String64\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct\n  //       {\n  //           ClaimableBalanceID balanceID;\n  //       }\n  //\n  // ===========================================================================\n  xdr.struct(\"LedgerKeyClaimableBalance\", [[\"balanceId\", xdr.lookup(\"ClaimableBalanceId\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct\n  //       {\n  //           PoolID liquidityPoolID;\n  //       }\n  //\n  // ===========================================================================\n  xdr.struct(\"LedgerKeyLiquidityPool\", [[\"liquidityPoolId\", xdr.lookup(\"PoolId\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct\n  //       {\n  //           SCAddress contract;\n  //           SCVal key;\n  //           ContractDataDurability durability;\n  //       }\n  //\n  // ===========================================================================\n  xdr.struct(\"LedgerKeyContractData\", [[\"contract\", xdr.lookup(\"ScAddress\")], [\"key\", xdr.lookup(\"ScVal\")], [\"durability\", xdr.lookup(\"ContractDataDurability\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct\n  //       {\n  //           Hash hash;\n  //       }\n  //\n  // ===========================================================================\n  xdr.struct(\"LedgerKeyContractCode\", [[\"hash\", xdr.lookup(\"Hash\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct\n  //       {\n  //           ConfigSettingID configSettingID;\n  //       }\n  //\n  // ===========================================================================\n  xdr.struct(\"LedgerKeyConfigSetting\", [[\"configSettingId\", xdr.lookup(\"ConfigSettingId\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct\n  //       {\n  //           // Hash of the LedgerKey that is associated with this TTLEntry\n  //           Hash keyHash;\n  //       }\n  //\n  // ===========================================================================\n  xdr.struct(\"LedgerKeyTtl\", [[\"keyHash\", xdr.lookup(\"Hash\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   union LedgerKey switch (LedgerEntryType type)\n  //   {\n  //   case ACCOUNT:\n  //       struct\n  //       {\n  //           AccountID accountID;\n  //       } account;\n  //\n  //   case TRUSTLINE:\n  //       struct\n  //       {\n  //           AccountID accountID;\n  //           TrustLineAsset asset;\n  //       } trustLine;\n  //\n  //   case OFFER:\n  //       struct\n  //       {\n  //           AccountID sellerID;\n  //           int64 offerID;\n  //       } offer;\n  //\n  //   case DATA:\n  //       struct\n  //       {\n  //           AccountID accountID;\n  //           string64 dataName;\n  //       } data;\n  //\n  //   case CLAIMABLE_BALANCE:\n  //       struct\n  //       {\n  //           ClaimableBalanceID balanceID;\n  //       } claimableBalance;\n  //\n  //   case LIQUIDITY_POOL:\n  //       struct\n  //       {\n  //           PoolID liquidityPoolID;\n  //       } liquidityPool;\n  //   case CONTRACT_DATA:\n  //       struct\n  //       {\n  //           SCAddress contract;\n  //           SCVal key;\n  //           ContractDataDurability durability;\n  //       } contractData;\n  //   case CONTRACT_CODE:\n  //       struct\n  //       {\n  //           Hash hash;\n  //       } contractCode;\n  //   case CONFIG_SETTING:\n  //       struct\n  //       {\n  //           ConfigSettingID configSettingID;\n  //       } configSetting;\n  //   case TTL:\n  //       struct\n  //       {\n  //           // Hash of the LedgerKey that is associated with this TTLEntry\n  //           Hash keyHash;\n  //       } ttl;\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"LedgerKey\", {\n    switchOn: xdr.lookup(\"LedgerEntryType\"),\n    switchName: \"type\",\n    switches: [[\"account\", \"account\"], [\"trustline\", \"trustLine\"], [\"offer\", \"offer\"], [\"data\", \"data\"], [\"claimableBalance\", \"claimableBalance\"], [\"liquidityPool\", \"liquidityPool\"], [\"contractData\", \"contractData\"], [\"contractCode\", \"contractCode\"], [\"configSetting\", \"configSetting\"], [\"ttl\", \"ttl\"]],\n    arms: {\n      account: xdr.lookup(\"LedgerKeyAccount\"),\n      trustLine: xdr.lookup(\"LedgerKeyTrustLine\"),\n      offer: xdr.lookup(\"LedgerKeyOffer\"),\n      data: xdr.lookup(\"LedgerKeyData\"),\n      claimableBalance: xdr.lookup(\"LedgerKeyClaimableBalance\"),\n      liquidityPool: xdr.lookup(\"LedgerKeyLiquidityPool\"),\n      contractData: xdr.lookup(\"LedgerKeyContractData\"),\n      contractCode: xdr.lookup(\"LedgerKeyContractCode\"),\n      configSetting: xdr.lookup(\"LedgerKeyConfigSetting\"),\n      ttl: xdr.lookup(\"LedgerKeyTtl\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   enum EnvelopeType\n  //   {\n  //       ENVELOPE_TYPE_TX_V0 = 0,\n  //       ENVELOPE_TYPE_SCP = 1,\n  //       ENVELOPE_TYPE_TX = 2,\n  //       ENVELOPE_TYPE_AUTH = 3,\n  //       ENVELOPE_TYPE_SCPVALUE = 4,\n  //       ENVELOPE_TYPE_TX_FEE_BUMP = 5,\n  //       ENVELOPE_TYPE_OP_ID = 6,\n  //       ENVELOPE_TYPE_POOL_REVOKE_OP_ID = 7,\n  //       ENVELOPE_TYPE_CONTRACT_ID = 8,\n  //       ENVELOPE_TYPE_SOROBAN_AUTHORIZATION = 9\n  //   };\n  //\n  // ===========================================================================\n  xdr[\"enum\"](\"EnvelopeType\", {\n    envelopeTypeTxV0: 0,\n    envelopeTypeScp: 1,\n    envelopeTypeTx: 2,\n    envelopeTypeAuth: 3,\n    envelopeTypeScpvalue: 4,\n    envelopeTypeTxFeeBump: 5,\n    envelopeTypeOpId: 6,\n    envelopeTypePoolRevokeOpId: 7,\n    envelopeTypeContractId: 8,\n    envelopeTypeSorobanAuthorization: 9\n  });\n\n  // === xdr source ============================================================\n  //\n  //   enum BucketListType\n  //   {\n  //       LIVE = 0,\n  //       HOT_ARCHIVE = 1,\n  //       COLD_ARCHIVE = 2\n  //   };\n  //\n  // ===========================================================================\n  xdr[\"enum\"](\"BucketListType\", {\n    live: 0,\n    hotArchive: 1,\n    coldArchive: 2\n  });\n\n  // === xdr source ============================================================\n  //\n  //   enum BucketEntryType\n  //   {\n  //       METAENTRY =\n  //           -1, // At-and-after protocol 11: bucket metadata, should come first.\n  //       LIVEENTRY = 0, // Before protocol 11: created-or-updated;\n  //                      // At-and-after protocol 11: only updated.\n  //       DEADENTRY = 1,\n  //       INITENTRY = 2 // At-and-after protocol 11: only created.\n  //   };\n  //\n  // ===========================================================================\n  xdr[\"enum\"](\"BucketEntryType\", {\n    metaentry: -1,\n    liveentry: 0,\n    deadentry: 1,\n    initentry: 2\n  });\n\n  // === xdr source ============================================================\n  //\n  //   enum HotArchiveBucketEntryType\n  //   {\n  //       HOT_ARCHIVE_METAENTRY = -1, // Bucket metadata, should come first.\n  //       HOT_ARCHIVE_ARCHIVED = 0,   // Entry is Archived\n  //       HOT_ARCHIVE_LIVE = 1,       // Entry was previously HOT_ARCHIVE_ARCHIVED, or HOT_ARCHIVE_DELETED, but\n  //                                   // has been added back to the live BucketList.\n  //                                   // Does not need to be persisted.\n  //       HOT_ARCHIVE_DELETED = 2     // Entry deleted (Note: must be persisted in archive)\n  //   };\n  //\n  // ===========================================================================\n  xdr[\"enum\"](\"HotArchiveBucketEntryType\", {\n    hotArchiveMetaentry: -1,\n    hotArchiveArchived: 0,\n    hotArchiveLive: 1,\n    hotArchiveDeleted: 2\n  });\n\n  // === xdr source ============================================================\n  //\n  //   enum ColdArchiveBucketEntryType\n  //   {\n  //       COLD_ARCHIVE_METAENTRY     = -1,  // Bucket metadata, should come first.\n  //       COLD_ARCHIVE_ARCHIVED_LEAF = 0,   // Full LedgerEntry that was archived during the epoch\n  //       COLD_ARCHIVE_DELETED_LEAF  = 1,   // LedgerKey that was deleted during the epoch\n  //       COLD_ARCHIVE_BOUNDARY_LEAF = 2,   // Dummy leaf representing low/high bound\n  //       COLD_ARCHIVE_HASH          = 3    // Intermediary Merkle hash entry\n  //   };\n  //\n  // ===========================================================================\n  xdr[\"enum\"](\"ColdArchiveBucketEntryType\", {\n    coldArchiveMetaentry: -1,\n    coldArchiveArchivedLeaf: 0,\n    coldArchiveDeletedLeaf: 1,\n    coldArchiveBoundaryLeaf: 2,\n    coldArchiveHash: 3\n  });\n\n  // === xdr source ============================================================\n  //\n  //   union switch (int v)\n  //       {\n  //       case 0:\n  //           void;\n  //       case 1:\n  //           BucketListType bucketListType;\n  //       }\n  //\n  // ===========================================================================\n  xdr.union(\"BucketMetadataExt\", {\n    switchOn: xdr[\"int\"](),\n    switchName: \"v\",\n    switches: [[0, xdr[\"void\"]()], [1, \"bucketListType\"]],\n    arms: {\n      bucketListType: xdr.lookup(\"BucketListType\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct BucketMetadata\n  //   {\n  //       // Indicates the protocol version used to create / merge this bucket.\n  //       uint32 ledgerVersion;\n  //\n  //       // reserved for future use\n  //       union switch (int v)\n  //       {\n  //       case 0:\n  //           void;\n  //       case 1:\n  //           BucketListType bucketListType;\n  //       }\n  //       ext;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"BucketMetadata\", [[\"ledgerVersion\", xdr.lookup(\"Uint32\")], [\"ext\", xdr.lookup(\"BucketMetadataExt\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   union BucketEntry switch (BucketEntryType type)\n  //   {\n  //   case LIVEENTRY:\n  //   case INITENTRY:\n  //       LedgerEntry liveEntry;\n  //\n  //   case DEADENTRY:\n  //       LedgerKey deadEntry;\n  //   case METAENTRY:\n  //       BucketMetadata metaEntry;\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"BucketEntry\", {\n    switchOn: xdr.lookup(\"BucketEntryType\"),\n    switchName: \"type\",\n    switches: [[\"liveentry\", \"liveEntry\"], [\"initentry\", \"liveEntry\"], [\"deadentry\", \"deadEntry\"], [\"metaentry\", \"metaEntry\"]],\n    arms: {\n      liveEntry: xdr.lookup(\"LedgerEntry\"),\n      deadEntry: xdr.lookup(\"LedgerKey\"),\n      metaEntry: xdr.lookup(\"BucketMetadata\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   union HotArchiveBucketEntry switch (HotArchiveBucketEntryType type)\n  //   {\n  //   case HOT_ARCHIVE_ARCHIVED:\n  //       LedgerEntry archivedEntry;\n  //\n  //   case HOT_ARCHIVE_LIVE:\n  //   case HOT_ARCHIVE_DELETED:\n  //       LedgerKey key;\n  //   case HOT_ARCHIVE_METAENTRY:\n  //       BucketMetadata metaEntry;\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"HotArchiveBucketEntry\", {\n    switchOn: xdr.lookup(\"HotArchiveBucketEntryType\"),\n    switchName: \"type\",\n    switches: [[\"hotArchiveArchived\", \"archivedEntry\"], [\"hotArchiveLive\", \"key\"], [\"hotArchiveDeleted\", \"key\"], [\"hotArchiveMetaentry\", \"metaEntry\"]],\n    arms: {\n      archivedEntry: xdr.lookup(\"LedgerEntry\"),\n      key: xdr.lookup(\"LedgerKey\"),\n      metaEntry: xdr.lookup(\"BucketMetadata\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct ColdArchiveArchivedLeaf\n  //   {\n  //       uint32 index;\n  //       LedgerEntry archivedEntry;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"ColdArchiveArchivedLeaf\", [[\"index\", xdr.lookup(\"Uint32\")], [\"archivedEntry\", xdr.lookup(\"LedgerEntry\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct ColdArchiveDeletedLeaf\n  //   {\n  //       uint32 index;\n  //       LedgerKey deletedKey;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"ColdArchiveDeletedLeaf\", [[\"index\", xdr.lookup(\"Uint32\")], [\"deletedKey\", xdr.lookup(\"LedgerKey\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct ColdArchiveBoundaryLeaf\n  //   {\n  //       uint32 index;\n  //       bool isLowerBound;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"ColdArchiveBoundaryLeaf\", [[\"index\", xdr.lookup(\"Uint32\")], [\"isLowerBound\", xdr.bool()]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct ColdArchiveHashEntry\n  //   {\n  //       uint32 index;\n  //       uint32 level;\n  //       Hash hash;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"ColdArchiveHashEntry\", [[\"index\", xdr.lookup(\"Uint32\")], [\"level\", xdr.lookup(\"Uint32\")], [\"hash\", xdr.lookup(\"Hash\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   union ColdArchiveBucketEntry switch (ColdArchiveBucketEntryType type)\n  //   {\n  //   case COLD_ARCHIVE_METAENTRY:\n  //       BucketMetadata metaEntry;\n  //   case COLD_ARCHIVE_ARCHIVED_LEAF:\n  //       ColdArchiveArchivedLeaf archivedLeaf;\n  //   case COLD_ARCHIVE_DELETED_LEAF:\n  //       ColdArchiveDeletedLeaf deletedLeaf;\n  //   case COLD_ARCHIVE_BOUNDARY_LEAF:\n  //       ColdArchiveBoundaryLeaf boundaryLeaf;\n  //   case COLD_ARCHIVE_HASH:\n  //       ColdArchiveHashEntry hashEntry;\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"ColdArchiveBucketEntry\", {\n    switchOn: xdr.lookup(\"ColdArchiveBucketEntryType\"),\n    switchName: \"type\",\n    switches: [[\"coldArchiveMetaentry\", \"metaEntry\"], [\"coldArchiveArchivedLeaf\", \"archivedLeaf\"], [\"coldArchiveDeletedLeaf\", \"deletedLeaf\"], [\"coldArchiveBoundaryLeaf\", \"boundaryLeaf\"], [\"coldArchiveHash\", \"hashEntry\"]],\n    arms: {\n      metaEntry: xdr.lookup(\"BucketMetadata\"),\n      archivedLeaf: xdr.lookup(\"ColdArchiveArchivedLeaf\"),\n      deletedLeaf: xdr.lookup(\"ColdArchiveDeletedLeaf\"),\n      boundaryLeaf: xdr.lookup(\"ColdArchiveBoundaryLeaf\"),\n      hashEntry: xdr.lookup(\"ColdArchiveHashEntry\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   typedef opaque UpgradeType<128>;\n  //\n  // ===========================================================================\n  xdr.typedef(\"UpgradeType\", xdr.varOpaque(128));\n\n  // === xdr source ============================================================\n  //\n  //   enum StellarValueType\n  //   {\n  //       STELLAR_VALUE_BASIC = 0,\n  //       STELLAR_VALUE_SIGNED = 1\n  //   };\n  //\n  // ===========================================================================\n  xdr[\"enum\"](\"StellarValueType\", {\n    stellarValueBasic: 0,\n    stellarValueSigned: 1\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct LedgerCloseValueSignature\n  //   {\n  //       NodeID nodeID;       // which node introduced the value\n  //       Signature signature; // nodeID's signature\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"LedgerCloseValueSignature\", [[\"nodeId\", xdr.lookup(\"NodeId\")], [\"signature\", xdr.lookup(\"Signature\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   union switch (StellarValueType v)\n  //       {\n  //       case STELLAR_VALUE_BASIC:\n  //           void;\n  //       case STELLAR_VALUE_SIGNED:\n  //           LedgerCloseValueSignature lcValueSignature;\n  //       }\n  //\n  // ===========================================================================\n  xdr.union(\"StellarValueExt\", {\n    switchOn: xdr.lookup(\"StellarValueType\"),\n    switchName: \"v\",\n    switches: [[\"stellarValueBasic\", xdr[\"void\"]()], [\"stellarValueSigned\", \"lcValueSignature\"]],\n    arms: {\n      lcValueSignature: xdr.lookup(\"LedgerCloseValueSignature\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct StellarValue\n  //   {\n  //       Hash txSetHash;      // transaction set to apply to previous ledger\n  //       TimePoint closeTime; // network close time\n  //\n  //       // upgrades to apply to the previous ledger (usually empty)\n  //       // this is a vector of encoded 'LedgerUpgrade' so that nodes can drop\n  //       // unknown steps during consensus if needed.\n  //       // see notes below on 'LedgerUpgrade' for more detail\n  //       // max size is dictated by number of upgrade types (+ room for future)\n  //       UpgradeType upgrades<6>;\n  //\n  //       // reserved for future use\n  //       union switch (StellarValueType v)\n  //       {\n  //       case STELLAR_VALUE_BASIC:\n  //           void;\n  //       case STELLAR_VALUE_SIGNED:\n  //           LedgerCloseValueSignature lcValueSignature;\n  //       }\n  //       ext;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"StellarValue\", [[\"txSetHash\", xdr.lookup(\"Hash\")], [\"closeTime\", xdr.lookup(\"TimePoint\")], [\"upgrades\", xdr.varArray(xdr.lookup(\"UpgradeType\"), 6)], [\"ext\", xdr.lookup(\"StellarValueExt\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   const MASK_LEDGER_HEADER_FLAGS = 0x7;\n  //\n  // ===========================================================================\n  xdr[\"const\"](\"MASK_LEDGER_HEADER_FLAGS\", 0x7);\n\n  // === xdr source ============================================================\n  //\n  //   enum LedgerHeaderFlags\n  //   {\n  //       DISABLE_LIQUIDITY_POOL_TRADING_FLAG = 0x1,\n  //       DISABLE_LIQUIDITY_POOL_DEPOSIT_FLAG = 0x2,\n  //       DISABLE_LIQUIDITY_POOL_WITHDRAWAL_FLAG = 0x4\n  //   };\n  //\n  // ===========================================================================\n  xdr[\"enum\"](\"LedgerHeaderFlags\", {\n    disableLiquidityPoolTradingFlag: 1,\n    disableLiquidityPoolDepositFlag: 2,\n    disableLiquidityPoolWithdrawalFlag: 4\n  });\n\n  // === xdr source ============================================================\n  //\n  //   union switch (int v)\n  //       {\n  //       case 0:\n  //           void;\n  //       }\n  //\n  // ===========================================================================\n  xdr.union(\"LedgerHeaderExtensionV1Ext\", {\n    switchOn: xdr[\"int\"](),\n    switchName: \"v\",\n    switches: [[0, xdr[\"void\"]()]],\n    arms: {}\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct LedgerHeaderExtensionV1\n  //   {\n  //       uint32 flags; // LedgerHeaderFlags\n  //\n  //       union switch (int v)\n  //       {\n  //       case 0:\n  //           void;\n  //       }\n  //       ext;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"LedgerHeaderExtensionV1\", [[\"flags\", xdr.lookup(\"Uint32\")], [\"ext\", xdr.lookup(\"LedgerHeaderExtensionV1Ext\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   union switch (int v)\n  //       {\n  //       case 0:\n  //           void;\n  //       case 1:\n  //           LedgerHeaderExtensionV1 v1;\n  //       }\n  //\n  // ===========================================================================\n  xdr.union(\"LedgerHeaderExt\", {\n    switchOn: xdr[\"int\"](),\n    switchName: \"v\",\n    switches: [[0, xdr[\"void\"]()], [1, \"v1\"]],\n    arms: {\n      v1: xdr.lookup(\"LedgerHeaderExtensionV1\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct LedgerHeader\n  //   {\n  //       uint32 ledgerVersion;    // the protocol version of the ledger\n  //       Hash previousLedgerHash; // hash of the previous ledger header\n  //       StellarValue scpValue;   // what consensus agreed to\n  //       Hash txSetResultHash;    // the TransactionResultSet that led to this ledger\n  //       Hash bucketListHash;     // hash of the ledger state\n  //\n  //       uint32 ledgerSeq; // sequence number of this ledger\n  //\n  //       int64 totalCoins; // total number of stroops in existence.\n  //                         // 10,000,000 stroops in 1 XLM\n  //\n  //       int64 feePool;       // fees burned since last inflation run\n  //       uint32 inflationSeq; // inflation sequence number\n  //\n  //       uint64 idPool; // last used global ID, used for generating objects\n  //\n  //       uint32 baseFee;     // base fee per operation in stroops\n  //       uint32 baseReserve; // account base reserve in stroops\n  //\n  //       uint32 maxTxSetSize; // maximum size a transaction set can be\n  //\n  //       Hash skipList[4]; // hashes of ledgers in the past. allows you to jump back\n  //                         // in time without walking the chain back ledger by ledger\n  //                         // each slot contains the oldest ledger that is mod of\n  //                         // either 50  5000  50000 or 500000 depending on index\n  //                         // skipList[0] mod(50), skipList[1] mod(5000), etc\n  //\n  //       // reserved for future use\n  //       union switch (int v)\n  //       {\n  //       case 0:\n  //           void;\n  //       case 1:\n  //           LedgerHeaderExtensionV1 v1;\n  //       }\n  //       ext;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"LedgerHeader\", [[\"ledgerVersion\", xdr.lookup(\"Uint32\")], [\"previousLedgerHash\", xdr.lookup(\"Hash\")], [\"scpValue\", xdr.lookup(\"StellarValue\")], [\"txSetResultHash\", xdr.lookup(\"Hash\")], [\"bucketListHash\", xdr.lookup(\"Hash\")], [\"ledgerSeq\", xdr.lookup(\"Uint32\")], [\"totalCoins\", xdr.lookup(\"Int64\")], [\"feePool\", xdr.lookup(\"Int64\")], [\"inflationSeq\", xdr.lookup(\"Uint32\")], [\"idPool\", xdr.lookup(\"Uint64\")], [\"baseFee\", xdr.lookup(\"Uint32\")], [\"baseReserve\", xdr.lookup(\"Uint32\")], [\"maxTxSetSize\", xdr.lookup(\"Uint32\")], [\"skipList\", xdr.array(xdr.lookup(\"Hash\"), 4)], [\"ext\", xdr.lookup(\"LedgerHeaderExt\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   enum LedgerUpgradeType\n  //   {\n  //       LEDGER_UPGRADE_VERSION = 1,\n  //       LEDGER_UPGRADE_BASE_FEE = 2,\n  //       LEDGER_UPGRADE_MAX_TX_SET_SIZE = 3,\n  //       LEDGER_UPGRADE_BASE_RESERVE = 4,\n  //       LEDGER_UPGRADE_FLAGS = 5,\n  //       LEDGER_UPGRADE_CONFIG = 6,\n  //       LEDGER_UPGRADE_MAX_SOROBAN_TX_SET_SIZE = 7\n  //   };\n  //\n  // ===========================================================================\n  xdr[\"enum\"](\"LedgerUpgradeType\", {\n    ledgerUpgradeVersion: 1,\n    ledgerUpgradeBaseFee: 2,\n    ledgerUpgradeMaxTxSetSize: 3,\n    ledgerUpgradeBaseReserve: 4,\n    ledgerUpgradeFlags: 5,\n    ledgerUpgradeConfig: 6,\n    ledgerUpgradeMaxSorobanTxSetSize: 7\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct ConfigUpgradeSetKey {\n  //       Hash contractID;\n  //       Hash contentHash;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"ConfigUpgradeSetKey\", [[\"contractId\", xdr.lookup(\"Hash\")], [\"contentHash\", xdr.lookup(\"Hash\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   union LedgerUpgrade switch (LedgerUpgradeType type)\n  //   {\n  //   case LEDGER_UPGRADE_VERSION:\n  //       uint32 newLedgerVersion; // update ledgerVersion\n  //   case LEDGER_UPGRADE_BASE_FEE:\n  //       uint32 newBaseFee; // update baseFee\n  //   case LEDGER_UPGRADE_MAX_TX_SET_SIZE:\n  //       uint32 newMaxTxSetSize; // update maxTxSetSize\n  //   case LEDGER_UPGRADE_BASE_RESERVE:\n  //       uint32 newBaseReserve; // update baseReserve\n  //   case LEDGER_UPGRADE_FLAGS:\n  //       uint32 newFlags; // update flags\n  //   case LEDGER_UPGRADE_CONFIG:\n  //       // Update arbitrary `ConfigSetting` entries identified by the key.\n  //       ConfigUpgradeSetKey newConfig;\n  //   case LEDGER_UPGRADE_MAX_SOROBAN_TX_SET_SIZE:\n  //       // Update ConfigSettingContractExecutionLanesV0.ledgerMaxTxCount without\n  //       // using `LEDGER_UPGRADE_CONFIG`.\n  //       uint32 newMaxSorobanTxSetSize;\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"LedgerUpgrade\", {\n    switchOn: xdr.lookup(\"LedgerUpgradeType\"),\n    switchName: \"type\",\n    switches: [[\"ledgerUpgradeVersion\", \"newLedgerVersion\"], [\"ledgerUpgradeBaseFee\", \"newBaseFee\"], [\"ledgerUpgradeMaxTxSetSize\", \"newMaxTxSetSize\"], [\"ledgerUpgradeBaseReserve\", \"newBaseReserve\"], [\"ledgerUpgradeFlags\", \"newFlags\"], [\"ledgerUpgradeConfig\", \"newConfig\"], [\"ledgerUpgradeMaxSorobanTxSetSize\", \"newMaxSorobanTxSetSize\"]],\n    arms: {\n      newLedgerVersion: xdr.lookup(\"Uint32\"),\n      newBaseFee: xdr.lookup(\"Uint32\"),\n      newMaxTxSetSize: xdr.lookup(\"Uint32\"),\n      newBaseReserve: xdr.lookup(\"Uint32\"),\n      newFlags: xdr.lookup(\"Uint32\"),\n      newConfig: xdr.lookup(\"ConfigUpgradeSetKey\"),\n      newMaxSorobanTxSetSize: xdr.lookup(\"Uint32\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct ConfigUpgradeSet {\n  //       ConfigSettingEntry updatedEntry<>;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"ConfigUpgradeSet\", [[\"updatedEntry\", xdr.varArray(xdr.lookup(\"ConfigSettingEntry\"), 2147483647)]]);\n\n  // === xdr source ============================================================\n  //\n  //   enum TxSetComponentType\n  //   {\n  //     // txs with effective fee <= bid derived from a base fee (if any).\n  //     // If base fee is not specified, no discount is applied.\n  //     TXSET_COMP_TXS_MAYBE_DISCOUNTED_FEE = 0\n  //   };\n  //\n  // ===========================================================================\n  xdr[\"enum\"](\"TxSetComponentType\", {\n    txsetCompTxsMaybeDiscountedFee: 0\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct\n  //     {\n  //       int64* baseFee;\n  //       TransactionEnvelope txs<>;\n  //     }\n  //\n  // ===========================================================================\n  xdr.struct(\"TxSetComponentTxsMaybeDiscountedFee\", [[\"baseFee\", xdr.option(xdr.lookup(\"Int64\"))], [\"txes\", xdr.varArray(xdr.lookup(\"TransactionEnvelope\"), 2147483647)]]);\n\n  // === xdr source ============================================================\n  //\n  //   union TxSetComponent switch (TxSetComponentType type)\n  //   {\n  //   case TXSET_COMP_TXS_MAYBE_DISCOUNTED_FEE:\n  //     struct\n  //     {\n  //       int64* baseFee;\n  //       TransactionEnvelope txs<>;\n  //     } txsMaybeDiscountedFee;\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"TxSetComponent\", {\n    switchOn: xdr.lookup(\"TxSetComponentType\"),\n    switchName: \"type\",\n    switches: [[\"txsetCompTxsMaybeDiscountedFee\", \"txsMaybeDiscountedFee\"]],\n    arms: {\n      txsMaybeDiscountedFee: xdr.lookup(\"TxSetComponentTxsMaybeDiscountedFee\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   union TransactionPhase switch (int v)\n  //   {\n  //   case 0:\n  //       TxSetComponent v0Components<>;\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"TransactionPhase\", {\n    switchOn: xdr[\"int\"](),\n    switchName: \"v\",\n    switches: [[0, \"v0Components\"]],\n    arms: {\n      v0Components: xdr.varArray(xdr.lookup(\"TxSetComponent\"), 2147483647)\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct TransactionSet\n  //   {\n  //       Hash previousLedgerHash;\n  //       TransactionEnvelope txs<>;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"TransactionSet\", [[\"previousLedgerHash\", xdr.lookup(\"Hash\")], [\"txes\", xdr.varArray(xdr.lookup(\"TransactionEnvelope\"), 2147483647)]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct TransactionSetV1\n  //   {\n  //       Hash previousLedgerHash;\n  //       TransactionPhase phases<>;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"TransactionSetV1\", [[\"previousLedgerHash\", xdr.lookup(\"Hash\")], [\"phases\", xdr.varArray(xdr.lookup(\"TransactionPhase\"), 2147483647)]]);\n\n  // === xdr source ============================================================\n  //\n  //   union GeneralizedTransactionSet switch (int v)\n  //   {\n  //   // We consider the legacy TransactionSet to be v0.\n  //   case 1:\n  //       TransactionSetV1 v1TxSet;\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"GeneralizedTransactionSet\", {\n    switchOn: xdr[\"int\"](),\n    switchName: \"v\",\n    switches: [[1, \"v1TxSet\"]],\n    arms: {\n      v1TxSet: xdr.lookup(\"TransactionSetV1\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct TransactionResultPair\n  //   {\n  //       Hash transactionHash;\n  //       TransactionResult result; // result for the transaction\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"TransactionResultPair\", [[\"transactionHash\", xdr.lookup(\"Hash\")], [\"result\", xdr.lookup(\"TransactionResult\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct TransactionResultSet\n  //   {\n  //       TransactionResultPair results<>;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"TransactionResultSet\", [[\"results\", xdr.varArray(xdr.lookup(\"TransactionResultPair\"), 2147483647)]]);\n\n  // === xdr source ============================================================\n  //\n  //   union switch (int v)\n  //       {\n  //       case 0:\n  //           void;\n  //       case 1:\n  //           GeneralizedTransactionSet generalizedTxSet;\n  //       }\n  //\n  // ===========================================================================\n  xdr.union(\"TransactionHistoryEntryExt\", {\n    switchOn: xdr[\"int\"](),\n    switchName: \"v\",\n    switches: [[0, xdr[\"void\"]()], [1, \"generalizedTxSet\"]],\n    arms: {\n      generalizedTxSet: xdr.lookup(\"GeneralizedTransactionSet\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct TransactionHistoryEntry\n  //   {\n  //       uint32 ledgerSeq;\n  //       TransactionSet txSet;\n  //\n  //       // when v != 0, txSet must be empty\n  //       union switch (int v)\n  //       {\n  //       case 0:\n  //           void;\n  //       case 1:\n  //           GeneralizedTransactionSet generalizedTxSet;\n  //       }\n  //       ext;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"TransactionHistoryEntry\", [[\"ledgerSeq\", xdr.lookup(\"Uint32\")], [\"txSet\", xdr.lookup(\"TransactionSet\")], [\"ext\", xdr.lookup(\"TransactionHistoryEntryExt\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   union switch (int v)\n  //       {\n  //       case 0:\n  //           void;\n  //       }\n  //\n  // ===========================================================================\n  xdr.union(\"TransactionHistoryResultEntryExt\", {\n    switchOn: xdr[\"int\"](),\n    switchName: \"v\",\n    switches: [[0, xdr[\"void\"]()]],\n    arms: {}\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct TransactionHistoryResultEntry\n  //   {\n  //       uint32 ledgerSeq;\n  //       TransactionResultSet txResultSet;\n  //\n  //       // reserved for future use\n  //       union switch (int v)\n  //       {\n  //       case 0:\n  //           void;\n  //       }\n  //       ext;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"TransactionHistoryResultEntry\", [[\"ledgerSeq\", xdr.lookup(\"Uint32\")], [\"txResultSet\", xdr.lookup(\"TransactionResultSet\")], [\"ext\", xdr.lookup(\"TransactionHistoryResultEntryExt\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   union switch (int v)\n  //       {\n  //       case 0:\n  //           void;\n  //       }\n  //\n  // ===========================================================================\n  xdr.union(\"LedgerHeaderHistoryEntryExt\", {\n    switchOn: xdr[\"int\"](),\n    switchName: \"v\",\n    switches: [[0, xdr[\"void\"]()]],\n    arms: {}\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct LedgerHeaderHistoryEntry\n  //   {\n  //       Hash hash;\n  //       LedgerHeader header;\n  //\n  //       // reserved for future use\n  //       union switch (int v)\n  //       {\n  //       case 0:\n  //           void;\n  //       }\n  //       ext;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"LedgerHeaderHistoryEntry\", [[\"hash\", xdr.lookup(\"Hash\")], [\"header\", xdr.lookup(\"LedgerHeader\")], [\"ext\", xdr.lookup(\"LedgerHeaderHistoryEntryExt\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct LedgerSCPMessages\n  //   {\n  //       uint32 ledgerSeq;\n  //       SCPEnvelope messages<>;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"LedgerScpMessages\", [[\"ledgerSeq\", xdr.lookup(\"Uint32\")], [\"messages\", xdr.varArray(xdr.lookup(\"ScpEnvelope\"), 2147483647)]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct SCPHistoryEntryV0\n  //   {\n  //       SCPQuorumSet quorumSets<>; // additional quorum sets used by ledgerMessages\n  //       LedgerSCPMessages ledgerMessages;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"ScpHistoryEntryV0\", [[\"quorumSets\", xdr.varArray(xdr.lookup(\"ScpQuorumSet\"), 2147483647)], [\"ledgerMessages\", xdr.lookup(\"LedgerScpMessages\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   union SCPHistoryEntry switch (int v)\n  //   {\n  //   case 0:\n  //       SCPHistoryEntryV0 v0;\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"ScpHistoryEntry\", {\n    switchOn: xdr[\"int\"](),\n    switchName: \"v\",\n    switches: [[0, \"v0\"]],\n    arms: {\n      v0: xdr.lookup(\"ScpHistoryEntryV0\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   enum LedgerEntryChangeType\n  //   {\n  //       LEDGER_ENTRY_CREATED = 0, // entry was added to the ledger\n  //       LEDGER_ENTRY_UPDATED = 1, // entry was modified in the ledger\n  //       LEDGER_ENTRY_REMOVED = 2, // entry was removed from the ledger\n  //       LEDGER_ENTRY_STATE = 3    // value of the entry\n  //   };\n  //\n  // ===========================================================================\n  xdr[\"enum\"](\"LedgerEntryChangeType\", {\n    ledgerEntryCreated: 0,\n    ledgerEntryUpdated: 1,\n    ledgerEntryRemoved: 2,\n    ledgerEntryState: 3\n  });\n\n  // === xdr source ============================================================\n  //\n  //   union LedgerEntryChange switch (LedgerEntryChangeType type)\n  //   {\n  //   case LEDGER_ENTRY_CREATED:\n  //       LedgerEntry created;\n  //   case LEDGER_ENTRY_UPDATED:\n  //       LedgerEntry updated;\n  //   case LEDGER_ENTRY_REMOVED:\n  //       LedgerKey removed;\n  //   case LEDGER_ENTRY_STATE:\n  //       LedgerEntry state;\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"LedgerEntryChange\", {\n    switchOn: xdr.lookup(\"LedgerEntryChangeType\"),\n    switchName: \"type\",\n    switches: [[\"ledgerEntryCreated\", \"created\"], [\"ledgerEntryUpdated\", \"updated\"], [\"ledgerEntryRemoved\", \"removed\"], [\"ledgerEntryState\", \"state\"]],\n    arms: {\n      created: xdr.lookup(\"LedgerEntry\"),\n      updated: xdr.lookup(\"LedgerEntry\"),\n      removed: xdr.lookup(\"LedgerKey\"),\n      state: xdr.lookup(\"LedgerEntry\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   typedef LedgerEntryChange LedgerEntryChanges<>;\n  //\n  // ===========================================================================\n  xdr.typedef(\"LedgerEntryChanges\", xdr.varArray(xdr.lookup(\"LedgerEntryChange\"), 2147483647));\n\n  // === xdr source ============================================================\n  //\n  //   struct OperationMeta\n  //   {\n  //       LedgerEntryChanges changes;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"OperationMeta\", [[\"changes\", xdr.lookup(\"LedgerEntryChanges\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct TransactionMetaV1\n  //   {\n  //       LedgerEntryChanges txChanges; // tx level changes if any\n  //       OperationMeta operations<>;   // meta for each operation\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"TransactionMetaV1\", [[\"txChanges\", xdr.lookup(\"LedgerEntryChanges\")], [\"operations\", xdr.varArray(xdr.lookup(\"OperationMeta\"), 2147483647)]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct TransactionMetaV2\n  //   {\n  //       LedgerEntryChanges txChangesBefore; // tx level changes before operations\n  //                                           // are applied if any\n  //       OperationMeta operations<>;         // meta for each operation\n  //       LedgerEntryChanges txChangesAfter;  // tx level changes after operations are\n  //                                           // applied if any\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"TransactionMetaV2\", [[\"txChangesBefore\", xdr.lookup(\"LedgerEntryChanges\")], [\"operations\", xdr.varArray(xdr.lookup(\"OperationMeta\"), 2147483647)], [\"txChangesAfter\", xdr.lookup(\"LedgerEntryChanges\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   enum ContractEventType\n  //   {\n  //       SYSTEM = 0,\n  //       CONTRACT = 1,\n  //       DIAGNOSTIC = 2\n  //   };\n  //\n  // ===========================================================================\n  xdr[\"enum\"](\"ContractEventType\", {\n    system: 0,\n    contract: 1,\n    diagnostic: 2\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct\n  //           {\n  //               SCVal topics<>;\n  //               SCVal data;\n  //           }\n  //\n  // ===========================================================================\n  xdr.struct(\"ContractEventV0\", [[\"topics\", xdr.varArray(xdr.lookup(\"ScVal\"), 2147483647)], [\"data\", xdr.lookup(\"ScVal\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   union switch (int v)\n  //       {\n  //       case 0:\n  //           struct\n  //           {\n  //               SCVal topics<>;\n  //               SCVal data;\n  //           } v0;\n  //       }\n  //\n  // ===========================================================================\n  xdr.union(\"ContractEventBody\", {\n    switchOn: xdr[\"int\"](),\n    switchName: \"v\",\n    switches: [[0, \"v0\"]],\n    arms: {\n      v0: xdr.lookup(\"ContractEventV0\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct ContractEvent\n  //   {\n  //       // We can use this to add more fields, or because it\n  //       // is first, to change ContractEvent into a union.\n  //       ExtensionPoint ext;\n  //\n  //       Hash* contractID;\n  //       ContractEventType type;\n  //\n  //       union switch (int v)\n  //       {\n  //       case 0:\n  //           struct\n  //           {\n  //               SCVal topics<>;\n  //               SCVal data;\n  //           } v0;\n  //       }\n  //       body;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"ContractEvent\", [[\"ext\", xdr.lookup(\"ExtensionPoint\")], [\"contractId\", xdr.option(xdr.lookup(\"Hash\"))], [\"type\", xdr.lookup(\"ContractEventType\")], [\"body\", xdr.lookup(\"ContractEventBody\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct DiagnosticEvent\n  //   {\n  //       bool inSuccessfulContractCall;\n  //       ContractEvent event;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"DiagnosticEvent\", [[\"inSuccessfulContractCall\", xdr.bool()], [\"event\", xdr.lookup(\"ContractEvent\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   typedef DiagnosticEvent DiagnosticEvents<>;\n  //\n  // ===========================================================================\n  xdr.typedef(\"DiagnosticEvents\", xdr.varArray(xdr.lookup(\"DiagnosticEvent\"), 2147483647));\n\n  // === xdr source ============================================================\n  //\n  //   struct SorobanTransactionMetaExtV1\n  //   {\n  //       ExtensionPoint ext;\n  //\n  //       // The following are the components of the overall Soroban resource fee\n  //       // charged for the transaction.\n  //       // The following relation holds:\n  //       // `resourceFeeCharged = totalNonRefundableResourceFeeCharged + totalRefundableResourceFeeCharged`\n  //       // where `resourceFeeCharged` is the overall fee charged for the\n  //       // transaction. Also, `resourceFeeCharged` <= `sorobanData.resourceFee`\n  //       // i.e.we never charge more than the declared resource fee.\n  //       // The inclusion fee for charged the Soroban transaction can be found using\n  //       // the following equation:\n  //       // `result.feeCharged = resourceFeeCharged + inclusionFeeCharged`.\n  //\n  //       // Total amount (in stroops) that has been charged for non-refundable\n  //       // Soroban resources.\n  //       // Non-refundable resources are charged based on the usage declared in\n  //       // the transaction envelope (such as `instructions`, `readBytes` etc.) and\n  //       // is charged regardless of the success of the transaction.\n  //       int64 totalNonRefundableResourceFeeCharged;\n  //       // Total amount (in stroops) that has been charged for refundable\n  //       // Soroban resource fees.\n  //       // Currently this comprises the rent fee (`rentFeeCharged`) and the\n  //       // fee for the events and return value.\n  //       // Refundable resources are charged based on the actual resources usage.\n  //       // Since currently refundable resources are only used for the successful\n  //       // transactions, this will be `0` for failed transactions.\n  //       int64 totalRefundableResourceFeeCharged;\n  //       // Amount (in stroops) that has been charged for rent.\n  //       // This is a part of `totalNonRefundableResourceFeeCharged`.\n  //       int64 rentFeeCharged;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"SorobanTransactionMetaExtV1\", [[\"ext\", xdr.lookup(\"ExtensionPoint\")], [\"totalNonRefundableResourceFeeCharged\", xdr.lookup(\"Int64\")], [\"totalRefundableResourceFeeCharged\", xdr.lookup(\"Int64\")], [\"rentFeeCharged\", xdr.lookup(\"Int64\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   union SorobanTransactionMetaExt switch (int v)\n  //   {\n  //   case 0:\n  //       void;\n  //   case 1:\n  //       SorobanTransactionMetaExtV1 v1;\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"SorobanTransactionMetaExt\", {\n    switchOn: xdr[\"int\"](),\n    switchName: \"v\",\n    switches: [[0, xdr[\"void\"]()], [1, \"v1\"]],\n    arms: {\n      v1: xdr.lookup(\"SorobanTransactionMetaExtV1\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct SorobanTransactionMeta\n  //   {\n  //       SorobanTransactionMetaExt ext;\n  //\n  //       ContractEvent events<>;             // custom events populated by the\n  //                                           // contracts themselves.\n  //       SCVal returnValue;                  // return value of the host fn invocation\n  //\n  //       // Diagnostics events that are not hashed.\n  //       // This will contain all contract and diagnostic events. Even ones\n  //       // that were emitted in a failed contract call.\n  //       DiagnosticEvent diagnosticEvents<>;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"SorobanTransactionMeta\", [[\"ext\", xdr.lookup(\"SorobanTransactionMetaExt\")], [\"events\", xdr.varArray(xdr.lookup(\"ContractEvent\"), 2147483647)], [\"returnValue\", xdr.lookup(\"ScVal\")], [\"diagnosticEvents\", xdr.varArray(xdr.lookup(\"DiagnosticEvent\"), 2147483647)]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct TransactionMetaV3\n  //   {\n  //       ExtensionPoint ext;\n  //\n  //       LedgerEntryChanges txChangesBefore;  // tx level changes before operations\n  //                                            // are applied if any\n  //       OperationMeta operations<>;          // meta for each operation\n  //       LedgerEntryChanges txChangesAfter;   // tx level changes after operations are\n  //                                            // applied if any\n  //       SorobanTransactionMeta* sorobanMeta; // Soroban-specific meta (only for\n  //                                            // Soroban transactions).\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"TransactionMetaV3\", [[\"ext\", xdr.lookup(\"ExtensionPoint\")], [\"txChangesBefore\", xdr.lookup(\"LedgerEntryChanges\")], [\"operations\", xdr.varArray(xdr.lookup(\"OperationMeta\"), 2147483647)], [\"txChangesAfter\", xdr.lookup(\"LedgerEntryChanges\")], [\"sorobanMeta\", xdr.option(xdr.lookup(\"SorobanTransactionMeta\"))]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct InvokeHostFunctionSuccessPreImage\n  //   {\n  //       SCVal returnValue;\n  //       ContractEvent events<>;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"InvokeHostFunctionSuccessPreImage\", [[\"returnValue\", xdr.lookup(\"ScVal\")], [\"events\", xdr.varArray(xdr.lookup(\"ContractEvent\"), 2147483647)]]);\n\n  // === xdr source ============================================================\n  //\n  //   union TransactionMeta switch (int v)\n  //   {\n  //   case 0:\n  //       OperationMeta operations<>;\n  //   case 1:\n  //       TransactionMetaV1 v1;\n  //   case 2:\n  //       TransactionMetaV2 v2;\n  //   case 3:\n  //       TransactionMetaV3 v3;\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"TransactionMeta\", {\n    switchOn: xdr[\"int\"](),\n    switchName: \"v\",\n    switches: [[0, \"operations\"], [1, \"v1\"], [2, \"v2\"], [3, \"v3\"]],\n    arms: {\n      operations: xdr.varArray(xdr.lookup(\"OperationMeta\"), 2147483647),\n      v1: xdr.lookup(\"TransactionMetaV1\"),\n      v2: xdr.lookup(\"TransactionMetaV2\"),\n      v3: xdr.lookup(\"TransactionMetaV3\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct TransactionResultMeta\n  //   {\n  //       TransactionResultPair result;\n  //       LedgerEntryChanges feeProcessing;\n  //       TransactionMeta txApplyProcessing;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"TransactionResultMeta\", [[\"result\", xdr.lookup(\"TransactionResultPair\")], [\"feeProcessing\", xdr.lookup(\"LedgerEntryChanges\")], [\"txApplyProcessing\", xdr.lookup(\"TransactionMeta\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct UpgradeEntryMeta\n  //   {\n  //       LedgerUpgrade upgrade;\n  //       LedgerEntryChanges changes;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"UpgradeEntryMeta\", [[\"upgrade\", xdr.lookup(\"LedgerUpgrade\")], [\"changes\", xdr.lookup(\"LedgerEntryChanges\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct LedgerCloseMetaV0\n  //   {\n  //       LedgerHeaderHistoryEntry ledgerHeader;\n  //       // NB: txSet is sorted in \"Hash order\"\n  //       TransactionSet txSet;\n  //\n  //       // NB: transactions are sorted in apply order here\n  //       // fees for all transactions are processed first\n  //       // followed by applying transactions\n  //       TransactionResultMeta txProcessing<>;\n  //\n  //       // upgrades are applied last\n  //       UpgradeEntryMeta upgradesProcessing<>;\n  //\n  //       // other misc information attached to the ledger close\n  //       SCPHistoryEntry scpInfo<>;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"LedgerCloseMetaV0\", [[\"ledgerHeader\", xdr.lookup(\"LedgerHeaderHistoryEntry\")], [\"txSet\", xdr.lookup(\"TransactionSet\")], [\"txProcessing\", xdr.varArray(xdr.lookup(\"TransactionResultMeta\"), 2147483647)], [\"upgradesProcessing\", xdr.varArray(xdr.lookup(\"UpgradeEntryMeta\"), 2147483647)], [\"scpInfo\", xdr.varArray(xdr.lookup(\"ScpHistoryEntry\"), 2147483647)]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct LedgerCloseMetaExtV1\n  //   {\n  //       ExtensionPoint ext;\n  //       int64 sorobanFeeWrite1KB;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"LedgerCloseMetaExtV1\", [[\"ext\", xdr.lookup(\"ExtensionPoint\")], [\"sorobanFeeWrite1Kb\", xdr.lookup(\"Int64\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   union LedgerCloseMetaExt switch (int v)\n  //   {\n  //   case 0:\n  //       void;\n  //   case 1:\n  //       LedgerCloseMetaExtV1 v1;\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"LedgerCloseMetaExt\", {\n    switchOn: xdr[\"int\"](),\n    switchName: \"v\",\n    switches: [[0, xdr[\"void\"]()], [1, \"v1\"]],\n    arms: {\n      v1: xdr.lookup(\"LedgerCloseMetaExtV1\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct LedgerCloseMetaV1\n  //   {\n  //       LedgerCloseMetaExt ext;\n  //\n  //       LedgerHeaderHistoryEntry ledgerHeader;\n  //\n  //       GeneralizedTransactionSet txSet;\n  //\n  //       // NB: transactions are sorted in apply order here\n  //       // fees for all transactions are processed first\n  //       // followed by applying transactions\n  //       TransactionResultMeta txProcessing<>;\n  //\n  //       // upgrades are applied last\n  //       UpgradeEntryMeta upgradesProcessing<>;\n  //\n  //       // other misc information attached to the ledger close\n  //       SCPHistoryEntry scpInfo<>;\n  //\n  //       // Size in bytes of BucketList, to support downstream\n  //       // systems calculating storage fees correctly.\n  //       uint64 totalByteSizeOfBucketList;\n  //\n  //       // Temp keys that are being evicted at this ledger.\n  //       LedgerKey evictedTemporaryLedgerKeys<>;\n  //\n  //       // Archived restorable ledger entries that are being\n  //       // evicted at this ledger.\n  //       LedgerEntry evictedPersistentLedgerEntries<>;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"LedgerCloseMetaV1\", [[\"ext\", xdr.lookup(\"LedgerCloseMetaExt\")], [\"ledgerHeader\", xdr.lookup(\"LedgerHeaderHistoryEntry\")], [\"txSet\", xdr.lookup(\"GeneralizedTransactionSet\")], [\"txProcessing\", xdr.varArray(xdr.lookup(\"TransactionResultMeta\"), 2147483647)], [\"upgradesProcessing\", xdr.varArray(xdr.lookup(\"UpgradeEntryMeta\"), 2147483647)], [\"scpInfo\", xdr.varArray(xdr.lookup(\"ScpHistoryEntry\"), 2147483647)], [\"totalByteSizeOfBucketList\", xdr.lookup(\"Uint64\")], [\"evictedTemporaryLedgerKeys\", xdr.varArray(xdr.lookup(\"LedgerKey\"), 2147483647)], [\"evictedPersistentLedgerEntries\", xdr.varArray(xdr.lookup(\"LedgerEntry\"), 2147483647)]]);\n\n  // === xdr source ============================================================\n  //\n  //   union LedgerCloseMeta switch (int v)\n  //   {\n  //   case 0:\n  //       LedgerCloseMetaV0 v0;\n  //   case 1:\n  //       LedgerCloseMetaV1 v1;\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"LedgerCloseMeta\", {\n    switchOn: xdr[\"int\"](),\n    switchName: \"v\",\n    switches: [[0, \"v0\"], [1, \"v1\"]],\n    arms: {\n      v0: xdr.lookup(\"LedgerCloseMetaV0\"),\n      v1: xdr.lookup(\"LedgerCloseMetaV1\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   enum ErrorCode\n  //   {\n  //       ERR_MISC = 0, // Unspecific error\n  //       ERR_DATA = 1, // Malformed data\n  //       ERR_CONF = 2, // Misconfiguration error\n  //       ERR_AUTH = 3, // Authentication failure\n  //       ERR_LOAD = 4  // System overloaded\n  //   };\n  //\n  // ===========================================================================\n  xdr[\"enum\"](\"ErrorCode\", {\n    errMisc: 0,\n    errData: 1,\n    errConf: 2,\n    errAuth: 3,\n    errLoad: 4\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct Error\n  //   {\n  //       ErrorCode code;\n  //       string msg<100>;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"Error\", [[\"code\", xdr.lookup(\"ErrorCode\")], [\"msg\", xdr.string(100)]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct SendMore\n  //   {\n  //       uint32 numMessages;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"SendMore\", [[\"numMessages\", xdr.lookup(\"Uint32\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct SendMoreExtended\n  //   {\n  //       uint32 numMessages;\n  //       uint32 numBytes;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"SendMoreExtended\", [[\"numMessages\", xdr.lookup(\"Uint32\")], [\"numBytes\", xdr.lookup(\"Uint32\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct AuthCert\n  //   {\n  //       Curve25519Public pubkey;\n  //       uint64 expiration;\n  //       Signature sig;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"AuthCert\", [[\"pubkey\", xdr.lookup(\"Curve25519Public\")], [\"expiration\", xdr.lookup(\"Uint64\")], [\"sig\", xdr.lookup(\"Signature\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct Hello\n  //   {\n  //       uint32 ledgerVersion;\n  //       uint32 overlayVersion;\n  //       uint32 overlayMinVersion;\n  //       Hash networkID;\n  //       string versionStr<100>;\n  //       int listeningPort;\n  //       NodeID peerID;\n  //       AuthCert cert;\n  //       uint256 nonce;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"Hello\", [[\"ledgerVersion\", xdr.lookup(\"Uint32\")], [\"overlayVersion\", xdr.lookup(\"Uint32\")], [\"overlayMinVersion\", xdr.lookup(\"Uint32\")], [\"networkId\", xdr.lookup(\"Hash\")], [\"versionStr\", xdr.string(100)], [\"listeningPort\", xdr[\"int\"]()], [\"peerId\", xdr.lookup(\"NodeId\")], [\"cert\", xdr.lookup(\"AuthCert\")], [\"nonce\", xdr.lookup(\"Uint256\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   const AUTH_MSG_FLAG_FLOW_CONTROL_BYTES_REQUESTED = 200;\n  //\n  // ===========================================================================\n  xdr[\"const\"](\"AUTH_MSG_FLAG_FLOW_CONTROL_BYTES_REQUESTED\", 200);\n\n  // === xdr source ============================================================\n  //\n  //   struct Auth\n  //   {\n  //       int flags;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"Auth\", [[\"flags\", xdr[\"int\"]()]]);\n\n  // === xdr source ============================================================\n  //\n  //   enum IPAddrType\n  //   {\n  //       IPv4 = 0,\n  //       IPv6 = 1\n  //   };\n  //\n  // ===========================================================================\n  xdr[\"enum\"](\"IpAddrType\", {\n    iPv4: 0,\n    iPv6: 1\n  });\n\n  // === xdr source ============================================================\n  //\n  //   union switch (IPAddrType type)\n  //       {\n  //       case IPv4:\n  //           opaque ipv4[4];\n  //       case IPv6:\n  //           opaque ipv6[16];\n  //       }\n  //\n  // ===========================================================================\n  xdr.union(\"PeerAddressIp\", {\n    switchOn: xdr.lookup(\"IpAddrType\"),\n    switchName: \"type\",\n    switches: [[\"iPv4\", \"ipv4\"], [\"iPv6\", \"ipv6\"]],\n    arms: {\n      ipv4: xdr.opaque(4),\n      ipv6: xdr.opaque(16)\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct PeerAddress\n  //   {\n  //       union switch (IPAddrType type)\n  //       {\n  //       case IPv4:\n  //           opaque ipv4[4];\n  //       case IPv6:\n  //           opaque ipv6[16];\n  //       }\n  //       ip;\n  //       uint32 port;\n  //       uint32 numFailures;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"PeerAddress\", [[\"ip\", xdr.lookup(\"PeerAddressIp\")], [\"port\", xdr.lookup(\"Uint32\")], [\"numFailures\", xdr.lookup(\"Uint32\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   enum MessageType\n  //   {\n  //       ERROR_MSG = 0,\n  //       AUTH = 2,\n  //       DONT_HAVE = 3,\n  //\n  //       GET_PEERS = 4, // gets a list of peers this guy knows about\n  //       PEERS = 5,\n  //\n  //       GET_TX_SET = 6, // gets a particular txset by hash\n  //       TX_SET = 7,\n  //       GENERALIZED_TX_SET = 17,\n  //\n  //       TRANSACTION = 8, // pass on a tx you have heard about\n  //\n  //       // SCP\n  //       GET_SCP_QUORUMSET = 9,\n  //       SCP_QUORUMSET = 10,\n  //       SCP_MESSAGE = 11,\n  //       GET_SCP_STATE = 12,\n  //\n  //       // new messages\n  //       HELLO = 13,\n  //\n  //       SURVEY_REQUEST = 14,\n  //       SURVEY_RESPONSE = 15,\n  //\n  //       SEND_MORE = 16,\n  //       SEND_MORE_EXTENDED = 20,\n  //\n  //       FLOOD_ADVERT = 18,\n  //       FLOOD_DEMAND = 19,\n  //\n  //       TIME_SLICED_SURVEY_REQUEST = 21,\n  //       TIME_SLICED_SURVEY_RESPONSE = 22,\n  //       TIME_SLICED_SURVEY_START_COLLECTING = 23,\n  //       TIME_SLICED_SURVEY_STOP_COLLECTING = 24\n  //   };\n  //\n  // ===========================================================================\n  xdr[\"enum\"](\"MessageType\", {\n    errorMsg: 0,\n    auth: 2,\n    dontHave: 3,\n    getPeers: 4,\n    peers: 5,\n    getTxSet: 6,\n    txSet: 7,\n    generalizedTxSet: 17,\n    transaction: 8,\n    getScpQuorumset: 9,\n    scpQuorumset: 10,\n    scpMessage: 11,\n    getScpState: 12,\n    hello: 13,\n    surveyRequest: 14,\n    surveyResponse: 15,\n    sendMore: 16,\n    sendMoreExtended: 20,\n    floodAdvert: 18,\n    floodDemand: 19,\n    timeSlicedSurveyRequest: 21,\n    timeSlicedSurveyResponse: 22,\n    timeSlicedSurveyStartCollecting: 23,\n    timeSlicedSurveyStopCollecting: 24\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct DontHave\n  //   {\n  //       MessageType type;\n  //       uint256 reqHash;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"DontHave\", [[\"type\", xdr.lookup(\"MessageType\")], [\"reqHash\", xdr.lookup(\"Uint256\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   enum SurveyMessageCommandType\n  //   {\n  //       SURVEY_TOPOLOGY = 0,\n  //       TIME_SLICED_SURVEY_TOPOLOGY = 1\n  //   };\n  //\n  // ===========================================================================\n  xdr[\"enum\"](\"SurveyMessageCommandType\", {\n    surveyTopology: 0,\n    timeSlicedSurveyTopology: 1\n  });\n\n  // === xdr source ============================================================\n  //\n  //   enum SurveyMessageResponseType\n  //   {\n  //       SURVEY_TOPOLOGY_RESPONSE_V0 = 0,\n  //       SURVEY_TOPOLOGY_RESPONSE_V1 = 1,\n  //       SURVEY_TOPOLOGY_RESPONSE_V2 = 2\n  //   };\n  //\n  // ===========================================================================\n  xdr[\"enum\"](\"SurveyMessageResponseType\", {\n    surveyTopologyResponseV0: 0,\n    surveyTopologyResponseV1: 1,\n    surveyTopologyResponseV2: 2\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct TimeSlicedSurveyStartCollectingMessage\n  //   {\n  //       NodeID surveyorID;\n  //       uint32 nonce;\n  //       uint32 ledgerNum;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"TimeSlicedSurveyStartCollectingMessage\", [[\"surveyorId\", xdr.lookup(\"NodeId\")], [\"nonce\", xdr.lookup(\"Uint32\")], [\"ledgerNum\", xdr.lookup(\"Uint32\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct SignedTimeSlicedSurveyStartCollectingMessage\n  //   {\n  //       Signature signature;\n  //       TimeSlicedSurveyStartCollectingMessage startCollecting;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"SignedTimeSlicedSurveyStartCollectingMessage\", [[\"signature\", xdr.lookup(\"Signature\")], [\"startCollecting\", xdr.lookup(\"TimeSlicedSurveyStartCollectingMessage\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct TimeSlicedSurveyStopCollectingMessage\n  //   {\n  //       NodeID surveyorID;\n  //       uint32 nonce;\n  //       uint32 ledgerNum;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"TimeSlicedSurveyStopCollectingMessage\", [[\"surveyorId\", xdr.lookup(\"NodeId\")], [\"nonce\", xdr.lookup(\"Uint32\")], [\"ledgerNum\", xdr.lookup(\"Uint32\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct SignedTimeSlicedSurveyStopCollectingMessage\n  //   {\n  //       Signature signature;\n  //       TimeSlicedSurveyStopCollectingMessage stopCollecting;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"SignedTimeSlicedSurveyStopCollectingMessage\", [[\"signature\", xdr.lookup(\"Signature\")], [\"stopCollecting\", xdr.lookup(\"TimeSlicedSurveyStopCollectingMessage\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct SurveyRequestMessage\n  //   {\n  //       NodeID surveyorPeerID;\n  //       NodeID surveyedPeerID;\n  //       uint32 ledgerNum;\n  //       Curve25519Public encryptionKey;\n  //       SurveyMessageCommandType commandType;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"SurveyRequestMessage\", [[\"surveyorPeerId\", xdr.lookup(\"NodeId\")], [\"surveyedPeerId\", xdr.lookup(\"NodeId\")], [\"ledgerNum\", xdr.lookup(\"Uint32\")], [\"encryptionKey\", xdr.lookup(\"Curve25519Public\")], [\"commandType\", xdr.lookup(\"SurveyMessageCommandType\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct TimeSlicedSurveyRequestMessage\n  //   {\n  //       SurveyRequestMessage request;\n  //       uint32 nonce;\n  //       uint32 inboundPeersIndex;\n  //       uint32 outboundPeersIndex;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"TimeSlicedSurveyRequestMessage\", [[\"request\", xdr.lookup(\"SurveyRequestMessage\")], [\"nonce\", xdr.lookup(\"Uint32\")], [\"inboundPeersIndex\", xdr.lookup(\"Uint32\")], [\"outboundPeersIndex\", xdr.lookup(\"Uint32\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct SignedSurveyRequestMessage\n  //   {\n  //       Signature requestSignature;\n  //       SurveyRequestMessage request;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"SignedSurveyRequestMessage\", [[\"requestSignature\", xdr.lookup(\"Signature\")], [\"request\", xdr.lookup(\"SurveyRequestMessage\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct SignedTimeSlicedSurveyRequestMessage\n  //   {\n  //       Signature requestSignature;\n  //       TimeSlicedSurveyRequestMessage request;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"SignedTimeSlicedSurveyRequestMessage\", [[\"requestSignature\", xdr.lookup(\"Signature\")], [\"request\", xdr.lookup(\"TimeSlicedSurveyRequestMessage\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   typedef opaque EncryptedBody<64000>;\n  //\n  // ===========================================================================\n  xdr.typedef(\"EncryptedBody\", xdr.varOpaque(64000));\n\n  // === xdr source ============================================================\n  //\n  //   struct SurveyResponseMessage\n  //   {\n  //       NodeID surveyorPeerID;\n  //       NodeID surveyedPeerID;\n  //       uint32 ledgerNum;\n  //       SurveyMessageCommandType commandType;\n  //       EncryptedBody encryptedBody;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"SurveyResponseMessage\", [[\"surveyorPeerId\", xdr.lookup(\"NodeId\")], [\"surveyedPeerId\", xdr.lookup(\"NodeId\")], [\"ledgerNum\", xdr.lookup(\"Uint32\")], [\"commandType\", xdr.lookup(\"SurveyMessageCommandType\")], [\"encryptedBody\", xdr.lookup(\"EncryptedBody\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct TimeSlicedSurveyResponseMessage\n  //   {\n  //       SurveyResponseMessage response;\n  //       uint32 nonce;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"TimeSlicedSurveyResponseMessage\", [[\"response\", xdr.lookup(\"SurveyResponseMessage\")], [\"nonce\", xdr.lookup(\"Uint32\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct SignedSurveyResponseMessage\n  //   {\n  //       Signature responseSignature;\n  //       SurveyResponseMessage response;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"SignedSurveyResponseMessage\", [[\"responseSignature\", xdr.lookup(\"Signature\")], [\"response\", xdr.lookup(\"SurveyResponseMessage\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct SignedTimeSlicedSurveyResponseMessage\n  //   {\n  //       Signature responseSignature;\n  //       TimeSlicedSurveyResponseMessage response;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"SignedTimeSlicedSurveyResponseMessage\", [[\"responseSignature\", xdr.lookup(\"Signature\")], [\"response\", xdr.lookup(\"TimeSlicedSurveyResponseMessage\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct PeerStats\n  //   {\n  //       NodeID id;\n  //       string versionStr<100>;\n  //       uint64 messagesRead;\n  //       uint64 messagesWritten;\n  //       uint64 bytesRead;\n  //       uint64 bytesWritten;\n  //       uint64 secondsConnected;\n  //\n  //       uint64 uniqueFloodBytesRecv;\n  //       uint64 duplicateFloodBytesRecv;\n  //       uint64 uniqueFetchBytesRecv;\n  //       uint64 duplicateFetchBytesRecv;\n  //\n  //       uint64 uniqueFloodMessageRecv;\n  //       uint64 duplicateFloodMessageRecv;\n  //       uint64 uniqueFetchMessageRecv;\n  //       uint64 duplicateFetchMessageRecv;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"PeerStats\", [[\"id\", xdr.lookup(\"NodeId\")], [\"versionStr\", xdr.string(100)], [\"messagesRead\", xdr.lookup(\"Uint64\")], [\"messagesWritten\", xdr.lookup(\"Uint64\")], [\"bytesRead\", xdr.lookup(\"Uint64\")], [\"bytesWritten\", xdr.lookup(\"Uint64\")], [\"secondsConnected\", xdr.lookup(\"Uint64\")], [\"uniqueFloodBytesRecv\", xdr.lookup(\"Uint64\")], [\"duplicateFloodBytesRecv\", xdr.lookup(\"Uint64\")], [\"uniqueFetchBytesRecv\", xdr.lookup(\"Uint64\")], [\"duplicateFetchBytesRecv\", xdr.lookup(\"Uint64\")], [\"uniqueFloodMessageRecv\", xdr.lookup(\"Uint64\")], [\"duplicateFloodMessageRecv\", xdr.lookup(\"Uint64\")], [\"uniqueFetchMessageRecv\", xdr.lookup(\"Uint64\")], [\"duplicateFetchMessageRecv\", xdr.lookup(\"Uint64\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   typedef PeerStats PeerStatList<25>;\n  //\n  // ===========================================================================\n  xdr.typedef(\"PeerStatList\", xdr.varArray(xdr.lookup(\"PeerStats\"), 25));\n\n  // === xdr source ============================================================\n  //\n  //   struct TimeSlicedNodeData\n  //   {\n  //       uint32 addedAuthenticatedPeers;\n  //       uint32 droppedAuthenticatedPeers;\n  //       uint32 totalInboundPeerCount;\n  //       uint32 totalOutboundPeerCount;\n  //\n  //       // SCP stats\n  //       uint32 p75SCPFirstToSelfLatencyMs;\n  //       uint32 p75SCPSelfToOtherLatencyMs;\n  //\n  //       // How many times the node lost sync in the time slice\n  //       uint32 lostSyncCount;\n  //\n  //       // Config data\n  //       bool isValidator;\n  //       uint32 maxInboundPeerCount;\n  //       uint32 maxOutboundPeerCount;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"TimeSlicedNodeData\", [[\"addedAuthenticatedPeers\", xdr.lookup(\"Uint32\")], [\"droppedAuthenticatedPeers\", xdr.lookup(\"Uint32\")], [\"totalInboundPeerCount\", xdr.lookup(\"Uint32\")], [\"totalOutboundPeerCount\", xdr.lookup(\"Uint32\")], [\"p75ScpFirstToSelfLatencyMs\", xdr.lookup(\"Uint32\")], [\"p75ScpSelfToOtherLatencyMs\", xdr.lookup(\"Uint32\")], [\"lostSyncCount\", xdr.lookup(\"Uint32\")], [\"isValidator\", xdr.bool()], [\"maxInboundPeerCount\", xdr.lookup(\"Uint32\")], [\"maxOutboundPeerCount\", xdr.lookup(\"Uint32\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct TimeSlicedPeerData\n  //   {\n  //       PeerStats peerStats;\n  //       uint32 averageLatencyMs;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"TimeSlicedPeerData\", [[\"peerStats\", xdr.lookup(\"PeerStats\")], [\"averageLatencyMs\", xdr.lookup(\"Uint32\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   typedef TimeSlicedPeerData TimeSlicedPeerDataList<25>;\n  //\n  // ===========================================================================\n  xdr.typedef(\"TimeSlicedPeerDataList\", xdr.varArray(xdr.lookup(\"TimeSlicedPeerData\"), 25));\n\n  // === xdr source ============================================================\n  //\n  //   struct TopologyResponseBodyV0\n  //   {\n  //       PeerStatList inboundPeers;\n  //       PeerStatList outboundPeers;\n  //\n  //       uint32 totalInboundPeerCount;\n  //       uint32 totalOutboundPeerCount;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"TopologyResponseBodyV0\", [[\"inboundPeers\", xdr.lookup(\"PeerStatList\")], [\"outboundPeers\", xdr.lookup(\"PeerStatList\")], [\"totalInboundPeerCount\", xdr.lookup(\"Uint32\")], [\"totalOutboundPeerCount\", xdr.lookup(\"Uint32\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct TopologyResponseBodyV1\n  //   {\n  //       PeerStatList inboundPeers;\n  //       PeerStatList outboundPeers;\n  //\n  //       uint32 totalInboundPeerCount;\n  //       uint32 totalOutboundPeerCount;\n  //\n  //       uint32 maxInboundPeerCount;\n  //       uint32 maxOutboundPeerCount;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"TopologyResponseBodyV1\", [[\"inboundPeers\", xdr.lookup(\"PeerStatList\")], [\"outboundPeers\", xdr.lookup(\"PeerStatList\")], [\"totalInboundPeerCount\", xdr.lookup(\"Uint32\")], [\"totalOutboundPeerCount\", xdr.lookup(\"Uint32\")], [\"maxInboundPeerCount\", xdr.lookup(\"Uint32\")], [\"maxOutboundPeerCount\", xdr.lookup(\"Uint32\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct TopologyResponseBodyV2\n  //   {\n  //       TimeSlicedPeerDataList inboundPeers;\n  //       TimeSlicedPeerDataList outboundPeers;\n  //       TimeSlicedNodeData nodeData;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"TopologyResponseBodyV2\", [[\"inboundPeers\", xdr.lookup(\"TimeSlicedPeerDataList\")], [\"outboundPeers\", xdr.lookup(\"TimeSlicedPeerDataList\")], [\"nodeData\", xdr.lookup(\"TimeSlicedNodeData\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   union SurveyResponseBody switch (SurveyMessageResponseType type)\n  //   {\n  //   case SURVEY_TOPOLOGY_RESPONSE_V0:\n  //       TopologyResponseBodyV0 topologyResponseBodyV0;\n  //   case SURVEY_TOPOLOGY_RESPONSE_V1:\n  //       TopologyResponseBodyV1 topologyResponseBodyV1;\n  //   case SURVEY_TOPOLOGY_RESPONSE_V2:\n  //       TopologyResponseBodyV2 topologyResponseBodyV2;\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"SurveyResponseBody\", {\n    switchOn: xdr.lookup(\"SurveyMessageResponseType\"),\n    switchName: \"type\",\n    switches: [[\"surveyTopologyResponseV0\", \"topologyResponseBodyV0\"], [\"surveyTopologyResponseV1\", \"topologyResponseBodyV1\"], [\"surveyTopologyResponseV2\", \"topologyResponseBodyV2\"]],\n    arms: {\n      topologyResponseBodyV0: xdr.lookup(\"TopologyResponseBodyV0\"),\n      topologyResponseBodyV1: xdr.lookup(\"TopologyResponseBodyV1\"),\n      topologyResponseBodyV2: xdr.lookup(\"TopologyResponseBodyV2\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   const TX_ADVERT_VECTOR_MAX_SIZE = 1000;\n  //\n  // ===========================================================================\n  xdr[\"const\"](\"TX_ADVERT_VECTOR_MAX_SIZE\", 1000);\n\n  // === xdr source ============================================================\n  //\n  //   typedef Hash TxAdvertVector<TX_ADVERT_VECTOR_MAX_SIZE>;\n  //\n  // ===========================================================================\n  xdr.typedef(\"TxAdvertVector\", xdr.varArray(xdr.lookup(\"Hash\"), xdr.lookup(\"TX_ADVERT_VECTOR_MAX_SIZE\")));\n\n  // === xdr source ============================================================\n  //\n  //   struct FloodAdvert\n  //   {\n  //       TxAdvertVector txHashes;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"FloodAdvert\", [[\"txHashes\", xdr.lookup(\"TxAdvertVector\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   const TX_DEMAND_VECTOR_MAX_SIZE = 1000;\n  //\n  // ===========================================================================\n  xdr[\"const\"](\"TX_DEMAND_VECTOR_MAX_SIZE\", 1000);\n\n  // === xdr source ============================================================\n  //\n  //   typedef Hash TxDemandVector<TX_DEMAND_VECTOR_MAX_SIZE>;\n  //\n  // ===========================================================================\n  xdr.typedef(\"TxDemandVector\", xdr.varArray(xdr.lookup(\"Hash\"), xdr.lookup(\"TX_DEMAND_VECTOR_MAX_SIZE\")));\n\n  // === xdr source ============================================================\n  //\n  //   struct FloodDemand\n  //   {\n  //       TxDemandVector txHashes;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"FloodDemand\", [[\"txHashes\", xdr.lookup(\"TxDemandVector\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   union StellarMessage switch (MessageType type)\n  //   {\n  //   case ERROR_MSG:\n  //       Error error;\n  //   case HELLO:\n  //       Hello hello;\n  //   case AUTH:\n  //       Auth auth;\n  //   case DONT_HAVE:\n  //       DontHave dontHave;\n  //   case GET_PEERS:\n  //       void;\n  //   case PEERS:\n  //       PeerAddress peers<100>;\n  //\n  //   case GET_TX_SET:\n  //       uint256 txSetHash;\n  //   case TX_SET:\n  //       TransactionSet txSet;\n  //   case GENERALIZED_TX_SET:\n  //       GeneralizedTransactionSet generalizedTxSet;\n  //\n  //   case TRANSACTION:\n  //       TransactionEnvelope transaction;\n  //\n  //   case SURVEY_REQUEST:\n  //       SignedSurveyRequestMessage signedSurveyRequestMessage;\n  //\n  //   case SURVEY_RESPONSE:\n  //       SignedSurveyResponseMessage signedSurveyResponseMessage;\n  //\n  //   case TIME_SLICED_SURVEY_REQUEST:\n  //       SignedTimeSlicedSurveyRequestMessage signedTimeSlicedSurveyRequestMessage;\n  //\n  //   case TIME_SLICED_SURVEY_RESPONSE:\n  //       SignedTimeSlicedSurveyResponseMessage signedTimeSlicedSurveyResponseMessage;\n  //\n  //   case TIME_SLICED_SURVEY_START_COLLECTING:\n  //       SignedTimeSlicedSurveyStartCollectingMessage\n  //           signedTimeSlicedSurveyStartCollectingMessage;\n  //\n  //   case TIME_SLICED_SURVEY_STOP_COLLECTING:\n  //       SignedTimeSlicedSurveyStopCollectingMessage\n  //           signedTimeSlicedSurveyStopCollectingMessage;\n  //\n  //   // SCP\n  //   case GET_SCP_QUORUMSET:\n  //       uint256 qSetHash;\n  //   case SCP_QUORUMSET:\n  //       SCPQuorumSet qSet;\n  //   case SCP_MESSAGE:\n  //       SCPEnvelope envelope;\n  //   case GET_SCP_STATE:\n  //       uint32 getSCPLedgerSeq; // ledger seq requested ; if 0, requests the latest\n  //   case SEND_MORE:\n  //       SendMore sendMoreMessage;\n  //   case SEND_MORE_EXTENDED:\n  //       SendMoreExtended sendMoreExtendedMessage;\n  //   // Pull mode\n  //   case FLOOD_ADVERT:\n  //        FloodAdvert floodAdvert;\n  //   case FLOOD_DEMAND:\n  //        FloodDemand floodDemand;\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"StellarMessage\", {\n    switchOn: xdr.lookup(\"MessageType\"),\n    switchName: \"type\",\n    switches: [[\"errorMsg\", \"error\"], [\"hello\", \"hello\"], [\"auth\", \"auth\"], [\"dontHave\", \"dontHave\"], [\"getPeers\", xdr[\"void\"]()], [\"peers\", \"peers\"], [\"getTxSet\", \"txSetHash\"], [\"txSet\", \"txSet\"], [\"generalizedTxSet\", \"generalizedTxSet\"], [\"transaction\", \"transaction\"], [\"surveyRequest\", \"signedSurveyRequestMessage\"], [\"surveyResponse\", \"signedSurveyResponseMessage\"], [\"timeSlicedSurveyRequest\", \"signedTimeSlicedSurveyRequestMessage\"], [\"timeSlicedSurveyResponse\", \"signedTimeSlicedSurveyResponseMessage\"], [\"timeSlicedSurveyStartCollecting\", \"signedTimeSlicedSurveyStartCollectingMessage\"], [\"timeSlicedSurveyStopCollecting\", \"signedTimeSlicedSurveyStopCollectingMessage\"], [\"getScpQuorumset\", \"qSetHash\"], [\"scpQuorumset\", \"qSet\"], [\"scpMessage\", \"envelope\"], [\"getScpState\", \"getScpLedgerSeq\"], [\"sendMore\", \"sendMoreMessage\"], [\"sendMoreExtended\", \"sendMoreExtendedMessage\"], [\"floodAdvert\", \"floodAdvert\"], [\"floodDemand\", \"floodDemand\"]],\n    arms: {\n      error: xdr.lookup(\"Error\"),\n      hello: xdr.lookup(\"Hello\"),\n      auth: xdr.lookup(\"Auth\"),\n      dontHave: xdr.lookup(\"DontHave\"),\n      peers: xdr.varArray(xdr.lookup(\"PeerAddress\"), 100),\n      txSetHash: xdr.lookup(\"Uint256\"),\n      txSet: xdr.lookup(\"TransactionSet\"),\n      generalizedTxSet: xdr.lookup(\"GeneralizedTransactionSet\"),\n      transaction: xdr.lookup(\"TransactionEnvelope\"),\n      signedSurveyRequestMessage: xdr.lookup(\"SignedSurveyRequestMessage\"),\n      signedSurveyResponseMessage: xdr.lookup(\"SignedSurveyResponseMessage\"),\n      signedTimeSlicedSurveyRequestMessage: xdr.lookup(\"SignedTimeSlicedSurveyRequestMessage\"),\n      signedTimeSlicedSurveyResponseMessage: xdr.lookup(\"SignedTimeSlicedSurveyResponseMessage\"),\n      signedTimeSlicedSurveyStartCollectingMessage: xdr.lookup(\"SignedTimeSlicedSurveyStartCollectingMessage\"),\n      signedTimeSlicedSurveyStopCollectingMessage: xdr.lookup(\"SignedTimeSlicedSurveyStopCollectingMessage\"),\n      qSetHash: xdr.lookup(\"Uint256\"),\n      qSet: xdr.lookup(\"ScpQuorumSet\"),\n      envelope: xdr.lookup(\"ScpEnvelope\"),\n      getScpLedgerSeq: xdr.lookup(\"Uint32\"),\n      sendMoreMessage: xdr.lookup(\"SendMore\"),\n      sendMoreExtendedMessage: xdr.lookup(\"SendMoreExtended\"),\n      floodAdvert: xdr.lookup(\"FloodAdvert\"),\n      floodDemand: xdr.lookup(\"FloodDemand\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct\n  //       {\n  //           uint64 sequence;\n  //           StellarMessage message;\n  //           HmacSha256Mac mac;\n  //       }\n  //\n  // ===========================================================================\n  xdr.struct(\"AuthenticatedMessageV0\", [[\"sequence\", xdr.lookup(\"Uint64\")], [\"message\", xdr.lookup(\"StellarMessage\")], [\"mac\", xdr.lookup(\"HmacSha256Mac\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   union AuthenticatedMessage switch (uint32 v)\n  //   {\n  //   case 0:\n  //       struct\n  //       {\n  //           uint64 sequence;\n  //           StellarMessage message;\n  //           HmacSha256Mac mac;\n  //       } v0;\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"AuthenticatedMessage\", {\n    switchOn: xdr.lookup(\"Uint32\"),\n    switchName: \"v\",\n    switches: [[0, \"v0\"]],\n    arms: {\n      v0: xdr.lookup(\"AuthenticatedMessageV0\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   const MAX_OPS_PER_TX = 100;\n  //\n  // ===========================================================================\n  xdr[\"const\"](\"MAX_OPS_PER_TX\", 100);\n\n  // === xdr source ============================================================\n  //\n  //   union LiquidityPoolParameters switch (LiquidityPoolType type)\n  //   {\n  //   case LIQUIDITY_POOL_CONSTANT_PRODUCT:\n  //       LiquidityPoolConstantProductParameters constantProduct;\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"LiquidityPoolParameters\", {\n    switchOn: xdr.lookup(\"LiquidityPoolType\"),\n    switchName: \"type\",\n    switches: [[\"liquidityPoolConstantProduct\", \"constantProduct\"]],\n    arms: {\n      constantProduct: xdr.lookup(\"LiquidityPoolConstantProductParameters\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct\n  //       {\n  //           uint64 id;\n  //           uint256 ed25519;\n  //       }\n  //\n  // ===========================================================================\n  xdr.struct(\"MuxedAccountMed25519\", [[\"id\", xdr.lookup(\"Uint64\")], [\"ed25519\", xdr.lookup(\"Uint256\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   union MuxedAccount switch (CryptoKeyType type)\n  //   {\n  //   case KEY_TYPE_ED25519:\n  //       uint256 ed25519;\n  //   case KEY_TYPE_MUXED_ED25519:\n  //       struct\n  //       {\n  //           uint64 id;\n  //           uint256 ed25519;\n  //       } med25519;\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"MuxedAccount\", {\n    switchOn: xdr.lookup(\"CryptoKeyType\"),\n    switchName: \"type\",\n    switches: [[\"keyTypeEd25519\", \"ed25519\"], [\"keyTypeMuxedEd25519\", \"med25519\"]],\n    arms: {\n      ed25519: xdr.lookup(\"Uint256\"),\n      med25519: xdr.lookup(\"MuxedAccountMed25519\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct DecoratedSignature\n  //   {\n  //       SignatureHint hint;  // last 4 bytes of the public key, used as a hint\n  //       Signature signature; // actual signature\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"DecoratedSignature\", [[\"hint\", xdr.lookup(\"SignatureHint\")], [\"signature\", xdr.lookup(\"Signature\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   enum OperationType\n  //   {\n  //       CREATE_ACCOUNT = 0,\n  //       PAYMENT = 1,\n  //       PATH_PAYMENT_STRICT_RECEIVE = 2,\n  //       MANAGE_SELL_OFFER = 3,\n  //       CREATE_PASSIVE_SELL_OFFER = 4,\n  //       SET_OPTIONS = 5,\n  //       CHANGE_TRUST = 6,\n  //       ALLOW_TRUST = 7,\n  //       ACCOUNT_MERGE = 8,\n  //       INFLATION = 9,\n  //       MANAGE_DATA = 10,\n  //       BUMP_SEQUENCE = 11,\n  //       MANAGE_BUY_OFFER = 12,\n  //       PATH_PAYMENT_STRICT_SEND = 13,\n  //       CREATE_CLAIMABLE_BALANCE = 14,\n  //       CLAIM_CLAIMABLE_BALANCE = 15,\n  //       BEGIN_SPONSORING_FUTURE_RESERVES = 16,\n  //       END_SPONSORING_FUTURE_RESERVES = 17,\n  //       REVOKE_SPONSORSHIP = 18,\n  //       CLAWBACK = 19,\n  //       CLAWBACK_CLAIMABLE_BALANCE = 20,\n  //       SET_TRUST_LINE_FLAGS = 21,\n  //       LIQUIDITY_POOL_DEPOSIT = 22,\n  //       LIQUIDITY_POOL_WITHDRAW = 23,\n  //       INVOKE_HOST_FUNCTION = 24,\n  //       EXTEND_FOOTPRINT_TTL = 25,\n  //       RESTORE_FOOTPRINT = 26\n  //   };\n  //\n  // ===========================================================================\n  xdr[\"enum\"](\"OperationType\", {\n    createAccount: 0,\n    payment: 1,\n    pathPaymentStrictReceive: 2,\n    manageSellOffer: 3,\n    createPassiveSellOffer: 4,\n    setOptions: 5,\n    changeTrust: 6,\n    allowTrust: 7,\n    accountMerge: 8,\n    inflation: 9,\n    manageData: 10,\n    bumpSequence: 11,\n    manageBuyOffer: 12,\n    pathPaymentStrictSend: 13,\n    createClaimableBalance: 14,\n    claimClaimableBalance: 15,\n    beginSponsoringFutureReserves: 16,\n    endSponsoringFutureReserves: 17,\n    revokeSponsorship: 18,\n    clawback: 19,\n    clawbackClaimableBalance: 20,\n    setTrustLineFlags: 21,\n    liquidityPoolDeposit: 22,\n    liquidityPoolWithdraw: 23,\n    invokeHostFunction: 24,\n    extendFootprintTtl: 25,\n    restoreFootprint: 26\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct CreateAccountOp\n  //   {\n  //       AccountID destination; // account to create\n  //       int64 startingBalance; // amount they end up with\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"CreateAccountOp\", [[\"destination\", xdr.lookup(\"AccountId\")], [\"startingBalance\", xdr.lookup(\"Int64\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct PaymentOp\n  //   {\n  //       MuxedAccount destination; // recipient of the payment\n  //       Asset asset;              // what they end up with\n  //       int64 amount;             // amount they end up with\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"PaymentOp\", [[\"destination\", xdr.lookup(\"MuxedAccount\")], [\"asset\", xdr.lookup(\"Asset\")], [\"amount\", xdr.lookup(\"Int64\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct PathPaymentStrictReceiveOp\n  //   {\n  //       Asset sendAsset; // asset we pay with\n  //       int64 sendMax;   // the maximum amount of sendAsset to\n  //                        // send (excluding fees).\n  //                        // The operation will fail if can't be met\n  //\n  //       MuxedAccount destination; // recipient of the payment\n  //       Asset destAsset;          // what they end up with\n  //       int64 destAmount;         // amount they end up with\n  //\n  //       Asset path<5>; // additional hops it must go through to get there\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"PathPaymentStrictReceiveOp\", [[\"sendAsset\", xdr.lookup(\"Asset\")], [\"sendMax\", xdr.lookup(\"Int64\")], [\"destination\", xdr.lookup(\"MuxedAccount\")], [\"destAsset\", xdr.lookup(\"Asset\")], [\"destAmount\", xdr.lookup(\"Int64\")], [\"path\", xdr.varArray(xdr.lookup(\"Asset\"), 5)]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct PathPaymentStrictSendOp\n  //   {\n  //       Asset sendAsset;  // asset we pay with\n  //       int64 sendAmount; // amount of sendAsset to send (excluding fees)\n  //\n  //       MuxedAccount destination; // recipient of the payment\n  //       Asset destAsset;          // what they end up with\n  //       int64 destMin;            // the minimum amount of dest asset to\n  //                                 // be received\n  //                                 // The operation will fail if it can't be met\n  //\n  //       Asset path<5>; // additional hops it must go through to get there\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"PathPaymentStrictSendOp\", [[\"sendAsset\", xdr.lookup(\"Asset\")], [\"sendAmount\", xdr.lookup(\"Int64\")], [\"destination\", xdr.lookup(\"MuxedAccount\")], [\"destAsset\", xdr.lookup(\"Asset\")], [\"destMin\", xdr.lookup(\"Int64\")], [\"path\", xdr.varArray(xdr.lookup(\"Asset\"), 5)]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct ManageSellOfferOp\n  //   {\n  //       Asset selling;\n  //       Asset buying;\n  //       int64 amount; // amount being sold. if set to 0, delete the offer\n  //       Price price;  // price of thing being sold in terms of what you are buying\n  //\n  //       // 0=create a new offer, otherwise edit an existing offer\n  //       int64 offerID;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"ManageSellOfferOp\", [[\"selling\", xdr.lookup(\"Asset\")], [\"buying\", xdr.lookup(\"Asset\")], [\"amount\", xdr.lookup(\"Int64\")], [\"price\", xdr.lookup(\"Price\")], [\"offerId\", xdr.lookup(\"Int64\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct ManageBuyOfferOp\n  //   {\n  //       Asset selling;\n  //       Asset buying;\n  //       int64 buyAmount; // amount being bought. if set to 0, delete the offer\n  //       Price price;     // price of thing being bought in terms of what you are\n  //                        // selling\n  //\n  //       // 0=create a new offer, otherwise edit an existing offer\n  //       int64 offerID;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"ManageBuyOfferOp\", [[\"selling\", xdr.lookup(\"Asset\")], [\"buying\", xdr.lookup(\"Asset\")], [\"buyAmount\", xdr.lookup(\"Int64\")], [\"price\", xdr.lookup(\"Price\")], [\"offerId\", xdr.lookup(\"Int64\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct CreatePassiveSellOfferOp\n  //   {\n  //       Asset selling; // A\n  //       Asset buying;  // B\n  //       int64 amount;  // amount taker gets\n  //       Price price;   // cost of A in terms of B\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"CreatePassiveSellOfferOp\", [[\"selling\", xdr.lookup(\"Asset\")], [\"buying\", xdr.lookup(\"Asset\")], [\"amount\", xdr.lookup(\"Int64\")], [\"price\", xdr.lookup(\"Price\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct SetOptionsOp\n  //   {\n  //       AccountID* inflationDest; // sets the inflation destination\n  //\n  //       uint32* clearFlags; // which flags to clear\n  //       uint32* setFlags;   // which flags to set\n  //\n  //       // account threshold manipulation\n  //       uint32* masterWeight; // weight of the master account\n  //       uint32* lowThreshold;\n  //       uint32* medThreshold;\n  //       uint32* highThreshold;\n  //\n  //       string32* homeDomain; // sets the home domain\n  //\n  //       // Add, update or remove a signer for the account\n  //       // signer is deleted if the weight is 0\n  //       Signer* signer;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"SetOptionsOp\", [[\"inflationDest\", xdr.option(xdr.lookup(\"AccountId\"))], [\"clearFlags\", xdr.option(xdr.lookup(\"Uint32\"))], [\"setFlags\", xdr.option(xdr.lookup(\"Uint32\"))], [\"masterWeight\", xdr.option(xdr.lookup(\"Uint32\"))], [\"lowThreshold\", xdr.option(xdr.lookup(\"Uint32\"))], [\"medThreshold\", xdr.option(xdr.lookup(\"Uint32\"))], [\"highThreshold\", xdr.option(xdr.lookup(\"Uint32\"))], [\"homeDomain\", xdr.option(xdr.lookup(\"String32\"))], [\"signer\", xdr.option(xdr.lookup(\"Signer\"))]]);\n\n  // === xdr source ============================================================\n  //\n  //   union ChangeTrustAsset switch (AssetType type)\n  //   {\n  //   case ASSET_TYPE_NATIVE: // Not credit\n  //       void;\n  //\n  //   case ASSET_TYPE_CREDIT_ALPHANUM4:\n  //       AlphaNum4 alphaNum4;\n  //\n  //   case ASSET_TYPE_CREDIT_ALPHANUM12:\n  //       AlphaNum12 alphaNum12;\n  //\n  //   case ASSET_TYPE_POOL_SHARE:\n  //       LiquidityPoolParameters liquidityPool;\n  //\n  //       // add other asset types here in the future\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"ChangeTrustAsset\", {\n    switchOn: xdr.lookup(\"AssetType\"),\n    switchName: \"type\",\n    switches: [[\"assetTypeNative\", xdr[\"void\"]()], [\"assetTypeCreditAlphanum4\", \"alphaNum4\"], [\"assetTypeCreditAlphanum12\", \"alphaNum12\"], [\"assetTypePoolShare\", \"liquidityPool\"]],\n    arms: {\n      alphaNum4: xdr.lookup(\"AlphaNum4\"),\n      alphaNum12: xdr.lookup(\"AlphaNum12\"),\n      liquidityPool: xdr.lookup(\"LiquidityPoolParameters\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct ChangeTrustOp\n  //   {\n  //       ChangeTrustAsset line;\n  //\n  //       // if limit is set to 0, deletes the trust line\n  //       int64 limit;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"ChangeTrustOp\", [[\"line\", xdr.lookup(\"ChangeTrustAsset\")], [\"limit\", xdr.lookup(\"Int64\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct AllowTrustOp\n  //   {\n  //       AccountID trustor;\n  //       AssetCode asset;\n  //\n  //       // One of 0, AUTHORIZED_FLAG, or AUTHORIZED_TO_MAINTAIN_LIABILITIES_FLAG\n  //       uint32 authorize;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"AllowTrustOp\", [[\"trustor\", xdr.lookup(\"AccountId\")], [\"asset\", xdr.lookup(\"AssetCode\")], [\"authorize\", xdr.lookup(\"Uint32\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct ManageDataOp\n  //   {\n  //       string64 dataName;\n  //       DataValue* dataValue; // set to null to clear\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"ManageDataOp\", [[\"dataName\", xdr.lookup(\"String64\")], [\"dataValue\", xdr.option(xdr.lookup(\"DataValue\"))]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct BumpSequenceOp\n  //   {\n  //       SequenceNumber bumpTo;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"BumpSequenceOp\", [[\"bumpTo\", xdr.lookup(\"SequenceNumber\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct CreateClaimableBalanceOp\n  //   {\n  //       Asset asset;\n  //       int64 amount;\n  //       Claimant claimants<10>;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"CreateClaimableBalanceOp\", [[\"asset\", xdr.lookup(\"Asset\")], [\"amount\", xdr.lookup(\"Int64\")], [\"claimants\", xdr.varArray(xdr.lookup(\"Claimant\"), 10)]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct ClaimClaimableBalanceOp\n  //   {\n  //       ClaimableBalanceID balanceID;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"ClaimClaimableBalanceOp\", [[\"balanceId\", xdr.lookup(\"ClaimableBalanceId\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct BeginSponsoringFutureReservesOp\n  //   {\n  //       AccountID sponsoredID;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"BeginSponsoringFutureReservesOp\", [[\"sponsoredId\", xdr.lookup(\"AccountId\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   enum RevokeSponsorshipType\n  //   {\n  //       REVOKE_SPONSORSHIP_LEDGER_ENTRY = 0,\n  //       REVOKE_SPONSORSHIP_SIGNER = 1\n  //   };\n  //\n  // ===========================================================================\n  xdr[\"enum\"](\"RevokeSponsorshipType\", {\n    revokeSponsorshipLedgerEntry: 0,\n    revokeSponsorshipSigner: 1\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct\n  //       {\n  //           AccountID accountID;\n  //           SignerKey signerKey;\n  //       }\n  //\n  // ===========================================================================\n  xdr.struct(\"RevokeSponsorshipOpSigner\", [[\"accountId\", xdr.lookup(\"AccountId\")], [\"signerKey\", xdr.lookup(\"SignerKey\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   union RevokeSponsorshipOp switch (RevokeSponsorshipType type)\n  //   {\n  //   case REVOKE_SPONSORSHIP_LEDGER_ENTRY:\n  //       LedgerKey ledgerKey;\n  //   case REVOKE_SPONSORSHIP_SIGNER:\n  //       struct\n  //       {\n  //           AccountID accountID;\n  //           SignerKey signerKey;\n  //       } signer;\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"RevokeSponsorshipOp\", {\n    switchOn: xdr.lookup(\"RevokeSponsorshipType\"),\n    switchName: \"type\",\n    switches: [[\"revokeSponsorshipLedgerEntry\", \"ledgerKey\"], [\"revokeSponsorshipSigner\", \"signer\"]],\n    arms: {\n      ledgerKey: xdr.lookup(\"LedgerKey\"),\n      signer: xdr.lookup(\"RevokeSponsorshipOpSigner\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct ClawbackOp\n  //   {\n  //       Asset asset;\n  //       MuxedAccount from;\n  //       int64 amount;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"ClawbackOp\", [[\"asset\", xdr.lookup(\"Asset\")], [\"from\", xdr.lookup(\"MuxedAccount\")], [\"amount\", xdr.lookup(\"Int64\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct ClawbackClaimableBalanceOp\n  //   {\n  //       ClaimableBalanceID balanceID;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"ClawbackClaimableBalanceOp\", [[\"balanceId\", xdr.lookup(\"ClaimableBalanceId\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct SetTrustLineFlagsOp\n  //   {\n  //       AccountID trustor;\n  //       Asset asset;\n  //\n  //       uint32 clearFlags; // which flags to clear\n  //       uint32 setFlags;   // which flags to set\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"SetTrustLineFlagsOp\", [[\"trustor\", xdr.lookup(\"AccountId\")], [\"asset\", xdr.lookup(\"Asset\")], [\"clearFlags\", xdr.lookup(\"Uint32\")], [\"setFlags\", xdr.lookup(\"Uint32\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   const LIQUIDITY_POOL_FEE_V18 = 30;\n  //\n  // ===========================================================================\n  xdr[\"const\"](\"LIQUIDITY_POOL_FEE_V18\", 30);\n\n  // === xdr source ============================================================\n  //\n  //   struct LiquidityPoolDepositOp\n  //   {\n  //       PoolID liquidityPoolID;\n  //       int64 maxAmountA; // maximum amount of first asset to deposit\n  //       int64 maxAmountB; // maximum amount of second asset to deposit\n  //       Price minPrice;   // minimum depositA/depositB\n  //       Price maxPrice;   // maximum depositA/depositB\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"LiquidityPoolDepositOp\", [[\"liquidityPoolId\", xdr.lookup(\"PoolId\")], [\"maxAmountA\", xdr.lookup(\"Int64\")], [\"maxAmountB\", xdr.lookup(\"Int64\")], [\"minPrice\", xdr.lookup(\"Price\")], [\"maxPrice\", xdr.lookup(\"Price\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct LiquidityPoolWithdrawOp\n  //   {\n  //       PoolID liquidityPoolID;\n  //       int64 amount;     // amount of pool shares to withdraw\n  //       int64 minAmountA; // minimum amount of first asset to withdraw\n  //       int64 minAmountB; // minimum amount of second asset to withdraw\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"LiquidityPoolWithdrawOp\", [[\"liquidityPoolId\", xdr.lookup(\"PoolId\")], [\"amount\", xdr.lookup(\"Int64\")], [\"minAmountA\", xdr.lookup(\"Int64\")], [\"minAmountB\", xdr.lookup(\"Int64\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   enum HostFunctionType\n  //   {\n  //       HOST_FUNCTION_TYPE_INVOKE_CONTRACT = 0,\n  //       HOST_FUNCTION_TYPE_CREATE_CONTRACT = 1,\n  //       HOST_FUNCTION_TYPE_UPLOAD_CONTRACT_WASM = 2,\n  //       HOST_FUNCTION_TYPE_CREATE_CONTRACT_V2 = 3\n  //   };\n  //\n  // ===========================================================================\n  xdr[\"enum\"](\"HostFunctionType\", {\n    hostFunctionTypeInvokeContract: 0,\n    hostFunctionTypeCreateContract: 1,\n    hostFunctionTypeUploadContractWasm: 2,\n    hostFunctionTypeCreateContractV2: 3\n  });\n\n  // === xdr source ============================================================\n  //\n  //   enum ContractIDPreimageType\n  //   {\n  //       CONTRACT_ID_PREIMAGE_FROM_ADDRESS = 0,\n  //       CONTRACT_ID_PREIMAGE_FROM_ASSET = 1\n  //   };\n  //\n  // ===========================================================================\n  xdr[\"enum\"](\"ContractIdPreimageType\", {\n    contractIdPreimageFromAddress: 0,\n    contractIdPreimageFromAsset: 1\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct\n  //       {\n  //           SCAddress address;\n  //           uint256 salt;\n  //       }\n  //\n  // ===========================================================================\n  xdr.struct(\"ContractIdPreimageFromAddress\", [[\"address\", xdr.lookup(\"ScAddress\")], [\"salt\", xdr.lookup(\"Uint256\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   union ContractIDPreimage switch (ContractIDPreimageType type)\n  //   {\n  //   case CONTRACT_ID_PREIMAGE_FROM_ADDRESS:\n  //       struct\n  //       {\n  //           SCAddress address;\n  //           uint256 salt;\n  //       } fromAddress;\n  //   case CONTRACT_ID_PREIMAGE_FROM_ASSET:\n  //       Asset fromAsset;\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"ContractIdPreimage\", {\n    switchOn: xdr.lookup(\"ContractIdPreimageType\"),\n    switchName: \"type\",\n    switches: [[\"contractIdPreimageFromAddress\", \"fromAddress\"], [\"contractIdPreimageFromAsset\", \"fromAsset\"]],\n    arms: {\n      fromAddress: xdr.lookup(\"ContractIdPreimageFromAddress\"),\n      fromAsset: xdr.lookup(\"Asset\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct CreateContractArgs\n  //   {\n  //       ContractIDPreimage contractIDPreimage;\n  //       ContractExecutable executable;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"CreateContractArgs\", [[\"contractIdPreimage\", xdr.lookup(\"ContractIdPreimage\")], [\"executable\", xdr.lookup(\"ContractExecutable\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct CreateContractArgsV2\n  //   {\n  //       ContractIDPreimage contractIDPreimage;\n  //       ContractExecutable executable;\n  //       // Arguments of the contract's constructor.\n  //       SCVal constructorArgs<>;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"CreateContractArgsV2\", [[\"contractIdPreimage\", xdr.lookup(\"ContractIdPreimage\")], [\"executable\", xdr.lookup(\"ContractExecutable\")], [\"constructorArgs\", xdr.varArray(xdr.lookup(\"ScVal\"), 2147483647)]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct InvokeContractArgs {\n  //       SCAddress contractAddress;\n  //       SCSymbol functionName;\n  //       SCVal args<>;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"InvokeContractArgs\", [[\"contractAddress\", xdr.lookup(\"ScAddress\")], [\"functionName\", xdr.lookup(\"ScSymbol\")], [\"args\", xdr.varArray(xdr.lookup(\"ScVal\"), 2147483647)]]);\n\n  // === xdr source ============================================================\n  //\n  //   union HostFunction switch (HostFunctionType type)\n  //   {\n  //   case HOST_FUNCTION_TYPE_INVOKE_CONTRACT:\n  //       InvokeContractArgs invokeContract;\n  //   case HOST_FUNCTION_TYPE_CREATE_CONTRACT:\n  //       CreateContractArgs createContract;\n  //   case HOST_FUNCTION_TYPE_UPLOAD_CONTRACT_WASM:\n  //       opaque wasm<>;\n  //   case HOST_FUNCTION_TYPE_CREATE_CONTRACT_V2:\n  //       CreateContractArgsV2 createContractV2;\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"HostFunction\", {\n    switchOn: xdr.lookup(\"HostFunctionType\"),\n    switchName: \"type\",\n    switches: [[\"hostFunctionTypeInvokeContract\", \"invokeContract\"], [\"hostFunctionTypeCreateContract\", \"createContract\"], [\"hostFunctionTypeUploadContractWasm\", \"wasm\"], [\"hostFunctionTypeCreateContractV2\", \"createContractV2\"]],\n    arms: {\n      invokeContract: xdr.lookup(\"InvokeContractArgs\"),\n      createContract: xdr.lookup(\"CreateContractArgs\"),\n      wasm: xdr.varOpaque(),\n      createContractV2: xdr.lookup(\"CreateContractArgsV2\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   enum SorobanAuthorizedFunctionType\n  //   {\n  //       SOROBAN_AUTHORIZED_FUNCTION_TYPE_CONTRACT_FN = 0,\n  //       SOROBAN_AUTHORIZED_FUNCTION_TYPE_CREATE_CONTRACT_HOST_FN = 1,\n  //       SOROBAN_AUTHORIZED_FUNCTION_TYPE_CREATE_CONTRACT_V2_HOST_FN = 2\n  //   };\n  //\n  // ===========================================================================\n  xdr[\"enum\"](\"SorobanAuthorizedFunctionType\", {\n    sorobanAuthorizedFunctionTypeContractFn: 0,\n    sorobanAuthorizedFunctionTypeCreateContractHostFn: 1,\n    sorobanAuthorizedFunctionTypeCreateContractV2HostFn: 2\n  });\n\n  // === xdr source ============================================================\n  //\n  //   union SorobanAuthorizedFunction switch (SorobanAuthorizedFunctionType type)\n  //   {\n  //   case SOROBAN_AUTHORIZED_FUNCTION_TYPE_CONTRACT_FN:\n  //       InvokeContractArgs contractFn;\n  //   // This variant of auth payload for creating new contract instances\n  //   // doesn't allow specifying the constructor arguments, creating contracts\n  //   // with constructors that take arguments is only possible by authorizing\n  //   // `SOROBAN_AUTHORIZED_FUNCTION_TYPE_CREATE_CONTRACT_V2_HOST_FN`\n  //   // (protocol 22+).\n  //   case SOROBAN_AUTHORIZED_FUNCTION_TYPE_CREATE_CONTRACT_HOST_FN:\n  //       CreateContractArgs createContractHostFn;\n  //   // This variant of auth payload for creating new contract instances\n  //   // is only accepted in and after protocol 22. It allows authorizing the\n  //   // contract constructor arguments.\n  //   case SOROBAN_AUTHORIZED_FUNCTION_TYPE_CREATE_CONTRACT_V2_HOST_FN:\n  //       CreateContractArgsV2 createContractV2HostFn;\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"SorobanAuthorizedFunction\", {\n    switchOn: xdr.lookup(\"SorobanAuthorizedFunctionType\"),\n    switchName: \"type\",\n    switches: [[\"sorobanAuthorizedFunctionTypeContractFn\", \"contractFn\"], [\"sorobanAuthorizedFunctionTypeCreateContractHostFn\", \"createContractHostFn\"], [\"sorobanAuthorizedFunctionTypeCreateContractV2HostFn\", \"createContractV2HostFn\"]],\n    arms: {\n      contractFn: xdr.lookup(\"InvokeContractArgs\"),\n      createContractHostFn: xdr.lookup(\"CreateContractArgs\"),\n      createContractV2HostFn: xdr.lookup(\"CreateContractArgsV2\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct SorobanAuthorizedInvocation\n  //   {\n  //       SorobanAuthorizedFunction function;\n  //       SorobanAuthorizedInvocation subInvocations<>;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"SorobanAuthorizedInvocation\", [[\"function\", xdr.lookup(\"SorobanAuthorizedFunction\")], [\"subInvocations\", xdr.varArray(xdr.lookup(\"SorobanAuthorizedInvocation\"), 2147483647)]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct SorobanAddressCredentials\n  //   {\n  //       SCAddress address;\n  //       int64 nonce;\n  //       uint32 signatureExpirationLedger;\n  //       SCVal signature;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"SorobanAddressCredentials\", [[\"address\", xdr.lookup(\"ScAddress\")], [\"nonce\", xdr.lookup(\"Int64\")], [\"signatureExpirationLedger\", xdr.lookup(\"Uint32\")], [\"signature\", xdr.lookup(\"ScVal\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   enum SorobanCredentialsType\n  //   {\n  //       SOROBAN_CREDENTIALS_SOURCE_ACCOUNT = 0,\n  //       SOROBAN_CREDENTIALS_ADDRESS = 1\n  //   };\n  //\n  // ===========================================================================\n  xdr[\"enum\"](\"SorobanCredentialsType\", {\n    sorobanCredentialsSourceAccount: 0,\n    sorobanCredentialsAddress: 1\n  });\n\n  // === xdr source ============================================================\n  //\n  //   union SorobanCredentials switch (SorobanCredentialsType type)\n  //   {\n  //   case SOROBAN_CREDENTIALS_SOURCE_ACCOUNT:\n  //       void;\n  //   case SOROBAN_CREDENTIALS_ADDRESS:\n  //       SorobanAddressCredentials address;\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"SorobanCredentials\", {\n    switchOn: xdr.lookup(\"SorobanCredentialsType\"),\n    switchName: \"type\",\n    switches: [[\"sorobanCredentialsSourceAccount\", xdr[\"void\"]()], [\"sorobanCredentialsAddress\", \"address\"]],\n    arms: {\n      address: xdr.lookup(\"SorobanAddressCredentials\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct SorobanAuthorizationEntry\n  //   {\n  //       SorobanCredentials credentials;\n  //       SorobanAuthorizedInvocation rootInvocation;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"SorobanAuthorizationEntry\", [[\"credentials\", xdr.lookup(\"SorobanCredentials\")], [\"rootInvocation\", xdr.lookup(\"SorobanAuthorizedInvocation\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct InvokeHostFunctionOp\n  //   {\n  //       // Host function to invoke.\n  //       HostFunction hostFunction;\n  //       // Per-address authorizations for this host function.\n  //       SorobanAuthorizationEntry auth<>;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"InvokeHostFunctionOp\", [[\"hostFunction\", xdr.lookup(\"HostFunction\")], [\"auth\", xdr.varArray(xdr.lookup(\"SorobanAuthorizationEntry\"), 2147483647)]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct ExtendFootprintTTLOp\n  //   {\n  //       ExtensionPoint ext;\n  //       uint32 extendTo;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"ExtendFootprintTtlOp\", [[\"ext\", xdr.lookup(\"ExtensionPoint\")], [\"extendTo\", xdr.lookup(\"Uint32\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct RestoreFootprintOp\n  //   {\n  //       ExtensionPoint ext;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"RestoreFootprintOp\", [[\"ext\", xdr.lookup(\"ExtensionPoint\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   union switch (OperationType type)\n  //       {\n  //       case CREATE_ACCOUNT:\n  //           CreateAccountOp createAccountOp;\n  //       case PAYMENT:\n  //           PaymentOp paymentOp;\n  //       case PATH_PAYMENT_STRICT_RECEIVE:\n  //           PathPaymentStrictReceiveOp pathPaymentStrictReceiveOp;\n  //       case MANAGE_SELL_OFFER:\n  //           ManageSellOfferOp manageSellOfferOp;\n  //       case CREATE_PASSIVE_SELL_OFFER:\n  //           CreatePassiveSellOfferOp createPassiveSellOfferOp;\n  //       case SET_OPTIONS:\n  //           SetOptionsOp setOptionsOp;\n  //       case CHANGE_TRUST:\n  //           ChangeTrustOp changeTrustOp;\n  //       case ALLOW_TRUST:\n  //           AllowTrustOp allowTrustOp;\n  //       case ACCOUNT_MERGE:\n  //           MuxedAccount destination;\n  //       case INFLATION:\n  //           void;\n  //       case MANAGE_DATA:\n  //           ManageDataOp manageDataOp;\n  //       case BUMP_SEQUENCE:\n  //           BumpSequenceOp bumpSequenceOp;\n  //       case MANAGE_BUY_OFFER:\n  //           ManageBuyOfferOp manageBuyOfferOp;\n  //       case PATH_PAYMENT_STRICT_SEND:\n  //           PathPaymentStrictSendOp pathPaymentStrictSendOp;\n  //       case CREATE_CLAIMABLE_BALANCE:\n  //           CreateClaimableBalanceOp createClaimableBalanceOp;\n  //       case CLAIM_CLAIMABLE_BALANCE:\n  //           ClaimClaimableBalanceOp claimClaimableBalanceOp;\n  //       case BEGIN_SPONSORING_FUTURE_RESERVES:\n  //           BeginSponsoringFutureReservesOp beginSponsoringFutureReservesOp;\n  //       case END_SPONSORING_FUTURE_RESERVES:\n  //           void;\n  //       case REVOKE_SPONSORSHIP:\n  //           RevokeSponsorshipOp revokeSponsorshipOp;\n  //       case CLAWBACK:\n  //           ClawbackOp clawbackOp;\n  //       case CLAWBACK_CLAIMABLE_BALANCE:\n  //           ClawbackClaimableBalanceOp clawbackClaimableBalanceOp;\n  //       case SET_TRUST_LINE_FLAGS:\n  //           SetTrustLineFlagsOp setTrustLineFlagsOp;\n  //       case LIQUIDITY_POOL_DEPOSIT:\n  //           LiquidityPoolDepositOp liquidityPoolDepositOp;\n  //       case LIQUIDITY_POOL_WITHDRAW:\n  //           LiquidityPoolWithdrawOp liquidityPoolWithdrawOp;\n  //       case INVOKE_HOST_FUNCTION:\n  //           InvokeHostFunctionOp invokeHostFunctionOp;\n  //       case EXTEND_FOOTPRINT_TTL:\n  //           ExtendFootprintTTLOp extendFootprintTTLOp;\n  //       case RESTORE_FOOTPRINT:\n  //           RestoreFootprintOp restoreFootprintOp;\n  //       }\n  //\n  // ===========================================================================\n  xdr.union(\"OperationBody\", {\n    switchOn: xdr.lookup(\"OperationType\"),\n    switchName: \"type\",\n    switches: [[\"createAccount\", \"createAccountOp\"], [\"payment\", \"paymentOp\"], [\"pathPaymentStrictReceive\", \"pathPaymentStrictReceiveOp\"], [\"manageSellOffer\", \"manageSellOfferOp\"], [\"createPassiveSellOffer\", \"createPassiveSellOfferOp\"], [\"setOptions\", \"setOptionsOp\"], [\"changeTrust\", \"changeTrustOp\"], [\"allowTrust\", \"allowTrustOp\"], [\"accountMerge\", \"destination\"], [\"inflation\", xdr[\"void\"]()], [\"manageData\", \"manageDataOp\"], [\"bumpSequence\", \"bumpSequenceOp\"], [\"manageBuyOffer\", \"manageBuyOfferOp\"], [\"pathPaymentStrictSend\", \"pathPaymentStrictSendOp\"], [\"createClaimableBalance\", \"createClaimableBalanceOp\"], [\"claimClaimableBalance\", \"claimClaimableBalanceOp\"], [\"beginSponsoringFutureReserves\", \"beginSponsoringFutureReservesOp\"], [\"endSponsoringFutureReserves\", xdr[\"void\"]()], [\"revokeSponsorship\", \"revokeSponsorshipOp\"], [\"clawback\", \"clawbackOp\"], [\"clawbackClaimableBalance\", \"clawbackClaimableBalanceOp\"], [\"setTrustLineFlags\", \"setTrustLineFlagsOp\"], [\"liquidityPoolDeposit\", \"liquidityPoolDepositOp\"], [\"liquidityPoolWithdraw\", \"liquidityPoolWithdrawOp\"], [\"invokeHostFunction\", \"invokeHostFunctionOp\"], [\"extendFootprintTtl\", \"extendFootprintTtlOp\"], [\"restoreFootprint\", \"restoreFootprintOp\"]],\n    arms: {\n      createAccountOp: xdr.lookup(\"CreateAccountOp\"),\n      paymentOp: xdr.lookup(\"PaymentOp\"),\n      pathPaymentStrictReceiveOp: xdr.lookup(\"PathPaymentStrictReceiveOp\"),\n      manageSellOfferOp: xdr.lookup(\"ManageSellOfferOp\"),\n      createPassiveSellOfferOp: xdr.lookup(\"CreatePassiveSellOfferOp\"),\n      setOptionsOp: xdr.lookup(\"SetOptionsOp\"),\n      changeTrustOp: xdr.lookup(\"ChangeTrustOp\"),\n      allowTrustOp: xdr.lookup(\"AllowTrustOp\"),\n      destination: xdr.lookup(\"MuxedAccount\"),\n      manageDataOp: xdr.lookup(\"ManageDataOp\"),\n      bumpSequenceOp: xdr.lookup(\"BumpSequenceOp\"),\n      manageBuyOfferOp: xdr.lookup(\"ManageBuyOfferOp\"),\n      pathPaymentStrictSendOp: xdr.lookup(\"PathPaymentStrictSendOp\"),\n      createClaimableBalanceOp: xdr.lookup(\"CreateClaimableBalanceOp\"),\n      claimClaimableBalanceOp: xdr.lookup(\"ClaimClaimableBalanceOp\"),\n      beginSponsoringFutureReservesOp: xdr.lookup(\"BeginSponsoringFutureReservesOp\"),\n      revokeSponsorshipOp: xdr.lookup(\"RevokeSponsorshipOp\"),\n      clawbackOp: xdr.lookup(\"ClawbackOp\"),\n      clawbackClaimableBalanceOp: xdr.lookup(\"ClawbackClaimableBalanceOp\"),\n      setTrustLineFlagsOp: xdr.lookup(\"SetTrustLineFlagsOp\"),\n      liquidityPoolDepositOp: xdr.lookup(\"LiquidityPoolDepositOp\"),\n      liquidityPoolWithdrawOp: xdr.lookup(\"LiquidityPoolWithdrawOp\"),\n      invokeHostFunctionOp: xdr.lookup(\"InvokeHostFunctionOp\"),\n      extendFootprintTtlOp: xdr.lookup(\"ExtendFootprintTtlOp\"),\n      restoreFootprintOp: xdr.lookup(\"RestoreFootprintOp\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct Operation\n  //   {\n  //       // sourceAccount is the account used to run the operation\n  //       // if not set, the runtime defaults to \"sourceAccount\" specified at\n  //       // the transaction level\n  //       MuxedAccount* sourceAccount;\n  //\n  //       union switch (OperationType type)\n  //       {\n  //       case CREATE_ACCOUNT:\n  //           CreateAccountOp createAccountOp;\n  //       case PAYMENT:\n  //           PaymentOp paymentOp;\n  //       case PATH_PAYMENT_STRICT_RECEIVE:\n  //           PathPaymentStrictReceiveOp pathPaymentStrictReceiveOp;\n  //       case MANAGE_SELL_OFFER:\n  //           ManageSellOfferOp manageSellOfferOp;\n  //       case CREATE_PASSIVE_SELL_OFFER:\n  //           CreatePassiveSellOfferOp createPassiveSellOfferOp;\n  //       case SET_OPTIONS:\n  //           SetOptionsOp setOptionsOp;\n  //       case CHANGE_TRUST:\n  //           ChangeTrustOp changeTrustOp;\n  //       case ALLOW_TRUST:\n  //           AllowTrustOp allowTrustOp;\n  //       case ACCOUNT_MERGE:\n  //           MuxedAccount destination;\n  //       case INFLATION:\n  //           void;\n  //       case MANAGE_DATA:\n  //           ManageDataOp manageDataOp;\n  //       case BUMP_SEQUENCE:\n  //           BumpSequenceOp bumpSequenceOp;\n  //       case MANAGE_BUY_OFFER:\n  //           ManageBuyOfferOp manageBuyOfferOp;\n  //       case PATH_PAYMENT_STRICT_SEND:\n  //           PathPaymentStrictSendOp pathPaymentStrictSendOp;\n  //       case CREATE_CLAIMABLE_BALANCE:\n  //           CreateClaimableBalanceOp createClaimableBalanceOp;\n  //       case CLAIM_CLAIMABLE_BALANCE:\n  //           ClaimClaimableBalanceOp claimClaimableBalanceOp;\n  //       case BEGIN_SPONSORING_FUTURE_RESERVES:\n  //           BeginSponsoringFutureReservesOp beginSponsoringFutureReservesOp;\n  //       case END_SPONSORING_FUTURE_RESERVES:\n  //           void;\n  //       case REVOKE_SPONSORSHIP:\n  //           RevokeSponsorshipOp revokeSponsorshipOp;\n  //       case CLAWBACK:\n  //           ClawbackOp clawbackOp;\n  //       case CLAWBACK_CLAIMABLE_BALANCE:\n  //           ClawbackClaimableBalanceOp clawbackClaimableBalanceOp;\n  //       case SET_TRUST_LINE_FLAGS:\n  //           SetTrustLineFlagsOp setTrustLineFlagsOp;\n  //       case LIQUIDITY_POOL_DEPOSIT:\n  //           LiquidityPoolDepositOp liquidityPoolDepositOp;\n  //       case LIQUIDITY_POOL_WITHDRAW:\n  //           LiquidityPoolWithdrawOp liquidityPoolWithdrawOp;\n  //       case INVOKE_HOST_FUNCTION:\n  //           InvokeHostFunctionOp invokeHostFunctionOp;\n  //       case EXTEND_FOOTPRINT_TTL:\n  //           ExtendFootprintTTLOp extendFootprintTTLOp;\n  //       case RESTORE_FOOTPRINT:\n  //           RestoreFootprintOp restoreFootprintOp;\n  //       }\n  //       body;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"Operation\", [[\"sourceAccount\", xdr.option(xdr.lookup(\"MuxedAccount\"))], [\"body\", xdr.lookup(\"OperationBody\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct\n  //       {\n  //           AccountID sourceAccount;\n  //           SequenceNumber seqNum;\n  //           uint32 opNum;\n  //       }\n  //\n  // ===========================================================================\n  xdr.struct(\"HashIdPreimageOperationId\", [[\"sourceAccount\", xdr.lookup(\"AccountId\")], [\"seqNum\", xdr.lookup(\"SequenceNumber\")], [\"opNum\", xdr.lookup(\"Uint32\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct\n  //       {\n  //           AccountID sourceAccount;\n  //           SequenceNumber seqNum;\n  //           uint32 opNum;\n  //           PoolID liquidityPoolID;\n  //           Asset asset;\n  //       }\n  //\n  // ===========================================================================\n  xdr.struct(\"HashIdPreimageRevokeId\", [[\"sourceAccount\", xdr.lookup(\"AccountId\")], [\"seqNum\", xdr.lookup(\"SequenceNumber\")], [\"opNum\", xdr.lookup(\"Uint32\")], [\"liquidityPoolId\", xdr.lookup(\"PoolId\")], [\"asset\", xdr.lookup(\"Asset\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct\n  //       {\n  //           Hash networkID;\n  //           ContractIDPreimage contractIDPreimage;\n  //       }\n  //\n  // ===========================================================================\n  xdr.struct(\"HashIdPreimageContractId\", [[\"networkId\", xdr.lookup(\"Hash\")], [\"contractIdPreimage\", xdr.lookup(\"ContractIdPreimage\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct\n  //       {\n  //           Hash networkID;\n  //           int64 nonce;\n  //           uint32 signatureExpirationLedger;\n  //           SorobanAuthorizedInvocation invocation;\n  //       }\n  //\n  // ===========================================================================\n  xdr.struct(\"HashIdPreimageSorobanAuthorization\", [[\"networkId\", xdr.lookup(\"Hash\")], [\"nonce\", xdr.lookup(\"Int64\")], [\"signatureExpirationLedger\", xdr.lookup(\"Uint32\")], [\"invocation\", xdr.lookup(\"SorobanAuthorizedInvocation\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   union HashIDPreimage switch (EnvelopeType type)\n  //   {\n  //   case ENVELOPE_TYPE_OP_ID:\n  //       struct\n  //       {\n  //           AccountID sourceAccount;\n  //           SequenceNumber seqNum;\n  //           uint32 opNum;\n  //       } operationID;\n  //   case ENVELOPE_TYPE_POOL_REVOKE_OP_ID:\n  //       struct\n  //       {\n  //           AccountID sourceAccount;\n  //           SequenceNumber seqNum;\n  //           uint32 opNum;\n  //           PoolID liquidityPoolID;\n  //           Asset asset;\n  //       } revokeID;\n  //   case ENVELOPE_TYPE_CONTRACT_ID:\n  //       struct\n  //       {\n  //           Hash networkID;\n  //           ContractIDPreimage contractIDPreimage;\n  //       } contractID;\n  //   case ENVELOPE_TYPE_SOROBAN_AUTHORIZATION:\n  //       struct\n  //       {\n  //           Hash networkID;\n  //           int64 nonce;\n  //           uint32 signatureExpirationLedger;\n  //           SorobanAuthorizedInvocation invocation;\n  //       } sorobanAuthorization;\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"HashIdPreimage\", {\n    switchOn: xdr.lookup(\"EnvelopeType\"),\n    switchName: \"type\",\n    switches: [[\"envelopeTypeOpId\", \"operationId\"], [\"envelopeTypePoolRevokeOpId\", \"revokeId\"], [\"envelopeTypeContractId\", \"contractId\"], [\"envelopeTypeSorobanAuthorization\", \"sorobanAuthorization\"]],\n    arms: {\n      operationId: xdr.lookup(\"HashIdPreimageOperationId\"),\n      revokeId: xdr.lookup(\"HashIdPreimageRevokeId\"),\n      contractId: xdr.lookup(\"HashIdPreimageContractId\"),\n      sorobanAuthorization: xdr.lookup(\"HashIdPreimageSorobanAuthorization\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   enum MemoType\n  //   {\n  //       MEMO_NONE = 0,\n  //       MEMO_TEXT = 1,\n  //       MEMO_ID = 2,\n  //       MEMO_HASH = 3,\n  //       MEMO_RETURN = 4\n  //   };\n  //\n  // ===========================================================================\n  xdr[\"enum\"](\"MemoType\", {\n    memoNone: 0,\n    memoText: 1,\n    memoId: 2,\n    memoHash: 3,\n    memoReturn: 4\n  });\n\n  // === xdr source ============================================================\n  //\n  //   union Memo switch (MemoType type)\n  //   {\n  //   case MEMO_NONE:\n  //       void;\n  //   case MEMO_TEXT:\n  //       string text<28>;\n  //   case MEMO_ID:\n  //       uint64 id;\n  //   case MEMO_HASH:\n  //       Hash hash; // the hash of what to pull from the content server\n  //   case MEMO_RETURN:\n  //       Hash retHash; // the hash of the tx you are rejecting\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"Memo\", {\n    switchOn: xdr.lookup(\"MemoType\"),\n    switchName: \"type\",\n    switches: [[\"memoNone\", xdr[\"void\"]()], [\"memoText\", \"text\"], [\"memoId\", \"id\"], [\"memoHash\", \"hash\"], [\"memoReturn\", \"retHash\"]],\n    arms: {\n      text: xdr.string(28),\n      id: xdr.lookup(\"Uint64\"),\n      hash: xdr.lookup(\"Hash\"),\n      retHash: xdr.lookup(\"Hash\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct TimeBounds\n  //   {\n  //       TimePoint minTime;\n  //       TimePoint maxTime; // 0 here means no maxTime\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"TimeBounds\", [[\"minTime\", xdr.lookup(\"TimePoint\")], [\"maxTime\", xdr.lookup(\"TimePoint\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct LedgerBounds\n  //   {\n  //       uint32 minLedger;\n  //       uint32 maxLedger; // 0 here means no maxLedger\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"LedgerBounds\", [[\"minLedger\", xdr.lookup(\"Uint32\")], [\"maxLedger\", xdr.lookup(\"Uint32\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct PreconditionsV2\n  //   {\n  //       TimeBounds* timeBounds;\n  //\n  //       // Transaction only valid for ledger numbers n such that\n  //       // minLedger <= n < maxLedger (if maxLedger == 0, then\n  //       // only minLedger is checked)\n  //       LedgerBounds* ledgerBounds;\n  //\n  //       // If NULL, only valid when sourceAccount's sequence number\n  //       // is seqNum - 1.  Otherwise, valid when sourceAccount's\n  //       // sequence number n satisfies minSeqNum <= n < tx.seqNum.\n  //       // Note that after execution the account's sequence number\n  //       // is always raised to tx.seqNum, and a transaction is not\n  //       // valid if tx.seqNum is too high to ensure replay protection.\n  //       SequenceNumber* minSeqNum;\n  //\n  //       // For the transaction to be valid, the current ledger time must\n  //       // be at least minSeqAge greater than sourceAccount's seqTime.\n  //       Duration minSeqAge;\n  //\n  //       // For the transaction to be valid, the current ledger number\n  //       // must be at least minSeqLedgerGap greater than sourceAccount's\n  //       // seqLedger.\n  //       uint32 minSeqLedgerGap;\n  //\n  //       // For the transaction to be valid, there must be a signature\n  //       // corresponding to every Signer in this array, even if the\n  //       // signature is not otherwise required by the sourceAccount or\n  //       // operations.\n  //       SignerKey extraSigners<2>;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"PreconditionsV2\", [[\"timeBounds\", xdr.option(xdr.lookup(\"TimeBounds\"))], [\"ledgerBounds\", xdr.option(xdr.lookup(\"LedgerBounds\"))], [\"minSeqNum\", xdr.option(xdr.lookup(\"SequenceNumber\"))], [\"minSeqAge\", xdr.lookup(\"Duration\")], [\"minSeqLedgerGap\", xdr.lookup(\"Uint32\")], [\"extraSigners\", xdr.varArray(xdr.lookup(\"SignerKey\"), 2)]]);\n\n  // === xdr source ============================================================\n  //\n  //   enum PreconditionType\n  //   {\n  //       PRECOND_NONE = 0,\n  //       PRECOND_TIME = 1,\n  //       PRECOND_V2 = 2\n  //   };\n  //\n  // ===========================================================================\n  xdr[\"enum\"](\"PreconditionType\", {\n    precondNone: 0,\n    precondTime: 1,\n    precondV2: 2\n  });\n\n  // === xdr source ============================================================\n  //\n  //   union Preconditions switch (PreconditionType type)\n  //   {\n  //   case PRECOND_NONE:\n  //       void;\n  //   case PRECOND_TIME:\n  //       TimeBounds timeBounds;\n  //   case PRECOND_V2:\n  //       PreconditionsV2 v2;\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"Preconditions\", {\n    switchOn: xdr.lookup(\"PreconditionType\"),\n    switchName: \"type\",\n    switches: [[\"precondNone\", xdr[\"void\"]()], [\"precondTime\", \"timeBounds\"], [\"precondV2\", \"v2\"]],\n    arms: {\n      timeBounds: xdr.lookup(\"TimeBounds\"),\n      v2: xdr.lookup(\"PreconditionsV2\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct LedgerFootprint\n  //   {\n  //       LedgerKey readOnly<>;\n  //       LedgerKey readWrite<>;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"LedgerFootprint\", [[\"readOnly\", xdr.varArray(xdr.lookup(\"LedgerKey\"), 2147483647)], [\"readWrite\", xdr.varArray(xdr.lookup(\"LedgerKey\"), 2147483647)]]);\n\n  // === xdr source ============================================================\n  //\n  //   enum ArchivalProofType\n  //   {\n  //       EXISTENCE = 0,\n  //       NONEXISTENCE = 1\n  //   };\n  //\n  // ===========================================================================\n  xdr[\"enum\"](\"ArchivalProofType\", {\n    existence: 0,\n    nonexistence: 1\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct ArchivalProofNode\n  //   {\n  //       uint32 index;\n  //       Hash hash;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"ArchivalProofNode\", [[\"index\", xdr.lookup(\"Uint32\")], [\"hash\", xdr.lookup(\"Hash\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   typedef ArchivalProofNode ProofLevel<>;\n  //\n  // ===========================================================================\n  xdr.typedef(\"ProofLevel\", xdr.varArray(xdr.lookup(\"ArchivalProofNode\"), 2147483647));\n\n  // === xdr source ============================================================\n  //\n  //   struct NonexistenceProofBody\n  //   {\n  //       ColdArchiveBucketEntry entriesToProve<>;\n  //\n  //       // Vector of vectors, where proofLevels[level]\n  //       // contains all HashNodes that correspond with that level\n  //       ProofLevel proofLevels<>;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"NonexistenceProofBody\", [[\"entriesToProve\", xdr.varArray(xdr.lookup(\"ColdArchiveBucketEntry\"), 2147483647)], [\"proofLevels\", xdr.varArray(xdr.lookup(\"ProofLevel\"), 2147483647)]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct ExistenceProofBody\n  //   {\n  //       LedgerKey keysToProve<>;\n  //\n  //       // Bounds for each key being proved, where bound[n]\n  //       // corresponds to keysToProve[n]\n  //       ColdArchiveBucketEntry lowBoundEntries<>;\n  //       ColdArchiveBucketEntry highBoundEntries<>;\n  //\n  //       // Vector of vectors, where proofLevels[level]\n  //       // contains all HashNodes that correspond with that level\n  //       ProofLevel proofLevels<>;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"ExistenceProofBody\", [[\"keysToProve\", xdr.varArray(xdr.lookup(\"LedgerKey\"), 2147483647)], [\"lowBoundEntries\", xdr.varArray(xdr.lookup(\"ColdArchiveBucketEntry\"), 2147483647)], [\"highBoundEntries\", xdr.varArray(xdr.lookup(\"ColdArchiveBucketEntry\"), 2147483647)], [\"proofLevels\", xdr.varArray(xdr.lookup(\"ProofLevel\"), 2147483647)]]);\n\n  // === xdr source ============================================================\n  //\n  //   union switch (ArchivalProofType t)\n  //       {\n  //       case EXISTENCE:\n  //           NonexistenceProofBody nonexistenceProof;\n  //       case NONEXISTENCE:\n  //           ExistenceProofBody existenceProof;\n  //       }\n  //\n  // ===========================================================================\n  xdr.union(\"ArchivalProofBody\", {\n    switchOn: xdr.lookup(\"ArchivalProofType\"),\n    switchName: \"t\",\n    switches: [[\"existence\", \"nonexistenceProof\"], [\"nonexistence\", \"existenceProof\"]],\n    arms: {\n      nonexistenceProof: xdr.lookup(\"NonexistenceProofBody\"),\n      existenceProof: xdr.lookup(\"ExistenceProofBody\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct ArchivalProof\n  //   {\n  //       uint32 epoch; // AST Subtree for this proof\n  //\n  //       union switch (ArchivalProofType t)\n  //       {\n  //       case EXISTENCE:\n  //           NonexistenceProofBody nonexistenceProof;\n  //       case NONEXISTENCE:\n  //           ExistenceProofBody existenceProof;\n  //       } body;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"ArchivalProof\", [[\"epoch\", xdr.lookup(\"Uint32\")], [\"body\", xdr.lookup(\"ArchivalProofBody\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct SorobanResources\n  //   {\n  //       // The ledger footprint of the transaction.\n  //       LedgerFootprint footprint;\n  //       // The maximum number of instructions this transaction can use\n  //       uint32 instructions;\n  //\n  //       // The maximum number of bytes this transaction can read from ledger\n  //       uint32 readBytes;\n  //       // The maximum number of bytes this transaction can write to ledger\n  //       uint32 writeBytes;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"SorobanResources\", [[\"footprint\", xdr.lookup(\"LedgerFootprint\")], [\"instructions\", xdr.lookup(\"Uint32\")], [\"readBytes\", xdr.lookup(\"Uint32\")], [\"writeBytes\", xdr.lookup(\"Uint32\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct SorobanTransactionData\n  //   {\n  //       ExtensionPoint ext;\n  //       SorobanResources resources;\n  //       // Amount of the transaction `fee` allocated to the Soroban resource fees.\n  //       // The fraction of `resourceFee` corresponding to `resources` specified\n  //       // above is *not* refundable (i.e. fees for instructions, ledger I/O), as\n  //       // well as fees for the transaction size.\n  //       // The remaining part of the fee is refundable and the charged value is\n  //       // based on the actual consumption of refundable resources (events, ledger\n  //       // rent bumps).\n  //       // The `inclusionFee` used for prioritization of the transaction is defined\n  //       // as `tx.fee - resourceFee`.\n  //       int64 resourceFee;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"SorobanTransactionData\", [[\"ext\", xdr.lookup(\"ExtensionPoint\")], [\"resources\", xdr.lookup(\"SorobanResources\")], [\"resourceFee\", xdr.lookup(\"Int64\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   union switch (int v)\n  //       {\n  //       case 0:\n  //           void;\n  //       }\n  //\n  // ===========================================================================\n  xdr.union(\"TransactionV0Ext\", {\n    switchOn: xdr[\"int\"](),\n    switchName: \"v\",\n    switches: [[0, xdr[\"void\"]()]],\n    arms: {}\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct TransactionV0\n  //   {\n  //       uint256 sourceAccountEd25519;\n  //       uint32 fee;\n  //       SequenceNumber seqNum;\n  //       TimeBounds* timeBounds;\n  //       Memo memo;\n  //       Operation operations<MAX_OPS_PER_TX>;\n  //       union switch (int v)\n  //       {\n  //       case 0:\n  //           void;\n  //       }\n  //       ext;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"TransactionV0\", [[\"sourceAccountEd25519\", xdr.lookup(\"Uint256\")], [\"fee\", xdr.lookup(\"Uint32\")], [\"seqNum\", xdr.lookup(\"SequenceNumber\")], [\"timeBounds\", xdr.option(xdr.lookup(\"TimeBounds\"))], [\"memo\", xdr.lookup(\"Memo\")], [\"operations\", xdr.varArray(xdr.lookup(\"Operation\"), xdr.lookup(\"MAX_OPS_PER_TX\"))], [\"ext\", xdr.lookup(\"TransactionV0Ext\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct TransactionV0Envelope\n  //   {\n  //       TransactionV0 tx;\n  //       /* Each decorated signature is a signature over the SHA256 hash of\n  //        * a TransactionSignaturePayload */\n  //       DecoratedSignature signatures<20>;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"TransactionV0Envelope\", [[\"tx\", xdr.lookup(\"TransactionV0\")], [\"signatures\", xdr.varArray(xdr.lookup(\"DecoratedSignature\"), 20)]]);\n\n  // === xdr source ============================================================\n  //\n  //   union switch (int v)\n  //       {\n  //       case 0:\n  //           void;\n  //       case 1:\n  //           SorobanTransactionData sorobanData;\n  //       }\n  //\n  // ===========================================================================\n  xdr.union(\"TransactionExt\", {\n    switchOn: xdr[\"int\"](),\n    switchName: \"v\",\n    switches: [[0, xdr[\"void\"]()], [1, \"sorobanData\"]],\n    arms: {\n      sorobanData: xdr.lookup(\"SorobanTransactionData\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct Transaction\n  //   {\n  //       // account used to run the transaction\n  //       MuxedAccount sourceAccount;\n  //\n  //       // the fee the sourceAccount will pay\n  //       uint32 fee;\n  //\n  //       // sequence number to consume in the account\n  //       SequenceNumber seqNum;\n  //\n  //       // validity conditions\n  //       Preconditions cond;\n  //\n  //       Memo memo;\n  //\n  //       Operation operations<MAX_OPS_PER_TX>;\n  //\n  //       // reserved for future use\n  //       union switch (int v)\n  //       {\n  //       case 0:\n  //           void;\n  //       case 1:\n  //           SorobanTransactionData sorobanData;\n  //       }\n  //       ext;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"Transaction\", [[\"sourceAccount\", xdr.lookup(\"MuxedAccount\")], [\"fee\", xdr.lookup(\"Uint32\")], [\"seqNum\", xdr.lookup(\"SequenceNumber\")], [\"cond\", xdr.lookup(\"Preconditions\")], [\"memo\", xdr.lookup(\"Memo\")], [\"operations\", xdr.varArray(xdr.lookup(\"Operation\"), xdr.lookup(\"MAX_OPS_PER_TX\"))], [\"ext\", xdr.lookup(\"TransactionExt\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct TransactionV1Envelope\n  //   {\n  //       Transaction tx;\n  //       /* Each decorated signature is a signature over the SHA256 hash of\n  //        * a TransactionSignaturePayload */\n  //       DecoratedSignature signatures<20>;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"TransactionV1Envelope\", [[\"tx\", xdr.lookup(\"Transaction\")], [\"signatures\", xdr.varArray(xdr.lookup(\"DecoratedSignature\"), 20)]]);\n\n  // === xdr source ============================================================\n  //\n  //   union switch (EnvelopeType type)\n  //       {\n  //       case ENVELOPE_TYPE_TX:\n  //           TransactionV1Envelope v1;\n  //       }\n  //\n  // ===========================================================================\n  xdr.union(\"FeeBumpTransactionInnerTx\", {\n    switchOn: xdr.lookup(\"EnvelopeType\"),\n    switchName: \"type\",\n    switches: [[\"envelopeTypeTx\", \"v1\"]],\n    arms: {\n      v1: xdr.lookup(\"TransactionV1Envelope\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   union switch (int v)\n  //       {\n  //       case 0:\n  //           void;\n  //       }\n  //\n  // ===========================================================================\n  xdr.union(\"FeeBumpTransactionExt\", {\n    switchOn: xdr[\"int\"](),\n    switchName: \"v\",\n    switches: [[0, xdr[\"void\"]()]],\n    arms: {}\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct FeeBumpTransaction\n  //   {\n  //       MuxedAccount feeSource;\n  //       int64 fee;\n  //       union switch (EnvelopeType type)\n  //       {\n  //       case ENVELOPE_TYPE_TX:\n  //           TransactionV1Envelope v1;\n  //       }\n  //       innerTx;\n  //       union switch (int v)\n  //       {\n  //       case 0:\n  //           void;\n  //       }\n  //       ext;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"FeeBumpTransaction\", [[\"feeSource\", xdr.lookup(\"MuxedAccount\")], [\"fee\", xdr.lookup(\"Int64\")], [\"innerTx\", xdr.lookup(\"FeeBumpTransactionInnerTx\")], [\"ext\", xdr.lookup(\"FeeBumpTransactionExt\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct FeeBumpTransactionEnvelope\n  //   {\n  //       FeeBumpTransaction tx;\n  //       /* Each decorated signature is a signature over the SHA256 hash of\n  //        * a TransactionSignaturePayload */\n  //       DecoratedSignature signatures<20>;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"FeeBumpTransactionEnvelope\", [[\"tx\", xdr.lookup(\"FeeBumpTransaction\")], [\"signatures\", xdr.varArray(xdr.lookup(\"DecoratedSignature\"), 20)]]);\n\n  // === xdr source ============================================================\n  //\n  //   union TransactionEnvelope switch (EnvelopeType type)\n  //   {\n  //   case ENVELOPE_TYPE_TX_V0:\n  //       TransactionV0Envelope v0;\n  //   case ENVELOPE_TYPE_TX:\n  //       TransactionV1Envelope v1;\n  //   case ENVELOPE_TYPE_TX_FEE_BUMP:\n  //       FeeBumpTransactionEnvelope feeBump;\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"TransactionEnvelope\", {\n    switchOn: xdr.lookup(\"EnvelopeType\"),\n    switchName: \"type\",\n    switches: [[\"envelopeTypeTxV0\", \"v0\"], [\"envelopeTypeTx\", \"v1\"], [\"envelopeTypeTxFeeBump\", \"feeBump\"]],\n    arms: {\n      v0: xdr.lookup(\"TransactionV0Envelope\"),\n      v1: xdr.lookup(\"TransactionV1Envelope\"),\n      feeBump: xdr.lookup(\"FeeBumpTransactionEnvelope\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   union switch (EnvelopeType type)\n  //       {\n  //       // Backwards Compatibility: Use ENVELOPE_TYPE_TX to sign ENVELOPE_TYPE_TX_V0\n  //       case ENVELOPE_TYPE_TX:\n  //           Transaction tx;\n  //       case ENVELOPE_TYPE_TX_FEE_BUMP:\n  //           FeeBumpTransaction feeBump;\n  //       }\n  //\n  // ===========================================================================\n  xdr.union(\"TransactionSignaturePayloadTaggedTransaction\", {\n    switchOn: xdr.lookup(\"EnvelopeType\"),\n    switchName: \"type\",\n    switches: [[\"envelopeTypeTx\", \"tx\"], [\"envelopeTypeTxFeeBump\", \"feeBump\"]],\n    arms: {\n      tx: xdr.lookup(\"Transaction\"),\n      feeBump: xdr.lookup(\"FeeBumpTransaction\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct TransactionSignaturePayload\n  //   {\n  //       Hash networkId;\n  //       union switch (EnvelopeType type)\n  //       {\n  //       // Backwards Compatibility: Use ENVELOPE_TYPE_TX to sign ENVELOPE_TYPE_TX_V0\n  //       case ENVELOPE_TYPE_TX:\n  //           Transaction tx;\n  //       case ENVELOPE_TYPE_TX_FEE_BUMP:\n  //           FeeBumpTransaction feeBump;\n  //       }\n  //       taggedTransaction;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"TransactionSignaturePayload\", [[\"networkId\", xdr.lookup(\"Hash\")], [\"taggedTransaction\", xdr.lookup(\"TransactionSignaturePayloadTaggedTransaction\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   enum ClaimAtomType\n  //   {\n  //       CLAIM_ATOM_TYPE_V0 = 0,\n  //       CLAIM_ATOM_TYPE_ORDER_BOOK = 1,\n  //       CLAIM_ATOM_TYPE_LIQUIDITY_POOL = 2\n  //   };\n  //\n  // ===========================================================================\n  xdr[\"enum\"](\"ClaimAtomType\", {\n    claimAtomTypeV0: 0,\n    claimAtomTypeOrderBook: 1,\n    claimAtomTypeLiquidityPool: 2\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct ClaimOfferAtomV0\n  //   {\n  //       // emitted to identify the offer\n  //       uint256 sellerEd25519; // Account that owns the offer\n  //       int64 offerID;\n  //\n  //       // amount and asset taken from the owner\n  //       Asset assetSold;\n  //       int64 amountSold;\n  //\n  //       // amount and asset sent to the owner\n  //       Asset assetBought;\n  //       int64 amountBought;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"ClaimOfferAtomV0\", [[\"sellerEd25519\", xdr.lookup(\"Uint256\")], [\"offerId\", xdr.lookup(\"Int64\")], [\"assetSold\", xdr.lookup(\"Asset\")], [\"amountSold\", xdr.lookup(\"Int64\")], [\"assetBought\", xdr.lookup(\"Asset\")], [\"amountBought\", xdr.lookup(\"Int64\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct ClaimOfferAtom\n  //   {\n  //       // emitted to identify the offer\n  //       AccountID sellerID; // Account that owns the offer\n  //       int64 offerID;\n  //\n  //       // amount and asset taken from the owner\n  //       Asset assetSold;\n  //       int64 amountSold;\n  //\n  //       // amount and asset sent to the owner\n  //       Asset assetBought;\n  //       int64 amountBought;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"ClaimOfferAtom\", [[\"sellerId\", xdr.lookup(\"AccountId\")], [\"offerId\", xdr.lookup(\"Int64\")], [\"assetSold\", xdr.lookup(\"Asset\")], [\"amountSold\", xdr.lookup(\"Int64\")], [\"assetBought\", xdr.lookup(\"Asset\")], [\"amountBought\", xdr.lookup(\"Int64\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct ClaimLiquidityAtom\n  //   {\n  //       PoolID liquidityPoolID;\n  //\n  //       // amount and asset taken from the pool\n  //       Asset assetSold;\n  //       int64 amountSold;\n  //\n  //       // amount and asset sent to the pool\n  //       Asset assetBought;\n  //       int64 amountBought;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"ClaimLiquidityAtom\", [[\"liquidityPoolId\", xdr.lookup(\"PoolId\")], [\"assetSold\", xdr.lookup(\"Asset\")], [\"amountSold\", xdr.lookup(\"Int64\")], [\"assetBought\", xdr.lookup(\"Asset\")], [\"amountBought\", xdr.lookup(\"Int64\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   union ClaimAtom switch (ClaimAtomType type)\n  //   {\n  //   case CLAIM_ATOM_TYPE_V0:\n  //       ClaimOfferAtomV0 v0;\n  //   case CLAIM_ATOM_TYPE_ORDER_BOOK:\n  //       ClaimOfferAtom orderBook;\n  //   case CLAIM_ATOM_TYPE_LIQUIDITY_POOL:\n  //       ClaimLiquidityAtom liquidityPool;\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"ClaimAtom\", {\n    switchOn: xdr.lookup(\"ClaimAtomType\"),\n    switchName: \"type\",\n    switches: [[\"claimAtomTypeV0\", \"v0\"], [\"claimAtomTypeOrderBook\", \"orderBook\"], [\"claimAtomTypeLiquidityPool\", \"liquidityPool\"]],\n    arms: {\n      v0: xdr.lookup(\"ClaimOfferAtomV0\"),\n      orderBook: xdr.lookup(\"ClaimOfferAtom\"),\n      liquidityPool: xdr.lookup(\"ClaimLiquidityAtom\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   enum CreateAccountResultCode\n  //   {\n  //       // codes considered as \"success\" for the operation\n  //       CREATE_ACCOUNT_SUCCESS = 0, // account was created\n  //\n  //       // codes considered as \"failure\" for the operation\n  //       CREATE_ACCOUNT_MALFORMED = -1,   // invalid destination\n  //       CREATE_ACCOUNT_UNDERFUNDED = -2, // not enough funds in source account\n  //       CREATE_ACCOUNT_LOW_RESERVE =\n  //           -3, // would create an account below the min reserve\n  //       CREATE_ACCOUNT_ALREADY_EXIST = -4 // account already exists\n  //   };\n  //\n  // ===========================================================================\n  xdr[\"enum\"](\"CreateAccountResultCode\", {\n    createAccountSuccess: 0,\n    createAccountMalformed: -1,\n    createAccountUnderfunded: -2,\n    createAccountLowReserve: -3,\n    createAccountAlreadyExist: -4\n  });\n\n  // === xdr source ============================================================\n  //\n  //   union CreateAccountResult switch (CreateAccountResultCode code)\n  //   {\n  //   case CREATE_ACCOUNT_SUCCESS:\n  //       void;\n  //   case CREATE_ACCOUNT_MALFORMED:\n  //   case CREATE_ACCOUNT_UNDERFUNDED:\n  //   case CREATE_ACCOUNT_LOW_RESERVE:\n  //   case CREATE_ACCOUNT_ALREADY_EXIST:\n  //       void;\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"CreateAccountResult\", {\n    switchOn: xdr.lookup(\"CreateAccountResultCode\"),\n    switchName: \"code\",\n    switches: [[\"createAccountSuccess\", xdr[\"void\"]()], [\"createAccountMalformed\", xdr[\"void\"]()], [\"createAccountUnderfunded\", xdr[\"void\"]()], [\"createAccountLowReserve\", xdr[\"void\"]()], [\"createAccountAlreadyExist\", xdr[\"void\"]()]],\n    arms: {}\n  });\n\n  // === xdr source ============================================================\n  //\n  //   enum PaymentResultCode\n  //   {\n  //       // codes considered as \"success\" for the operation\n  //       PAYMENT_SUCCESS = 0, // payment successfully completed\n  //\n  //       // codes considered as \"failure\" for the operation\n  //       PAYMENT_MALFORMED = -1,          // bad input\n  //       PAYMENT_UNDERFUNDED = -2,        // not enough funds in source account\n  //       PAYMENT_SRC_NO_TRUST = -3,       // no trust line on source account\n  //       PAYMENT_SRC_NOT_AUTHORIZED = -4, // source not authorized to transfer\n  //       PAYMENT_NO_DESTINATION = -5,     // destination account does not exist\n  //       PAYMENT_NO_TRUST = -6,       // destination missing a trust line for asset\n  //       PAYMENT_NOT_AUTHORIZED = -7, // destination not authorized to hold asset\n  //       PAYMENT_LINE_FULL = -8,      // destination would go above their limit\n  //       PAYMENT_NO_ISSUER = -9       // missing issuer on asset\n  //   };\n  //\n  // ===========================================================================\n  xdr[\"enum\"](\"PaymentResultCode\", {\n    paymentSuccess: 0,\n    paymentMalformed: -1,\n    paymentUnderfunded: -2,\n    paymentSrcNoTrust: -3,\n    paymentSrcNotAuthorized: -4,\n    paymentNoDestination: -5,\n    paymentNoTrust: -6,\n    paymentNotAuthorized: -7,\n    paymentLineFull: -8,\n    paymentNoIssuer: -9\n  });\n\n  // === xdr source ============================================================\n  //\n  //   union PaymentResult switch (PaymentResultCode code)\n  //   {\n  //   case PAYMENT_SUCCESS:\n  //       void;\n  //   case PAYMENT_MALFORMED:\n  //   case PAYMENT_UNDERFUNDED:\n  //   case PAYMENT_SRC_NO_TRUST:\n  //   case PAYMENT_SRC_NOT_AUTHORIZED:\n  //   case PAYMENT_NO_DESTINATION:\n  //   case PAYMENT_NO_TRUST:\n  //   case PAYMENT_NOT_AUTHORIZED:\n  //   case PAYMENT_LINE_FULL:\n  //   case PAYMENT_NO_ISSUER:\n  //       void;\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"PaymentResult\", {\n    switchOn: xdr.lookup(\"PaymentResultCode\"),\n    switchName: \"code\",\n    switches: [[\"paymentSuccess\", xdr[\"void\"]()], [\"paymentMalformed\", xdr[\"void\"]()], [\"paymentUnderfunded\", xdr[\"void\"]()], [\"paymentSrcNoTrust\", xdr[\"void\"]()], [\"paymentSrcNotAuthorized\", xdr[\"void\"]()], [\"paymentNoDestination\", xdr[\"void\"]()], [\"paymentNoTrust\", xdr[\"void\"]()], [\"paymentNotAuthorized\", xdr[\"void\"]()], [\"paymentLineFull\", xdr[\"void\"]()], [\"paymentNoIssuer\", xdr[\"void\"]()]],\n    arms: {}\n  });\n\n  // === xdr source ============================================================\n  //\n  //   enum PathPaymentStrictReceiveResultCode\n  //   {\n  //       // codes considered as \"success\" for the operation\n  //       PATH_PAYMENT_STRICT_RECEIVE_SUCCESS = 0, // success\n  //\n  //       // codes considered as \"failure\" for the operation\n  //       PATH_PAYMENT_STRICT_RECEIVE_MALFORMED = -1, // bad input\n  //       PATH_PAYMENT_STRICT_RECEIVE_UNDERFUNDED =\n  //           -2, // not enough funds in source account\n  //       PATH_PAYMENT_STRICT_RECEIVE_SRC_NO_TRUST =\n  //           -3, // no trust line on source account\n  //       PATH_PAYMENT_STRICT_RECEIVE_SRC_NOT_AUTHORIZED =\n  //           -4, // source not authorized to transfer\n  //       PATH_PAYMENT_STRICT_RECEIVE_NO_DESTINATION =\n  //           -5, // destination account does not exist\n  //       PATH_PAYMENT_STRICT_RECEIVE_NO_TRUST =\n  //           -6, // dest missing a trust line for asset\n  //       PATH_PAYMENT_STRICT_RECEIVE_NOT_AUTHORIZED =\n  //           -7, // dest not authorized to hold asset\n  //       PATH_PAYMENT_STRICT_RECEIVE_LINE_FULL =\n  //           -8, // dest would go above their limit\n  //       PATH_PAYMENT_STRICT_RECEIVE_NO_ISSUER = -9, // missing issuer on one asset\n  //       PATH_PAYMENT_STRICT_RECEIVE_TOO_FEW_OFFERS =\n  //           -10, // not enough offers to satisfy path\n  //       PATH_PAYMENT_STRICT_RECEIVE_OFFER_CROSS_SELF =\n  //           -11, // would cross one of its own offers\n  //       PATH_PAYMENT_STRICT_RECEIVE_OVER_SENDMAX = -12 // could not satisfy sendmax\n  //   };\n  //\n  // ===========================================================================\n  xdr[\"enum\"](\"PathPaymentStrictReceiveResultCode\", {\n    pathPaymentStrictReceiveSuccess: 0,\n    pathPaymentStrictReceiveMalformed: -1,\n    pathPaymentStrictReceiveUnderfunded: -2,\n    pathPaymentStrictReceiveSrcNoTrust: -3,\n    pathPaymentStrictReceiveSrcNotAuthorized: -4,\n    pathPaymentStrictReceiveNoDestination: -5,\n    pathPaymentStrictReceiveNoTrust: -6,\n    pathPaymentStrictReceiveNotAuthorized: -7,\n    pathPaymentStrictReceiveLineFull: -8,\n    pathPaymentStrictReceiveNoIssuer: -9,\n    pathPaymentStrictReceiveTooFewOffers: -10,\n    pathPaymentStrictReceiveOfferCrossSelf: -11,\n    pathPaymentStrictReceiveOverSendmax: -12\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct SimplePaymentResult\n  //   {\n  //       AccountID destination;\n  //       Asset asset;\n  //       int64 amount;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"SimplePaymentResult\", [[\"destination\", xdr.lookup(\"AccountId\")], [\"asset\", xdr.lookup(\"Asset\")], [\"amount\", xdr.lookup(\"Int64\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct\n  //       {\n  //           ClaimAtom offers<>;\n  //           SimplePaymentResult last;\n  //       }\n  //\n  // ===========================================================================\n  xdr.struct(\"PathPaymentStrictReceiveResultSuccess\", [[\"offers\", xdr.varArray(xdr.lookup(\"ClaimAtom\"), 2147483647)], [\"last\", xdr.lookup(\"SimplePaymentResult\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   union PathPaymentStrictReceiveResult switch (\n  //       PathPaymentStrictReceiveResultCode code)\n  //   {\n  //   case PATH_PAYMENT_STRICT_RECEIVE_SUCCESS:\n  //       struct\n  //       {\n  //           ClaimAtom offers<>;\n  //           SimplePaymentResult last;\n  //       } success;\n  //   case PATH_PAYMENT_STRICT_RECEIVE_MALFORMED:\n  //   case PATH_PAYMENT_STRICT_RECEIVE_UNDERFUNDED:\n  //   case PATH_PAYMENT_STRICT_RECEIVE_SRC_NO_TRUST:\n  //   case PATH_PAYMENT_STRICT_RECEIVE_SRC_NOT_AUTHORIZED:\n  //   case PATH_PAYMENT_STRICT_RECEIVE_NO_DESTINATION:\n  //   case PATH_PAYMENT_STRICT_RECEIVE_NO_TRUST:\n  //   case PATH_PAYMENT_STRICT_RECEIVE_NOT_AUTHORIZED:\n  //   case PATH_PAYMENT_STRICT_RECEIVE_LINE_FULL:\n  //       void;\n  //   case PATH_PAYMENT_STRICT_RECEIVE_NO_ISSUER:\n  //       Asset noIssuer; // the asset that caused the error\n  //   case PATH_PAYMENT_STRICT_RECEIVE_TOO_FEW_OFFERS:\n  //   case PATH_PAYMENT_STRICT_RECEIVE_OFFER_CROSS_SELF:\n  //   case PATH_PAYMENT_STRICT_RECEIVE_OVER_SENDMAX:\n  //       void;\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"PathPaymentStrictReceiveResult\", {\n    switchOn: xdr.lookup(\"PathPaymentStrictReceiveResultCode\"),\n    switchName: \"code\",\n    switches: [[\"pathPaymentStrictReceiveSuccess\", \"success\"], [\"pathPaymentStrictReceiveMalformed\", xdr[\"void\"]()], [\"pathPaymentStrictReceiveUnderfunded\", xdr[\"void\"]()], [\"pathPaymentStrictReceiveSrcNoTrust\", xdr[\"void\"]()], [\"pathPaymentStrictReceiveSrcNotAuthorized\", xdr[\"void\"]()], [\"pathPaymentStrictReceiveNoDestination\", xdr[\"void\"]()], [\"pathPaymentStrictReceiveNoTrust\", xdr[\"void\"]()], [\"pathPaymentStrictReceiveNotAuthorized\", xdr[\"void\"]()], [\"pathPaymentStrictReceiveLineFull\", xdr[\"void\"]()], [\"pathPaymentStrictReceiveNoIssuer\", \"noIssuer\"], [\"pathPaymentStrictReceiveTooFewOffers\", xdr[\"void\"]()], [\"pathPaymentStrictReceiveOfferCrossSelf\", xdr[\"void\"]()], [\"pathPaymentStrictReceiveOverSendmax\", xdr[\"void\"]()]],\n    arms: {\n      success: xdr.lookup(\"PathPaymentStrictReceiveResultSuccess\"),\n      noIssuer: xdr.lookup(\"Asset\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   enum PathPaymentStrictSendResultCode\n  //   {\n  //       // codes considered as \"success\" for the operation\n  //       PATH_PAYMENT_STRICT_SEND_SUCCESS = 0, // success\n  //\n  //       // codes considered as \"failure\" for the operation\n  //       PATH_PAYMENT_STRICT_SEND_MALFORMED = -1, // bad input\n  //       PATH_PAYMENT_STRICT_SEND_UNDERFUNDED =\n  //           -2, // not enough funds in source account\n  //       PATH_PAYMENT_STRICT_SEND_SRC_NO_TRUST =\n  //           -3, // no trust line on source account\n  //       PATH_PAYMENT_STRICT_SEND_SRC_NOT_AUTHORIZED =\n  //           -4, // source not authorized to transfer\n  //       PATH_PAYMENT_STRICT_SEND_NO_DESTINATION =\n  //           -5, // destination account does not exist\n  //       PATH_PAYMENT_STRICT_SEND_NO_TRUST =\n  //           -6, // dest missing a trust line for asset\n  //       PATH_PAYMENT_STRICT_SEND_NOT_AUTHORIZED =\n  //           -7, // dest not authorized to hold asset\n  //       PATH_PAYMENT_STRICT_SEND_LINE_FULL = -8, // dest would go above their limit\n  //       PATH_PAYMENT_STRICT_SEND_NO_ISSUER = -9, // missing issuer on one asset\n  //       PATH_PAYMENT_STRICT_SEND_TOO_FEW_OFFERS =\n  //           -10, // not enough offers to satisfy path\n  //       PATH_PAYMENT_STRICT_SEND_OFFER_CROSS_SELF =\n  //           -11, // would cross one of its own offers\n  //       PATH_PAYMENT_STRICT_SEND_UNDER_DESTMIN = -12 // could not satisfy destMin\n  //   };\n  //\n  // ===========================================================================\n  xdr[\"enum\"](\"PathPaymentStrictSendResultCode\", {\n    pathPaymentStrictSendSuccess: 0,\n    pathPaymentStrictSendMalformed: -1,\n    pathPaymentStrictSendUnderfunded: -2,\n    pathPaymentStrictSendSrcNoTrust: -3,\n    pathPaymentStrictSendSrcNotAuthorized: -4,\n    pathPaymentStrictSendNoDestination: -5,\n    pathPaymentStrictSendNoTrust: -6,\n    pathPaymentStrictSendNotAuthorized: -7,\n    pathPaymentStrictSendLineFull: -8,\n    pathPaymentStrictSendNoIssuer: -9,\n    pathPaymentStrictSendTooFewOffers: -10,\n    pathPaymentStrictSendOfferCrossSelf: -11,\n    pathPaymentStrictSendUnderDestmin: -12\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct\n  //       {\n  //           ClaimAtom offers<>;\n  //           SimplePaymentResult last;\n  //       }\n  //\n  // ===========================================================================\n  xdr.struct(\"PathPaymentStrictSendResultSuccess\", [[\"offers\", xdr.varArray(xdr.lookup(\"ClaimAtom\"), 2147483647)], [\"last\", xdr.lookup(\"SimplePaymentResult\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   union PathPaymentStrictSendResult switch (PathPaymentStrictSendResultCode code)\n  //   {\n  //   case PATH_PAYMENT_STRICT_SEND_SUCCESS:\n  //       struct\n  //       {\n  //           ClaimAtom offers<>;\n  //           SimplePaymentResult last;\n  //       } success;\n  //   case PATH_PAYMENT_STRICT_SEND_MALFORMED:\n  //   case PATH_PAYMENT_STRICT_SEND_UNDERFUNDED:\n  //   case PATH_PAYMENT_STRICT_SEND_SRC_NO_TRUST:\n  //   case PATH_PAYMENT_STRICT_SEND_SRC_NOT_AUTHORIZED:\n  //   case PATH_PAYMENT_STRICT_SEND_NO_DESTINATION:\n  //   case PATH_PAYMENT_STRICT_SEND_NO_TRUST:\n  //   case PATH_PAYMENT_STRICT_SEND_NOT_AUTHORIZED:\n  //   case PATH_PAYMENT_STRICT_SEND_LINE_FULL:\n  //       void;\n  //   case PATH_PAYMENT_STRICT_SEND_NO_ISSUER:\n  //       Asset noIssuer; // the asset that caused the error\n  //   case PATH_PAYMENT_STRICT_SEND_TOO_FEW_OFFERS:\n  //   case PATH_PAYMENT_STRICT_SEND_OFFER_CROSS_SELF:\n  //   case PATH_PAYMENT_STRICT_SEND_UNDER_DESTMIN:\n  //       void;\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"PathPaymentStrictSendResult\", {\n    switchOn: xdr.lookup(\"PathPaymentStrictSendResultCode\"),\n    switchName: \"code\",\n    switches: [[\"pathPaymentStrictSendSuccess\", \"success\"], [\"pathPaymentStrictSendMalformed\", xdr[\"void\"]()], [\"pathPaymentStrictSendUnderfunded\", xdr[\"void\"]()], [\"pathPaymentStrictSendSrcNoTrust\", xdr[\"void\"]()], [\"pathPaymentStrictSendSrcNotAuthorized\", xdr[\"void\"]()], [\"pathPaymentStrictSendNoDestination\", xdr[\"void\"]()], [\"pathPaymentStrictSendNoTrust\", xdr[\"void\"]()], [\"pathPaymentStrictSendNotAuthorized\", xdr[\"void\"]()], [\"pathPaymentStrictSendLineFull\", xdr[\"void\"]()], [\"pathPaymentStrictSendNoIssuer\", \"noIssuer\"], [\"pathPaymentStrictSendTooFewOffers\", xdr[\"void\"]()], [\"pathPaymentStrictSendOfferCrossSelf\", xdr[\"void\"]()], [\"pathPaymentStrictSendUnderDestmin\", xdr[\"void\"]()]],\n    arms: {\n      success: xdr.lookup(\"PathPaymentStrictSendResultSuccess\"),\n      noIssuer: xdr.lookup(\"Asset\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   enum ManageSellOfferResultCode\n  //   {\n  //       // codes considered as \"success\" for the operation\n  //       MANAGE_SELL_OFFER_SUCCESS = 0,\n  //\n  //       // codes considered as \"failure\" for the operation\n  //       MANAGE_SELL_OFFER_MALFORMED = -1, // generated offer would be invalid\n  //       MANAGE_SELL_OFFER_SELL_NO_TRUST =\n  //           -2,                              // no trust line for what we're selling\n  //       MANAGE_SELL_OFFER_BUY_NO_TRUST = -3, // no trust line for what we're buying\n  //       MANAGE_SELL_OFFER_SELL_NOT_AUTHORIZED = -4, // not authorized to sell\n  //       MANAGE_SELL_OFFER_BUY_NOT_AUTHORIZED = -5,  // not authorized to buy\n  //       MANAGE_SELL_OFFER_LINE_FULL = -6, // can't receive more of what it's buying\n  //       MANAGE_SELL_OFFER_UNDERFUNDED = -7, // doesn't hold what it's trying to sell\n  //       MANAGE_SELL_OFFER_CROSS_SELF =\n  //           -8, // would cross an offer from the same user\n  //       MANAGE_SELL_OFFER_SELL_NO_ISSUER = -9, // no issuer for what we're selling\n  //       MANAGE_SELL_OFFER_BUY_NO_ISSUER = -10, // no issuer for what we're buying\n  //\n  //       // update errors\n  //       MANAGE_SELL_OFFER_NOT_FOUND =\n  //           -11, // offerID does not match an existing offer\n  //\n  //       MANAGE_SELL_OFFER_LOW_RESERVE =\n  //           -12 // not enough funds to create a new Offer\n  //   };\n  //\n  // ===========================================================================\n  xdr[\"enum\"](\"ManageSellOfferResultCode\", {\n    manageSellOfferSuccess: 0,\n    manageSellOfferMalformed: -1,\n    manageSellOfferSellNoTrust: -2,\n    manageSellOfferBuyNoTrust: -3,\n    manageSellOfferSellNotAuthorized: -4,\n    manageSellOfferBuyNotAuthorized: -5,\n    manageSellOfferLineFull: -6,\n    manageSellOfferUnderfunded: -7,\n    manageSellOfferCrossSelf: -8,\n    manageSellOfferSellNoIssuer: -9,\n    manageSellOfferBuyNoIssuer: -10,\n    manageSellOfferNotFound: -11,\n    manageSellOfferLowReserve: -12\n  });\n\n  // === xdr source ============================================================\n  //\n  //   enum ManageOfferEffect\n  //   {\n  //       MANAGE_OFFER_CREATED = 0,\n  //       MANAGE_OFFER_UPDATED = 1,\n  //       MANAGE_OFFER_DELETED = 2\n  //   };\n  //\n  // ===========================================================================\n  xdr[\"enum\"](\"ManageOfferEffect\", {\n    manageOfferCreated: 0,\n    manageOfferUpdated: 1,\n    manageOfferDeleted: 2\n  });\n\n  // === xdr source ============================================================\n  //\n  //   union switch (ManageOfferEffect effect)\n  //       {\n  //       case MANAGE_OFFER_CREATED:\n  //       case MANAGE_OFFER_UPDATED:\n  //           OfferEntry offer;\n  //       case MANAGE_OFFER_DELETED:\n  //           void;\n  //       }\n  //\n  // ===========================================================================\n  xdr.union(\"ManageOfferSuccessResultOffer\", {\n    switchOn: xdr.lookup(\"ManageOfferEffect\"),\n    switchName: \"effect\",\n    switches: [[\"manageOfferCreated\", \"offer\"], [\"manageOfferUpdated\", \"offer\"], [\"manageOfferDeleted\", xdr[\"void\"]()]],\n    arms: {\n      offer: xdr.lookup(\"OfferEntry\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct ManageOfferSuccessResult\n  //   {\n  //       // offers that got claimed while creating this offer\n  //       ClaimAtom offersClaimed<>;\n  //\n  //       union switch (ManageOfferEffect effect)\n  //       {\n  //       case MANAGE_OFFER_CREATED:\n  //       case MANAGE_OFFER_UPDATED:\n  //           OfferEntry offer;\n  //       case MANAGE_OFFER_DELETED:\n  //           void;\n  //       }\n  //       offer;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"ManageOfferSuccessResult\", [[\"offersClaimed\", xdr.varArray(xdr.lookup(\"ClaimAtom\"), 2147483647)], [\"offer\", xdr.lookup(\"ManageOfferSuccessResultOffer\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   union ManageSellOfferResult switch (ManageSellOfferResultCode code)\n  //   {\n  //   case MANAGE_SELL_OFFER_SUCCESS:\n  //       ManageOfferSuccessResult success;\n  //   case MANAGE_SELL_OFFER_MALFORMED:\n  //   case MANAGE_SELL_OFFER_SELL_NO_TRUST:\n  //   case MANAGE_SELL_OFFER_BUY_NO_TRUST:\n  //   case MANAGE_SELL_OFFER_SELL_NOT_AUTHORIZED:\n  //   case MANAGE_SELL_OFFER_BUY_NOT_AUTHORIZED:\n  //   case MANAGE_SELL_OFFER_LINE_FULL:\n  //   case MANAGE_SELL_OFFER_UNDERFUNDED:\n  //   case MANAGE_SELL_OFFER_CROSS_SELF:\n  //   case MANAGE_SELL_OFFER_SELL_NO_ISSUER:\n  //   case MANAGE_SELL_OFFER_BUY_NO_ISSUER:\n  //   case MANAGE_SELL_OFFER_NOT_FOUND:\n  //   case MANAGE_SELL_OFFER_LOW_RESERVE:\n  //       void;\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"ManageSellOfferResult\", {\n    switchOn: xdr.lookup(\"ManageSellOfferResultCode\"),\n    switchName: \"code\",\n    switches: [[\"manageSellOfferSuccess\", \"success\"], [\"manageSellOfferMalformed\", xdr[\"void\"]()], [\"manageSellOfferSellNoTrust\", xdr[\"void\"]()], [\"manageSellOfferBuyNoTrust\", xdr[\"void\"]()], [\"manageSellOfferSellNotAuthorized\", xdr[\"void\"]()], [\"manageSellOfferBuyNotAuthorized\", xdr[\"void\"]()], [\"manageSellOfferLineFull\", xdr[\"void\"]()], [\"manageSellOfferUnderfunded\", xdr[\"void\"]()], [\"manageSellOfferCrossSelf\", xdr[\"void\"]()], [\"manageSellOfferSellNoIssuer\", xdr[\"void\"]()], [\"manageSellOfferBuyNoIssuer\", xdr[\"void\"]()], [\"manageSellOfferNotFound\", xdr[\"void\"]()], [\"manageSellOfferLowReserve\", xdr[\"void\"]()]],\n    arms: {\n      success: xdr.lookup(\"ManageOfferSuccessResult\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   enum ManageBuyOfferResultCode\n  //   {\n  //       // codes considered as \"success\" for the operation\n  //       MANAGE_BUY_OFFER_SUCCESS = 0,\n  //\n  //       // codes considered as \"failure\" for the operation\n  //       MANAGE_BUY_OFFER_MALFORMED = -1,     // generated offer would be invalid\n  //       MANAGE_BUY_OFFER_SELL_NO_TRUST = -2, // no trust line for what we're selling\n  //       MANAGE_BUY_OFFER_BUY_NO_TRUST = -3,  // no trust line for what we're buying\n  //       MANAGE_BUY_OFFER_SELL_NOT_AUTHORIZED = -4, // not authorized to sell\n  //       MANAGE_BUY_OFFER_BUY_NOT_AUTHORIZED = -5,  // not authorized to buy\n  //       MANAGE_BUY_OFFER_LINE_FULL = -6,   // can't receive more of what it's buying\n  //       MANAGE_BUY_OFFER_UNDERFUNDED = -7, // doesn't hold what it's trying to sell\n  //       MANAGE_BUY_OFFER_CROSS_SELF = -8, // would cross an offer from the same user\n  //       MANAGE_BUY_OFFER_SELL_NO_ISSUER = -9, // no issuer for what we're selling\n  //       MANAGE_BUY_OFFER_BUY_NO_ISSUER = -10, // no issuer for what we're buying\n  //\n  //       // update errors\n  //       MANAGE_BUY_OFFER_NOT_FOUND =\n  //           -11, // offerID does not match an existing offer\n  //\n  //       MANAGE_BUY_OFFER_LOW_RESERVE = -12 // not enough funds to create a new Offer\n  //   };\n  //\n  // ===========================================================================\n  xdr[\"enum\"](\"ManageBuyOfferResultCode\", {\n    manageBuyOfferSuccess: 0,\n    manageBuyOfferMalformed: -1,\n    manageBuyOfferSellNoTrust: -2,\n    manageBuyOfferBuyNoTrust: -3,\n    manageBuyOfferSellNotAuthorized: -4,\n    manageBuyOfferBuyNotAuthorized: -5,\n    manageBuyOfferLineFull: -6,\n    manageBuyOfferUnderfunded: -7,\n    manageBuyOfferCrossSelf: -8,\n    manageBuyOfferSellNoIssuer: -9,\n    manageBuyOfferBuyNoIssuer: -10,\n    manageBuyOfferNotFound: -11,\n    manageBuyOfferLowReserve: -12\n  });\n\n  // === xdr source ============================================================\n  //\n  //   union ManageBuyOfferResult switch (ManageBuyOfferResultCode code)\n  //   {\n  //   case MANAGE_BUY_OFFER_SUCCESS:\n  //       ManageOfferSuccessResult success;\n  //   case MANAGE_BUY_OFFER_MALFORMED:\n  //   case MANAGE_BUY_OFFER_SELL_NO_TRUST:\n  //   case MANAGE_BUY_OFFER_BUY_NO_TRUST:\n  //   case MANAGE_BUY_OFFER_SELL_NOT_AUTHORIZED:\n  //   case MANAGE_BUY_OFFER_BUY_NOT_AUTHORIZED:\n  //   case MANAGE_BUY_OFFER_LINE_FULL:\n  //   case MANAGE_BUY_OFFER_UNDERFUNDED:\n  //   case MANAGE_BUY_OFFER_CROSS_SELF:\n  //   case MANAGE_BUY_OFFER_SELL_NO_ISSUER:\n  //   case MANAGE_BUY_OFFER_BUY_NO_ISSUER:\n  //   case MANAGE_BUY_OFFER_NOT_FOUND:\n  //   case MANAGE_BUY_OFFER_LOW_RESERVE:\n  //       void;\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"ManageBuyOfferResult\", {\n    switchOn: xdr.lookup(\"ManageBuyOfferResultCode\"),\n    switchName: \"code\",\n    switches: [[\"manageBuyOfferSuccess\", \"success\"], [\"manageBuyOfferMalformed\", xdr[\"void\"]()], [\"manageBuyOfferSellNoTrust\", xdr[\"void\"]()], [\"manageBuyOfferBuyNoTrust\", xdr[\"void\"]()], [\"manageBuyOfferSellNotAuthorized\", xdr[\"void\"]()], [\"manageBuyOfferBuyNotAuthorized\", xdr[\"void\"]()], [\"manageBuyOfferLineFull\", xdr[\"void\"]()], [\"manageBuyOfferUnderfunded\", xdr[\"void\"]()], [\"manageBuyOfferCrossSelf\", xdr[\"void\"]()], [\"manageBuyOfferSellNoIssuer\", xdr[\"void\"]()], [\"manageBuyOfferBuyNoIssuer\", xdr[\"void\"]()], [\"manageBuyOfferNotFound\", xdr[\"void\"]()], [\"manageBuyOfferLowReserve\", xdr[\"void\"]()]],\n    arms: {\n      success: xdr.lookup(\"ManageOfferSuccessResult\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   enum SetOptionsResultCode\n  //   {\n  //       // codes considered as \"success\" for the operation\n  //       SET_OPTIONS_SUCCESS = 0,\n  //       // codes considered as \"failure\" for the operation\n  //       SET_OPTIONS_LOW_RESERVE = -1,      // not enough funds to add a signer\n  //       SET_OPTIONS_TOO_MANY_SIGNERS = -2, // max number of signers already reached\n  //       SET_OPTIONS_BAD_FLAGS = -3,        // invalid combination of clear/set flags\n  //       SET_OPTIONS_INVALID_INFLATION = -4,      // inflation account does not exist\n  //       SET_OPTIONS_CANT_CHANGE = -5,            // can no longer change this option\n  //       SET_OPTIONS_UNKNOWN_FLAG = -6,           // can't set an unknown flag\n  //       SET_OPTIONS_THRESHOLD_OUT_OF_RANGE = -7, // bad value for weight/threshold\n  //       SET_OPTIONS_BAD_SIGNER = -8,             // signer cannot be masterkey\n  //       SET_OPTIONS_INVALID_HOME_DOMAIN = -9,    // malformed home domain\n  //       SET_OPTIONS_AUTH_REVOCABLE_REQUIRED =\n  //           -10 // auth revocable is required for clawback\n  //   };\n  //\n  // ===========================================================================\n  xdr[\"enum\"](\"SetOptionsResultCode\", {\n    setOptionsSuccess: 0,\n    setOptionsLowReserve: -1,\n    setOptionsTooManySigners: -2,\n    setOptionsBadFlags: -3,\n    setOptionsInvalidInflation: -4,\n    setOptionsCantChange: -5,\n    setOptionsUnknownFlag: -6,\n    setOptionsThresholdOutOfRange: -7,\n    setOptionsBadSigner: -8,\n    setOptionsInvalidHomeDomain: -9,\n    setOptionsAuthRevocableRequired: -10\n  });\n\n  // === xdr source ============================================================\n  //\n  //   union SetOptionsResult switch (SetOptionsResultCode code)\n  //   {\n  //   case SET_OPTIONS_SUCCESS:\n  //       void;\n  //   case SET_OPTIONS_LOW_RESERVE:\n  //   case SET_OPTIONS_TOO_MANY_SIGNERS:\n  //   case SET_OPTIONS_BAD_FLAGS:\n  //   case SET_OPTIONS_INVALID_INFLATION:\n  //   case SET_OPTIONS_CANT_CHANGE:\n  //   case SET_OPTIONS_UNKNOWN_FLAG:\n  //   case SET_OPTIONS_THRESHOLD_OUT_OF_RANGE:\n  //   case SET_OPTIONS_BAD_SIGNER:\n  //   case SET_OPTIONS_INVALID_HOME_DOMAIN:\n  //   case SET_OPTIONS_AUTH_REVOCABLE_REQUIRED:\n  //       void;\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"SetOptionsResult\", {\n    switchOn: xdr.lookup(\"SetOptionsResultCode\"),\n    switchName: \"code\",\n    switches: [[\"setOptionsSuccess\", xdr[\"void\"]()], [\"setOptionsLowReserve\", xdr[\"void\"]()], [\"setOptionsTooManySigners\", xdr[\"void\"]()], [\"setOptionsBadFlags\", xdr[\"void\"]()], [\"setOptionsInvalidInflation\", xdr[\"void\"]()], [\"setOptionsCantChange\", xdr[\"void\"]()], [\"setOptionsUnknownFlag\", xdr[\"void\"]()], [\"setOptionsThresholdOutOfRange\", xdr[\"void\"]()], [\"setOptionsBadSigner\", xdr[\"void\"]()], [\"setOptionsInvalidHomeDomain\", xdr[\"void\"]()], [\"setOptionsAuthRevocableRequired\", xdr[\"void\"]()]],\n    arms: {}\n  });\n\n  // === xdr source ============================================================\n  //\n  //   enum ChangeTrustResultCode\n  //   {\n  //       // codes considered as \"success\" for the operation\n  //       CHANGE_TRUST_SUCCESS = 0,\n  //       // codes considered as \"failure\" for the operation\n  //       CHANGE_TRUST_MALFORMED = -1,     // bad input\n  //       CHANGE_TRUST_NO_ISSUER = -2,     // could not find issuer\n  //       CHANGE_TRUST_INVALID_LIMIT = -3, // cannot drop limit below balance\n  //                                        // cannot create with a limit of 0\n  //       CHANGE_TRUST_LOW_RESERVE =\n  //           -4, // not enough funds to create a new trust line,\n  //       CHANGE_TRUST_SELF_NOT_ALLOWED = -5,   // trusting self is not allowed\n  //       CHANGE_TRUST_TRUST_LINE_MISSING = -6, // Asset trustline is missing for pool\n  //       CHANGE_TRUST_CANNOT_DELETE =\n  //           -7, // Asset trustline is still referenced in a pool\n  //       CHANGE_TRUST_NOT_AUTH_MAINTAIN_LIABILITIES =\n  //           -8 // Asset trustline is deauthorized\n  //   };\n  //\n  // ===========================================================================\n  xdr[\"enum\"](\"ChangeTrustResultCode\", {\n    changeTrustSuccess: 0,\n    changeTrustMalformed: -1,\n    changeTrustNoIssuer: -2,\n    changeTrustInvalidLimit: -3,\n    changeTrustLowReserve: -4,\n    changeTrustSelfNotAllowed: -5,\n    changeTrustTrustLineMissing: -6,\n    changeTrustCannotDelete: -7,\n    changeTrustNotAuthMaintainLiabilities: -8\n  });\n\n  // === xdr source ============================================================\n  //\n  //   union ChangeTrustResult switch (ChangeTrustResultCode code)\n  //   {\n  //   case CHANGE_TRUST_SUCCESS:\n  //       void;\n  //   case CHANGE_TRUST_MALFORMED:\n  //   case CHANGE_TRUST_NO_ISSUER:\n  //   case CHANGE_TRUST_INVALID_LIMIT:\n  //   case CHANGE_TRUST_LOW_RESERVE:\n  //   case CHANGE_TRUST_SELF_NOT_ALLOWED:\n  //   case CHANGE_TRUST_TRUST_LINE_MISSING:\n  //   case CHANGE_TRUST_CANNOT_DELETE:\n  //   case CHANGE_TRUST_NOT_AUTH_MAINTAIN_LIABILITIES:\n  //       void;\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"ChangeTrustResult\", {\n    switchOn: xdr.lookup(\"ChangeTrustResultCode\"),\n    switchName: \"code\",\n    switches: [[\"changeTrustSuccess\", xdr[\"void\"]()], [\"changeTrustMalformed\", xdr[\"void\"]()], [\"changeTrustNoIssuer\", xdr[\"void\"]()], [\"changeTrustInvalidLimit\", xdr[\"void\"]()], [\"changeTrustLowReserve\", xdr[\"void\"]()], [\"changeTrustSelfNotAllowed\", xdr[\"void\"]()], [\"changeTrustTrustLineMissing\", xdr[\"void\"]()], [\"changeTrustCannotDelete\", xdr[\"void\"]()], [\"changeTrustNotAuthMaintainLiabilities\", xdr[\"void\"]()]],\n    arms: {}\n  });\n\n  // === xdr source ============================================================\n  //\n  //   enum AllowTrustResultCode\n  //   {\n  //       // codes considered as \"success\" for the operation\n  //       ALLOW_TRUST_SUCCESS = 0,\n  //       // codes considered as \"failure\" for the operation\n  //       ALLOW_TRUST_MALFORMED = -1,     // asset is not ASSET_TYPE_ALPHANUM\n  //       ALLOW_TRUST_NO_TRUST_LINE = -2, // trustor does not have a trustline\n  //                                       // source account does not require trust\n  //       ALLOW_TRUST_TRUST_NOT_REQUIRED = -3,\n  //       ALLOW_TRUST_CANT_REVOKE = -4,      // source account can't revoke trust,\n  //       ALLOW_TRUST_SELF_NOT_ALLOWED = -5, // trusting self is not allowed\n  //       ALLOW_TRUST_LOW_RESERVE = -6       // claimable balances can't be created\n  //                                          // on revoke due to low reserves\n  //   };\n  //\n  // ===========================================================================\n  xdr[\"enum\"](\"AllowTrustResultCode\", {\n    allowTrustSuccess: 0,\n    allowTrustMalformed: -1,\n    allowTrustNoTrustLine: -2,\n    allowTrustTrustNotRequired: -3,\n    allowTrustCantRevoke: -4,\n    allowTrustSelfNotAllowed: -5,\n    allowTrustLowReserve: -6\n  });\n\n  // === xdr source ============================================================\n  //\n  //   union AllowTrustResult switch (AllowTrustResultCode code)\n  //   {\n  //   case ALLOW_TRUST_SUCCESS:\n  //       void;\n  //   case ALLOW_TRUST_MALFORMED:\n  //   case ALLOW_TRUST_NO_TRUST_LINE:\n  //   case ALLOW_TRUST_TRUST_NOT_REQUIRED:\n  //   case ALLOW_TRUST_CANT_REVOKE:\n  //   case ALLOW_TRUST_SELF_NOT_ALLOWED:\n  //   case ALLOW_TRUST_LOW_RESERVE:\n  //       void;\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"AllowTrustResult\", {\n    switchOn: xdr.lookup(\"AllowTrustResultCode\"),\n    switchName: \"code\",\n    switches: [[\"allowTrustSuccess\", xdr[\"void\"]()], [\"allowTrustMalformed\", xdr[\"void\"]()], [\"allowTrustNoTrustLine\", xdr[\"void\"]()], [\"allowTrustTrustNotRequired\", xdr[\"void\"]()], [\"allowTrustCantRevoke\", xdr[\"void\"]()], [\"allowTrustSelfNotAllowed\", xdr[\"void\"]()], [\"allowTrustLowReserve\", xdr[\"void\"]()]],\n    arms: {}\n  });\n\n  // === xdr source ============================================================\n  //\n  //   enum AccountMergeResultCode\n  //   {\n  //       // codes considered as \"success\" for the operation\n  //       ACCOUNT_MERGE_SUCCESS = 0,\n  //       // codes considered as \"failure\" for the operation\n  //       ACCOUNT_MERGE_MALFORMED = -1,       // can't merge onto itself\n  //       ACCOUNT_MERGE_NO_ACCOUNT = -2,      // destination does not exist\n  //       ACCOUNT_MERGE_IMMUTABLE_SET = -3,   // source account has AUTH_IMMUTABLE set\n  //       ACCOUNT_MERGE_HAS_SUB_ENTRIES = -4, // account has trust lines/offers\n  //       ACCOUNT_MERGE_SEQNUM_TOO_FAR = -5,  // sequence number is over max allowed\n  //       ACCOUNT_MERGE_DEST_FULL = -6,       // can't add source balance to\n  //                                           // destination balance\n  //       ACCOUNT_MERGE_IS_SPONSOR = -7       // can't merge account that is a sponsor\n  //   };\n  //\n  // ===========================================================================\n  xdr[\"enum\"](\"AccountMergeResultCode\", {\n    accountMergeSuccess: 0,\n    accountMergeMalformed: -1,\n    accountMergeNoAccount: -2,\n    accountMergeImmutableSet: -3,\n    accountMergeHasSubEntries: -4,\n    accountMergeSeqnumTooFar: -5,\n    accountMergeDestFull: -6,\n    accountMergeIsSponsor: -7\n  });\n\n  // === xdr source ============================================================\n  //\n  //   union AccountMergeResult switch (AccountMergeResultCode code)\n  //   {\n  //   case ACCOUNT_MERGE_SUCCESS:\n  //       int64 sourceAccountBalance; // how much got transferred from source account\n  //   case ACCOUNT_MERGE_MALFORMED:\n  //   case ACCOUNT_MERGE_NO_ACCOUNT:\n  //   case ACCOUNT_MERGE_IMMUTABLE_SET:\n  //   case ACCOUNT_MERGE_HAS_SUB_ENTRIES:\n  //   case ACCOUNT_MERGE_SEQNUM_TOO_FAR:\n  //   case ACCOUNT_MERGE_DEST_FULL:\n  //   case ACCOUNT_MERGE_IS_SPONSOR:\n  //       void;\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"AccountMergeResult\", {\n    switchOn: xdr.lookup(\"AccountMergeResultCode\"),\n    switchName: \"code\",\n    switches: [[\"accountMergeSuccess\", \"sourceAccountBalance\"], [\"accountMergeMalformed\", xdr[\"void\"]()], [\"accountMergeNoAccount\", xdr[\"void\"]()], [\"accountMergeImmutableSet\", xdr[\"void\"]()], [\"accountMergeHasSubEntries\", xdr[\"void\"]()], [\"accountMergeSeqnumTooFar\", xdr[\"void\"]()], [\"accountMergeDestFull\", xdr[\"void\"]()], [\"accountMergeIsSponsor\", xdr[\"void\"]()]],\n    arms: {\n      sourceAccountBalance: xdr.lookup(\"Int64\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   enum InflationResultCode\n  //   {\n  //       // codes considered as \"success\" for the operation\n  //       INFLATION_SUCCESS = 0,\n  //       // codes considered as \"failure\" for the operation\n  //       INFLATION_NOT_TIME = -1\n  //   };\n  //\n  // ===========================================================================\n  xdr[\"enum\"](\"InflationResultCode\", {\n    inflationSuccess: 0,\n    inflationNotTime: -1\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct InflationPayout // or use PaymentResultAtom to limit types?\n  //   {\n  //       AccountID destination;\n  //       int64 amount;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"InflationPayout\", [[\"destination\", xdr.lookup(\"AccountId\")], [\"amount\", xdr.lookup(\"Int64\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   union InflationResult switch (InflationResultCode code)\n  //   {\n  //   case INFLATION_SUCCESS:\n  //       InflationPayout payouts<>;\n  //   case INFLATION_NOT_TIME:\n  //       void;\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"InflationResult\", {\n    switchOn: xdr.lookup(\"InflationResultCode\"),\n    switchName: \"code\",\n    switches: [[\"inflationSuccess\", \"payouts\"], [\"inflationNotTime\", xdr[\"void\"]()]],\n    arms: {\n      payouts: xdr.varArray(xdr.lookup(\"InflationPayout\"), 2147483647)\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   enum ManageDataResultCode\n  //   {\n  //       // codes considered as \"success\" for the operation\n  //       MANAGE_DATA_SUCCESS = 0,\n  //       // codes considered as \"failure\" for the operation\n  //       MANAGE_DATA_NOT_SUPPORTED_YET =\n  //           -1, // The network hasn't moved to this protocol change yet\n  //       MANAGE_DATA_NAME_NOT_FOUND =\n  //           -2, // Trying to remove a Data Entry that isn't there\n  //       MANAGE_DATA_LOW_RESERVE = -3, // not enough funds to create a new Data Entry\n  //       MANAGE_DATA_INVALID_NAME = -4 // Name not a valid string\n  //   };\n  //\n  // ===========================================================================\n  xdr[\"enum\"](\"ManageDataResultCode\", {\n    manageDataSuccess: 0,\n    manageDataNotSupportedYet: -1,\n    manageDataNameNotFound: -2,\n    manageDataLowReserve: -3,\n    manageDataInvalidName: -4\n  });\n\n  // === xdr source ============================================================\n  //\n  //   union ManageDataResult switch (ManageDataResultCode code)\n  //   {\n  //   case MANAGE_DATA_SUCCESS:\n  //       void;\n  //   case MANAGE_DATA_NOT_SUPPORTED_YET:\n  //   case MANAGE_DATA_NAME_NOT_FOUND:\n  //   case MANAGE_DATA_LOW_RESERVE:\n  //   case MANAGE_DATA_INVALID_NAME:\n  //       void;\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"ManageDataResult\", {\n    switchOn: xdr.lookup(\"ManageDataResultCode\"),\n    switchName: \"code\",\n    switches: [[\"manageDataSuccess\", xdr[\"void\"]()], [\"manageDataNotSupportedYet\", xdr[\"void\"]()], [\"manageDataNameNotFound\", xdr[\"void\"]()], [\"manageDataLowReserve\", xdr[\"void\"]()], [\"manageDataInvalidName\", xdr[\"void\"]()]],\n    arms: {}\n  });\n\n  // === xdr source ============================================================\n  //\n  //   enum BumpSequenceResultCode\n  //   {\n  //       // codes considered as \"success\" for the operation\n  //       BUMP_SEQUENCE_SUCCESS = 0,\n  //       // codes considered as \"failure\" for the operation\n  //       BUMP_SEQUENCE_BAD_SEQ = -1 // `bumpTo` is not within bounds\n  //   };\n  //\n  // ===========================================================================\n  xdr[\"enum\"](\"BumpSequenceResultCode\", {\n    bumpSequenceSuccess: 0,\n    bumpSequenceBadSeq: -1\n  });\n\n  // === xdr source ============================================================\n  //\n  //   union BumpSequenceResult switch (BumpSequenceResultCode code)\n  //   {\n  //   case BUMP_SEQUENCE_SUCCESS:\n  //       void;\n  //   case BUMP_SEQUENCE_BAD_SEQ:\n  //       void;\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"BumpSequenceResult\", {\n    switchOn: xdr.lookup(\"BumpSequenceResultCode\"),\n    switchName: \"code\",\n    switches: [[\"bumpSequenceSuccess\", xdr[\"void\"]()], [\"bumpSequenceBadSeq\", xdr[\"void\"]()]],\n    arms: {}\n  });\n\n  // === xdr source ============================================================\n  //\n  //   enum CreateClaimableBalanceResultCode\n  //   {\n  //       CREATE_CLAIMABLE_BALANCE_SUCCESS = 0,\n  //       CREATE_CLAIMABLE_BALANCE_MALFORMED = -1,\n  //       CREATE_CLAIMABLE_BALANCE_LOW_RESERVE = -2,\n  //       CREATE_CLAIMABLE_BALANCE_NO_TRUST = -3,\n  //       CREATE_CLAIMABLE_BALANCE_NOT_AUTHORIZED = -4,\n  //       CREATE_CLAIMABLE_BALANCE_UNDERFUNDED = -5\n  //   };\n  //\n  // ===========================================================================\n  xdr[\"enum\"](\"CreateClaimableBalanceResultCode\", {\n    createClaimableBalanceSuccess: 0,\n    createClaimableBalanceMalformed: -1,\n    createClaimableBalanceLowReserve: -2,\n    createClaimableBalanceNoTrust: -3,\n    createClaimableBalanceNotAuthorized: -4,\n    createClaimableBalanceUnderfunded: -5\n  });\n\n  // === xdr source ============================================================\n  //\n  //   union CreateClaimableBalanceResult switch (\n  //       CreateClaimableBalanceResultCode code)\n  //   {\n  //   case CREATE_CLAIMABLE_BALANCE_SUCCESS:\n  //       ClaimableBalanceID balanceID;\n  //   case CREATE_CLAIMABLE_BALANCE_MALFORMED:\n  //   case CREATE_CLAIMABLE_BALANCE_LOW_RESERVE:\n  //   case CREATE_CLAIMABLE_BALANCE_NO_TRUST:\n  //   case CREATE_CLAIMABLE_BALANCE_NOT_AUTHORIZED:\n  //   case CREATE_CLAIMABLE_BALANCE_UNDERFUNDED:\n  //       void;\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"CreateClaimableBalanceResult\", {\n    switchOn: xdr.lookup(\"CreateClaimableBalanceResultCode\"),\n    switchName: \"code\",\n    switches: [[\"createClaimableBalanceSuccess\", \"balanceId\"], [\"createClaimableBalanceMalformed\", xdr[\"void\"]()], [\"createClaimableBalanceLowReserve\", xdr[\"void\"]()], [\"createClaimableBalanceNoTrust\", xdr[\"void\"]()], [\"createClaimableBalanceNotAuthorized\", xdr[\"void\"]()], [\"createClaimableBalanceUnderfunded\", xdr[\"void\"]()]],\n    arms: {\n      balanceId: xdr.lookup(\"ClaimableBalanceId\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   enum ClaimClaimableBalanceResultCode\n  //   {\n  //       CLAIM_CLAIMABLE_BALANCE_SUCCESS = 0,\n  //       CLAIM_CLAIMABLE_BALANCE_DOES_NOT_EXIST = -1,\n  //       CLAIM_CLAIMABLE_BALANCE_CANNOT_CLAIM = -2,\n  //       CLAIM_CLAIMABLE_BALANCE_LINE_FULL = -3,\n  //       CLAIM_CLAIMABLE_BALANCE_NO_TRUST = -4,\n  //       CLAIM_CLAIMABLE_BALANCE_NOT_AUTHORIZED = -5\n  //   };\n  //\n  // ===========================================================================\n  xdr[\"enum\"](\"ClaimClaimableBalanceResultCode\", {\n    claimClaimableBalanceSuccess: 0,\n    claimClaimableBalanceDoesNotExist: -1,\n    claimClaimableBalanceCannotClaim: -2,\n    claimClaimableBalanceLineFull: -3,\n    claimClaimableBalanceNoTrust: -4,\n    claimClaimableBalanceNotAuthorized: -5\n  });\n\n  // === xdr source ============================================================\n  //\n  //   union ClaimClaimableBalanceResult switch (ClaimClaimableBalanceResultCode code)\n  //   {\n  //   case CLAIM_CLAIMABLE_BALANCE_SUCCESS:\n  //       void;\n  //   case CLAIM_CLAIMABLE_BALANCE_DOES_NOT_EXIST:\n  //   case CLAIM_CLAIMABLE_BALANCE_CANNOT_CLAIM:\n  //   case CLAIM_CLAIMABLE_BALANCE_LINE_FULL:\n  //   case CLAIM_CLAIMABLE_BALANCE_NO_TRUST:\n  //   case CLAIM_CLAIMABLE_BALANCE_NOT_AUTHORIZED:\n  //       void;\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"ClaimClaimableBalanceResult\", {\n    switchOn: xdr.lookup(\"ClaimClaimableBalanceResultCode\"),\n    switchName: \"code\",\n    switches: [[\"claimClaimableBalanceSuccess\", xdr[\"void\"]()], [\"claimClaimableBalanceDoesNotExist\", xdr[\"void\"]()], [\"claimClaimableBalanceCannotClaim\", xdr[\"void\"]()], [\"claimClaimableBalanceLineFull\", xdr[\"void\"]()], [\"claimClaimableBalanceNoTrust\", xdr[\"void\"]()], [\"claimClaimableBalanceNotAuthorized\", xdr[\"void\"]()]],\n    arms: {}\n  });\n\n  // === xdr source ============================================================\n  //\n  //   enum BeginSponsoringFutureReservesResultCode\n  //   {\n  //       // codes considered as \"success\" for the operation\n  //       BEGIN_SPONSORING_FUTURE_RESERVES_SUCCESS = 0,\n  //\n  //       // codes considered as \"failure\" for the operation\n  //       BEGIN_SPONSORING_FUTURE_RESERVES_MALFORMED = -1,\n  //       BEGIN_SPONSORING_FUTURE_RESERVES_ALREADY_SPONSORED = -2,\n  //       BEGIN_SPONSORING_FUTURE_RESERVES_RECURSIVE = -3\n  //   };\n  //\n  // ===========================================================================\n  xdr[\"enum\"](\"BeginSponsoringFutureReservesResultCode\", {\n    beginSponsoringFutureReservesSuccess: 0,\n    beginSponsoringFutureReservesMalformed: -1,\n    beginSponsoringFutureReservesAlreadySponsored: -2,\n    beginSponsoringFutureReservesRecursive: -3\n  });\n\n  // === xdr source ============================================================\n  //\n  //   union BeginSponsoringFutureReservesResult switch (\n  //       BeginSponsoringFutureReservesResultCode code)\n  //   {\n  //   case BEGIN_SPONSORING_FUTURE_RESERVES_SUCCESS:\n  //       void;\n  //   case BEGIN_SPONSORING_FUTURE_RESERVES_MALFORMED:\n  //   case BEGIN_SPONSORING_FUTURE_RESERVES_ALREADY_SPONSORED:\n  //   case BEGIN_SPONSORING_FUTURE_RESERVES_RECURSIVE:\n  //       void;\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"BeginSponsoringFutureReservesResult\", {\n    switchOn: xdr.lookup(\"BeginSponsoringFutureReservesResultCode\"),\n    switchName: \"code\",\n    switches: [[\"beginSponsoringFutureReservesSuccess\", xdr[\"void\"]()], [\"beginSponsoringFutureReservesMalformed\", xdr[\"void\"]()], [\"beginSponsoringFutureReservesAlreadySponsored\", xdr[\"void\"]()], [\"beginSponsoringFutureReservesRecursive\", xdr[\"void\"]()]],\n    arms: {}\n  });\n\n  // === xdr source ============================================================\n  //\n  //   enum EndSponsoringFutureReservesResultCode\n  //   {\n  //       // codes considered as \"success\" for the operation\n  //       END_SPONSORING_FUTURE_RESERVES_SUCCESS = 0,\n  //\n  //       // codes considered as \"failure\" for the operation\n  //       END_SPONSORING_FUTURE_RESERVES_NOT_SPONSORED = -1\n  //   };\n  //\n  // ===========================================================================\n  xdr[\"enum\"](\"EndSponsoringFutureReservesResultCode\", {\n    endSponsoringFutureReservesSuccess: 0,\n    endSponsoringFutureReservesNotSponsored: -1\n  });\n\n  // === xdr source ============================================================\n  //\n  //   union EndSponsoringFutureReservesResult switch (\n  //       EndSponsoringFutureReservesResultCode code)\n  //   {\n  //   case END_SPONSORING_FUTURE_RESERVES_SUCCESS:\n  //       void;\n  //   case END_SPONSORING_FUTURE_RESERVES_NOT_SPONSORED:\n  //       void;\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"EndSponsoringFutureReservesResult\", {\n    switchOn: xdr.lookup(\"EndSponsoringFutureReservesResultCode\"),\n    switchName: \"code\",\n    switches: [[\"endSponsoringFutureReservesSuccess\", xdr[\"void\"]()], [\"endSponsoringFutureReservesNotSponsored\", xdr[\"void\"]()]],\n    arms: {}\n  });\n\n  // === xdr source ============================================================\n  //\n  //   enum RevokeSponsorshipResultCode\n  //   {\n  //       // codes considered as \"success\" for the operation\n  //       REVOKE_SPONSORSHIP_SUCCESS = 0,\n  //\n  //       // codes considered as \"failure\" for the operation\n  //       REVOKE_SPONSORSHIP_DOES_NOT_EXIST = -1,\n  //       REVOKE_SPONSORSHIP_NOT_SPONSOR = -2,\n  //       REVOKE_SPONSORSHIP_LOW_RESERVE = -3,\n  //       REVOKE_SPONSORSHIP_ONLY_TRANSFERABLE = -4,\n  //       REVOKE_SPONSORSHIP_MALFORMED = -5\n  //   };\n  //\n  // ===========================================================================\n  xdr[\"enum\"](\"RevokeSponsorshipResultCode\", {\n    revokeSponsorshipSuccess: 0,\n    revokeSponsorshipDoesNotExist: -1,\n    revokeSponsorshipNotSponsor: -2,\n    revokeSponsorshipLowReserve: -3,\n    revokeSponsorshipOnlyTransferable: -4,\n    revokeSponsorshipMalformed: -5\n  });\n\n  // === xdr source ============================================================\n  //\n  //   union RevokeSponsorshipResult switch (RevokeSponsorshipResultCode code)\n  //   {\n  //   case REVOKE_SPONSORSHIP_SUCCESS:\n  //       void;\n  //   case REVOKE_SPONSORSHIP_DOES_NOT_EXIST:\n  //   case REVOKE_SPONSORSHIP_NOT_SPONSOR:\n  //   case REVOKE_SPONSORSHIP_LOW_RESERVE:\n  //   case REVOKE_SPONSORSHIP_ONLY_TRANSFERABLE:\n  //   case REVOKE_SPONSORSHIP_MALFORMED:\n  //       void;\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"RevokeSponsorshipResult\", {\n    switchOn: xdr.lookup(\"RevokeSponsorshipResultCode\"),\n    switchName: \"code\",\n    switches: [[\"revokeSponsorshipSuccess\", xdr[\"void\"]()], [\"revokeSponsorshipDoesNotExist\", xdr[\"void\"]()], [\"revokeSponsorshipNotSponsor\", xdr[\"void\"]()], [\"revokeSponsorshipLowReserve\", xdr[\"void\"]()], [\"revokeSponsorshipOnlyTransferable\", xdr[\"void\"]()], [\"revokeSponsorshipMalformed\", xdr[\"void\"]()]],\n    arms: {}\n  });\n\n  // === xdr source ============================================================\n  //\n  //   enum ClawbackResultCode\n  //   {\n  //       // codes considered as \"success\" for the operation\n  //       CLAWBACK_SUCCESS = 0,\n  //\n  //       // codes considered as \"failure\" for the operation\n  //       CLAWBACK_MALFORMED = -1,\n  //       CLAWBACK_NOT_CLAWBACK_ENABLED = -2,\n  //       CLAWBACK_NO_TRUST = -3,\n  //       CLAWBACK_UNDERFUNDED = -4\n  //   };\n  //\n  // ===========================================================================\n  xdr[\"enum\"](\"ClawbackResultCode\", {\n    clawbackSuccess: 0,\n    clawbackMalformed: -1,\n    clawbackNotClawbackEnabled: -2,\n    clawbackNoTrust: -3,\n    clawbackUnderfunded: -4\n  });\n\n  // === xdr source ============================================================\n  //\n  //   union ClawbackResult switch (ClawbackResultCode code)\n  //   {\n  //   case CLAWBACK_SUCCESS:\n  //       void;\n  //   case CLAWBACK_MALFORMED:\n  //   case CLAWBACK_NOT_CLAWBACK_ENABLED:\n  //   case CLAWBACK_NO_TRUST:\n  //   case CLAWBACK_UNDERFUNDED:\n  //       void;\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"ClawbackResult\", {\n    switchOn: xdr.lookup(\"ClawbackResultCode\"),\n    switchName: \"code\",\n    switches: [[\"clawbackSuccess\", xdr[\"void\"]()], [\"clawbackMalformed\", xdr[\"void\"]()], [\"clawbackNotClawbackEnabled\", xdr[\"void\"]()], [\"clawbackNoTrust\", xdr[\"void\"]()], [\"clawbackUnderfunded\", xdr[\"void\"]()]],\n    arms: {}\n  });\n\n  // === xdr source ============================================================\n  //\n  //   enum ClawbackClaimableBalanceResultCode\n  //   {\n  //       // codes considered as \"success\" for the operation\n  //       CLAWBACK_CLAIMABLE_BALANCE_SUCCESS = 0,\n  //\n  //       // codes considered as \"failure\" for the operation\n  //       CLAWBACK_CLAIMABLE_BALANCE_DOES_NOT_EXIST = -1,\n  //       CLAWBACK_CLAIMABLE_BALANCE_NOT_ISSUER = -2,\n  //       CLAWBACK_CLAIMABLE_BALANCE_NOT_CLAWBACK_ENABLED = -3\n  //   };\n  //\n  // ===========================================================================\n  xdr[\"enum\"](\"ClawbackClaimableBalanceResultCode\", {\n    clawbackClaimableBalanceSuccess: 0,\n    clawbackClaimableBalanceDoesNotExist: -1,\n    clawbackClaimableBalanceNotIssuer: -2,\n    clawbackClaimableBalanceNotClawbackEnabled: -3\n  });\n\n  // === xdr source ============================================================\n  //\n  //   union ClawbackClaimableBalanceResult switch (\n  //       ClawbackClaimableBalanceResultCode code)\n  //   {\n  //   case CLAWBACK_CLAIMABLE_BALANCE_SUCCESS:\n  //       void;\n  //   case CLAWBACK_CLAIMABLE_BALANCE_DOES_NOT_EXIST:\n  //   case CLAWBACK_CLAIMABLE_BALANCE_NOT_ISSUER:\n  //   case CLAWBACK_CLAIMABLE_BALANCE_NOT_CLAWBACK_ENABLED:\n  //       void;\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"ClawbackClaimableBalanceResult\", {\n    switchOn: xdr.lookup(\"ClawbackClaimableBalanceResultCode\"),\n    switchName: \"code\",\n    switches: [[\"clawbackClaimableBalanceSuccess\", xdr[\"void\"]()], [\"clawbackClaimableBalanceDoesNotExist\", xdr[\"void\"]()], [\"clawbackClaimableBalanceNotIssuer\", xdr[\"void\"]()], [\"clawbackClaimableBalanceNotClawbackEnabled\", xdr[\"void\"]()]],\n    arms: {}\n  });\n\n  // === xdr source ============================================================\n  //\n  //   enum SetTrustLineFlagsResultCode\n  //   {\n  //       // codes considered as \"success\" for the operation\n  //       SET_TRUST_LINE_FLAGS_SUCCESS = 0,\n  //\n  //       // codes considered as \"failure\" for the operation\n  //       SET_TRUST_LINE_FLAGS_MALFORMED = -1,\n  //       SET_TRUST_LINE_FLAGS_NO_TRUST_LINE = -2,\n  //       SET_TRUST_LINE_FLAGS_CANT_REVOKE = -3,\n  //       SET_TRUST_LINE_FLAGS_INVALID_STATE = -4,\n  //       SET_TRUST_LINE_FLAGS_LOW_RESERVE = -5 // claimable balances can't be created\n  //                                             // on revoke due to low reserves\n  //   };\n  //\n  // ===========================================================================\n  xdr[\"enum\"](\"SetTrustLineFlagsResultCode\", {\n    setTrustLineFlagsSuccess: 0,\n    setTrustLineFlagsMalformed: -1,\n    setTrustLineFlagsNoTrustLine: -2,\n    setTrustLineFlagsCantRevoke: -3,\n    setTrustLineFlagsInvalidState: -4,\n    setTrustLineFlagsLowReserve: -5\n  });\n\n  // === xdr source ============================================================\n  //\n  //   union SetTrustLineFlagsResult switch (SetTrustLineFlagsResultCode code)\n  //   {\n  //   case SET_TRUST_LINE_FLAGS_SUCCESS:\n  //       void;\n  //   case SET_TRUST_LINE_FLAGS_MALFORMED:\n  //   case SET_TRUST_LINE_FLAGS_NO_TRUST_LINE:\n  //   case SET_TRUST_LINE_FLAGS_CANT_REVOKE:\n  //   case SET_TRUST_LINE_FLAGS_INVALID_STATE:\n  //   case SET_TRUST_LINE_FLAGS_LOW_RESERVE:\n  //       void;\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"SetTrustLineFlagsResult\", {\n    switchOn: xdr.lookup(\"SetTrustLineFlagsResultCode\"),\n    switchName: \"code\",\n    switches: [[\"setTrustLineFlagsSuccess\", xdr[\"void\"]()], [\"setTrustLineFlagsMalformed\", xdr[\"void\"]()], [\"setTrustLineFlagsNoTrustLine\", xdr[\"void\"]()], [\"setTrustLineFlagsCantRevoke\", xdr[\"void\"]()], [\"setTrustLineFlagsInvalidState\", xdr[\"void\"]()], [\"setTrustLineFlagsLowReserve\", xdr[\"void\"]()]],\n    arms: {}\n  });\n\n  // === xdr source ============================================================\n  //\n  //   enum LiquidityPoolDepositResultCode\n  //   {\n  //       // codes considered as \"success\" for the operation\n  //       LIQUIDITY_POOL_DEPOSIT_SUCCESS = 0,\n  //\n  //       // codes considered as \"failure\" for the operation\n  //       LIQUIDITY_POOL_DEPOSIT_MALFORMED = -1,      // bad input\n  //       LIQUIDITY_POOL_DEPOSIT_NO_TRUST = -2,       // no trust line for one of the\n  //                                                   // assets\n  //       LIQUIDITY_POOL_DEPOSIT_NOT_AUTHORIZED = -3, // not authorized for one of the\n  //                                                   // assets\n  //       LIQUIDITY_POOL_DEPOSIT_UNDERFUNDED = -4,    // not enough balance for one of\n  //                                                   // the assets\n  //       LIQUIDITY_POOL_DEPOSIT_LINE_FULL = -5,      // pool share trust line doesn't\n  //                                                   // have sufficient limit\n  //       LIQUIDITY_POOL_DEPOSIT_BAD_PRICE = -6,      // deposit price outside bounds\n  //       LIQUIDITY_POOL_DEPOSIT_POOL_FULL = -7       // pool reserves are full\n  //   };\n  //\n  // ===========================================================================\n  xdr[\"enum\"](\"LiquidityPoolDepositResultCode\", {\n    liquidityPoolDepositSuccess: 0,\n    liquidityPoolDepositMalformed: -1,\n    liquidityPoolDepositNoTrust: -2,\n    liquidityPoolDepositNotAuthorized: -3,\n    liquidityPoolDepositUnderfunded: -4,\n    liquidityPoolDepositLineFull: -5,\n    liquidityPoolDepositBadPrice: -6,\n    liquidityPoolDepositPoolFull: -7\n  });\n\n  // === xdr source ============================================================\n  //\n  //   union LiquidityPoolDepositResult switch (LiquidityPoolDepositResultCode code)\n  //   {\n  //   case LIQUIDITY_POOL_DEPOSIT_SUCCESS:\n  //       void;\n  //   case LIQUIDITY_POOL_DEPOSIT_MALFORMED:\n  //   case LIQUIDITY_POOL_DEPOSIT_NO_TRUST:\n  //   case LIQUIDITY_POOL_DEPOSIT_NOT_AUTHORIZED:\n  //   case LIQUIDITY_POOL_DEPOSIT_UNDERFUNDED:\n  //   case LIQUIDITY_POOL_DEPOSIT_LINE_FULL:\n  //   case LIQUIDITY_POOL_DEPOSIT_BAD_PRICE:\n  //   case LIQUIDITY_POOL_DEPOSIT_POOL_FULL:\n  //       void;\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"LiquidityPoolDepositResult\", {\n    switchOn: xdr.lookup(\"LiquidityPoolDepositResultCode\"),\n    switchName: \"code\",\n    switches: [[\"liquidityPoolDepositSuccess\", xdr[\"void\"]()], [\"liquidityPoolDepositMalformed\", xdr[\"void\"]()], [\"liquidityPoolDepositNoTrust\", xdr[\"void\"]()], [\"liquidityPoolDepositNotAuthorized\", xdr[\"void\"]()], [\"liquidityPoolDepositUnderfunded\", xdr[\"void\"]()], [\"liquidityPoolDepositLineFull\", xdr[\"void\"]()], [\"liquidityPoolDepositBadPrice\", xdr[\"void\"]()], [\"liquidityPoolDepositPoolFull\", xdr[\"void\"]()]],\n    arms: {}\n  });\n\n  // === xdr source ============================================================\n  //\n  //   enum LiquidityPoolWithdrawResultCode\n  //   {\n  //       // codes considered as \"success\" for the operation\n  //       LIQUIDITY_POOL_WITHDRAW_SUCCESS = 0,\n  //\n  //       // codes considered as \"failure\" for the operation\n  //       LIQUIDITY_POOL_WITHDRAW_MALFORMED = -1,    // bad input\n  //       LIQUIDITY_POOL_WITHDRAW_NO_TRUST = -2,     // no trust line for one of the\n  //                                                  // assets\n  //       LIQUIDITY_POOL_WITHDRAW_UNDERFUNDED = -3,  // not enough balance of the\n  //                                                  // pool share\n  //       LIQUIDITY_POOL_WITHDRAW_LINE_FULL = -4,    // would go above limit for one\n  //                                                  // of the assets\n  //       LIQUIDITY_POOL_WITHDRAW_UNDER_MINIMUM = -5 // didn't withdraw enough\n  //   };\n  //\n  // ===========================================================================\n  xdr[\"enum\"](\"LiquidityPoolWithdrawResultCode\", {\n    liquidityPoolWithdrawSuccess: 0,\n    liquidityPoolWithdrawMalformed: -1,\n    liquidityPoolWithdrawNoTrust: -2,\n    liquidityPoolWithdrawUnderfunded: -3,\n    liquidityPoolWithdrawLineFull: -4,\n    liquidityPoolWithdrawUnderMinimum: -5\n  });\n\n  // === xdr source ============================================================\n  //\n  //   union LiquidityPoolWithdrawResult switch (LiquidityPoolWithdrawResultCode code)\n  //   {\n  //   case LIQUIDITY_POOL_WITHDRAW_SUCCESS:\n  //       void;\n  //   case LIQUIDITY_POOL_WITHDRAW_MALFORMED:\n  //   case LIQUIDITY_POOL_WITHDRAW_NO_TRUST:\n  //   case LIQUIDITY_POOL_WITHDRAW_UNDERFUNDED:\n  //   case LIQUIDITY_POOL_WITHDRAW_LINE_FULL:\n  //   case LIQUIDITY_POOL_WITHDRAW_UNDER_MINIMUM:\n  //       void;\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"LiquidityPoolWithdrawResult\", {\n    switchOn: xdr.lookup(\"LiquidityPoolWithdrawResultCode\"),\n    switchName: \"code\",\n    switches: [[\"liquidityPoolWithdrawSuccess\", xdr[\"void\"]()], [\"liquidityPoolWithdrawMalformed\", xdr[\"void\"]()], [\"liquidityPoolWithdrawNoTrust\", xdr[\"void\"]()], [\"liquidityPoolWithdrawUnderfunded\", xdr[\"void\"]()], [\"liquidityPoolWithdrawLineFull\", xdr[\"void\"]()], [\"liquidityPoolWithdrawUnderMinimum\", xdr[\"void\"]()]],\n    arms: {}\n  });\n\n  // === xdr source ============================================================\n  //\n  //   enum InvokeHostFunctionResultCode\n  //   {\n  //       // codes considered as \"success\" for the operation\n  //       INVOKE_HOST_FUNCTION_SUCCESS = 0,\n  //\n  //       // codes considered as \"failure\" for the operation\n  //       INVOKE_HOST_FUNCTION_MALFORMED = -1,\n  //       INVOKE_HOST_FUNCTION_TRAPPED = -2,\n  //       INVOKE_HOST_FUNCTION_RESOURCE_LIMIT_EXCEEDED = -3,\n  //       INVOKE_HOST_FUNCTION_ENTRY_ARCHIVED = -4,\n  //       INVOKE_HOST_FUNCTION_INSUFFICIENT_REFUNDABLE_FEE = -5\n  //   };\n  //\n  // ===========================================================================\n  xdr[\"enum\"](\"InvokeHostFunctionResultCode\", {\n    invokeHostFunctionSuccess: 0,\n    invokeHostFunctionMalformed: -1,\n    invokeHostFunctionTrapped: -2,\n    invokeHostFunctionResourceLimitExceeded: -3,\n    invokeHostFunctionEntryArchived: -4,\n    invokeHostFunctionInsufficientRefundableFee: -5\n  });\n\n  // === xdr source ============================================================\n  //\n  //   union InvokeHostFunctionResult switch (InvokeHostFunctionResultCode code)\n  //   {\n  //   case INVOKE_HOST_FUNCTION_SUCCESS:\n  //       Hash success; // sha256(InvokeHostFunctionSuccessPreImage)\n  //   case INVOKE_HOST_FUNCTION_MALFORMED:\n  //   case INVOKE_HOST_FUNCTION_TRAPPED:\n  //   case INVOKE_HOST_FUNCTION_RESOURCE_LIMIT_EXCEEDED:\n  //   case INVOKE_HOST_FUNCTION_ENTRY_ARCHIVED:\n  //   case INVOKE_HOST_FUNCTION_INSUFFICIENT_REFUNDABLE_FEE:\n  //       void;\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"InvokeHostFunctionResult\", {\n    switchOn: xdr.lookup(\"InvokeHostFunctionResultCode\"),\n    switchName: \"code\",\n    switches: [[\"invokeHostFunctionSuccess\", \"success\"], [\"invokeHostFunctionMalformed\", xdr[\"void\"]()], [\"invokeHostFunctionTrapped\", xdr[\"void\"]()], [\"invokeHostFunctionResourceLimitExceeded\", xdr[\"void\"]()], [\"invokeHostFunctionEntryArchived\", xdr[\"void\"]()], [\"invokeHostFunctionInsufficientRefundableFee\", xdr[\"void\"]()]],\n    arms: {\n      success: xdr.lookup(\"Hash\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   enum ExtendFootprintTTLResultCode\n  //   {\n  //       // codes considered as \"success\" for the operation\n  //       EXTEND_FOOTPRINT_TTL_SUCCESS = 0,\n  //\n  //       // codes considered as \"failure\" for the operation\n  //       EXTEND_FOOTPRINT_TTL_MALFORMED = -1,\n  //       EXTEND_FOOTPRINT_TTL_RESOURCE_LIMIT_EXCEEDED = -2,\n  //       EXTEND_FOOTPRINT_TTL_INSUFFICIENT_REFUNDABLE_FEE = -3\n  //   };\n  //\n  // ===========================================================================\n  xdr[\"enum\"](\"ExtendFootprintTtlResultCode\", {\n    extendFootprintTtlSuccess: 0,\n    extendFootprintTtlMalformed: -1,\n    extendFootprintTtlResourceLimitExceeded: -2,\n    extendFootprintTtlInsufficientRefundableFee: -3\n  });\n\n  // === xdr source ============================================================\n  //\n  //   union ExtendFootprintTTLResult switch (ExtendFootprintTTLResultCode code)\n  //   {\n  //   case EXTEND_FOOTPRINT_TTL_SUCCESS:\n  //       void;\n  //   case EXTEND_FOOTPRINT_TTL_MALFORMED:\n  //   case EXTEND_FOOTPRINT_TTL_RESOURCE_LIMIT_EXCEEDED:\n  //   case EXTEND_FOOTPRINT_TTL_INSUFFICIENT_REFUNDABLE_FEE:\n  //       void;\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"ExtendFootprintTtlResult\", {\n    switchOn: xdr.lookup(\"ExtendFootprintTtlResultCode\"),\n    switchName: \"code\",\n    switches: [[\"extendFootprintTtlSuccess\", xdr[\"void\"]()], [\"extendFootprintTtlMalformed\", xdr[\"void\"]()], [\"extendFootprintTtlResourceLimitExceeded\", xdr[\"void\"]()], [\"extendFootprintTtlInsufficientRefundableFee\", xdr[\"void\"]()]],\n    arms: {}\n  });\n\n  // === xdr source ============================================================\n  //\n  //   enum RestoreFootprintResultCode\n  //   {\n  //       // codes considered as \"success\" for the operation\n  //       RESTORE_FOOTPRINT_SUCCESS = 0,\n  //\n  //       // codes considered as \"failure\" for the operation\n  //       RESTORE_FOOTPRINT_MALFORMED = -1,\n  //       RESTORE_FOOTPRINT_RESOURCE_LIMIT_EXCEEDED = -2,\n  //       RESTORE_FOOTPRINT_INSUFFICIENT_REFUNDABLE_FEE = -3\n  //   };\n  //\n  // ===========================================================================\n  xdr[\"enum\"](\"RestoreFootprintResultCode\", {\n    restoreFootprintSuccess: 0,\n    restoreFootprintMalformed: -1,\n    restoreFootprintResourceLimitExceeded: -2,\n    restoreFootprintInsufficientRefundableFee: -3\n  });\n\n  // === xdr source ============================================================\n  //\n  //   union RestoreFootprintResult switch (RestoreFootprintResultCode code)\n  //   {\n  //   case RESTORE_FOOTPRINT_SUCCESS:\n  //       void;\n  //   case RESTORE_FOOTPRINT_MALFORMED:\n  //   case RESTORE_FOOTPRINT_RESOURCE_LIMIT_EXCEEDED:\n  //   case RESTORE_FOOTPRINT_INSUFFICIENT_REFUNDABLE_FEE:\n  //       void;\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"RestoreFootprintResult\", {\n    switchOn: xdr.lookup(\"RestoreFootprintResultCode\"),\n    switchName: \"code\",\n    switches: [[\"restoreFootprintSuccess\", xdr[\"void\"]()], [\"restoreFootprintMalformed\", xdr[\"void\"]()], [\"restoreFootprintResourceLimitExceeded\", xdr[\"void\"]()], [\"restoreFootprintInsufficientRefundableFee\", xdr[\"void\"]()]],\n    arms: {}\n  });\n\n  // === xdr source ============================================================\n  //\n  //   enum OperationResultCode\n  //   {\n  //       opINNER = 0, // inner object result is valid\n  //\n  //       opBAD_AUTH = -1,            // too few valid signatures / wrong network\n  //       opNO_ACCOUNT = -2,          // source account was not found\n  //       opNOT_SUPPORTED = -3,       // operation not supported at this time\n  //       opTOO_MANY_SUBENTRIES = -4, // max number of subentries already reached\n  //       opEXCEEDED_WORK_LIMIT = -5, // operation did too much work\n  //       opTOO_MANY_SPONSORING = -6  // account is sponsoring too many entries\n  //   };\n  //\n  // ===========================================================================\n  xdr[\"enum\"](\"OperationResultCode\", {\n    opInner: 0,\n    opBadAuth: -1,\n    opNoAccount: -2,\n    opNotSupported: -3,\n    opTooManySubentries: -4,\n    opExceededWorkLimit: -5,\n    opTooManySponsoring: -6\n  });\n\n  // === xdr source ============================================================\n  //\n  //   union switch (OperationType type)\n  //       {\n  //       case CREATE_ACCOUNT:\n  //           CreateAccountResult createAccountResult;\n  //       case PAYMENT:\n  //           PaymentResult paymentResult;\n  //       case PATH_PAYMENT_STRICT_RECEIVE:\n  //           PathPaymentStrictReceiveResult pathPaymentStrictReceiveResult;\n  //       case MANAGE_SELL_OFFER:\n  //           ManageSellOfferResult manageSellOfferResult;\n  //       case CREATE_PASSIVE_SELL_OFFER:\n  //           ManageSellOfferResult createPassiveSellOfferResult;\n  //       case SET_OPTIONS:\n  //           SetOptionsResult setOptionsResult;\n  //       case CHANGE_TRUST:\n  //           ChangeTrustResult changeTrustResult;\n  //       case ALLOW_TRUST:\n  //           AllowTrustResult allowTrustResult;\n  //       case ACCOUNT_MERGE:\n  //           AccountMergeResult accountMergeResult;\n  //       case INFLATION:\n  //           InflationResult inflationResult;\n  //       case MANAGE_DATA:\n  //           ManageDataResult manageDataResult;\n  //       case BUMP_SEQUENCE:\n  //           BumpSequenceResult bumpSeqResult;\n  //       case MANAGE_BUY_OFFER:\n  //           ManageBuyOfferResult manageBuyOfferResult;\n  //       case PATH_PAYMENT_STRICT_SEND:\n  //           PathPaymentStrictSendResult pathPaymentStrictSendResult;\n  //       case CREATE_CLAIMABLE_BALANCE:\n  //           CreateClaimableBalanceResult createClaimableBalanceResult;\n  //       case CLAIM_CLAIMABLE_BALANCE:\n  //           ClaimClaimableBalanceResult claimClaimableBalanceResult;\n  //       case BEGIN_SPONSORING_FUTURE_RESERVES:\n  //           BeginSponsoringFutureReservesResult beginSponsoringFutureReservesResult;\n  //       case END_SPONSORING_FUTURE_RESERVES:\n  //           EndSponsoringFutureReservesResult endSponsoringFutureReservesResult;\n  //       case REVOKE_SPONSORSHIP:\n  //           RevokeSponsorshipResult revokeSponsorshipResult;\n  //       case CLAWBACK:\n  //           ClawbackResult clawbackResult;\n  //       case CLAWBACK_CLAIMABLE_BALANCE:\n  //           ClawbackClaimableBalanceResult clawbackClaimableBalanceResult;\n  //       case SET_TRUST_LINE_FLAGS:\n  //           SetTrustLineFlagsResult setTrustLineFlagsResult;\n  //       case LIQUIDITY_POOL_DEPOSIT:\n  //           LiquidityPoolDepositResult liquidityPoolDepositResult;\n  //       case LIQUIDITY_POOL_WITHDRAW:\n  //           LiquidityPoolWithdrawResult liquidityPoolWithdrawResult;\n  //       case INVOKE_HOST_FUNCTION:\n  //           InvokeHostFunctionResult invokeHostFunctionResult;\n  //       case EXTEND_FOOTPRINT_TTL:\n  //           ExtendFootprintTTLResult extendFootprintTTLResult;\n  //       case RESTORE_FOOTPRINT:\n  //           RestoreFootprintResult restoreFootprintResult;\n  //       }\n  //\n  // ===========================================================================\n  xdr.union(\"OperationResultTr\", {\n    switchOn: xdr.lookup(\"OperationType\"),\n    switchName: \"type\",\n    switches: [[\"createAccount\", \"createAccountResult\"], [\"payment\", \"paymentResult\"], [\"pathPaymentStrictReceive\", \"pathPaymentStrictReceiveResult\"], [\"manageSellOffer\", \"manageSellOfferResult\"], [\"createPassiveSellOffer\", \"createPassiveSellOfferResult\"], [\"setOptions\", \"setOptionsResult\"], [\"changeTrust\", \"changeTrustResult\"], [\"allowTrust\", \"allowTrustResult\"], [\"accountMerge\", \"accountMergeResult\"], [\"inflation\", \"inflationResult\"], [\"manageData\", \"manageDataResult\"], [\"bumpSequence\", \"bumpSeqResult\"], [\"manageBuyOffer\", \"manageBuyOfferResult\"], [\"pathPaymentStrictSend\", \"pathPaymentStrictSendResult\"], [\"createClaimableBalance\", \"createClaimableBalanceResult\"], [\"claimClaimableBalance\", \"claimClaimableBalanceResult\"], [\"beginSponsoringFutureReserves\", \"beginSponsoringFutureReservesResult\"], [\"endSponsoringFutureReserves\", \"endSponsoringFutureReservesResult\"], [\"revokeSponsorship\", \"revokeSponsorshipResult\"], [\"clawback\", \"clawbackResult\"], [\"clawbackClaimableBalance\", \"clawbackClaimableBalanceResult\"], [\"setTrustLineFlags\", \"setTrustLineFlagsResult\"], [\"liquidityPoolDeposit\", \"liquidityPoolDepositResult\"], [\"liquidityPoolWithdraw\", \"liquidityPoolWithdrawResult\"], [\"invokeHostFunction\", \"invokeHostFunctionResult\"], [\"extendFootprintTtl\", \"extendFootprintTtlResult\"], [\"restoreFootprint\", \"restoreFootprintResult\"]],\n    arms: {\n      createAccountResult: xdr.lookup(\"CreateAccountResult\"),\n      paymentResult: xdr.lookup(\"PaymentResult\"),\n      pathPaymentStrictReceiveResult: xdr.lookup(\"PathPaymentStrictReceiveResult\"),\n      manageSellOfferResult: xdr.lookup(\"ManageSellOfferResult\"),\n      createPassiveSellOfferResult: xdr.lookup(\"ManageSellOfferResult\"),\n      setOptionsResult: xdr.lookup(\"SetOptionsResult\"),\n      changeTrustResult: xdr.lookup(\"ChangeTrustResult\"),\n      allowTrustResult: xdr.lookup(\"AllowTrustResult\"),\n      accountMergeResult: xdr.lookup(\"AccountMergeResult\"),\n      inflationResult: xdr.lookup(\"InflationResult\"),\n      manageDataResult: xdr.lookup(\"ManageDataResult\"),\n      bumpSeqResult: xdr.lookup(\"BumpSequenceResult\"),\n      manageBuyOfferResult: xdr.lookup(\"ManageBuyOfferResult\"),\n      pathPaymentStrictSendResult: xdr.lookup(\"PathPaymentStrictSendResult\"),\n      createClaimableBalanceResult: xdr.lookup(\"CreateClaimableBalanceResult\"),\n      claimClaimableBalanceResult: xdr.lookup(\"ClaimClaimableBalanceResult\"),\n      beginSponsoringFutureReservesResult: xdr.lookup(\"BeginSponsoringFutureReservesResult\"),\n      endSponsoringFutureReservesResult: xdr.lookup(\"EndSponsoringFutureReservesResult\"),\n      revokeSponsorshipResult: xdr.lookup(\"RevokeSponsorshipResult\"),\n      clawbackResult: xdr.lookup(\"ClawbackResult\"),\n      clawbackClaimableBalanceResult: xdr.lookup(\"ClawbackClaimableBalanceResult\"),\n      setTrustLineFlagsResult: xdr.lookup(\"SetTrustLineFlagsResult\"),\n      liquidityPoolDepositResult: xdr.lookup(\"LiquidityPoolDepositResult\"),\n      liquidityPoolWithdrawResult: xdr.lookup(\"LiquidityPoolWithdrawResult\"),\n      invokeHostFunctionResult: xdr.lookup(\"InvokeHostFunctionResult\"),\n      extendFootprintTtlResult: xdr.lookup(\"ExtendFootprintTtlResult\"),\n      restoreFootprintResult: xdr.lookup(\"RestoreFootprintResult\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   union OperationResult switch (OperationResultCode code)\n  //   {\n  //   case opINNER:\n  //       union switch (OperationType type)\n  //       {\n  //       case CREATE_ACCOUNT:\n  //           CreateAccountResult createAccountResult;\n  //       case PAYMENT:\n  //           PaymentResult paymentResult;\n  //       case PATH_PAYMENT_STRICT_RECEIVE:\n  //           PathPaymentStrictReceiveResult pathPaymentStrictReceiveResult;\n  //       case MANAGE_SELL_OFFER:\n  //           ManageSellOfferResult manageSellOfferResult;\n  //       case CREATE_PASSIVE_SELL_OFFER:\n  //           ManageSellOfferResult createPassiveSellOfferResult;\n  //       case SET_OPTIONS:\n  //           SetOptionsResult setOptionsResult;\n  //       case CHANGE_TRUST:\n  //           ChangeTrustResult changeTrustResult;\n  //       case ALLOW_TRUST:\n  //           AllowTrustResult allowTrustResult;\n  //       case ACCOUNT_MERGE:\n  //           AccountMergeResult accountMergeResult;\n  //       case INFLATION:\n  //           InflationResult inflationResult;\n  //       case MANAGE_DATA:\n  //           ManageDataResult manageDataResult;\n  //       case BUMP_SEQUENCE:\n  //           BumpSequenceResult bumpSeqResult;\n  //       case MANAGE_BUY_OFFER:\n  //           ManageBuyOfferResult manageBuyOfferResult;\n  //       case PATH_PAYMENT_STRICT_SEND:\n  //           PathPaymentStrictSendResult pathPaymentStrictSendResult;\n  //       case CREATE_CLAIMABLE_BALANCE:\n  //           CreateClaimableBalanceResult createClaimableBalanceResult;\n  //       case CLAIM_CLAIMABLE_BALANCE:\n  //           ClaimClaimableBalanceResult claimClaimableBalanceResult;\n  //       case BEGIN_SPONSORING_FUTURE_RESERVES:\n  //           BeginSponsoringFutureReservesResult beginSponsoringFutureReservesResult;\n  //       case END_SPONSORING_FUTURE_RESERVES:\n  //           EndSponsoringFutureReservesResult endSponsoringFutureReservesResult;\n  //       case REVOKE_SPONSORSHIP:\n  //           RevokeSponsorshipResult revokeSponsorshipResult;\n  //       case CLAWBACK:\n  //           ClawbackResult clawbackResult;\n  //       case CLAWBACK_CLAIMABLE_BALANCE:\n  //           ClawbackClaimableBalanceResult clawbackClaimableBalanceResult;\n  //       case SET_TRUST_LINE_FLAGS:\n  //           SetTrustLineFlagsResult setTrustLineFlagsResult;\n  //       case LIQUIDITY_POOL_DEPOSIT:\n  //           LiquidityPoolDepositResult liquidityPoolDepositResult;\n  //       case LIQUIDITY_POOL_WITHDRAW:\n  //           LiquidityPoolWithdrawResult liquidityPoolWithdrawResult;\n  //       case INVOKE_HOST_FUNCTION:\n  //           InvokeHostFunctionResult invokeHostFunctionResult;\n  //       case EXTEND_FOOTPRINT_TTL:\n  //           ExtendFootprintTTLResult extendFootprintTTLResult;\n  //       case RESTORE_FOOTPRINT:\n  //           RestoreFootprintResult restoreFootprintResult;\n  //       }\n  //       tr;\n  //   case opBAD_AUTH:\n  //   case opNO_ACCOUNT:\n  //   case opNOT_SUPPORTED:\n  //   case opTOO_MANY_SUBENTRIES:\n  //   case opEXCEEDED_WORK_LIMIT:\n  //   case opTOO_MANY_SPONSORING:\n  //       void;\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"OperationResult\", {\n    switchOn: xdr.lookup(\"OperationResultCode\"),\n    switchName: \"code\",\n    switches: [[\"opInner\", \"tr\"], [\"opBadAuth\", xdr[\"void\"]()], [\"opNoAccount\", xdr[\"void\"]()], [\"opNotSupported\", xdr[\"void\"]()], [\"opTooManySubentries\", xdr[\"void\"]()], [\"opExceededWorkLimit\", xdr[\"void\"]()], [\"opTooManySponsoring\", xdr[\"void\"]()]],\n    arms: {\n      tr: xdr.lookup(\"OperationResultTr\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   enum TransactionResultCode\n  //   {\n  //       txFEE_BUMP_INNER_SUCCESS = 1, // fee bump inner transaction succeeded\n  //       txSUCCESS = 0,                // all operations succeeded\n  //\n  //       txFAILED = -1, // one of the operations failed (none were applied)\n  //\n  //       txTOO_EARLY = -2,         // ledger closeTime before minTime\n  //       txTOO_LATE = -3,          // ledger closeTime after maxTime\n  //       txMISSING_OPERATION = -4, // no operation was specified\n  //       txBAD_SEQ = -5,           // sequence number does not match source account\n  //\n  //       txBAD_AUTH = -6,             // too few valid signatures / wrong network\n  //       txINSUFFICIENT_BALANCE = -7, // fee would bring account below reserve\n  //       txNO_ACCOUNT = -8,           // source account not found\n  //       txINSUFFICIENT_FEE = -9,     // fee is too small\n  //       txBAD_AUTH_EXTRA = -10,      // unused signatures attached to transaction\n  //       txINTERNAL_ERROR = -11,      // an unknown error occurred\n  //\n  //       txNOT_SUPPORTED = -12,          // transaction type not supported\n  //       txFEE_BUMP_INNER_FAILED = -13,  // fee bump inner transaction failed\n  //       txBAD_SPONSORSHIP = -14,        // sponsorship not confirmed\n  //       txBAD_MIN_SEQ_AGE_OR_GAP = -15, // minSeqAge or minSeqLedgerGap conditions not met\n  //       txMALFORMED = -16,              // precondition is invalid\n  //       txSOROBAN_INVALID = -17         // soroban-specific preconditions were not met\n  //   };\n  //\n  // ===========================================================================\n  xdr[\"enum\"](\"TransactionResultCode\", {\n    txFeeBumpInnerSuccess: 1,\n    txSuccess: 0,\n    txFailed: -1,\n    txTooEarly: -2,\n    txTooLate: -3,\n    txMissingOperation: -4,\n    txBadSeq: -5,\n    txBadAuth: -6,\n    txInsufficientBalance: -7,\n    txNoAccount: -8,\n    txInsufficientFee: -9,\n    txBadAuthExtra: -10,\n    txInternalError: -11,\n    txNotSupported: -12,\n    txFeeBumpInnerFailed: -13,\n    txBadSponsorship: -14,\n    txBadMinSeqAgeOrGap: -15,\n    txMalformed: -16,\n    txSorobanInvalid: -17\n  });\n\n  // === xdr source ============================================================\n  //\n  //   union switch (TransactionResultCode code)\n  //       {\n  //       // txFEE_BUMP_INNER_SUCCESS is not included\n  //       case txSUCCESS:\n  //       case txFAILED:\n  //           OperationResult results<>;\n  //       case txTOO_EARLY:\n  //       case txTOO_LATE:\n  //       case txMISSING_OPERATION:\n  //       case txBAD_SEQ:\n  //       case txBAD_AUTH:\n  //       case txINSUFFICIENT_BALANCE:\n  //       case txNO_ACCOUNT:\n  //       case txINSUFFICIENT_FEE:\n  //       case txBAD_AUTH_EXTRA:\n  //       case txINTERNAL_ERROR:\n  //       case txNOT_SUPPORTED:\n  //       // txFEE_BUMP_INNER_FAILED is not included\n  //       case txBAD_SPONSORSHIP:\n  //       case txBAD_MIN_SEQ_AGE_OR_GAP:\n  //       case txMALFORMED:\n  //       case txSOROBAN_INVALID:\n  //           void;\n  //       }\n  //\n  // ===========================================================================\n  xdr.union(\"InnerTransactionResultResult\", {\n    switchOn: xdr.lookup(\"TransactionResultCode\"),\n    switchName: \"code\",\n    switches: [[\"txSuccess\", \"results\"], [\"txFailed\", \"results\"], [\"txTooEarly\", xdr[\"void\"]()], [\"txTooLate\", xdr[\"void\"]()], [\"txMissingOperation\", xdr[\"void\"]()], [\"txBadSeq\", xdr[\"void\"]()], [\"txBadAuth\", xdr[\"void\"]()], [\"txInsufficientBalance\", xdr[\"void\"]()], [\"txNoAccount\", xdr[\"void\"]()], [\"txInsufficientFee\", xdr[\"void\"]()], [\"txBadAuthExtra\", xdr[\"void\"]()], [\"txInternalError\", xdr[\"void\"]()], [\"txNotSupported\", xdr[\"void\"]()], [\"txBadSponsorship\", xdr[\"void\"]()], [\"txBadMinSeqAgeOrGap\", xdr[\"void\"]()], [\"txMalformed\", xdr[\"void\"]()], [\"txSorobanInvalid\", xdr[\"void\"]()]],\n    arms: {\n      results: xdr.varArray(xdr.lookup(\"OperationResult\"), 2147483647)\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   union switch (int v)\n  //       {\n  //       case 0:\n  //           void;\n  //       }\n  //\n  // ===========================================================================\n  xdr.union(\"InnerTransactionResultExt\", {\n    switchOn: xdr[\"int\"](),\n    switchName: \"v\",\n    switches: [[0, xdr[\"void\"]()]],\n    arms: {}\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct InnerTransactionResult\n  //   {\n  //       // Always 0. Here for binary compatibility.\n  //       int64 feeCharged;\n  //\n  //       union switch (TransactionResultCode code)\n  //       {\n  //       // txFEE_BUMP_INNER_SUCCESS is not included\n  //       case txSUCCESS:\n  //       case txFAILED:\n  //           OperationResult results<>;\n  //       case txTOO_EARLY:\n  //       case txTOO_LATE:\n  //       case txMISSING_OPERATION:\n  //       case txBAD_SEQ:\n  //       case txBAD_AUTH:\n  //       case txINSUFFICIENT_BALANCE:\n  //       case txNO_ACCOUNT:\n  //       case txINSUFFICIENT_FEE:\n  //       case txBAD_AUTH_EXTRA:\n  //       case txINTERNAL_ERROR:\n  //       case txNOT_SUPPORTED:\n  //       // txFEE_BUMP_INNER_FAILED is not included\n  //       case txBAD_SPONSORSHIP:\n  //       case txBAD_MIN_SEQ_AGE_OR_GAP:\n  //       case txMALFORMED:\n  //       case txSOROBAN_INVALID:\n  //           void;\n  //       }\n  //       result;\n  //\n  //       // reserved for future use\n  //       union switch (int v)\n  //       {\n  //       case 0:\n  //           void;\n  //       }\n  //       ext;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"InnerTransactionResult\", [[\"feeCharged\", xdr.lookup(\"Int64\")], [\"result\", xdr.lookup(\"InnerTransactionResultResult\")], [\"ext\", xdr.lookup(\"InnerTransactionResultExt\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct InnerTransactionResultPair\n  //   {\n  //       Hash transactionHash;          // hash of the inner transaction\n  //       InnerTransactionResult result; // result for the inner transaction\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"InnerTransactionResultPair\", [[\"transactionHash\", xdr.lookup(\"Hash\")], [\"result\", xdr.lookup(\"InnerTransactionResult\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   union switch (TransactionResultCode code)\n  //       {\n  //       case txFEE_BUMP_INNER_SUCCESS:\n  //       case txFEE_BUMP_INNER_FAILED:\n  //           InnerTransactionResultPair innerResultPair;\n  //       case txSUCCESS:\n  //       case txFAILED:\n  //           OperationResult results<>;\n  //       case txTOO_EARLY:\n  //       case txTOO_LATE:\n  //       case txMISSING_OPERATION:\n  //       case txBAD_SEQ:\n  //       case txBAD_AUTH:\n  //       case txINSUFFICIENT_BALANCE:\n  //       case txNO_ACCOUNT:\n  //       case txINSUFFICIENT_FEE:\n  //       case txBAD_AUTH_EXTRA:\n  //       case txINTERNAL_ERROR:\n  //       case txNOT_SUPPORTED:\n  //       // case txFEE_BUMP_INNER_FAILED: handled above\n  //       case txBAD_SPONSORSHIP:\n  //       case txBAD_MIN_SEQ_AGE_OR_GAP:\n  //       case txMALFORMED:\n  //       case txSOROBAN_INVALID:\n  //           void;\n  //       }\n  //\n  // ===========================================================================\n  xdr.union(\"TransactionResultResult\", {\n    switchOn: xdr.lookup(\"TransactionResultCode\"),\n    switchName: \"code\",\n    switches: [[\"txFeeBumpInnerSuccess\", \"innerResultPair\"], [\"txFeeBumpInnerFailed\", \"innerResultPair\"], [\"txSuccess\", \"results\"], [\"txFailed\", \"results\"], [\"txTooEarly\", xdr[\"void\"]()], [\"txTooLate\", xdr[\"void\"]()], [\"txMissingOperation\", xdr[\"void\"]()], [\"txBadSeq\", xdr[\"void\"]()], [\"txBadAuth\", xdr[\"void\"]()], [\"txInsufficientBalance\", xdr[\"void\"]()], [\"txNoAccount\", xdr[\"void\"]()], [\"txInsufficientFee\", xdr[\"void\"]()], [\"txBadAuthExtra\", xdr[\"void\"]()], [\"txInternalError\", xdr[\"void\"]()], [\"txNotSupported\", xdr[\"void\"]()], [\"txBadSponsorship\", xdr[\"void\"]()], [\"txBadMinSeqAgeOrGap\", xdr[\"void\"]()], [\"txMalformed\", xdr[\"void\"]()], [\"txSorobanInvalid\", xdr[\"void\"]()]],\n    arms: {\n      innerResultPair: xdr.lookup(\"InnerTransactionResultPair\"),\n      results: xdr.varArray(xdr.lookup(\"OperationResult\"), 2147483647)\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   union switch (int v)\n  //       {\n  //       case 0:\n  //           void;\n  //       }\n  //\n  // ===========================================================================\n  xdr.union(\"TransactionResultExt\", {\n    switchOn: xdr[\"int\"](),\n    switchName: \"v\",\n    switches: [[0, xdr[\"void\"]()]],\n    arms: {}\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct TransactionResult\n  //   {\n  //       int64 feeCharged; // actual fee charged for the transaction\n  //\n  //       union switch (TransactionResultCode code)\n  //       {\n  //       case txFEE_BUMP_INNER_SUCCESS:\n  //       case txFEE_BUMP_INNER_FAILED:\n  //           InnerTransactionResultPair innerResultPair;\n  //       case txSUCCESS:\n  //       case txFAILED:\n  //           OperationResult results<>;\n  //       case txTOO_EARLY:\n  //       case txTOO_LATE:\n  //       case txMISSING_OPERATION:\n  //       case txBAD_SEQ:\n  //       case txBAD_AUTH:\n  //       case txINSUFFICIENT_BALANCE:\n  //       case txNO_ACCOUNT:\n  //       case txINSUFFICIENT_FEE:\n  //       case txBAD_AUTH_EXTRA:\n  //       case txINTERNAL_ERROR:\n  //       case txNOT_SUPPORTED:\n  //       // case txFEE_BUMP_INNER_FAILED: handled above\n  //       case txBAD_SPONSORSHIP:\n  //       case txBAD_MIN_SEQ_AGE_OR_GAP:\n  //       case txMALFORMED:\n  //       case txSOROBAN_INVALID:\n  //           void;\n  //       }\n  //       result;\n  //\n  //       // reserved for future use\n  //       union switch (int v)\n  //       {\n  //       case 0:\n  //           void;\n  //       }\n  //       ext;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"TransactionResult\", [[\"feeCharged\", xdr.lookup(\"Int64\")], [\"result\", xdr.lookup(\"TransactionResultResult\")], [\"ext\", xdr.lookup(\"TransactionResultExt\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   typedef opaque Hash[32];\n  //\n  // ===========================================================================\n  xdr.typedef(\"Hash\", xdr.opaque(32));\n\n  // === xdr source ============================================================\n  //\n  //   typedef opaque uint256[32];\n  //\n  // ===========================================================================\n  xdr.typedef(\"Uint256\", xdr.opaque(32));\n\n  // === xdr source ============================================================\n  //\n  //   typedef unsigned int uint32;\n  //\n  // ===========================================================================\n  xdr.typedef(\"Uint32\", xdr.uint());\n\n  // === xdr source ============================================================\n  //\n  //   typedef int int32;\n  //\n  // ===========================================================================\n  xdr.typedef(\"Int32\", xdr[\"int\"]());\n\n  // === xdr source ============================================================\n  //\n  //   typedef unsigned hyper uint64;\n  //\n  // ===========================================================================\n  xdr.typedef(\"Uint64\", xdr.uhyper());\n\n  // === xdr source ============================================================\n  //\n  //   typedef hyper int64;\n  //\n  // ===========================================================================\n  xdr.typedef(\"Int64\", xdr.hyper());\n\n  // === xdr source ============================================================\n  //\n  //   typedef uint64 TimePoint;\n  //\n  // ===========================================================================\n  xdr.typedef(\"TimePoint\", xdr.lookup(\"Uint64\"));\n\n  // === xdr source ============================================================\n  //\n  //   typedef uint64 Duration;\n  //\n  // ===========================================================================\n  xdr.typedef(\"Duration\", xdr.lookup(\"Uint64\"));\n\n  // === xdr source ============================================================\n  //\n  //   union ExtensionPoint switch (int v)\n  //   {\n  //   case 0:\n  //       void;\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"ExtensionPoint\", {\n    switchOn: xdr[\"int\"](),\n    switchName: \"v\",\n    switches: [[0, xdr[\"void\"]()]],\n    arms: {}\n  });\n\n  // === xdr source ============================================================\n  //\n  //   enum CryptoKeyType\n  //   {\n  //       KEY_TYPE_ED25519 = 0,\n  //       KEY_TYPE_PRE_AUTH_TX = 1,\n  //       KEY_TYPE_HASH_X = 2,\n  //       KEY_TYPE_ED25519_SIGNED_PAYLOAD = 3,\n  //       // MUXED enum values for supported type are derived from the enum values\n  //       // above by ORing them with 0x100\n  //       KEY_TYPE_MUXED_ED25519 = 0x100\n  //   };\n  //\n  // ===========================================================================\n  xdr[\"enum\"](\"CryptoKeyType\", {\n    keyTypeEd25519: 0,\n    keyTypePreAuthTx: 1,\n    keyTypeHashX: 2,\n    keyTypeEd25519SignedPayload: 3,\n    keyTypeMuxedEd25519: 256\n  });\n\n  // === xdr source ============================================================\n  //\n  //   enum PublicKeyType\n  //   {\n  //       PUBLIC_KEY_TYPE_ED25519 = KEY_TYPE_ED25519\n  //   };\n  //\n  // ===========================================================================\n  xdr[\"enum\"](\"PublicKeyType\", {\n    publicKeyTypeEd25519: 0\n  });\n\n  // === xdr source ============================================================\n  //\n  //   enum SignerKeyType\n  //   {\n  //       SIGNER_KEY_TYPE_ED25519 = KEY_TYPE_ED25519,\n  //       SIGNER_KEY_TYPE_PRE_AUTH_TX = KEY_TYPE_PRE_AUTH_TX,\n  //       SIGNER_KEY_TYPE_HASH_X = KEY_TYPE_HASH_X,\n  //       SIGNER_KEY_TYPE_ED25519_SIGNED_PAYLOAD = KEY_TYPE_ED25519_SIGNED_PAYLOAD\n  //   };\n  //\n  // ===========================================================================\n  xdr[\"enum\"](\"SignerKeyType\", {\n    signerKeyTypeEd25519: 0,\n    signerKeyTypePreAuthTx: 1,\n    signerKeyTypeHashX: 2,\n    signerKeyTypeEd25519SignedPayload: 3\n  });\n\n  // === xdr source ============================================================\n  //\n  //   union PublicKey switch (PublicKeyType type)\n  //   {\n  //   case PUBLIC_KEY_TYPE_ED25519:\n  //       uint256 ed25519;\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"PublicKey\", {\n    switchOn: xdr.lookup(\"PublicKeyType\"),\n    switchName: \"type\",\n    switches: [[\"publicKeyTypeEd25519\", \"ed25519\"]],\n    arms: {\n      ed25519: xdr.lookup(\"Uint256\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct\n  //       {\n  //           /* Public key that must sign the payload. */\n  //           uint256 ed25519;\n  //           /* Payload to be raw signed by ed25519. */\n  //           opaque payload<64>;\n  //       }\n  //\n  // ===========================================================================\n  xdr.struct(\"SignerKeyEd25519SignedPayload\", [[\"ed25519\", xdr.lookup(\"Uint256\")], [\"payload\", xdr.varOpaque(64)]]);\n\n  // === xdr source ============================================================\n  //\n  //   union SignerKey switch (SignerKeyType type)\n  //   {\n  //   case SIGNER_KEY_TYPE_ED25519:\n  //       uint256 ed25519;\n  //   case SIGNER_KEY_TYPE_PRE_AUTH_TX:\n  //       /* SHA-256 Hash of TransactionSignaturePayload structure */\n  //       uint256 preAuthTx;\n  //   case SIGNER_KEY_TYPE_HASH_X:\n  //       /* Hash of random 256 bit preimage X */\n  //       uint256 hashX;\n  //   case SIGNER_KEY_TYPE_ED25519_SIGNED_PAYLOAD:\n  //       struct\n  //       {\n  //           /* Public key that must sign the payload. */\n  //           uint256 ed25519;\n  //           /* Payload to be raw signed by ed25519. */\n  //           opaque payload<64>;\n  //       } ed25519SignedPayload;\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"SignerKey\", {\n    switchOn: xdr.lookup(\"SignerKeyType\"),\n    switchName: \"type\",\n    switches: [[\"signerKeyTypeEd25519\", \"ed25519\"], [\"signerKeyTypePreAuthTx\", \"preAuthTx\"], [\"signerKeyTypeHashX\", \"hashX\"], [\"signerKeyTypeEd25519SignedPayload\", \"ed25519SignedPayload\"]],\n    arms: {\n      ed25519: xdr.lookup(\"Uint256\"),\n      preAuthTx: xdr.lookup(\"Uint256\"),\n      hashX: xdr.lookup(\"Uint256\"),\n      ed25519SignedPayload: xdr.lookup(\"SignerKeyEd25519SignedPayload\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   typedef opaque Signature<64>;\n  //\n  // ===========================================================================\n  xdr.typedef(\"Signature\", xdr.varOpaque(64));\n\n  // === xdr source ============================================================\n  //\n  //   typedef opaque SignatureHint[4];\n  //\n  // ===========================================================================\n  xdr.typedef(\"SignatureHint\", xdr.opaque(4));\n\n  // === xdr source ============================================================\n  //\n  //   typedef PublicKey NodeID;\n  //\n  // ===========================================================================\n  xdr.typedef(\"NodeId\", xdr.lookup(\"PublicKey\"));\n\n  // === xdr source ============================================================\n  //\n  //   typedef PublicKey AccountID;\n  //\n  // ===========================================================================\n  xdr.typedef(\"AccountId\", xdr.lookup(\"PublicKey\"));\n\n  // === xdr source ============================================================\n  //\n  //   struct Curve25519Secret\n  //   {\n  //       opaque key[32];\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"Curve25519Secret\", [[\"key\", xdr.opaque(32)]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct Curve25519Public\n  //   {\n  //       opaque key[32];\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"Curve25519Public\", [[\"key\", xdr.opaque(32)]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct HmacSha256Key\n  //   {\n  //       opaque key[32];\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"HmacSha256Key\", [[\"key\", xdr.opaque(32)]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct HmacSha256Mac\n  //   {\n  //       opaque mac[32];\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"HmacSha256Mac\", [[\"mac\", xdr.opaque(32)]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct ShortHashSeed\n  //   {\n  //       opaque seed[16];\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"ShortHashSeed\", [[\"seed\", xdr.opaque(16)]]);\n\n  // === xdr source ============================================================\n  //\n  //   enum BinaryFuseFilterType\n  //   {\n  //       BINARY_FUSE_FILTER_8_BIT = 0,\n  //       BINARY_FUSE_FILTER_16_BIT = 1,\n  //       BINARY_FUSE_FILTER_32_BIT = 2\n  //   };\n  //\n  // ===========================================================================\n  xdr[\"enum\"](\"BinaryFuseFilterType\", {\n    binaryFuseFilter8Bit: 0,\n    binaryFuseFilter16Bit: 1,\n    binaryFuseFilter32Bit: 2\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct SerializedBinaryFuseFilter\n  //   {\n  //       BinaryFuseFilterType type;\n  //\n  //       // Seed used to hash input to filter\n  //       ShortHashSeed inputHashSeed;\n  //\n  //       // Seed used for internal filter hash operations\n  //       ShortHashSeed filterSeed;\n  //       uint32 segmentLength;\n  //       uint32 segementLengthMask;\n  //       uint32 segmentCount;\n  //       uint32 segmentCountLength;\n  //       uint32 fingerprintLength; // Length in terms of element count, not bytes\n  //\n  //       // Array of uint8_t, uint16_t, or uint32_t depending on filter type\n  //       opaque fingerprints<>;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"SerializedBinaryFuseFilter\", [[\"type\", xdr.lookup(\"BinaryFuseFilterType\")], [\"inputHashSeed\", xdr.lookup(\"ShortHashSeed\")], [\"filterSeed\", xdr.lookup(\"ShortHashSeed\")], [\"segmentLength\", xdr.lookup(\"Uint32\")], [\"segementLengthMask\", xdr.lookup(\"Uint32\")], [\"segmentCount\", xdr.lookup(\"Uint32\")], [\"segmentCountLength\", xdr.lookup(\"Uint32\")], [\"fingerprintLength\", xdr.lookup(\"Uint32\")], [\"fingerprints\", xdr.varOpaque()]]);\n\n  // === xdr source ============================================================\n  //\n  //   enum SCValType\n  //   {\n  //       SCV_BOOL = 0,\n  //       SCV_VOID = 1,\n  //       SCV_ERROR = 2,\n  //\n  //       // 32 bits is the smallest type in WASM or XDR; no need for u8/u16.\n  //       SCV_U32 = 3,\n  //       SCV_I32 = 4,\n  //\n  //       // 64 bits is naturally supported by both WASM and XDR also.\n  //       SCV_U64 = 5,\n  //       SCV_I64 = 6,\n  //\n  //       // Time-related u64 subtypes with their own functions and formatting.\n  //       SCV_TIMEPOINT = 7,\n  //       SCV_DURATION = 8,\n  //\n  //       // 128 bits is naturally supported by Rust and we use it for Soroban\n  //       // fixed-point arithmetic prices / balances / similar \"quantities\". These\n  //       // are represented in XDR as a pair of 2 u64s.\n  //       SCV_U128 = 9,\n  //       SCV_I128 = 10,\n  //\n  //       // 256 bits is the size of sha256 output, ed25519 keys, and the EVM machine\n  //       // word, so for interop use we include this even though it requires a small\n  //       // amount of Rust guest and/or host library code.\n  //       SCV_U256 = 11,\n  //       SCV_I256 = 12,\n  //\n  //       // Bytes come in 3 flavors, 2 of which have meaningfully different\n  //       // formatting and validity-checking / domain-restriction.\n  //       SCV_BYTES = 13,\n  //       SCV_STRING = 14,\n  //       SCV_SYMBOL = 15,\n  //\n  //       // Vecs and maps are just polymorphic containers of other ScVals.\n  //       SCV_VEC = 16,\n  //       SCV_MAP = 17,\n  //\n  //       // Address is the universal identifier for contracts and classic\n  //       // accounts.\n  //       SCV_ADDRESS = 18,\n  //\n  //       // The following are the internal SCVal variants that are not\n  //       // exposed to the contracts.\n  //       SCV_CONTRACT_INSTANCE = 19,\n  //\n  //       // SCV_LEDGER_KEY_CONTRACT_INSTANCE and SCV_LEDGER_KEY_NONCE are unique\n  //       // symbolic SCVals used as the key for ledger entries for a contract's\n  //       // instance and an address' nonce, respectively.\n  //       SCV_LEDGER_KEY_CONTRACT_INSTANCE = 20,\n  //       SCV_LEDGER_KEY_NONCE = 21\n  //   };\n  //\n  // ===========================================================================\n  xdr[\"enum\"](\"ScValType\", {\n    scvBool: 0,\n    scvVoid: 1,\n    scvError: 2,\n    scvU32: 3,\n    scvI32: 4,\n    scvU64: 5,\n    scvI64: 6,\n    scvTimepoint: 7,\n    scvDuration: 8,\n    scvU128: 9,\n    scvI128: 10,\n    scvU256: 11,\n    scvI256: 12,\n    scvBytes: 13,\n    scvString: 14,\n    scvSymbol: 15,\n    scvVec: 16,\n    scvMap: 17,\n    scvAddress: 18,\n    scvContractInstance: 19,\n    scvLedgerKeyContractInstance: 20,\n    scvLedgerKeyNonce: 21\n  });\n\n  // === xdr source ============================================================\n  //\n  //   enum SCErrorType\n  //   {\n  //       SCE_CONTRACT = 0,          // Contract-specific, user-defined codes.\n  //       SCE_WASM_VM = 1,           // Errors while interpreting WASM bytecode.\n  //       SCE_CONTEXT = 2,           // Errors in the contract's host context.\n  //       SCE_STORAGE = 3,           // Errors accessing host storage.\n  //       SCE_OBJECT = 4,            // Errors working with host objects.\n  //       SCE_CRYPTO = 5,            // Errors in cryptographic operations.\n  //       SCE_EVENTS = 6,            // Errors while emitting events.\n  //       SCE_BUDGET = 7,            // Errors relating to budget limits.\n  //       SCE_VALUE = 8,             // Errors working with host values or SCVals.\n  //       SCE_AUTH = 9               // Errors from the authentication subsystem.\n  //   };\n  //\n  // ===========================================================================\n  xdr[\"enum\"](\"ScErrorType\", {\n    sceContract: 0,\n    sceWasmVm: 1,\n    sceContext: 2,\n    sceStorage: 3,\n    sceObject: 4,\n    sceCrypto: 5,\n    sceEvents: 6,\n    sceBudget: 7,\n    sceValue: 8,\n    sceAuth: 9\n  });\n\n  // === xdr source ============================================================\n  //\n  //   enum SCErrorCode\n  //   {\n  //       SCEC_ARITH_DOMAIN = 0,      // Some arithmetic was undefined (overflow, divide-by-zero).\n  //       SCEC_INDEX_BOUNDS = 1,      // Something was indexed beyond its bounds.\n  //       SCEC_INVALID_INPUT = 2,     // User provided some otherwise-bad data.\n  //       SCEC_MISSING_VALUE = 3,     // Some value was required but not provided.\n  //       SCEC_EXISTING_VALUE = 4,    // Some value was provided where not allowed.\n  //       SCEC_EXCEEDED_LIMIT = 5,    // Some arbitrary limit -- gas or otherwise -- was hit.\n  //       SCEC_INVALID_ACTION = 6,    // Data was valid but action requested was not.\n  //       SCEC_INTERNAL_ERROR = 7,    // The host detected an error in its own logic.\n  //       SCEC_UNEXPECTED_TYPE = 8,   // Some type wasn't as expected.\n  //       SCEC_UNEXPECTED_SIZE = 9    // Something's size wasn't as expected.\n  //   };\n  //\n  // ===========================================================================\n  xdr[\"enum\"](\"ScErrorCode\", {\n    scecArithDomain: 0,\n    scecIndexBounds: 1,\n    scecInvalidInput: 2,\n    scecMissingValue: 3,\n    scecExistingValue: 4,\n    scecExceededLimit: 5,\n    scecInvalidAction: 6,\n    scecInternalError: 7,\n    scecUnexpectedType: 8,\n    scecUnexpectedSize: 9\n  });\n\n  // === xdr source ============================================================\n  //\n  //   union SCError switch (SCErrorType type)\n  //   {\n  //   case SCE_CONTRACT:\n  //       uint32 contractCode;\n  //   case SCE_WASM_VM:\n  //   case SCE_CONTEXT:\n  //   case SCE_STORAGE:\n  //   case SCE_OBJECT:\n  //   case SCE_CRYPTO:\n  //   case SCE_EVENTS:\n  //   case SCE_BUDGET:\n  //   case SCE_VALUE:\n  //   case SCE_AUTH:\n  //       SCErrorCode code;\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"ScError\", {\n    switchOn: xdr.lookup(\"ScErrorType\"),\n    switchName: \"type\",\n    switches: [[\"sceContract\", \"contractCode\"], [\"sceWasmVm\", \"code\"], [\"sceContext\", \"code\"], [\"sceStorage\", \"code\"], [\"sceObject\", \"code\"], [\"sceCrypto\", \"code\"], [\"sceEvents\", \"code\"], [\"sceBudget\", \"code\"], [\"sceValue\", \"code\"], [\"sceAuth\", \"code\"]],\n    arms: {\n      contractCode: xdr.lookup(\"Uint32\"),\n      code: xdr.lookup(\"ScErrorCode\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct UInt128Parts {\n  //       uint64 hi;\n  //       uint64 lo;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"UInt128Parts\", [[\"hi\", xdr.lookup(\"Uint64\")], [\"lo\", xdr.lookup(\"Uint64\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct Int128Parts {\n  //       int64 hi;\n  //       uint64 lo;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"Int128Parts\", [[\"hi\", xdr.lookup(\"Int64\")], [\"lo\", xdr.lookup(\"Uint64\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct UInt256Parts {\n  //       uint64 hi_hi;\n  //       uint64 hi_lo;\n  //       uint64 lo_hi;\n  //       uint64 lo_lo;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"UInt256Parts\", [[\"hiHi\", xdr.lookup(\"Uint64\")], [\"hiLo\", xdr.lookup(\"Uint64\")], [\"loHi\", xdr.lookup(\"Uint64\")], [\"loLo\", xdr.lookup(\"Uint64\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct Int256Parts {\n  //       int64 hi_hi;\n  //       uint64 hi_lo;\n  //       uint64 lo_hi;\n  //       uint64 lo_lo;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"Int256Parts\", [[\"hiHi\", xdr.lookup(\"Int64\")], [\"hiLo\", xdr.lookup(\"Uint64\")], [\"loHi\", xdr.lookup(\"Uint64\")], [\"loLo\", xdr.lookup(\"Uint64\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   enum ContractExecutableType\n  //   {\n  //       CONTRACT_EXECUTABLE_WASM = 0,\n  //       CONTRACT_EXECUTABLE_STELLAR_ASSET = 1\n  //   };\n  //\n  // ===========================================================================\n  xdr[\"enum\"](\"ContractExecutableType\", {\n    contractExecutableWasm: 0,\n    contractExecutableStellarAsset: 1\n  });\n\n  // === xdr source ============================================================\n  //\n  //   union ContractExecutable switch (ContractExecutableType type)\n  //   {\n  //   case CONTRACT_EXECUTABLE_WASM:\n  //       Hash wasm_hash;\n  //   case CONTRACT_EXECUTABLE_STELLAR_ASSET:\n  //       void;\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"ContractExecutable\", {\n    switchOn: xdr.lookup(\"ContractExecutableType\"),\n    switchName: \"type\",\n    switches: [[\"contractExecutableWasm\", \"wasmHash\"], [\"contractExecutableStellarAsset\", xdr[\"void\"]()]],\n    arms: {\n      wasmHash: xdr.lookup(\"Hash\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   enum SCAddressType\n  //   {\n  //       SC_ADDRESS_TYPE_ACCOUNT = 0,\n  //       SC_ADDRESS_TYPE_CONTRACT = 1\n  //   };\n  //\n  // ===========================================================================\n  xdr[\"enum\"](\"ScAddressType\", {\n    scAddressTypeAccount: 0,\n    scAddressTypeContract: 1\n  });\n\n  // === xdr source ============================================================\n  //\n  //   union SCAddress switch (SCAddressType type)\n  //   {\n  //   case SC_ADDRESS_TYPE_ACCOUNT:\n  //       AccountID accountId;\n  //   case SC_ADDRESS_TYPE_CONTRACT:\n  //       Hash contractId;\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"ScAddress\", {\n    switchOn: xdr.lookup(\"ScAddressType\"),\n    switchName: \"type\",\n    switches: [[\"scAddressTypeAccount\", \"accountId\"], [\"scAddressTypeContract\", \"contractId\"]],\n    arms: {\n      accountId: xdr.lookup(\"AccountId\"),\n      contractId: xdr.lookup(\"Hash\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   const SCSYMBOL_LIMIT = 32;\n  //\n  // ===========================================================================\n  xdr[\"const\"](\"SCSYMBOL_LIMIT\", 32);\n\n  // === xdr source ============================================================\n  //\n  //   typedef SCVal SCVec<>;\n  //\n  // ===========================================================================\n  xdr.typedef(\"ScVec\", xdr.varArray(xdr.lookup(\"ScVal\"), 2147483647));\n\n  // === xdr source ============================================================\n  //\n  //   typedef SCMapEntry SCMap<>;\n  //\n  // ===========================================================================\n  xdr.typedef(\"ScMap\", xdr.varArray(xdr.lookup(\"ScMapEntry\"), 2147483647));\n\n  // === xdr source ============================================================\n  //\n  //   typedef opaque SCBytes<>;\n  //\n  // ===========================================================================\n  xdr.typedef(\"ScBytes\", xdr.varOpaque());\n\n  // === xdr source ============================================================\n  //\n  //   typedef string SCString<>;\n  //\n  // ===========================================================================\n  xdr.typedef(\"ScString\", xdr.string());\n\n  // === xdr source ============================================================\n  //\n  //   typedef string SCSymbol<SCSYMBOL_LIMIT>;\n  //\n  // ===========================================================================\n  xdr.typedef(\"ScSymbol\", xdr.string(SCSYMBOL_LIMIT));\n\n  // === xdr source ============================================================\n  //\n  //   struct SCNonceKey {\n  //       int64 nonce;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"ScNonceKey\", [[\"nonce\", xdr.lookup(\"Int64\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct SCContractInstance {\n  //       ContractExecutable executable;\n  //       SCMap* storage;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"ScContractInstance\", [[\"executable\", xdr.lookup(\"ContractExecutable\")], [\"storage\", xdr.option(xdr.lookup(\"ScMap\"))]]);\n\n  // === xdr source ============================================================\n  //\n  //   union SCVal switch (SCValType type)\n  //   {\n  //\n  //   case SCV_BOOL:\n  //       bool b;\n  //   case SCV_VOID:\n  //       void;\n  //   case SCV_ERROR:\n  //       SCError error;\n  //\n  //   case SCV_U32:\n  //       uint32 u32;\n  //   case SCV_I32:\n  //       int32 i32;\n  //\n  //   case SCV_U64:\n  //       uint64 u64;\n  //   case SCV_I64:\n  //       int64 i64;\n  //   case SCV_TIMEPOINT:\n  //       TimePoint timepoint;\n  //   case SCV_DURATION:\n  //       Duration duration;\n  //\n  //   case SCV_U128:\n  //       UInt128Parts u128;\n  //   case SCV_I128:\n  //       Int128Parts i128;\n  //\n  //   case SCV_U256:\n  //       UInt256Parts u256;\n  //   case SCV_I256:\n  //       Int256Parts i256;\n  //\n  //   case SCV_BYTES:\n  //       SCBytes bytes;\n  //   case SCV_STRING:\n  //       SCString str;\n  //   case SCV_SYMBOL:\n  //       SCSymbol sym;\n  //\n  //   // Vec and Map are recursive so need to live\n  //   // behind an option, due to xdrpp limitations.\n  //   case SCV_VEC:\n  //       SCVec *vec;\n  //   case SCV_MAP:\n  //       SCMap *map;\n  //\n  //   case SCV_ADDRESS:\n  //       SCAddress address;\n  //\n  //   // Special SCVals reserved for system-constructed contract-data\n  //   // ledger keys, not generally usable elsewhere.\n  //   case SCV_LEDGER_KEY_CONTRACT_INSTANCE:\n  //       void;\n  //   case SCV_LEDGER_KEY_NONCE:\n  //       SCNonceKey nonce_key;\n  //\n  //   case SCV_CONTRACT_INSTANCE:\n  //       SCContractInstance instance;\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"ScVal\", {\n    switchOn: xdr.lookup(\"ScValType\"),\n    switchName: \"type\",\n    switches: [[\"scvBool\", \"b\"], [\"scvVoid\", xdr[\"void\"]()], [\"scvError\", \"error\"], [\"scvU32\", \"u32\"], [\"scvI32\", \"i32\"], [\"scvU64\", \"u64\"], [\"scvI64\", \"i64\"], [\"scvTimepoint\", \"timepoint\"], [\"scvDuration\", \"duration\"], [\"scvU128\", \"u128\"], [\"scvI128\", \"i128\"], [\"scvU256\", \"u256\"], [\"scvI256\", \"i256\"], [\"scvBytes\", \"bytes\"], [\"scvString\", \"str\"], [\"scvSymbol\", \"sym\"], [\"scvVec\", \"vec\"], [\"scvMap\", \"map\"], [\"scvAddress\", \"address\"], [\"scvLedgerKeyContractInstance\", xdr[\"void\"]()], [\"scvLedgerKeyNonce\", \"nonceKey\"], [\"scvContractInstance\", \"instance\"]],\n    arms: {\n      b: xdr.bool(),\n      error: xdr.lookup(\"ScError\"),\n      u32: xdr.lookup(\"Uint32\"),\n      i32: xdr.lookup(\"Int32\"),\n      u64: xdr.lookup(\"Uint64\"),\n      i64: xdr.lookup(\"Int64\"),\n      timepoint: xdr.lookup(\"TimePoint\"),\n      duration: xdr.lookup(\"Duration\"),\n      u128: xdr.lookup(\"UInt128Parts\"),\n      i128: xdr.lookup(\"Int128Parts\"),\n      u256: xdr.lookup(\"UInt256Parts\"),\n      i256: xdr.lookup(\"Int256Parts\"),\n      bytes: xdr.lookup(\"ScBytes\"),\n      str: xdr.lookup(\"ScString\"),\n      sym: xdr.lookup(\"ScSymbol\"),\n      vec: xdr.option(xdr.lookup(\"ScVec\")),\n      map: xdr.option(xdr.lookup(\"ScMap\")),\n      address: xdr.lookup(\"ScAddress\"),\n      nonceKey: xdr.lookup(\"ScNonceKey\"),\n      instance: xdr.lookup(\"ScContractInstance\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct SCMapEntry\n  //   {\n  //       SCVal key;\n  //       SCVal val;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"ScMapEntry\", [[\"key\", xdr.lookup(\"ScVal\")], [\"val\", xdr.lookup(\"ScVal\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   enum SCEnvMetaKind\n  //   {\n  //       SC_ENV_META_KIND_INTERFACE_VERSION = 0\n  //   };\n  //\n  // ===========================================================================\n  xdr[\"enum\"](\"ScEnvMetaKind\", {\n    scEnvMetaKindInterfaceVersion: 0\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct {\n  //           uint32 protocol;\n  //           uint32 preRelease;\n  //       }\n  //\n  // ===========================================================================\n  xdr.struct(\"ScEnvMetaEntryInterfaceVersion\", [[\"protocol\", xdr.lookup(\"Uint32\")], [\"preRelease\", xdr.lookup(\"Uint32\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   union SCEnvMetaEntry switch (SCEnvMetaKind kind)\n  //   {\n  //   case SC_ENV_META_KIND_INTERFACE_VERSION:\n  //       struct {\n  //           uint32 protocol;\n  //           uint32 preRelease;\n  //       } interfaceVersion;\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"ScEnvMetaEntry\", {\n    switchOn: xdr.lookup(\"ScEnvMetaKind\"),\n    switchName: \"kind\",\n    switches: [[\"scEnvMetaKindInterfaceVersion\", \"interfaceVersion\"]],\n    arms: {\n      interfaceVersion: xdr.lookup(\"ScEnvMetaEntryInterfaceVersion\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct SCMetaV0\n  //   {\n  //       string key<>;\n  //       string val<>;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"ScMetaV0\", [[\"key\", xdr.string()], [\"val\", xdr.string()]]);\n\n  // === xdr source ============================================================\n  //\n  //   enum SCMetaKind\n  //   {\n  //       SC_META_V0 = 0\n  //   };\n  //\n  // ===========================================================================\n  xdr[\"enum\"](\"ScMetaKind\", {\n    scMetaV0: 0\n  });\n\n  // === xdr source ============================================================\n  //\n  //   union SCMetaEntry switch (SCMetaKind kind)\n  //   {\n  //   case SC_META_V0:\n  //       SCMetaV0 v0;\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"ScMetaEntry\", {\n    switchOn: xdr.lookup(\"ScMetaKind\"),\n    switchName: \"kind\",\n    switches: [[\"scMetaV0\", \"v0\"]],\n    arms: {\n      v0: xdr.lookup(\"ScMetaV0\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   const SC_SPEC_DOC_LIMIT = 1024;\n  //\n  // ===========================================================================\n  xdr[\"const\"](\"SC_SPEC_DOC_LIMIT\", 1024);\n\n  // === xdr source ============================================================\n  //\n  //   enum SCSpecType\n  //   {\n  //       SC_SPEC_TYPE_VAL = 0,\n  //\n  //       // Types with no parameters.\n  //       SC_SPEC_TYPE_BOOL = 1,\n  //       SC_SPEC_TYPE_VOID = 2,\n  //       SC_SPEC_TYPE_ERROR = 3,\n  //       SC_SPEC_TYPE_U32 = 4,\n  //       SC_SPEC_TYPE_I32 = 5,\n  //       SC_SPEC_TYPE_U64 = 6,\n  //       SC_SPEC_TYPE_I64 = 7,\n  //       SC_SPEC_TYPE_TIMEPOINT = 8,\n  //       SC_SPEC_TYPE_DURATION = 9,\n  //       SC_SPEC_TYPE_U128 = 10,\n  //       SC_SPEC_TYPE_I128 = 11,\n  //       SC_SPEC_TYPE_U256 = 12,\n  //       SC_SPEC_TYPE_I256 = 13,\n  //       SC_SPEC_TYPE_BYTES = 14,\n  //       SC_SPEC_TYPE_STRING = 16,\n  //       SC_SPEC_TYPE_SYMBOL = 17,\n  //       SC_SPEC_TYPE_ADDRESS = 19,\n  //\n  //       // Types with parameters.\n  //       SC_SPEC_TYPE_OPTION = 1000,\n  //       SC_SPEC_TYPE_RESULT = 1001,\n  //       SC_SPEC_TYPE_VEC = 1002,\n  //       SC_SPEC_TYPE_MAP = 1004,\n  //       SC_SPEC_TYPE_TUPLE = 1005,\n  //       SC_SPEC_TYPE_BYTES_N = 1006,\n  //\n  //       // User defined types.\n  //       SC_SPEC_TYPE_UDT = 2000\n  //   };\n  //\n  // ===========================================================================\n  xdr[\"enum\"](\"ScSpecType\", {\n    scSpecTypeVal: 0,\n    scSpecTypeBool: 1,\n    scSpecTypeVoid: 2,\n    scSpecTypeError: 3,\n    scSpecTypeU32: 4,\n    scSpecTypeI32: 5,\n    scSpecTypeU64: 6,\n    scSpecTypeI64: 7,\n    scSpecTypeTimepoint: 8,\n    scSpecTypeDuration: 9,\n    scSpecTypeU128: 10,\n    scSpecTypeI128: 11,\n    scSpecTypeU256: 12,\n    scSpecTypeI256: 13,\n    scSpecTypeBytes: 14,\n    scSpecTypeString: 16,\n    scSpecTypeSymbol: 17,\n    scSpecTypeAddress: 19,\n    scSpecTypeOption: 1000,\n    scSpecTypeResult: 1001,\n    scSpecTypeVec: 1002,\n    scSpecTypeMap: 1004,\n    scSpecTypeTuple: 1005,\n    scSpecTypeBytesN: 1006,\n    scSpecTypeUdt: 2000\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct SCSpecTypeOption\n  //   {\n  //       SCSpecTypeDef valueType;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"ScSpecTypeOption\", [[\"valueType\", xdr.lookup(\"ScSpecTypeDef\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct SCSpecTypeResult\n  //   {\n  //       SCSpecTypeDef okType;\n  //       SCSpecTypeDef errorType;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"ScSpecTypeResult\", [[\"okType\", xdr.lookup(\"ScSpecTypeDef\")], [\"errorType\", xdr.lookup(\"ScSpecTypeDef\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct SCSpecTypeVec\n  //   {\n  //       SCSpecTypeDef elementType;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"ScSpecTypeVec\", [[\"elementType\", xdr.lookup(\"ScSpecTypeDef\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct SCSpecTypeMap\n  //   {\n  //       SCSpecTypeDef keyType;\n  //       SCSpecTypeDef valueType;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"ScSpecTypeMap\", [[\"keyType\", xdr.lookup(\"ScSpecTypeDef\")], [\"valueType\", xdr.lookup(\"ScSpecTypeDef\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct SCSpecTypeTuple\n  //   {\n  //       SCSpecTypeDef valueTypes<12>;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"ScSpecTypeTuple\", [[\"valueTypes\", xdr.varArray(xdr.lookup(\"ScSpecTypeDef\"), 12)]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct SCSpecTypeBytesN\n  //   {\n  //       uint32 n;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"ScSpecTypeBytesN\", [[\"n\", xdr.lookup(\"Uint32\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct SCSpecTypeUDT\n  //   {\n  //       string name<60>;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"ScSpecTypeUdt\", [[\"name\", xdr.string(60)]]);\n\n  // === xdr source ============================================================\n  //\n  //   union SCSpecTypeDef switch (SCSpecType type)\n  //   {\n  //   case SC_SPEC_TYPE_VAL:\n  //   case SC_SPEC_TYPE_BOOL:\n  //   case SC_SPEC_TYPE_VOID:\n  //   case SC_SPEC_TYPE_ERROR:\n  //   case SC_SPEC_TYPE_U32:\n  //   case SC_SPEC_TYPE_I32:\n  //   case SC_SPEC_TYPE_U64:\n  //   case SC_SPEC_TYPE_I64:\n  //   case SC_SPEC_TYPE_TIMEPOINT:\n  //   case SC_SPEC_TYPE_DURATION:\n  //   case SC_SPEC_TYPE_U128:\n  //   case SC_SPEC_TYPE_I128:\n  //   case SC_SPEC_TYPE_U256:\n  //   case SC_SPEC_TYPE_I256:\n  //   case SC_SPEC_TYPE_BYTES:\n  //   case SC_SPEC_TYPE_STRING:\n  //   case SC_SPEC_TYPE_SYMBOL:\n  //   case SC_SPEC_TYPE_ADDRESS:\n  //       void;\n  //   case SC_SPEC_TYPE_OPTION:\n  //       SCSpecTypeOption option;\n  //   case SC_SPEC_TYPE_RESULT:\n  //       SCSpecTypeResult result;\n  //   case SC_SPEC_TYPE_VEC:\n  //       SCSpecTypeVec vec;\n  //   case SC_SPEC_TYPE_MAP:\n  //       SCSpecTypeMap map;\n  //   case SC_SPEC_TYPE_TUPLE:\n  //       SCSpecTypeTuple tuple;\n  //   case SC_SPEC_TYPE_BYTES_N:\n  //       SCSpecTypeBytesN bytesN;\n  //   case SC_SPEC_TYPE_UDT:\n  //       SCSpecTypeUDT udt;\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"ScSpecTypeDef\", {\n    switchOn: xdr.lookup(\"ScSpecType\"),\n    switchName: \"type\",\n    switches: [[\"scSpecTypeVal\", xdr[\"void\"]()], [\"scSpecTypeBool\", xdr[\"void\"]()], [\"scSpecTypeVoid\", xdr[\"void\"]()], [\"scSpecTypeError\", xdr[\"void\"]()], [\"scSpecTypeU32\", xdr[\"void\"]()], [\"scSpecTypeI32\", xdr[\"void\"]()], [\"scSpecTypeU64\", xdr[\"void\"]()], [\"scSpecTypeI64\", xdr[\"void\"]()], [\"scSpecTypeTimepoint\", xdr[\"void\"]()], [\"scSpecTypeDuration\", xdr[\"void\"]()], [\"scSpecTypeU128\", xdr[\"void\"]()], [\"scSpecTypeI128\", xdr[\"void\"]()], [\"scSpecTypeU256\", xdr[\"void\"]()], [\"scSpecTypeI256\", xdr[\"void\"]()], [\"scSpecTypeBytes\", xdr[\"void\"]()], [\"scSpecTypeString\", xdr[\"void\"]()], [\"scSpecTypeSymbol\", xdr[\"void\"]()], [\"scSpecTypeAddress\", xdr[\"void\"]()], [\"scSpecTypeOption\", \"option\"], [\"scSpecTypeResult\", \"result\"], [\"scSpecTypeVec\", \"vec\"], [\"scSpecTypeMap\", \"map\"], [\"scSpecTypeTuple\", \"tuple\"], [\"scSpecTypeBytesN\", \"bytesN\"], [\"scSpecTypeUdt\", \"udt\"]],\n    arms: {\n      option: xdr.lookup(\"ScSpecTypeOption\"),\n      result: xdr.lookup(\"ScSpecTypeResult\"),\n      vec: xdr.lookup(\"ScSpecTypeVec\"),\n      map: xdr.lookup(\"ScSpecTypeMap\"),\n      tuple: xdr.lookup(\"ScSpecTypeTuple\"),\n      bytesN: xdr.lookup(\"ScSpecTypeBytesN\"),\n      udt: xdr.lookup(\"ScSpecTypeUdt\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct SCSpecUDTStructFieldV0\n  //   {\n  //       string doc<SC_SPEC_DOC_LIMIT>;\n  //       string name<30>;\n  //       SCSpecTypeDef type;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"ScSpecUdtStructFieldV0\", [[\"doc\", xdr.string(SC_SPEC_DOC_LIMIT)], [\"name\", xdr.string(30)], [\"type\", xdr.lookup(\"ScSpecTypeDef\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct SCSpecUDTStructV0\n  //   {\n  //       string doc<SC_SPEC_DOC_LIMIT>;\n  //       string lib<80>;\n  //       string name<60>;\n  //       SCSpecUDTStructFieldV0 fields<40>;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"ScSpecUdtStructV0\", [[\"doc\", xdr.string(SC_SPEC_DOC_LIMIT)], [\"lib\", xdr.string(80)], [\"name\", xdr.string(60)], [\"fields\", xdr.varArray(xdr.lookup(\"ScSpecUdtStructFieldV0\"), 40)]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct SCSpecUDTUnionCaseVoidV0\n  //   {\n  //       string doc<SC_SPEC_DOC_LIMIT>;\n  //       string name<60>;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"ScSpecUdtUnionCaseVoidV0\", [[\"doc\", xdr.string(SC_SPEC_DOC_LIMIT)], [\"name\", xdr.string(60)]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct SCSpecUDTUnionCaseTupleV0\n  //   {\n  //       string doc<SC_SPEC_DOC_LIMIT>;\n  //       string name<60>;\n  //       SCSpecTypeDef type<12>;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"ScSpecUdtUnionCaseTupleV0\", [[\"doc\", xdr.string(SC_SPEC_DOC_LIMIT)], [\"name\", xdr.string(60)], [\"type\", xdr.varArray(xdr.lookup(\"ScSpecTypeDef\"), 12)]]);\n\n  // === xdr source ============================================================\n  //\n  //   enum SCSpecUDTUnionCaseV0Kind\n  //   {\n  //       SC_SPEC_UDT_UNION_CASE_VOID_V0 = 0,\n  //       SC_SPEC_UDT_UNION_CASE_TUPLE_V0 = 1\n  //   };\n  //\n  // ===========================================================================\n  xdr[\"enum\"](\"ScSpecUdtUnionCaseV0Kind\", {\n    scSpecUdtUnionCaseVoidV0: 0,\n    scSpecUdtUnionCaseTupleV0: 1\n  });\n\n  // === xdr source ============================================================\n  //\n  //   union SCSpecUDTUnionCaseV0 switch (SCSpecUDTUnionCaseV0Kind kind)\n  //   {\n  //   case SC_SPEC_UDT_UNION_CASE_VOID_V0:\n  //       SCSpecUDTUnionCaseVoidV0 voidCase;\n  //   case SC_SPEC_UDT_UNION_CASE_TUPLE_V0:\n  //       SCSpecUDTUnionCaseTupleV0 tupleCase;\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"ScSpecUdtUnionCaseV0\", {\n    switchOn: xdr.lookup(\"ScSpecUdtUnionCaseV0Kind\"),\n    switchName: \"kind\",\n    switches: [[\"scSpecUdtUnionCaseVoidV0\", \"voidCase\"], [\"scSpecUdtUnionCaseTupleV0\", \"tupleCase\"]],\n    arms: {\n      voidCase: xdr.lookup(\"ScSpecUdtUnionCaseVoidV0\"),\n      tupleCase: xdr.lookup(\"ScSpecUdtUnionCaseTupleV0\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct SCSpecUDTUnionV0\n  //   {\n  //       string doc<SC_SPEC_DOC_LIMIT>;\n  //       string lib<80>;\n  //       string name<60>;\n  //       SCSpecUDTUnionCaseV0 cases<50>;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"ScSpecUdtUnionV0\", [[\"doc\", xdr.string(SC_SPEC_DOC_LIMIT)], [\"lib\", xdr.string(80)], [\"name\", xdr.string(60)], [\"cases\", xdr.varArray(xdr.lookup(\"ScSpecUdtUnionCaseV0\"), 50)]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct SCSpecUDTEnumCaseV0\n  //   {\n  //       string doc<SC_SPEC_DOC_LIMIT>;\n  //       string name<60>;\n  //       uint32 value;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"ScSpecUdtEnumCaseV0\", [[\"doc\", xdr.string(SC_SPEC_DOC_LIMIT)], [\"name\", xdr.string(60)], [\"value\", xdr.lookup(\"Uint32\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct SCSpecUDTEnumV0\n  //   {\n  //       string doc<SC_SPEC_DOC_LIMIT>;\n  //       string lib<80>;\n  //       string name<60>;\n  //       SCSpecUDTEnumCaseV0 cases<50>;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"ScSpecUdtEnumV0\", [[\"doc\", xdr.string(SC_SPEC_DOC_LIMIT)], [\"lib\", xdr.string(80)], [\"name\", xdr.string(60)], [\"cases\", xdr.varArray(xdr.lookup(\"ScSpecUdtEnumCaseV0\"), 50)]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct SCSpecUDTErrorEnumCaseV0\n  //   {\n  //       string doc<SC_SPEC_DOC_LIMIT>;\n  //       string name<60>;\n  //       uint32 value;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"ScSpecUdtErrorEnumCaseV0\", [[\"doc\", xdr.string(SC_SPEC_DOC_LIMIT)], [\"name\", xdr.string(60)], [\"value\", xdr.lookup(\"Uint32\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct SCSpecUDTErrorEnumV0\n  //   {\n  //       string doc<SC_SPEC_DOC_LIMIT>;\n  //       string lib<80>;\n  //       string name<60>;\n  //       SCSpecUDTErrorEnumCaseV0 cases<50>;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"ScSpecUdtErrorEnumV0\", [[\"doc\", xdr.string(SC_SPEC_DOC_LIMIT)], [\"lib\", xdr.string(80)], [\"name\", xdr.string(60)], [\"cases\", xdr.varArray(xdr.lookup(\"ScSpecUdtErrorEnumCaseV0\"), 50)]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct SCSpecFunctionInputV0\n  //   {\n  //       string doc<SC_SPEC_DOC_LIMIT>;\n  //       string name<30>;\n  //       SCSpecTypeDef type;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"ScSpecFunctionInputV0\", [[\"doc\", xdr.string(SC_SPEC_DOC_LIMIT)], [\"name\", xdr.string(30)], [\"type\", xdr.lookup(\"ScSpecTypeDef\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct SCSpecFunctionV0\n  //   {\n  //       string doc<SC_SPEC_DOC_LIMIT>;\n  //       SCSymbol name;\n  //       SCSpecFunctionInputV0 inputs<10>;\n  //       SCSpecTypeDef outputs<1>;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"ScSpecFunctionV0\", [[\"doc\", xdr.string(SC_SPEC_DOC_LIMIT)], [\"name\", xdr.lookup(\"ScSymbol\")], [\"inputs\", xdr.varArray(xdr.lookup(\"ScSpecFunctionInputV0\"), 10)], [\"outputs\", xdr.varArray(xdr.lookup(\"ScSpecTypeDef\"), 1)]]);\n\n  // === xdr source ============================================================\n  //\n  //   enum SCSpecEntryKind\n  //   {\n  //       SC_SPEC_ENTRY_FUNCTION_V0 = 0,\n  //       SC_SPEC_ENTRY_UDT_STRUCT_V0 = 1,\n  //       SC_SPEC_ENTRY_UDT_UNION_V0 = 2,\n  //       SC_SPEC_ENTRY_UDT_ENUM_V0 = 3,\n  //       SC_SPEC_ENTRY_UDT_ERROR_ENUM_V0 = 4\n  //   };\n  //\n  // ===========================================================================\n  xdr[\"enum\"](\"ScSpecEntryKind\", {\n    scSpecEntryFunctionV0: 0,\n    scSpecEntryUdtStructV0: 1,\n    scSpecEntryUdtUnionV0: 2,\n    scSpecEntryUdtEnumV0: 3,\n    scSpecEntryUdtErrorEnumV0: 4\n  });\n\n  // === xdr source ============================================================\n  //\n  //   union SCSpecEntry switch (SCSpecEntryKind kind)\n  //   {\n  //   case SC_SPEC_ENTRY_FUNCTION_V0:\n  //       SCSpecFunctionV0 functionV0;\n  //   case SC_SPEC_ENTRY_UDT_STRUCT_V0:\n  //       SCSpecUDTStructV0 udtStructV0;\n  //   case SC_SPEC_ENTRY_UDT_UNION_V0:\n  //       SCSpecUDTUnionV0 udtUnionV0;\n  //   case SC_SPEC_ENTRY_UDT_ENUM_V0:\n  //       SCSpecUDTEnumV0 udtEnumV0;\n  //   case SC_SPEC_ENTRY_UDT_ERROR_ENUM_V0:\n  //       SCSpecUDTErrorEnumV0 udtErrorEnumV0;\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"ScSpecEntry\", {\n    switchOn: xdr.lookup(\"ScSpecEntryKind\"),\n    switchName: \"kind\",\n    switches: [[\"scSpecEntryFunctionV0\", \"functionV0\"], [\"scSpecEntryUdtStructV0\", \"udtStructV0\"], [\"scSpecEntryUdtUnionV0\", \"udtUnionV0\"], [\"scSpecEntryUdtEnumV0\", \"udtEnumV0\"], [\"scSpecEntryUdtErrorEnumV0\", \"udtErrorEnumV0\"]],\n    arms: {\n      functionV0: xdr.lookup(\"ScSpecFunctionV0\"),\n      udtStructV0: xdr.lookup(\"ScSpecUdtStructV0\"),\n      udtUnionV0: xdr.lookup(\"ScSpecUdtUnionV0\"),\n      udtEnumV0: xdr.lookup(\"ScSpecUdtEnumV0\"),\n      udtErrorEnumV0: xdr.lookup(\"ScSpecUdtErrorEnumV0\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct ConfigSettingContractExecutionLanesV0\n  //   {\n  //       // maximum number of Soroban transactions per ledger\n  //       uint32 ledgerMaxTxCount;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"ConfigSettingContractExecutionLanesV0\", [[\"ledgerMaxTxCount\", xdr.lookup(\"Uint32\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct ConfigSettingContractComputeV0\n  //   {\n  //       // Maximum instructions per ledger\n  //       int64 ledgerMaxInstructions;\n  //       // Maximum instructions per transaction\n  //       int64 txMaxInstructions;\n  //       // Cost of 10000 instructions\n  //       int64 feeRatePerInstructionsIncrement;\n  //\n  //       // Memory limit per transaction. Unlike instructions, there is no fee\n  //       // for memory, just the limit.\n  //       uint32 txMemoryLimit;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"ConfigSettingContractComputeV0\", [[\"ledgerMaxInstructions\", xdr.lookup(\"Int64\")], [\"txMaxInstructions\", xdr.lookup(\"Int64\")], [\"feeRatePerInstructionsIncrement\", xdr.lookup(\"Int64\")], [\"txMemoryLimit\", xdr.lookup(\"Uint32\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct ConfigSettingContractLedgerCostV0\n  //   {\n  //       // Maximum number of ledger entry read operations per ledger\n  //       uint32 ledgerMaxReadLedgerEntries;\n  //       // Maximum number of bytes that can be read per ledger\n  //       uint32 ledgerMaxReadBytes;\n  //       // Maximum number of ledger entry write operations per ledger\n  //       uint32 ledgerMaxWriteLedgerEntries;\n  //       // Maximum number of bytes that can be written per ledger\n  //       uint32 ledgerMaxWriteBytes;\n  //\n  //       // Maximum number of ledger entry read operations per transaction\n  //       uint32 txMaxReadLedgerEntries;\n  //       // Maximum number of bytes that can be read per transaction\n  //       uint32 txMaxReadBytes;\n  //       // Maximum number of ledger entry write operations per transaction\n  //       uint32 txMaxWriteLedgerEntries;\n  //       // Maximum number of bytes that can be written per transaction\n  //       uint32 txMaxWriteBytes;\n  //\n  //       int64 feeReadLedgerEntry;  // Fee per ledger entry read\n  //       int64 feeWriteLedgerEntry; // Fee per ledger entry write\n  //\n  //       int64 feeRead1KB;  // Fee for reading 1KB\n  //\n  //       // The following parameters determine the write fee per 1KB.\n  //       // Write fee grows linearly until bucket list reaches this size\n  //       int64 bucketListTargetSizeBytes;\n  //       // Fee per 1KB write when the bucket list is empty\n  //       int64 writeFee1KBBucketListLow;\n  //       // Fee per 1KB write when the bucket list has reached `bucketListTargetSizeBytes`\n  //       int64 writeFee1KBBucketListHigh;\n  //       // Write fee multiplier for any additional data past the first `bucketListTargetSizeBytes`\n  //       uint32 bucketListWriteFeeGrowthFactor;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"ConfigSettingContractLedgerCostV0\", [[\"ledgerMaxReadLedgerEntries\", xdr.lookup(\"Uint32\")], [\"ledgerMaxReadBytes\", xdr.lookup(\"Uint32\")], [\"ledgerMaxWriteLedgerEntries\", xdr.lookup(\"Uint32\")], [\"ledgerMaxWriteBytes\", xdr.lookup(\"Uint32\")], [\"txMaxReadLedgerEntries\", xdr.lookup(\"Uint32\")], [\"txMaxReadBytes\", xdr.lookup(\"Uint32\")], [\"txMaxWriteLedgerEntries\", xdr.lookup(\"Uint32\")], [\"txMaxWriteBytes\", xdr.lookup(\"Uint32\")], [\"feeReadLedgerEntry\", xdr.lookup(\"Int64\")], [\"feeWriteLedgerEntry\", xdr.lookup(\"Int64\")], [\"feeRead1Kb\", xdr.lookup(\"Int64\")], [\"bucketListTargetSizeBytes\", xdr.lookup(\"Int64\")], [\"writeFee1KbBucketListLow\", xdr.lookup(\"Int64\")], [\"writeFee1KbBucketListHigh\", xdr.lookup(\"Int64\")], [\"bucketListWriteFeeGrowthFactor\", xdr.lookup(\"Uint32\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct ConfigSettingContractHistoricalDataV0\n  //   {\n  //       int64 feeHistorical1KB; // Fee for storing 1KB in archives\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"ConfigSettingContractHistoricalDataV0\", [[\"feeHistorical1Kb\", xdr.lookup(\"Int64\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct ConfigSettingContractEventsV0\n  //   {\n  //       // Maximum size of events that a contract call can emit.\n  //       uint32 txMaxContractEventsSizeBytes;\n  //       // Fee for generating 1KB of contract events.\n  //       int64 feeContractEvents1KB;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"ConfigSettingContractEventsV0\", [[\"txMaxContractEventsSizeBytes\", xdr.lookup(\"Uint32\")], [\"feeContractEvents1Kb\", xdr.lookup(\"Int64\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct ConfigSettingContractBandwidthV0\n  //   {\n  //       // Maximum sum of all transaction sizes in the ledger in bytes\n  //       uint32 ledgerMaxTxsSizeBytes;\n  //       // Maximum size in bytes for a transaction\n  //       uint32 txMaxSizeBytes;\n  //\n  //       // Fee for 1 KB of transaction size\n  //       int64 feeTxSize1KB;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"ConfigSettingContractBandwidthV0\", [[\"ledgerMaxTxsSizeBytes\", xdr.lookup(\"Uint32\")], [\"txMaxSizeBytes\", xdr.lookup(\"Uint32\")], [\"feeTxSize1Kb\", xdr.lookup(\"Int64\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   enum ContractCostType {\n  //       // Cost of running 1 wasm instruction\n  //       WasmInsnExec = 0,\n  //       // Cost of allocating a slice of memory (in bytes)\n  //       MemAlloc = 1,\n  //       // Cost of copying a slice of bytes into a pre-allocated memory\n  //       MemCpy = 2,\n  //       // Cost of comparing two slices of memory\n  //       MemCmp = 3,\n  //       // Cost of a host function dispatch, not including the actual work done by\n  //       // the function nor the cost of VM invocation machinary\n  //       DispatchHostFunction = 4,\n  //       // Cost of visiting a host object from the host object storage. Exists to\n  //       // make sure some baseline cost coverage, i.e. repeatly visiting objects\n  //       // by the guest will always incur some charges.\n  //       VisitObject = 5,\n  //       // Cost of serializing an xdr object to bytes\n  //       ValSer = 6,\n  //       // Cost of deserializing an xdr object from bytes\n  //       ValDeser = 7,\n  //       // Cost of computing the sha256 hash from bytes\n  //       ComputeSha256Hash = 8,\n  //       // Cost of computing the ed25519 pubkey from bytes\n  //       ComputeEd25519PubKey = 9,\n  //       // Cost of verifying ed25519 signature of a payload.\n  //       VerifyEd25519Sig = 10,\n  //       // Cost of instantiation a VM from wasm bytes code.\n  //       VmInstantiation = 11,\n  //       // Cost of instantiation a VM from a cached state.\n  //       VmCachedInstantiation = 12,\n  //       // Cost of invoking a function on the VM. If the function is a host function,\n  //       // additional cost will be covered by `DispatchHostFunction`.\n  //       InvokeVmFunction = 13,\n  //       // Cost of computing a keccak256 hash from bytes.\n  //       ComputeKeccak256Hash = 14,\n  //       // Cost of decoding an ECDSA signature computed from a 256-bit prime modulus\n  //       // curve (e.g. secp256k1 and secp256r1)\n  //       DecodeEcdsaCurve256Sig = 15,\n  //       // Cost of recovering an ECDSA secp256k1 key from a signature.\n  //       RecoverEcdsaSecp256k1Key = 16,\n  //       // Cost of int256 addition (`+`) and subtraction (`-`) operations\n  //       Int256AddSub = 17,\n  //       // Cost of int256 multiplication (`*`) operation\n  //       Int256Mul = 18,\n  //       // Cost of int256 division (`/`) operation\n  //       Int256Div = 19,\n  //       // Cost of int256 power (`exp`) operation\n  //       Int256Pow = 20,\n  //       // Cost of int256 shift (`shl`, `shr`) operation\n  //       Int256Shift = 21,\n  //       // Cost of drawing random bytes using a ChaCha20 PRNG\n  //       ChaCha20DrawBytes = 22,\n  //\n  //       // Cost of parsing wasm bytes that only encode instructions.\n  //       ParseWasmInstructions = 23,\n  //       // Cost of parsing a known number of wasm functions.\n  //       ParseWasmFunctions = 24,\n  //       // Cost of parsing a known number of wasm globals.\n  //       ParseWasmGlobals = 25,\n  //       // Cost of parsing a known number of wasm table entries.\n  //       ParseWasmTableEntries = 26,\n  //       // Cost of parsing a known number of wasm types.\n  //       ParseWasmTypes = 27,\n  //       // Cost of parsing a known number of wasm data segments.\n  //       ParseWasmDataSegments = 28,\n  //       // Cost of parsing a known number of wasm element segments.\n  //       ParseWasmElemSegments = 29,\n  //       // Cost of parsing a known number of wasm imports.\n  //       ParseWasmImports = 30,\n  //       // Cost of parsing a known number of wasm exports.\n  //       ParseWasmExports = 31,\n  //       // Cost of parsing a known number of data segment bytes.\n  //       ParseWasmDataSegmentBytes = 32,\n  //\n  //       // Cost of instantiating wasm bytes that only encode instructions.\n  //       InstantiateWasmInstructions = 33,\n  //       // Cost of instantiating a known number of wasm functions.\n  //       InstantiateWasmFunctions = 34,\n  //       // Cost of instantiating a known number of wasm globals.\n  //       InstantiateWasmGlobals = 35,\n  //       // Cost of instantiating a known number of wasm table entries.\n  //       InstantiateWasmTableEntries = 36,\n  //       // Cost of instantiating a known number of wasm types.\n  //       InstantiateWasmTypes = 37,\n  //       // Cost of instantiating a known number of wasm data segments.\n  //       InstantiateWasmDataSegments = 38,\n  //       // Cost of instantiating a known number of wasm element segments.\n  //       InstantiateWasmElemSegments = 39,\n  //       // Cost of instantiating a known number of wasm imports.\n  //       InstantiateWasmImports = 40,\n  //       // Cost of instantiating a known number of wasm exports.\n  //       InstantiateWasmExports = 41,\n  //       // Cost of instantiating a known number of data segment bytes.\n  //       InstantiateWasmDataSegmentBytes = 42,\n  //\n  //       // Cost of decoding a bytes array representing an uncompressed SEC-1 encoded\n  //       // point on a 256-bit elliptic curve\n  //       Sec1DecodePointUncompressed = 43,\n  //       // Cost of verifying an ECDSA Secp256r1 signature\n  //       VerifyEcdsaSecp256r1Sig = 44,\n  //\n  //       // Cost of encoding a BLS12-381 Fp (base field element)\n  //       Bls12381EncodeFp = 45,\n  //       // Cost of decoding a BLS12-381 Fp (base field element)\n  //       Bls12381DecodeFp = 46,\n  //       // Cost of checking a G1 point lies on the curve\n  //       Bls12381G1CheckPointOnCurve = 47,\n  //       // Cost of checking a G1 point belongs to the correct subgroup\n  //       Bls12381G1CheckPointInSubgroup = 48,\n  //       // Cost of checking a G2 point lies on the curve\n  //       Bls12381G2CheckPointOnCurve = 49,\n  //       // Cost of checking a G2 point belongs to the correct subgroup\n  //       Bls12381G2CheckPointInSubgroup = 50,\n  //       // Cost of converting a BLS12-381 G1 point from projective to affine coordinates\n  //       Bls12381G1ProjectiveToAffine = 51,\n  //       // Cost of converting a BLS12-381 G2 point from projective to affine coordinates\n  //       Bls12381G2ProjectiveToAffine = 52,\n  //       // Cost of performing BLS12-381 G1 point addition\n  //       Bls12381G1Add = 53,\n  //       // Cost of performing BLS12-381 G1 scalar multiplication\n  //       Bls12381G1Mul = 54,\n  //       // Cost of performing BLS12-381 G1 multi-scalar multiplication (MSM)\n  //       Bls12381G1Msm = 55,\n  //       // Cost of mapping a BLS12-381 Fp field element to a G1 point\n  //       Bls12381MapFpToG1 = 56,\n  //       // Cost of hashing to a BLS12-381 G1 point\n  //       Bls12381HashToG1 = 57,\n  //       // Cost of performing BLS12-381 G2 point addition\n  //       Bls12381G2Add = 58,\n  //       // Cost of performing BLS12-381 G2 scalar multiplication\n  //       Bls12381G2Mul = 59,\n  //       // Cost of performing BLS12-381 G2 multi-scalar multiplication (MSM)\n  //       Bls12381G2Msm = 60,\n  //       // Cost of mapping a BLS12-381 Fp2 field element to a G2 point\n  //       Bls12381MapFp2ToG2 = 61,\n  //       // Cost of hashing to a BLS12-381 G2 point\n  //       Bls12381HashToG2 = 62,\n  //       // Cost of performing BLS12-381 pairing operation\n  //       Bls12381Pairing = 63,\n  //       // Cost of converting a BLS12-381 scalar element from U256\n  //       Bls12381FrFromU256 = 64,\n  //       // Cost of converting a BLS12-381 scalar element to U256\n  //       Bls12381FrToU256 = 65,\n  //       // Cost of performing BLS12-381 scalar element addition/subtraction\n  //       Bls12381FrAddSub = 66,\n  //       // Cost of performing BLS12-381 scalar element multiplication\n  //       Bls12381FrMul = 67,\n  //       // Cost of performing BLS12-381 scalar element exponentiation\n  //       Bls12381FrPow = 68,\n  //       // Cost of performing BLS12-381 scalar element inversion\n  //       Bls12381FrInv = 69\n  //   };\n  //\n  // ===========================================================================\n  xdr[\"enum\"](\"ContractCostType\", {\n    wasmInsnExec: 0,\n    memAlloc: 1,\n    memCpy: 2,\n    memCmp: 3,\n    dispatchHostFunction: 4,\n    visitObject: 5,\n    valSer: 6,\n    valDeser: 7,\n    computeSha256Hash: 8,\n    computeEd25519PubKey: 9,\n    verifyEd25519Sig: 10,\n    vmInstantiation: 11,\n    vmCachedInstantiation: 12,\n    invokeVmFunction: 13,\n    computeKeccak256Hash: 14,\n    decodeEcdsaCurve256Sig: 15,\n    recoverEcdsaSecp256k1Key: 16,\n    int256AddSub: 17,\n    int256Mul: 18,\n    int256Div: 19,\n    int256Pow: 20,\n    int256Shift: 21,\n    chaCha20DrawBytes: 22,\n    parseWasmInstructions: 23,\n    parseWasmFunctions: 24,\n    parseWasmGlobals: 25,\n    parseWasmTableEntries: 26,\n    parseWasmTypes: 27,\n    parseWasmDataSegments: 28,\n    parseWasmElemSegments: 29,\n    parseWasmImports: 30,\n    parseWasmExports: 31,\n    parseWasmDataSegmentBytes: 32,\n    instantiateWasmInstructions: 33,\n    instantiateWasmFunctions: 34,\n    instantiateWasmGlobals: 35,\n    instantiateWasmTableEntries: 36,\n    instantiateWasmTypes: 37,\n    instantiateWasmDataSegments: 38,\n    instantiateWasmElemSegments: 39,\n    instantiateWasmImports: 40,\n    instantiateWasmExports: 41,\n    instantiateWasmDataSegmentBytes: 42,\n    sec1DecodePointUncompressed: 43,\n    verifyEcdsaSecp256r1Sig: 44,\n    bls12381EncodeFp: 45,\n    bls12381DecodeFp: 46,\n    bls12381G1CheckPointOnCurve: 47,\n    bls12381G1CheckPointInSubgroup: 48,\n    bls12381G2CheckPointOnCurve: 49,\n    bls12381G2CheckPointInSubgroup: 50,\n    bls12381G1ProjectiveToAffine: 51,\n    bls12381G2ProjectiveToAffine: 52,\n    bls12381G1Add: 53,\n    bls12381G1Mul: 54,\n    bls12381G1Msm: 55,\n    bls12381MapFpToG1: 56,\n    bls12381HashToG1: 57,\n    bls12381G2Add: 58,\n    bls12381G2Mul: 59,\n    bls12381G2Msm: 60,\n    bls12381MapFp2ToG2: 61,\n    bls12381HashToG2: 62,\n    bls12381Pairing: 63,\n    bls12381FrFromU256: 64,\n    bls12381FrToU256: 65,\n    bls12381FrAddSub: 66,\n    bls12381FrMul: 67,\n    bls12381FrPow: 68,\n    bls12381FrInv: 69\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct ContractCostParamEntry {\n  //       // use `ext` to add more terms (e.g. higher order polynomials) in the future\n  //       ExtensionPoint ext;\n  //\n  //       int64 constTerm;\n  //       int64 linearTerm;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"ContractCostParamEntry\", [[\"ext\", xdr.lookup(\"ExtensionPoint\")], [\"constTerm\", xdr.lookup(\"Int64\")], [\"linearTerm\", xdr.lookup(\"Int64\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct StateArchivalSettings {\n  //       uint32 maxEntryTTL;\n  //       uint32 minTemporaryTTL;\n  //       uint32 minPersistentTTL;\n  //\n  //       // rent_fee = wfee_rate_average / rent_rate_denominator_for_type\n  //       int64 persistentRentRateDenominator;\n  //       int64 tempRentRateDenominator;\n  //\n  //       // max number of entries that emit archival meta in a single ledger\n  //       uint32 maxEntriesToArchive;\n  //\n  //       // Number of snapshots to use when calculating average BucketList size\n  //       uint32 bucketListSizeWindowSampleSize;\n  //\n  //       // How often to sample the BucketList size for the average, in ledgers\n  //       uint32 bucketListWindowSamplePeriod;\n  //\n  //       // Maximum number of bytes that we scan for eviction per ledger\n  //       uint32 evictionScanSize;\n  //\n  //       // Lowest BucketList level to be scanned to evict entries\n  //       uint32 startingEvictionScanLevel;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"StateArchivalSettings\", [[\"maxEntryTtl\", xdr.lookup(\"Uint32\")], [\"minTemporaryTtl\", xdr.lookup(\"Uint32\")], [\"minPersistentTtl\", xdr.lookup(\"Uint32\")], [\"persistentRentRateDenominator\", xdr.lookup(\"Int64\")], [\"tempRentRateDenominator\", xdr.lookup(\"Int64\")], [\"maxEntriesToArchive\", xdr.lookup(\"Uint32\")], [\"bucketListSizeWindowSampleSize\", xdr.lookup(\"Uint32\")], [\"bucketListWindowSamplePeriod\", xdr.lookup(\"Uint32\")], [\"evictionScanSize\", xdr.lookup(\"Uint32\")], [\"startingEvictionScanLevel\", xdr.lookup(\"Uint32\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct EvictionIterator {\n  //       uint32 bucketListLevel;\n  //       bool isCurrBucket;\n  //       uint64 bucketFileOffset;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"EvictionIterator\", [[\"bucketListLevel\", xdr.lookup(\"Uint32\")], [\"isCurrBucket\", xdr.bool()], [\"bucketFileOffset\", xdr.lookup(\"Uint64\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   const CONTRACT_COST_COUNT_LIMIT = 1024;\n  //\n  // ===========================================================================\n  xdr[\"const\"](\"CONTRACT_COST_COUNT_LIMIT\", 1024);\n\n  // === xdr source ============================================================\n  //\n  //   typedef ContractCostParamEntry ContractCostParams<CONTRACT_COST_COUNT_LIMIT>;\n  //\n  // ===========================================================================\n  xdr.typedef(\"ContractCostParams\", xdr.varArray(xdr.lookup(\"ContractCostParamEntry\"), xdr.lookup(\"CONTRACT_COST_COUNT_LIMIT\")));\n\n  // === xdr source ============================================================\n  //\n  //   enum ConfigSettingID\n  //   {\n  //       CONFIG_SETTING_CONTRACT_MAX_SIZE_BYTES = 0,\n  //       CONFIG_SETTING_CONTRACT_COMPUTE_V0 = 1,\n  //       CONFIG_SETTING_CONTRACT_LEDGER_COST_V0 = 2,\n  //       CONFIG_SETTING_CONTRACT_HISTORICAL_DATA_V0 = 3,\n  //       CONFIG_SETTING_CONTRACT_EVENTS_V0 = 4,\n  //       CONFIG_SETTING_CONTRACT_BANDWIDTH_V0 = 5,\n  //       CONFIG_SETTING_CONTRACT_COST_PARAMS_CPU_INSTRUCTIONS = 6,\n  //       CONFIG_SETTING_CONTRACT_COST_PARAMS_MEMORY_BYTES = 7,\n  //       CONFIG_SETTING_CONTRACT_DATA_KEY_SIZE_BYTES = 8,\n  //       CONFIG_SETTING_CONTRACT_DATA_ENTRY_SIZE_BYTES = 9,\n  //       CONFIG_SETTING_STATE_ARCHIVAL = 10,\n  //       CONFIG_SETTING_CONTRACT_EXECUTION_LANES = 11,\n  //       CONFIG_SETTING_BUCKETLIST_SIZE_WINDOW = 12,\n  //       CONFIG_SETTING_EVICTION_ITERATOR = 13\n  //   };\n  //\n  // ===========================================================================\n  xdr[\"enum\"](\"ConfigSettingId\", {\n    configSettingContractMaxSizeBytes: 0,\n    configSettingContractComputeV0: 1,\n    configSettingContractLedgerCostV0: 2,\n    configSettingContractHistoricalDataV0: 3,\n    configSettingContractEventsV0: 4,\n    configSettingContractBandwidthV0: 5,\n    configSettingContractCostParamsCpuInstructions: 6,\n    configSettingContractCostParamsMemoryBytes: 7,\n    configSettingContractDataKeySizeBytes: 8,\n    configSettingContractDataEntrySizeBytes: 9,\n    configSettingStateArchival: 10,\n    configSettingContractExecutionLanes: 11,\n    configSettingBucketlistSizeWindow: 12,\n    configSettingEvictionIterator: 13\n  });\n\n  // === xdr source ============================================================\n  //\n  //   union ConfigSettingEntry switch (ConfigSettingID configSettingID)\n  //   {\n  //   case CONFIG_SETTING_CONTRACT_MAX_SIZE_BYTES:\n  //       uint32 contractMaxSizeBytes;\n  //   case CONFIG_SETTING_CONTRACT_COMPUTE_V0:\n  //       ConfigSettingContractComputeV0 contractCompute;\n  //   case CONFIG_SETTING_CONTRACT_LEDGER_COST_V0:\n  //       ConfigSettingContractLedgerCostV0 contractLedgerCost;\n  //   case CONFIG_SETTING_CONTRACT_HISTORICAL_DATA_V0:\n  //       ConfigSettingContractHistoricalDataV0 contractHistoricalData;\n  //   case CONFIG_SETTING_CONTRACT_EVENTS_V0:\n  //       ConfigSettingContractEventsV0 contractEvents;\n  //   case CONFIG_SETTING_CONTRACT_BANDWIDTH_V0:\n  //       ConfigSettingContractBandwidthV0 contractBandwidth;\n  //   case CONFIG_SETTING_CONTRACT_COST_PARAMS_CPU_INSTRUCTIONS:\n  //       ContractCostParams contractCostParamsCpuInsns;\n  //   case CONFIG_SETTING_CONTRACT_COST_PARAMS_MEMORY_BYTES:\n  //       ContractCostParams contractCostParamsMemBytes;\n  //   case CONFIG_SETTING_CONTRACT_DATA_KEY_SIZE_BYTES:\n  //       uint32 contractDataKeySizeBytes;\n  //   case CONFIG_SETTING_CONTRACT_DATA_ENTRY_SIZE_BYTES:\n  //       uint32 contractDataEntrySizeBytes;\n  //   case CONFIG_SETTING_STATE_ARCHIVAL:\n  //       StateArchivalSettings stateArchivalSettings;\n  //   case CONFIG_SETTING_CONTRACT_EXECUTION_LANES:\n  //       ConfigSettingContractExecutionLanesV0 contractExecutionLanes;\n  //   case CONFIG_SETTING_BUCKETLIST_SIZE_WINDOW:\n  //       uint64 bucketListSizeWindow<>;\n  //   case CONFIG_SETTING_EVICTION_ITERATOR:\n  //       EvictionIterator evictionIterator;\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"ConfigSettingEntry\", {\n    switchOn: xdr.lookup(\"ConfigSettingId\"),\n    switchName: \"configSettingId\",\n    switches: [[\"configSettingContractMaxSizeBytes\", \"contractMaxSizeBytes\"], [\"configSettingContractComputeV0\", \"contractCompute\"], [\"configSettingContractLedgerCostV0\", \"contractLedgerCost\"], [\"configSettingContractHistoricalDataV0\", \"contractHistoricalData\"], [\"configSettingContractEventsV0\", \"contractEvents\"], [\"configSettingContractBandwidthV0\", \"contractBandwidth\"], [\"configSettingContractCostParamsCpuInstructions\", \"contractCostParamsCpuInsns\"], [\"configSettingContractCostParamsMemoryBytes\", \"contractCostParamsMemBytes\"], [\"configSettingContractDataKeySizeBytes\", \"contractDataKeySizeBytes\"], [\"configSettingContractDataEntrySizeBytes\", \"contractDataEntrySizeBytes\"], [\"configSettingStateArchival\", \"stateArchivalSettings\"], [\"configSettingContractExecutionLanes\", \"contractExecutionLanes\"], [\"configSettingBucketlistSizeWindow\", \"bucketListSizeWindow\"], [\"configSettingEvictionIterator\", \"evictionIterator\"]],\n    arms: {\n      contractMaxSizeBytes: xdr.lookup(\"Uint32\"),\n      contractCompute: xdr.lookup(\"ConfigSettingContractComputeV0\"),\n      contractLedgerCost: xdr.lookup(\"ConfigSettingContractLedgerCostV0\"),\n      contractHistoricalData: xdr.lookup(\"ConfigSettingContractHistoricalDataV0\"),\n      contractEvents: xdr.lookup(\"ConfigSettingContractEventsV0\"),\n      contractBandwidth: xdr.lookup(\"ConfigSettingContractBandwidthV0\"),\n      contractCostParamsCpuInsns: xdr.lookup(\"ContractCostParams\"),\n      contractCostParamsMemBytes: xdr.lookup(\"ContractCostParams\"),\n      contractDataKeySizeBytes: xdr.lookup(\"Uint32\"),\n      contractDataEntrySizeBytes: xdr.lookup(\"Uint32\"),\n      stateArchivalSettings: xdr.lookup(\"StateArchivalSettings\"),\n      contractExecutionLanes: xdr.lookup(\"ConfigSettingContractExecutionLanesV0\"),\n      bucketListSizeWindow: xdr.varArray(xdr.lookup(\"Uint64\"), 2147483647),\n      evictionIterator: xdr.lookup(\"EvictionIterator\")\n    }\n  });\n});\nvar _default = exports[\"default\"] = types;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@stellar/stellar-base/lib/generated/curr_generated.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@stellar/stellar-base/lib/get_liquidity_pool_id.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@stellar/stellar-base/lib/get_liquidity_pool_id.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.LiquidityPoolFeeV18 = void 0;\nexports.getLiquidityPoolId = getLiquidityPoolId;\nvar _xdr = _interopRequireDefault(__webpack_require__(/*! ./xdr */ \"(ssr)/./node_modules/@stellar/stellar-base/lib/xdr.js\"));\nvar _asset = __webpack_require__(/*! ./asset */ \"(ssr)/./node_modules/@stellar/stellar-base/lib/asset.js\");\nvar _hashing = __webpack_require__(/*! ./hashing */ \"(ssr)/./node_modules/@stellar/stellar-base/lib/hashing.js\");\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { \"default\": e }; }\n// LiquidityPoolFeeV18 is the default liquidity pool fee in protocol v18. It defaults to 30 base points (0.3%).\nvar LiquidityPoolFeeV18 = exports.LiquidityPoolFeeV18 = 30;\n\n/**\n * getLiquidityPoolId computes the Pool ID for the given assets, fee and pool type.\n *\n * @see [stellar-core getPoolID](https://github.com/stellar/stellar-core/blob/9f3a48c6a8f1aa77b6043a055d0638661f718080/src/ledger/test/LedgerTxnTests.cpp#L3746-L3751)\n *\n * @export\n * @param {string} liquidityPoolType – A string representing the liquidity pool type.\n * @param {object} liquidityPoolParameters        – The liquidity pool parameters.\n * @param {Asset}  liquidityPoolParameters.assetA – The first asset in the Pool, it must respect the rule assetA < assetB.\n * @param {Asset}  liquidityPoolParameters.assetB – The second asset in the Pool, it must respect the rule assetA < assetB.\n * @param {number} liquidityPoolParameters.fee    – The liquidity pool fee. For now the only fee supported is `30`.\n *\n * @return {Buffer} the raw Pool ID buffer, which can be stringfied with `toString('hex')`\n */\nfunction getLiquidityPoolId(liquidityPoolType) {\n  var liquidityPoolParameters = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  if (liquidityPoolType !== 'constant_product') {\n    throw new Error('liquidityPoolType is invalid');\n  }\n  var assetA = liquidityPoolParameters.assetA,\n    assetB = liquidityPoolParameters.assetB,\n    fee = liquidityPoolParameters.fee;\n  if (!assetA || !(assetA instanceof _asset.Asset)) {\n    throw new Error('assetA is invalid');\n  }\n  if (!assetB || !(assetB instanceof _asset.Asset)) {\n    throw new Error('assetB is invalid');\n  }\n  if (!fee || fee !== LiquidityPoolFeeV18) {\n    throw new Error('fee is invalid');\n  }\n  if (_asset.Asset.compare(assetA, assetB) !== -1) {\n    throw new Error('Assets are not in lexicographic order');\n  }\n  var lpTypeData = _xdr[\"default\"].LiquidityPoolType.liquidityPoolConstantProduct().toXDR();\n  var lpParamsData = new _xdr[\"default\"].LiquidityPoolConstantProductParameters({\n    assetA: assetA.toXDRObject(),\n    assetB: assetB.toXDRObject(),\n    fee: fee\n  }).toXDR();\n  var payload = Buffer.concat([lpTypeData, lpParamsData]);\n  return (0, _hashing.hash)(payload);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHN0ZWxsYXIvc3RlbGxhci1iYXNlL2xpYi9nZXRfbGlxdWlkaXR5X3Bvb2xfaWQuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsOENBQTZDO0FBQzdDO0FBQ0EsQ0FBQyxFQUFDO0FBQ0YsMkJBQTJCO0FBQzNCLDBCQUEwQjtBQUMxQixrQ0FBa0MsbUJBQU8sQ0FBQyxvRUFBTztBQUNqRCxhQUFhLG1CQUFPLENBQUMsd0VBQVM7QUFDOUIsZUFBZSxtQkFBTyxDQUFDLDRFQUFXO0FBQ2xDLHFDQUFxQyxpQ0FBaUM7QUFDdEU7QUFDQSwwQkFBMEIsMkJBQTJCOztBQUVyRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFFBQVE7QUFDbkIsV0FBVyxRQUFRO0FBQ25CLFdBQVcsUUFBUTtBQUNuQixXQUFXLFFBQVE7QUFDbkIsV0FBVyxRQUFRO0FBQ25CO0FBQ0EsWUFBWSxRQUFRO0FBQ3BCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXFVTVUFSSU9cXERvY3VtZW50c1xcR2l0aHViXFxHYWxheHlLSi13YWxsZXQtLS1IYWNrXFx3ZWJcXG5vZGVfbW9kdWxlc1xcQHN0ZWxsYXJcXHN0ZWxsYXItYmFzZVxcbGliXFxnZXRfbGlxdWlkaXR5X3Bvb2xfaWQuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLkxpcXVpZGl0eVBvb2xGZWVWMTggPSB2b2lkIDA7XG5leHBvcnRzLmdldExpcXVpZGl0eVBvb2xJZCA9IGdldExpcXVpZGl0eVBvb2xJZDtcbnZhciBfeGRyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi94ZHJcIikpO1xudmFyIF9hc3NldCA9IHJlcXVpcmUoXCIuL2Fzc2V0XCIpO1xudmFyIF9oYXNoaW5nID0gcmVxdWlyZShcIi4vaGFzaGluZ1wiKTtcbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoZSkgeyByZXR1cm4gZSAmJiBlLl9fZXNNb2R1bGUgPyBlIDogeyBcImRlZmF1bHRcIjogZSB9OyB9XG4vLyBMaXF1aWRpdHlQb29sRmVlVjE4IGlzIHRoZSBkZWZhdWx0IGxpcXVpZGl0eSBwb29sIGZlZSBpbiBwcm90b2NvbCB2MTguIEl0IGRlZmF1bHRzIHRvIDMwIGJhc2UgcG9pbnRzICgwLjMlKS5cbnZhciBMaXF1aWRpdHlQb29sRmVlVjE4ID0gZXhwb3J0cy5MaXF1aWRpdHlQb29sRmVlVjE4ID0gMzA7XG5cbi8qKlxuICogZ2V0TGlxdWlkaXR5UG9vbElkIGNvbXB1dGVzIHRoZSBQb29sIElEIGZvciB0aGUgZ2l2ZW4gYXNzZXRzLCBmZWUgYW5kIHBvb2wgdHlwZS5cbiAqXG4gKiBAc2VlIFtzdGVsbGFyLWNvcmUgZ2V0UG9vbElEXShodHRwczovL2dpdGh1Yi5jb20vc3RlbGxhci9zdGVsbGFyLWNvcmUvYmxvYi85ZjNhNDhjNmE4ZjFhYTc3YjYwNDNhMDU1ZDA2Mzg2NjFmNzE4MDgwL3NyYy9sZWRnZXIvdGVzdC9MZWRnZXJUeG5UZXN0cy5jcHAjTDM3NDYtTDM3NTEpXG4gKlxuICogQGV4cG9ydFxuICogQHBhcmFtIHtzdHJpbmd9IGxpcXVpZGl0eVBvb2xUeXBlIOKAkyBBIHN0cmluZyByZXByZXNlbnRpbmcgdGhlIGxpcXVpZGl0eSBwb29sIHR5cGUuXG4gKiBAcGFyYW0ge29iamVjdH0gbGlxdWlkaXR5UG9vbFBhcmFtZXRlcnMgICAgICAgIOKAkyBUaGUgbGlxdWlkaXR5IHBvb2wgcGFyYW1ldGVycy5cbiAqIEBwYXJhbSB7QXNzZXR9ICBsaXF1aWRpdHlQb29sUGFyYW1ldGVycy5hc3NldEEg4oCTIFRoZSBmaXJzdCBhc3NldCBpbiB0aGUgUG9vbCwgaXQgbXVzdCByZXNwZWN0IHRoZSBydWxlIGFzc2V0QSA8IGFzc2V0Qi5cbiAqIEBwYXJhbSB7QXNzZXR9ICBsaXF1aWRpdHlQb29sUGFyYW1ldGVycy5hc3NldEIg4oCTIFRoZSBzZWNvbmQgYXNzZXQgaW4gdGhlIFBvb2wsIGl0IG11c3QgcmVzcGVjdCB0aGUgcnVsZSBhc3NldEEgPCBhc3NldEIuXG4gKiBAcGFyYW0ge251bWJlcn0gbGlxdWlkaXR5UG9vbFBhcmFtZXRlcnMuZmVlICAgIOKAkyBUaGUgbGlxdWlkaXR5IHBvb2wgZmVlLiBGb3Igbm93IHRoZSBvbmx5IGZlZSBzdXBwb3J0ZWQgaXMgYDMwYC5cbiAqXG4gKiBAcmV0dXJuIHtCdWZmZXJ9IHRoZSByYXcgUG9vbCBJRCBidWZmZXIsIHdoaWNoIGNhbiBiZSBzdHJpbmdmaWVkIHdpdGggYHRvU3RyaW5nKCdoZXgnKWBcbiAqL1xuZnVuY3Rpb24gZ2V0TGlxdWlkaXR5UG9vbElkKGxpcXVpZGl0eVBvb2xUeXBlKSB7XG4gIHZhciBsaXF1aWRpdHlQb29sUGFyYW1ldGVycyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDoge307XG4gIGlmIChsaXF1aWRpdHlQb29sVHlwZSAhPT0gJ2NvbnN0YW50X3Byb2R1Y3QnKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdsaXF1aWRpdHlQb29sVHlwZSBpcyBpbnZhbGlkJyk7XG4gIH1cbiAgdmFyIGFzc2V0QSA9IGxpcXVpZGl0eVBvb2xQYXJhbWV0ZXJzLmFzc2V0QSxcbiAgICBhc3NldEIgPSBsaXF1aWRpdHlQb29sUGFyYW1ldGVycy5hc3NldEIsXG4gICAgZmVlID0gbGlxdWlkaXR5UG9vbFBhcmFtZXRlcnMuZmVlO1xuICBpZiAoIWFzc2V0QSB8fCAhKGFzc2V0QSBpbnN0YW5jZW9mIF9hc3NldC5Bc3NldCkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2Fzc2V0QSBpcyBpbnZhbGlkJyk7XG4gIH1cbiAgaWYgKCFhc3NldEIgfHwgIShhc3NldEIgaW5zdGFuY2VvZiBfYXNzZXQuQXNzZXQpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdhc3NldEIgaXMgaW52YWxpZCcpO1xuICB9XG4gIGlmICghZmVlIHx8IGZlZSAhPT0gTGlxdWlkaXR5UG9vbEZlZVYxOCkge1xuICAgIHRocm93IG5ldyBFcnJvcignZmVlIGlzIGludmFsaWQnKTtcbiAgfVxuICBpZiAoX2Fzc2V0LkFzc2V0LmNvbXBhcmUoYXNzZXRBLCBhc3NldEIpICE9PSAtMSkge1xuICAgIHRocm93IG5ldyBFcnJvcignQXNzZXRzIGFyZSBub3QgaW4gbGV4aWNvZ3JhcGhpYyBvcmRlcicpO1xuICB9XG4gIHZhciBscFR5cGVEYXRhID0gX3hkcltcImRlZmF1bHRcIl0uTGlxdWlkaXR5UG9vbFR5cGUubGlxdWlkaXR5UG9vbENvbnN0YW50UHJvZHVjdCgpLnRvWERSKCk7XG4gIHZhciBscFBhcmFtc0RhdGEgPSBuZXcgX3hkcltcImRlZmF1bHRcIl0uTGlxdWlkaXR5UG9vbENvbnN0YW50UHJvZHVjdFBhcmFtZXRlcnMoe1xuICAgIGFzc2V0QTogYXNzZXRBLnRvWERST2JqZWN0KCksXG4gICAgYXNzZXRCOiBhc3NldEIudG9YRFJPYmplY3QoKSxcbiAgICBmZWU6IGZlZVxuICB9KS50b1hEUigpO1xuICB2YXIgcGF5bG9hZCA9IEJ1ZmZlci5jb25jYXQoW2xwVHlwZURhdGEsIGxwUGFyYW1zRGF0YV0pO1xuICByZXR1cm4gKDAsIF9oYXNoaW5nLmhhc2gpKHBheWxvYWQpO1xufSJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@stellar/stellar-base/lib/get_liquidity_pool_id.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@stellar/stellar-base/lib/hashing.js":
/*!***********************************************************!*\
  !*** ./node_modules/@stellar/stellar-base/lib/hashing.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.hash = hash;\nvar _sha = __webpack_require__(/*! sha.js */ \"(ssr)/./node_modules/sha.js/index.js\");\nfunction hash(data) {\n  var hasher = new _sha.sha256();\n  hasher.update(data, 'utf8');\n  return hasher.digest();\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHN0ZWxsYXIvc3RlbGxhci1iYXNlL2xpYi9oYXNoaW5nLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLDhDQUE2QztBQUM3QztBQUNBLENBQUMsRUFBQztBQUNGLFlBQVk7QUFDWixXQUFXLG1CQUFPLENBQUMsb0RBQVE7QUFDM0I7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxVU1VBUklPXFxEb2N1bWVudHNcXEdpdGh1YlxcR2FsYXh5S0otd2FsbGV0LS0tSGFja1xcd2ViXFxub2RlX21vZHVsZXNcXEBzdGVsbGFyXFxzdGVsbGFyLWJhc2VcXGxpYlxcaGFzaGluZy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuaGFzaCA9IGhhc2g7XG52YXIgX3NoYSA9IHJlcXVpcmUoXCJzaGEuanNcIik7XG5mdW5jdGlvbiBoYXNoKGRhdGEpIHtcbiAgdmFyIGhhc2hlciA9IG5ldyBfc2hhLnNoYTI1NigpO1xuICBoYXNoZXIudXBkYXRlKGRhdGEsICd1dGY4Jyk7XG4gIHJldHVybiBoYXNoZXIuZGlnZXN0KCk7XG59Il0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@stellar/stellar-base/lib/hashing.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@stellar/stellar-base/lib/index.js":
/*!*********************************************************!*\
  !*** ./node_modules/@stellar/stellar-base/lib/index.js ***!
  \*********************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nvar _exportNames = {\n  xdr: true,\n  cereal: true,\n  hash: true,\n  sign: true,\n  verify: true,\n  FastSigning: true,\n  getLiquidityPoolId: true,\n  LiquidityPoolFeeV18: true,\n  Keypair: true,\n  UnsignedHyper: true,\n  Hyper: true,\n  TransactionBase: true,\n  Transaction: true,\n  FeeBumpTransaction: true,\n  TransactionBuilder: true,\n  TimeoutInfinite: true,\n  BASE_FEE: true,\n  Asset: true,\n  LiquidityPoolAsset: true,\n  LiquidityPoolId: true,\n  Operation: true,\n  AuthRequiredFlag: true,\n  AuthRevocableFlag: true,\n  AuthImmutableFlag: true,\n  AuthClawbackEnabledFlag: true,\n  Account: true,\n  MuxedAccount: true,\n  Claimant: true,\n  Networks: true,\n  StrKey: true,\n  SignerKey: true,\n  Soroban: true,\n  decodeAddressToMuxedAccount: true,\n  encodeMuxedAccountToAddress: true,\n  extractBaseAddress: true,\n  encodeMuxedAccount: true,\n  Contract: true,\n  Address: true\n};\nObject.defineProperty(exports, \"Account\", ({\n  enumerable: true,\n  get: function get() {\n    return _account.Account;\n  }\n}));\nObject.defineProperty(exports, \"Address\", ({\n  enumerable: true,\n  get: function get() {\n    return _address.Address;\n  }\n}));\nObject.defineProperty(exports, \"Asset\", ({\n  enumerable: true,\n  get: function get() {\n    return _asset.Asset;\n  }\n}));\nObject.defineProperty(exports, \"AuthClawbackEnabledFlag\", ({\n  enumerable: true,\n  get: function get() {\n    return _operation.AuthClawbackEnabledFlag;\n  }\n}));\nObject.defineProperty(exports, \"AuthImmutableFlag\", ({\n  enumerable: true,\n  get: function get() {\n    return _operation.AuthImmutableFlag;\n  }\n}));\nObject.defineProperty(exports, \"AuthRequiredFlag\", ({\n  enumerable: true,\n  get: function get() {\n    return _operation.AuthRequiredFlag;\n  }\n}));\nObject.defineProperty(exports, \"AuthRevocableFlag\", ({\n  enumerable: true,\n  get: function get() {\n    return _operation.AuthRevocableFlag;\n  }\n}));\nObject.defineProperty(exports, \"BASE_FEE\", ({\n  enumerable: true,\n  get: function get() {\n    return _transaction_builder.BASE_FEE;\n  }\n}));\nObject.defineProperty(exports, \"Claimant\", ({\n  enumerable: true,\n  get: function get() {\n    return _claimant.Claimant;\n  }\n}));\nObject.defineProperty(exports, \"Contract\", ({\n  enumerable: true,\n  get: function get() {\n    return _contract.Contract;\n  }\n}));\nObject.defineProperty(exports, \"FastSigning\", ({\n  enumerable: true,\n  get: function get() {\n    return _signing.FastSigning;\n  }\n}));\nObject.defineProperty(exports, \"FeeBumpTransaction\", ({\n  enumerable: true,\n  get: function get() {\n    return _fee_bump_transaction.FeeBumpTransaction;\n  }\n}));\nObject.defineProperty(exports, \"Hyper\", ({\n  enumerable: true,\n  get: function get() {\n    return _jsXdr.Hyper;\n  }\n}));\nObject.defineProperty(exports, \"Keypair\", ({\n  enumerable: true,\n  get: function get() {\n    return _keypair.Keypair;\n  }\n}));\nObject.defineProperty(exports, \"LiquidityPoolAsset\", ({\n  enumerable: true,\n  get: function get() {\n    return _liquidity_pool_asset.LiquidityPoolAsset;\n  }\n}));\nObject.defineProperty(exports, \"LiquidityPoolFeeV18\", ({\n  enumerable: true,\n  get: function get() {\n    return _get_liquidity_pool_id.LiquidityPoolFeeV18;\n  }\n}));\nObject.defineProperty(exports, \"LiquidityPoolId\", ({\n  enumerable: true,\n  get: function get() {\n    return _liquidity_pool_id.LiquidityPoolId;\n  }\n}));\nObject.defineProperty(exports, \"MuxedAccount\", ({\n  enumerable: true,\n  get: function get() {\n    return _muxed_account.MuxedAccount;\n  }\n}));\nObject.defineProperty(exports, \"Networks\", ({\n  enumerable: true,\n  get: function get() {\n    return _network.Networks;\n  }\n}));\nObject.defineProperty(exports, \"Operation\", ({\n  enumerable: true,\n  get: function get() {\n    return _operation.Operation;\n  }\n}));\nObject.defineProperty(exports, \"SignerKey\", ({\n  enumerable: true,\n  get: function get() {\n    return _signerkey.SignerKey;\n  }\n}));\nObject.defineProperty(exports, \"Soroban\", ({\n  enumerable: true,\n  get: function get() {\n    return _soroban.Soroban;\n  }\n}));\nObject.defineProperty(exports, \"StrKey\", ({\n  enumerable: true,\n  get: function get() {\n    return _strkey.StrKey;\n  }\n}));\nObject.defineProperty(exports, \"TimeoutInfinite\", ({\n  enumerable: true,\n  get: function get() {\n    return _transaction_builder.TimeoutInfinite;\n  }\n}));\nObject.defineProperty(exports, \"Transaction\", ({\n  enumerable: true,\n  get: function get() {\n    return _transaction.Transaction;\n  }\n}));\nObject.defineProperty(exports, \"TransactionBase\", ({\n  enumerable: true,\n  get: function get() {\n    return _transaction_base.TransactionBase;\n  }\n}));\nObject.defineProperty(exports, \"TransactionBuilder\", ({\n  enumerable: true,\n  get: function get() {\n    return _transaction_builder.TransactionBuilder;\n  }\n}));\nObject.defineProperty(exports, \"UnsignedHyper\", ({\n  enumerable: true,\n  get: function get() {\n    return _jsXdr.UnsignedHyper;\n  }\n}));\nObject.defineProperty(exports, \"cereal\", ({\n  enumerable: true,\n  get: function get() {\n    return _jsxdr[\"default\"];\n  }\n}));\nObject.defineProperty(exports, \"decodeAddressToMuxedAccount\", ({\n  enumerable: true,\n  get: function get() {\n    return _decode_encode_muxed_account.decodeAddressToMuxedAccount;\n  }\n}));\nexports[\"default\"] = void 0;\nObject.defineProperty(exports, \"encodeMuxedAccount\", ({\n  enumerable: true,\n  get: function get() {\n    return _decode_encode_muxed_account.encodeMuxedAccount;\n  }\n}));\nObject.defineProperty(exports, \"encodeMuxedAccountToAddress\", ({\n  enumerable: true,\n  get: function get() {\n    return _decode_encode_muxed_account.encodeMuxedAccountToAddress;\n  }\n}));\nObject.defineProperty(exports, \"extractBaseAddress\", ({\n  enumerable: true,\n  get: function get() {\n    return _decode_encode_muxed_account.extractBaseAddress;\n  }\n}));\nObject.defineProperty(exports, \"getLiquidityPoolId\", ({\n  enumerable: true,\n  get: function get() {\n    return _get_liquidity_pool_id.getLiquidityPoolId;\n  }\n}));\nObject.defineProperty(exports, \"hash\", ({\n  enumerable: true,\n  get: function get() {\n    return _hashing.hash;\n  }\n}));\nObject.defineProperty(exports, \"sign\", ({\n  enumerable: true,\n  get: function get() {\n    return _signing.sign;\n  }\n}));\nObject.defineProperty(exports, \"verify\", ({\n  enumerable: true,\n  get: function get() {\n    return _signing.verify;\n  }\n}));\nObject.defineProperty(exports, \"xdr\", ({\n  enumerable: true,\n  get: function get() {\n    return _xdr[\"default\"];\n  }\n}));\nvar _xdr = _interopRequireDefault(__webpack_require__(/*! ./xdr */ \"(ssr)/./node_modules/@stellar/stellar-base/lib/xdr.js\"));\nvar _jsxdr = _interopRequireDefault(__webpack_require__(/*! ./jsxdr */ \"(ssr)/./node_modules/@stellar/stellar-base/lib/jsxdr.js\"));\nvar _hashing = __webpack_require__(/*! ./hashing */ \"(ssr)/./node_modules/@stellar/stellar-base/lib/hashing.js\");\nvar _signing = __webpack_require__(/*! ./signing */ \"(ssr)/./node_modules/@stellar/stellar-base/lib/signing.js\");\nvar _get_liquidity_pool_id = __webpack_require__(/*! ./get_liquidity_pool_id */ \"(ssr)/./node_modules/@stellar/stellar-base/lib/get_liquidity_pool_id.js\");\nvar _keypair = __webpack_require__(/*! ./keypair */ \"(ssr)/./node_modules/@stellar/stellar-base/lib/keypair.js\");\nvar _jsXdr = __webpack_require__(/*! @stellar/js-xdr */ \"(ssr)/./node_modules/@stellar/js-xdr/src/index.js\");\nvar _transaction_base = __webpack_require__(/*! ./transaction_base */ \"(ssr)/./node_modules/@stellar/stellar-base/lib/transaction_base.js\");\nvar _transaction = __webpack_require__(/*! ./transaction */ \"(ssr)/./node_modules/@stellar/stellar-base/lib/transaction.js\");\nvar _fee_bump_transaction = __webpack_require__(/*! ./fee_bump_transaction */ \"(ssr)/./node_modules/@stellar/stellar-base/lib/fee_bump_transaction.js\");\nvar _transaction_builder = __webpack_require__(/*! ./transaction_builder */ \"(ssr)/./node_modules/@stellar/stellar-base/lib/transaction_builder.js\");\nvar _asset = __webpack_require__(/*! ./asset */ \"(ssr)/./node_modules/@stellar/stellar-base/lib/asset.js\");\nvar _liquidity_pool_asset = __webpack_require__(/*! ./liquidity_pool_asset */ \"(ssr)/./node_modules/@stellar/stellar-base/lib/liquidity_pool_asset.js\");\nvar _liquidity_pool_id = __webpack_require__(/*! ./liquidity_pool_id */ \"(ssr)/./node_modules/@stellar/stellar-base/lib/liquidity_pool_id.js\");\nvar _operation = __webpack_require__(/*! ./operation */ \"(ssr)/./node_modules/@stellar/stellar-base/lib/operation.js\");\nvar _memo = __webpack_require__(/*! ./memo */ \"(ssr)/./node_modules/@stellar/stellar-base/lib/memo.js\");\nObject.keys(_memo).forEach(function (key) {\n  if (key === \"default\" || key === \"__esModule\") return;\n  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;\n  if (key in exports && exports[key] === _memo[key]) return;\n  Object.defineProperty(exports, key, {\n    enumerable: true,\n    get: function get() {\n      return _memo[key];\n    }\n  });\n});\nvar _account = __webpack_require__(/*! ./account */ \"(ssr)/./node_modules/@stellar/stellar-base/lib/account.js\");\nvar _muxed_account = __webpack_require__(/*! ./muxed_account */ \"(ssr)/./node_modules/@stellar/stellar-base/lib/muxed_account.js\");\nvar _claimant = __webpack_require__(/*! ./claimant */ \"(ssr)/./node_modules/@stellar/stellar-base/lib/claimant.js\");\nvar _network = __webpack_require__(/*! ./network */ \"(ssr)/./node_modules/@stellar/stellar-base/lib/network.js\");\nvar _strkey = __webpack_require__(/*! ./strkey */ \"(ssr)/./node_modules/@stellar/stellar-base/lib/strkey.js\");\nvar _signerkey = __webpack_require__(/*! ./signerkey */ \"(ssr)/./node_modules/@stellar/stellar-base/lib/signerkey.js\");\nvar _soroban = __webpack_require__(/*! ./soroban */ \"(ssr)/./node_modules/@stellar/stellar-base/lib/soroban.js\");\nvar _decode_encode_muxed_account = __webpack_require__(/*! ./util/decode_encode_muxed_account */ \"(ssr)/./node_modules/@stellar/stellar-base/lib/util/decode_encode_muxed_account.js\");\nvar _contract = __webpack_require__(/*! ./contract */ \"(ssr)/./node_modules/@stellar/stellar-base/lib/contract.js\");\nvar _address = __webpack_require__(/*! ./address */ \"(ssr)/./node_modules/@stellar/stellar-base/lib/address.js\");\nvar _numbers = __webpack_require__(/*! ./numbers */ \"(ssr)/./node_modules/@stellar/stellar-base/lib/numbers/index.js\");\nObject.keys(_numbers).forEach(function (key) {\n  if (key === \"default\" || key === \"__esModule\") return;\n  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;\n  if (key in exports && exports[key] === _numbers[key]) return;\n  Object.defineProperty(exports, key, {\n    enumerable: true,\n    get: function get() {\n      return _numbers[key];\n    }\n  });\n});\nvar _scval = __webpack_require__(/*! ./scval */ \"(ssr)/./node_modules/@stellar/stellar-base/lib/scval.js\");\nObject.keys(_scval).forEach(function (key) {\n  if (key === \"default\" || key === \"__esModule\") return;\n  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;\n  if (key in exports && exports[key] === _scval[key]) return;\n  Object.defineProperty(exports, key, {\n    enumerable: true,\n    get: function get() {\n      return _scval[key];\n    }\n  });\n});\nvar _events = __webpack_require__(/*! ./events */ \"(ssr)/./node_modules/@stellar/stellar-base/lib/events.js\");\nObject.keys(_events).forEach(function (key) {\n  if (key === \"default\" || key === \"__esModule\") return;\n  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;\n  if (key in exports && exports[key] === _events[key]) return;\n  Object.defineProperty(exports, key, {\n    enumerable: true,\n    get: function get() {\n      return _events[key];\n    }\n  });\n});\nvar _sorobandata_builder = __webpack_require__(/*! ./sorobandata_builder */ \"(ssr)/./node_modules/@stellar/stellar-base/lib/sorobandata_builder.js\");\nObject.keys(_sorobandata_builder).forEach(function (key) {\n  if (key === \"default\" || key === \"__esModule\") return;\n  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;\n  if (key in exports && exports[key] === _sorobandata_builder[key]) return;\n  Object.defineProperty(exports, key, {\n    enumerable: true,\n    get: function get() {\n      return _sorobandata_builder[key];\n    }\n  });\n});\nvar _auth = __webpack_require__(/*! ./auth */ \"(ssr)/./node_modules/@stellar/stellar-base/lib/auth.js\");\nObject.keys(_auth).forEach(function (key) {\n  if (key === \"default\" || key === \"__esModule\") return;\n  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;\n  if (key in exports && exports[key] === _auth[key]) return;\n  Object.defineProperty(exports, key, {\n    enumerable: true,\n    get: function get() {\n      return _auth[key];\n    }\n  });\n});\nvar _invocation = __webpack_require__(/*! ./invocation */ \"(ssr)/./node_modules/@stellar/stellar-base/lib/invocation.js\");\nObject.keys(_invocation).forEach(function (key) {\n  if (key === \"default\" || key === \"__esModule\") return;\n  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;\n  if (key in exports && exports[key] === _invocation[key]) return;\n  Object.defineProperty(exports, key, {\n    enumerable: true,\n    get: function get() {\n      return _invocation[key];\n    }\n  });\n});\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { \"default\": e }; }\n/* eslint-disable import/no-import-module-exports */\n//\n// Soroban\n//\nvar _default = exports[\"default\"] = module.exports;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@stellar/stellar-base/lib/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@stellar/stellar-base/lib/invocation.js":
/*!**************************************************************!*\
  !*** ./node_modules/@stellar/stellar-base/lib/invocation.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.buildInvocationTree = buildInvocationTree;\nexports.walkInvocationTree = walkInvocationTree;\nvar _asset = __webpack_require__(/*! ./asset */ \"(ssr)/./node_modules/@stellar/stellar-base/lib/asset.js\");\nvar _address = __webpack_require__(/*! ./address */ \"(ssr)/./node_modules/@stellar/stellar-base/lib/address.js\");\nvar _scval = __webpack_require__(/*! ./scval */ \"(ssr)/./node_modules/@stellar/stellar-base/lib/scval.js\");\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\n/**\n * @typedef CreateInvocation\n *\n * @prop {'wasm'|'sac'} type  a type indicating if this creation was a custom\n *    contract or a wrapping of an existing Stellar asset\n * @prop {string} [token] when `type=='sac'`, the canonical {@link Asset} that\n *    is being wrapped by this Stellar Asset Contract\n * @prop {object} [wasm]  when `type=='wasm'`, add'l creation parameters\n *\n * @prop {string} wasm.hash     hex hash of WASM bytecode backing this contract\n * @prop {string} wasm.address  contract address of this deployment\n * @prop {string} wasm.salt     hex salt that the user consumed when creating\n *    this contract (encoded in the resulting address)\n * @prop {any[]}  [wasm.constructorArgs] a list of natively-represented values\n *    (see {@link scValToNative}) that are passed to the constructor when\n *    creating this contract\n */\n\n/**\n * @typedef ExecuteInvocation\n *\n * @prop {string} source    the strkey of the contract (C...) being invoked\n * @prop {string} function  the name of the function being invoked\n * @prop {any[]}  args      the natively-represented parameters to the function\n *    invocation (see {@link scValToNative} for rules on how they're\n *    represented a JS types)\n */\n\n/**\n * @typedef InvocationTree\n * @prop {'execute' | 'create'} type  the type of invocation occurring, either\n *    contract creation or host function execution\n * @prop {CreateInvocation | ExecuteInvocation} args  the parameters to the\n *    invocation, depending on the type\n * @prop {InvocationTree[]} invocations   any sub-invocations that (may) occur\n *    as a result of this invocation (i.e. a tree of call stacks)\n */\n\n/**\n * Turns a raw invocation tree into a human-readable format.\n *\n * This is designed to make the invocation tree easier to understand in order to\n * inform users about the side-effects of their contract calls. This will help\n * make informed decisions about whether or not a particular invocation will\n * result in what you expect it to.\n *\n * @param {xdr.SorobanAuthorizedInvocation} root  the raw XDR of the invocation,\n *    likely acquired from transaction simulation. this is either from the\n *    {@link Operation.invokeHostFunction} itself (the `func` field), or from\n *    the authorization entries ({@link xdr.SorobanAuthorizationEntry}, the\n *    `rootInvocation` field)\n *\n * @returns {InvocationTree}  a human-readable version of the invocation tree\n *\n * @example\n * Here, we show a browser modal after simulating an arbitrary transaction,\n * `tx`, which we assume has an `Operation.invokeHostFunction` inside of it:\n *\n * ```typescript\n * import { Server, buildInvocationTree } from '@stellar/stellar-sdk';\n *\n * const s = new Server(\"fill in accordingly\");\n *\n * s.simulateTransaction(tx).then(\n *  (resp: SorobanRpc.SimulateTransactionResponse) => {\n *    if (SorobanRpc.isSuccessfulSim(resp) && ) {\n *      // bold assumption: there's a valid result with an auth entry\n *      alert(\n *        \"You are authorizing the following invocation:\\n\" +\n *        JSON.stringify(\n *          buildInvocationTree(resp.result!.auth[0].rootInvocation()),\n *          null,\n *          2\n *        )\n *      );\n *    }\n *  }\n * );\n * ```\n */\nfunction buildInvocationTree(root) {\n  var fn = root[\"function\"]();\n\n  /** @type {InvocationTree} */\n  var output = {};\n\n  /** @type {xdr.CreateContractArgs|xdr.CreateContractArgsV2|xdr.InvokeContractArgs} */\n  var inner = fn.value();\n  switch (fn[\"switch\"]().value) {\n    // sorobanAuthorizedFunctionTypeContractFn\n    case 0:\n      output.type = 'execute';\n      output.args = {\n        source: _address.Address.fromScAddress(inner.contractAddress()).toString(),\n        \"function\": inner.functionName(),\n        args: inner.args().map(function (arg) {\n          return (0, _scval.scValToNative)(arg);\n        })\n      };\n      break;\n\n    // sorobanAuthorizedFunctionTypeCreateContractHostFn\n    // sorobanAuthorizedFunctionTypeCreateContractV2HostFn\n    case 1: // fallthrough: just no ctor args in V1\n    case 2:\n      {\n        var createV2 = fn[\"switch\"]().value === 2;\n        output.type = 'create';\n        output.args = {};\n\n        // If the executable is a WASM, the preimage MUST be an address. If it's a\n        // token, the preimage MUST be an asset. This is a cheeky way to check\n        // that, because wasm=0, token=1 and address=0, asset=1 in the XDR switch\n        // values.\n        //\n        // The first part may not be true in V2, but we'd need to update this code\n        // anyway so it can still be an error.\n        var _ref = [inner.executable(), inner.contractIdPreimage()],\n          exec = _ref[0],\n          preimage = _ref[1];\n        if (!!exec[\"switch\"]().value !== !!preimage[\"switch\"]().value) {\n          throw new Error(\"creation function appears invalid: \".concat(JSON.stringify(inner), \" (should be wasm+address or token+asset)\"));\n        }\n        switch (exec[\"switch\"]().value) {\n          // contractExecutableWasm\n          case 0:\n            {\n              /** @type {xdr.ContractIdPreimageFromAddress} */\n              var details = preimage.fromAddress();\n              output.args.type = 'wasm';\n              output.args.wasm = _objectSpread({\n                salt: details.salt().toString('hex'),\n                hash: exec.wasmHash().toString('hex'),\n                address: _address.Address.fromScAddress(details.address()).toString()\n              }, createV2 && {\n                constructorArgs: inner.constructorArgs().map(function (arg) {\n                  return (0, _scval.scValToNative)(arg);\n                })\n              });\n              break;\n            }\n\n          // contractExecutableStellarAsset\n          case 1:\n            output.args.type = 'sac';\n            output.args.asset = _asset.Asset.fromOperation(preimage.fromAsset()).toString();\n            break;\n          default:\n            throw new Error(\"unknown creation type: \".concat(JSON.stringify(exec)));\n        }\n        break;\n      }\n    default:\n      throw new Error(\"unknown invocation type (\".concat(fn[\"switch\"](), \"): \").concat(JSON.stringify(fn)));\n  }\n  output.invocations = root.subInvocations().map(function (i) {\n    return buildInvocationTree(i);\n  });\n  return output;\n}\n\n/**\n * @callback InvocationWalker\n *\n * @param {xdr.SorobanAuthorizedInvocation} node  the currently explored node\n * @param {number} depth  the depth of the tree this node is occurring at (the\n *    root starts at a depth of 1)\n * @param {xdr.SorobanAuthorizedInvocation} [parent]  this `node`s parent node,\n *    if any (i.e. this doesn't exist at the root)\n *\n * @returns {boolean|null|void}   returning exactly `false` is a hint to stop\n *    exploring, other values are ignored\n */\n\n/**\n * Executes a callback function on each node in the tree until stopped.\n *\n * Nodes are walked in a depth-first order. Returning `false` from the callback\n * stops further depth exploration at that node, but it does not stop the walk\n * in a \"global\" view.\n *\n * @param {xdr.SorobanAuthorizedInvocation} root  the tree to explore\n * @param {InvocationWalker} callback  the callback to execute for each node\n * @returns {void}\n */\nfunction walkInvocationTree(root, callback) {\n  walkHelper(root, 1, callback);\n}\nfunction walkHelper(node, depth, callback, parent) {\n  if (callback(node, depth, parent) === false /* allow void rv */) {\n    return;\n  }\n  node.subInvocations().forEach(function (i) {\n    return walkHelper(i, depth + 1, callback, node);\n  });\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@stellar/stellar-base/lib/invocation.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@stellar/stellar-base/lib/jsxdr.js":
/*!*********************************************************!*\
  !*** ./node_modules/@stellar/stellar-base/lib/jsxdr.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports[\"default\"] = void 0;\nvar _jsXdr = __webpack_require__(/*! @stellar/js-xdr */ \"(ssr)/./node_modules/@stellar/js-xdr/src/index.js\");\nvar cereal = {\n  XdrWriter: _jsXdr.XdrWriter,\n  XdrReader: _jsXdr.XdrReader\n};\nvar _default = exports[\"default\"] = cereal;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHN0ZWxsYXIvc3RlbGxhci1iYXNlL2xpYi9qc3hkci5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYiw4Q0FBNkM7QUFDN0M7QUFDQSxDQUFDLEVBQUM7QUFDRixrQkFBa0I7QUFDbEIsYUFBYSxtQkFBTyxDQUFDLDBFQUFpQjtBQUN0QztBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsa0JBQWtCIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXFVTVUFSSU9cXERvY3VtZW50c1xcR2l0aHViXFxHYWxheHlLSi13YWxsZXQtLS1IYWNrXFx3ZWJcXG5vZGVfbW9kdWxlc1xcQHN0ZWxsYXJcXHN0ZWxsYXItYmFzZVxcbGliXFxqc3hkci5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gdm9pZCAwO1xudmFyIF9qc1hkciA9IHJlcXVpcmUoXCJAc3RlbGxhci9qcy14ZHJcIik7XG52YXIgY2VyZWFsID0ge1xuICBYZHJXcml0ZXI6IF9qc1hkci5YZHJXcml0ZXIsXG4gIFhkclJlYWRlcjogX2pzWGRyLlhkclJlYWRlclxufTtcbnZhciBfZGVmYXVsdCA9IGV4cG9ydHNbXCJkZWZhdWx0XCJdID0gY2VyZWFsOyJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@stellar/stellar-base/lib/jsxdr.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@stellar/stellar-base/lib/keypair.js":
/*!***********************************************************!*\
  !*** ./node_modules/@stellar/stellar-base/lib/keypair.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.Keypair = void 0;\nvar _tweetnacl = _interopRequireDefault(__webpack_require__(/*! tweetnacl */ \"(ssr)/./node_modules/tweetnacl/nacl-fast.js\"));\nvar _signing = __webpack_require__(/*! ./signing */ \"(ssr)/./node_modules/@stellar/stellar-base/lib/signing.js\");\nvar _strkey = __webpack_require__(/*! ./strkey */ \"(ssr)/./node_modules/@stellar/stellar-base/lib/strkey.js\");\nvar _hashing = __webpack_require__(/*! ./hashing */ \"(ssr)/./node_modules/@stellar/stellar-base/lib/hashing.js\");\nvar _xdr = _interopRequireDefault(__webpack_require__(/*! ./xdr */ \"(ssr)/./node_modules/@stellar/stellar-base/lib/xdr.js\"));\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { \"default\": e }; }\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\nfunction _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }\nfunction _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); } /* eslint no-bitwise: [\"error\", {\"allow\": [\"^\"]}] */\n/**\n * `Keypair` represents public (and secret) keys of the account.\n *\n * Currently `Keypair` only supports ed25519 but in a future this class can be abstraction layer for other\n * public-key signature systems.\n *\n * Use more convenient methods to create `Keypair` object:\n * * `{@link Keypair.fromPublicKey}`\n * * `{@link Keypair.fromSecret}`\n * * `{@link Keypair.random}`\n *\n * @constructor\n * @param {object} keys At least one of keys must be provided.\n * @param {string} keys.type Public-key signature system name. (currently only `ed25519` keys are supported)\n * @param {Buffer} [keys.publicKey] Raw public key\n * @param {Buffer} [keys.secretKey] Raw secret key (32-byte secret seed in ed25519`)\n */\nvar Keypair = exports.Keypair = /*#__PURE__*/function () {\n  function Keypair(keys) {\n    _classCallCheck(this, Keypair);\n    if (keys.type !== 'ed25519') {\n      throw new Error('Invalid keys type');\n    }\n    this.type = keys.type;\n    if (keys.secretKey) {\n      keys.secretKey = Buffer.from(keys.secretKey);\n      if (keys.secretKey.length !== 32) {\n        throw new Error('secretKey length is invalid');\n      }\n      this._secretSeed = keys.secretKey;\n      this._publicKey = (0, _signing.generate)(keys.secretKey);\n      this._secretKey = Buffer.concat([keys.secretKey, this._publicKey]);\n      if (keys.publicKey && !this._publicKey.equals(Buffer.from(keys.publicKey))) {\n        throw new Error('secretKey does not match publicKey');\n      }\n    } else {\n      this._publicKey = Buffer.from(keys.publicKey);\n      if (this._publicKey.length !== 32) {\n        throw new Error('publicKey length is invalid');\n      }\n    }\n  }\n\n  /**\n   * Creates a new `Keypair` instance from secret. This can either be secret key or secret seed depending\n   * on underlying public-key signature system. Currently `Keypair` only supports ed25519.\n   * @param {string} secret secret key (ex. `SDAKFNYEIAORZKKCYRILFQKLLOCNPL5SWJ3YY5NM3ZH6GJSZGXHZEPQS`)\n   * @returns {Keypair}\n   */\n  return _createClass(Keypair, [{\n    key: \"xdrAccountId\",\n    value: function xdrAccountId() {\n      return new _xdr[\"default\"].AccountId.publicKeyTypeEd25519(this._publicKey);\n    }\n  }, {\n    key: \"xdrPublicKey\",\n    value: function xdrPublicKey() {\n      return new _xdr[\"default\"].PublicKey.publicKeyTypeEd25519(this._publicKey);\n    }\n\n    /**\n     * Creates a {@link xdr.MuxedAccount} object from the public key.\n     *\n     * You will get a different type of muxed account depending on whether or not\n     * you pass an ID.\n     *\n     * @param  {string} [id] - stringified integer indicating the underlying muxed\n     *     ID of the new account object\n     *\n     * @return {xdr.MuxedAccount}\n     */\n  }, {\n    key: \"xdrMuxedAccount\",\n    value: function xdrMuxedAccount(id) {\n      if (typeof id !== 'undefined') {\n        if (typeof id !== 'string') {\n          throw new TypeError(\"expected string for ID, got \".concat(_typeof(id)));\n        }\n        return _xdr[\"default\"].MuxedAccount.keyTypeMuxedEd25519(new _xdr[\"default\"].MuxedAccountMed25519({\n          id: _xdr[\"default\"].Uint64.fromString(id),\n          ed25519: this._publicKey\n        }));\n      }\n      return new _xdr[\"default\"].MuxedAccount.keyTypeEd25519(this._publicKey);\n    }\n\n    /**\n     * Returns raw public key\n     * @returns {Buffer}\n     */\n  }, {\n    key: \"rawPublicKey\",\n    value: function rawPublicKey() {\n      return this._publicKey;\n    }\n  }, {\n    key: \"signatureHint\",\n    value: function signatureHint() {\n      var a = this.xdrAccountId().toXDR();\n      return a.slice(a.length - 4);\n    }\n\n    /**\n     * Returns public key associated with this `Keypair` object.\n     * @returns {string}\n     */\n  }, {\n    key: \"publicKey\",\n    value: function publicKey() {\n      return _strkey.StrKey.encodeEd25519PublicKey(this._publicKey);\n    }\n\n    /**\n     * Returns secret key associated with this `Keypair` object\n     * @returns {string}\n     */\n  }, {\n    key: \"secret\",\n    value: function secret() {\n      if (!this._secretSeed) {\n        throw new Error('no secret key available');\n      }\n      if (this.type === 'ed25519') {\n        return _strkey.StrKey.encodeEd25519SecretSeed(this._secretSeed);\n      }\n      throw new Error('Invalid Keypair type');\n    }\n\n    /**\n     * Returns raw secret key.\n     * @returns {Buffer}\n     */\n  }, {\n    key: \"rawSecretKey\",\n    value: function rawSecretKey() {\n      return this._secretSeed;\n    }\n\n    /**\n     * Returns `true` if this `Keypair` object contains secret key and can sign.\n     * @returns {boolean}\n     */\n  }, {\n    key: \"canSign\",\n    value: function canSign() {\n      return !!this._secretKey;\n    }\n\n    /**\n     * Signs data.\n     * @param {Buffer} data Data to sign\n     * @returns {Buffer}\n     */\n  }, {\n    key: \"sign\",\n    value: function sign(data) {\n      if (!this.canSign()) {\n        throw new Error('cannot sign: no secret key available');\n      }\n      return (0, _signing.sign)(data, this._secretKey);\n    }\n\n    /**\n     * Verifies if `signature` for `data` is valid.\n     * @param {Buffer} data Signed data\n     * @param {Buffer} signature Signature\n     * @returns {boolean}\n     */\n  }, {\n    key: \"verify\",\n    value: function verify(data, signature) {\n      return (0, _signing.verify)(data, signature, this._publicKey);\n    }\n\n    /**\n     * Returns the decorated signature (hint+sig) for arbitrary data.\n     *\n     * @param  {Buffer} data  arbitrary data to sign\n     * @return {xdr.DecoratedSignature}   the raw signature structure which can be\n     *     added directly to a transaction envelope\n     *\n     * @see TransactionBase.addDecoratedSignature\n     */\n  }, {\n    key: \"signDecorated\",\n    value: function signDecorated(data) {\n      var signature = this.sign(data);\n      var hint = this.signatureHint();\n      return new _xdr[\"default\"].DecoratedSignature({\n        hint: hint,\n        signature: signature\n      });\n    }\n\n    /**\n     * Returns the raw decorated signature (hint+sig) for a signed payload signer.\n     *\n     *  The hint is defined as the last 4 bytes of the signer key XORed with last\n     *  4 bytes of the payload (zero-left-padded if necessary).\n     *\n     * @param  {Buffer} data    data to both sign and treat as the payload\n     * @return {xdr.DecoratedSignature}\n     *\n     * @see https://github.com/stellar/stellar-protocol/blob/master/core/cap-0040.md#signature-hint\n     * @see TransactionBase.addDecoratedSignature\n     */\n  }, {\n    key: \"signPayloadDecorated\",\n    value: function signPayloadDecorated(data) {\n      var signature = this.sign(data);\n      var keyHint = this.signatureHint();\n      var hint = Buffer.from(data.slice(-4));\n      if (hint.length < 4) {\n        // append zeroes as needed\n        hint = Buffer.concat([hint, Buffer.alloc(4 - data.length, 0)]);\n      }\n      return new _xdr[\"default\"].DecoratedSignature({\n        hint: hint.map(function (_byte, i) {\n          return _byte ^ keyHint[i];\n        }),\n        signature: signature\n      });\n    }\n  }], [{\n    key: \"fromSecret\",\n    value: function fromSecret(secret) {\n      var rawSecret = _strkey.StrKey.decodeEd25519SecretSeed(secret);\n      return this.fromRawEd25519Seed(rawSecret);\n    }\n\n    /**\n     * Creates a new `Keypair` object from ed25519 secret key seed raw bytes.\n     *\n     * @param {Buffer} rawSeed Raw 32-byte ed25519 secret key seed\n     * @returns {Keypair}\n     */\n  }, {\n    key: \"fromRawEd25519Seed\",\n    value: function fromRawEd25519Seed(rawSeed) {\n      return new this({\n        type: 'ed25519',\n        secretKey: rawSeed\n      });\n    }\n\n    /**\n     * Returns `Keypair` object representing network master key.\n     * @param {string} networkPassphrase passphrase of the target stellar network (e.g. \"Public Global Stellar Network ; September 2015\").\n     * @returns {Keypair}\n     */\n  }, {\n    key: \"master\",\n    value: function master(networkPassphrase) {\n      if (!networkPassphrase) {\n        throw new Error('No network selected. Please pass a network argument, e.g. `Keypair.master(Networks.PUBLIC)`.');\n      }\n      return this.fromRawEd25519Seed((0, _hashing.hash)(networkPassphrase));\n    }\n\n    /**\n     * Creates a new `Keypair` object from public key.\n     * @param {string} publicKey public key (ex. `GB3KJPLFUYN5VL6R3GU3EGCGVCKFDSD7BEDX42HWG5BWFKB3KQGJJRMA`)\n     * @returns {Keypair}\n     */\n  }, {\n    key: \"fromPublicKey\",\n    value: function fromPublicKey(publicKey) {\n      publicKey = _strkey.StrKey.decodeEd25519PublicKey(publicKey);\n      if (publicKey.length !== 32) {\n        throw new Error('Invalid Stellar public key');\n      }\n      return new this({\n        type: 'ed25519',\n        publicKey: publicKey\n      });\n    }\n\n    /**\n     * Create a random `Keypair` object.\n     * @returns {Keypair}\n     */\n  }, {\n    key: \"random\",\n    value: function random() {\n      var secret = _tweetnacl[\"default\"].randomBytes(32);\n      return this.fromRawEd25519Seed(secret);\n    }\n  }]);\n}();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@stellar/stellar-base/lib/keypair.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@stellar/stellar-base/lib/liquidity_pool_asset.js":
/*!************************************************************************!*\
  !*** ./node_modules/@stellar/stellar-base/lib/liquidity_pool_asset.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.LiquidityPoolAsset = void 0;\nvar _xdr = _interopRequireDefault(__webpack_require__(/*! ./xdr */ \"(ssr)/./node_modules/@stellar/stellar-base/lib/xdr.js\"));\nvar _asset = __webpack_require__(/*! ./asset */ \"(ssr)/./node_modules/@stellar/stellar-base/lib/asset.js\");\nvar _get_liquidity_pool_id = __webpack_require__(/*! ./get_liquidity_pool_id */ \"(ssr)/./node_modules/@stellar/stellar-base/lib/get_liquidity_pool_id.js\");\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { \"default\": e }; }\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }\nfunction _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\nfunction _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }\nfunction _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\n/**\n * LiquidityPoolAsset class represents a liquidity pool trustline change.\n *\n * @constructor\n * @param {Asset} assetA – The first asset in the Pool, it must respect the rule assetA < assetB. See {@link Asset.compare} for more details on how assets are sorted.\n * @param {Asset} assetB – The second asset in the Pool, it must respect the rule assetA < assetB. See {@link Asset.compare} for more details on how assets are sorted.\n * @param {number} fee – The liquidity pool fee. For now the only fee supported is `30`.\n */\nvar LiquidityPoolAsset = exports.LiquidityPoolAsset = /*#__PURE__*/function () {\n  function LiquidityPoolAsset(assetA, assetB, fee) {\n    _classCallCheck(this, LiquidityPoolAsset);\n    if (!assetA || !(assetA instanceof _asset.Asset)) {\n      throw new Error('assetA is invalid');\n    }\n    if (!assetB || !(assetB instanceof _asset.Asset)) {\n      throw new Error('assetB is invalid');\n    }\n    if (_asset.Asset.compare(assetA, assetB) !== -1) {\n      throw new Error('Assets are not in lexicographic order');\n    }\n    if (!fee || fee !== _get_liquidity_pool_id.LiquidityPoolFeeV18) {\n      throw new Error('fee is invalid');\n    }\n    this.assetA = assetA;\n    this.assetB = assetB;\n    this.fee = fee;\n  }\n\n  /**\n   * Returns a liquidity pool asset object from its XDR ChangeTrustAsset object\n   * representation.\n   * @param {xdr.ChangeTrustAsset} ctAssetXdr - The asset XDR object.\n   * @returns {LiquidityPoolAsset}\n   */\n  return _createClass(LiquidityPoolAsset, [{\n    key: \"toXDRObject\",\n    value:\n    /**\n     * Returns the `xdr.ChangeTrustAsset` object for this liquidity pool asset.\n     *\n     * Note: To convert from an {@link Asset `Asset`} to `xdr.ChangeTrustAsset`\n     * please refer to the\n     * {@link Asset.toChangeTrustXDRObject `Asset.toChangeTrustXDRObject`} method.\n     *\n     * @returns {xdr.ChangeTrustAsset} XDR ChangeTrustAsset object.\n     */\n    function toXDRObject() {\n      var lpConstantProductParamsXdr = new _xdr[\"default\"].LiquidityPoolConstantProductParameters({\n        assetA: this.assetA.toXDRObject(),\n        assetB: this.assetB.toXDRObject(),\n        fee: this.fee\n      });\n      var lpParamsXdr = new _xdr[\"default\"].LiquidityPoolParameters('liquidityPoolConstantProduct', lpConstantProductParamsXdr);\n      return new _xdr[\"default\"].ChangeTrustAsset('assetTypePoolShare', lpParamsXdr);\n    }\n\n    /**\n     * @returns {LiquidityPoolParameters} Liquidity pool parameters.\n     */\n  }, {\n    key: \"getLiquidityPoolParameters\",\n    value: function getLiquidityPoolParameters() {\n      return _objectSpread(_objectSpread({}, this), {}, {\n        assetA: this.assetA,\n        assetB: this.assetB,\n        fee: this.fee\n      });\n    }\n\n    /**\n     * @see [Assets concept](https://developers.stellar.org/docs/glossary/assets/)\n     * @returns {AssetType.liquidityPoolShares} asset type. Can only be `liquidity_pool_shares`.\n     */\n  }, {\n    key: \"getAssetType\",\n    value: function getAssetType() {\n      return 'liquidity_pool_shares';\n    }\n\n    /**\n     * @param {LiquidityPoolAsset} other the LiquidityPoolAsset to compare\n     * @returns {boolean} `true` if this asset equals the given asset.\n     */\n  }, {\n    key: \"equals\",\n    value: function equals(other) {\n      return this.assetA.equals(other.assetA) && this.assetB.equals(other.assetB) && this.fee === other.fee;\n    }\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      var poolId = (0, _get_liquidity_pool_id.getLiquidityPoolId)('constant_product', this.getLiquidityPoolParameters()).toString('hex');\n      return \"liquidity_pool:\".concat(poolId);\n    }\n  }], [{\n    key: \"fromOperation\",\n    value: function fromOperation(ctAssetXdr) {\n      var assetType = ctAssetXdr[\"switch\"]();\n      if (assetType === _xdr[\"default\"].AssetType.assetTypePoolShare()) {\n        var liquidityPoolParameters = ctAssetXdr.liquidityPool().constantProduct();\n        return new this(_asset.Asset.fromOperation(liquidityPoolParameters.assetA()), _asset.Asset.fromOperation(liquidityPoolParameters.assetB()), liquidityPoolParameters.fee());\n      }\n      throw new Error(\"Invalid asset type: \".concat(assetType.name));\n    }\n  }]);\n}();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHN0ZWxsYXIvc3RlbGxhci1iYXNlL2xpYi9saXF1aWRpdHlfcG9vbF9hc3NldC5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYiw4Q0FBNkM7QUFDN0M7QUFDQSxDQUFDLEVBQUM7QUFDRiwwQkFBMEI7QUFDMUIsa0NBQWtDLG1CQUFPLENBQUMsb0VBQU87QUFDakQsYUFBYSxtQkFBTyxDQUFDLHdFQUFTO0FBQzlCLDZCQUE2QixtQkFBTyxDQUFDLHdHQUF5QjtBQUM5RCxxQ0FBcUMsaUNBQWlDO0FBQ3RFLHNCQUFzQiwyQkFBMkIsb0dBQW9HLG1CQUFtQixpQkFBaUIsc0hBQXNIO0FBQy9TLHlCQUF5Qix3QkFBd0Isb0NBQW9DLHlDQUF5QyxrQ0FBa0MsMERBQTBELDBCQUEwQjtBQUNwUCw0QkFBNEIsZ0JBQWdCLHNCQUFzQixPQUFPLGtEQUFrRCxzREFBc0QsOEJBQThCLG1KQUFtSixxRUFBcUUsS0FBSztBQUM1YSxvQ0FBb0Msb0VBQW9FLDBEQUEwRDtBQUNsSyxpQ0FBaUM7QUFDakMsbUNBQW1DLGdCQUFnQixjQUFjLE9BQU8sY0FBYztBQUN0RixpQ0FBaUMscUhBQXFILGNBQWM7QUFDcEssNkJBQTZCLG1DQUFtQztBQUNoRSw4QkFBOEIsNENBQTRDLCtCQUErQixvQkFBb0IsbUNBQW1DLHNDQUFzQyx1RUFBdUU7QUFDN1E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLE9BQU8scUZBQXFGLHFCQUFxQjtBQUM1SCxXQUFXLE9BQU8sc0ZBQXNGLHFCQUFxQjtBQUM3SCxXQUFXLFFBQVE7QUFDbkI7QUFDQSx5QkFBeUIsMEJBQTBCO0FBQ25EO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLHNCQUFzQjtBQUNuQyxlQUFlO0FBQ2Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQ0FBaUMscUJBQXFCO0FBQ3REO0FBQ0EsUUFBUSxtRUFBbUU7QUFDM0U7QUFDQSxpQkFBaUIsc0JBQXNCO0FBQ3ZDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxpQkFBaUIseUJBQXlCO0FBQzFDO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQSwyQ0FBMkMsV0FBVztBQUN0RDtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7O0FBRUE7QUFDQTtBQUNBLGlCQUFpQiwrQkFBK0I7QUFDaEQ7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxlQUFlLG9CQUFvQjtBQUNuQyxpQkFBaUIsU0FBUztBQUMxQjtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSCxDQUFDIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXFVTVUFSSU9cXERvY3VtZW50c1xcR2l0aHViXFxHYWxheHlLSi13YWxsZXQtLS1IYWNrXFx3ZWJcXG5vZGVfbW9kdWxlc1xcQHN0ZWxsYXJcXHN0ZWxsYXItYmFzZVxcbGliXFxsaXF1aWRpdHlfcG9vbF9hc3NldC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuTGlxdWlkaXR5UG9vbEFzc2V0ID0gdm9pZCAwO1xudmFyIF94ZHIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL3hkclwiKSk7XG52YXIgX2Fzc2V0ID0gcmVxdWlyZShcIi4vYXNzZXRcIik7XG52YXIgX2dldF9saXF1aWRpdHlfcG9vbF9pZCA9IHJlcXVpcmUoXCIuL2dldF9saXF1aWRpdHlfcG9vbF9pZFwiKTtcbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoZSkgeyByZXR1cm4gZSAmJiBlLl9fZXNNb2R1bGUgPyBlIDogeyBcImRlZmF1bHRcIjogZSB9OyB9XG5mdW5jdGlvbiBfdHlwZW9mKG8pIHsgXCJAYmFiZWwvaGVscGVycyAtIHR5cGVvZlwiOyByZXR1cm4gX3R5cGVvZiA9IFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgU3ltYm9sICYmIFwic3ltYm9sXCIgPT0gdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA/IGZ1bmN0aW9uIChvKSB7IHJldHVybiB0eXBlb2YgbzsgfSA6IGZ1bmN0aW9uIChvKSB7IHJldHVybiBvICYmIFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgU3ltYm9sICYmIG8uY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvOyB9LCBfdHlwZW9mKG8pOyB9XG5mdW5jdGlvbiBvd25LZXlzKGUsIHIpIHsgdmFyIHQgPSBPYmplY3Qua2V5cyhlKTsgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHsgdmFyIG8gPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKGUpOyByICYmIChvID0gby5maWx0ZXIoZnVuY3Rpb24gKHIpIHsgcmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoZSwgcikuZW51bWVyYWJsZTsgfSkpLCB0LnB1c2guYXBwbHkodCwgbyk7IH0gcmV0dXJuIHQ7IH1cbmZ1bmN0aW9uIF9vYmplY3RTcHJlYWQoZSkgeyBmb3IgKHZhciByID0gMTsgciA8IGFyZ3VtZW50cy5sZW5ndGg7IHIrKykgeyB2YXIgdCA9IG51bGwgIT0gYXJndW1lbnRzW3JdID8gYXJndW1lbnRzW3JdIDoge307IHIgJSAyID8gb3duS2V5cyhPYmplY3QodCksICEwKS5mb3JFYWNoKGZ1bmN0aW9uIChyKSB7IF9kZWZpbmVQcm9wZXJ0eShlLCByLCB0W3JdKTsgfSkgOiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyA/IE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKGUsIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKHQpKSA6IG93bktleXMoT2JqZWN0KHQpKS5mb3JFYWNoKGZ1bmN0aW9uIChyKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLCByLCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHQsIHIpKTsgfSk7IH0gcmV0dXJuIGU7IH1cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShlLCByLCB0KSB7IHJldHVybiAociA9IF90b1Byb3BlcnR5S2V5KHIpKSBpbiBlID8gT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsIHIsIHsgdmFsdWU6IHQsIGVudW1lcmFibGU6ICEwLCBjb25maWd1cmFibGU6ICEwLCB3cml0YWJsZTogITAgfSkgOiBlW3JdID0gdCwgZTsgfVxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGEsIG4pIHsgaWYgKCEoYSBpbnN0YW5jZW9mIG4pKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9XG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyhlLCByKSB7IGZvciAodmFyIHQgPSAwOyB0IDwgci5sZW5ndGg7IHQrKykgeyB2YXIgbyA9IHJbdF07IG8uZW51bWVyYWJsZSA9IG8uZW51bWVyYWJsZSB8fCAhMSwgby5jb25maWd1cmFibGUgPSAhMCwgXCJ2YWx1ZVwiIGluIG8gJiYgKG8ud3JpdGFibGUgPSAhMCksIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLCBfdG9Qcm9wZXJ0eUtleShvLmtleSksIG8pOyB9IH1cbmZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhlLCByLCB0KSB7IHJldHVybiByICYmIF9kZWZpbmVQcm9wZXJ0aWVzKGUucHJvdG90eXBlLCByKSwgdCAmJiBfZGVmaW5lUHJvcGVydGllcyhlLCB0KSwgT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsIFwicHJvdG90eXBlXCIsIHsgd3JpdGFibGU6ICExIH0pLCBlOyB9XG5mdW5jdGlvbiBfdG9Qcm9wZXJ0eUtleSh0KSB7IHZhciBpID0gX3RvUHJpbWl0aXZlKHQsIFwic3RyaW5nXCIpOyByZXR1cm4gXCJzeW1ib2xcIiA9PSBfdHlwZW9mKGkpID8gaSA6IGkgKyBcIlwiOyB9XG5mdW5jdGlvbiBfdG9QcmltaXRpdmUodCwgcikgeyBpZiAoXCJvYmplY3RcIiAhPSBfdHlwZW9mKHQpIHx8ICF0KSByZXR1cm4gdDsgdmFyIGUgPSB0W1N5bWJvbC50b1ByaW1pdGl2ZV07IGlmICh2b2lkIDAgIT09IGUpIHsgdmFyIGkgPSBlLmNhbGwodCwgciB8fCBcImRlZmF1bHRcIik7IGlmIChcIm9iamVjdFwiICE9IF90eXBlb2YoaSkpIHJldHVybiBpOyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQEB0b1ByaW1pdGl2ZSBtdXN0IHJldHVybiBhIHByaW1pdGl2ZSB2YWx1ZS5cIik7IH0gcmV0dXJuIChcInN0cmluZ1wiID09PSByID8gU3RyaW5nIDogTnVtYmVyKSh0KTsgfVxuLyoqXG4gKiBMaXF1aWRpdHlQb29sQXNzZXQgY2xhc3MgcmVwcmVzZW50cyBhIGxpcXVpZGl0eSBwb29sIHRydXN0bGluZSBjaGFuZ2UuXG4gKlxuICogQGNvbnN0cnVjdG9yXG4gKiBAcGFyYW0ge0Fzc2V0fSBhc3NldEEg4oCTIFRoZSBmaXJzdCBhc3NldCBpbiB0aGUgUG9vbCwgaXQgbXVzdCByZXNwZWN0IHRoZSBydWxlIGFzc2V0QSA8IGFzc2V0Qi4gU2VlIHtAbGluayBBc3NldC5jb21wYXJlfSBmb3IgbW9yZSBkZXRhaWxzIG9uIGhvdyBhc3NldHMgYXJlIHNvcnRlZC5cbiAqIEBwYXJhbSB7QXNzZXR9IGFzc2V0QiDigJMgVGhlIHNlY29uZCBhc3NldCBpbiB0aGUgUG9vbCwgaXQgbXVzdCByZXNwZWN0IHRoZSBydWxlIGFzc2V0QSA8IGFzc2V0Qi4gU2VlIHtAbGluayBBc3NldC5jb21wYXJlfSBmb3IgbW9yZSBkZXRhaWxzIG9uIGhvdyBhc3NldHMgYXJlIHNvcnRlZC5cbiAqIEBwYXJhbSB7bnVtYmVyfSBmZWUg4oCTIFRoZSBsaXF1aWRpdHkgcG9vbCBmZWUuIEZvciBub3cgdGhlIG9ubHkgZmVlIHN1cHBvcnRlZCBpcyBgMzBgLlxuICovXG52YXIgTGlxdWlkaXR5UG9vbEFzc2V0ID0gZXhwb3J0cy5MaXF1aWRpdHlQb29sQXNzZXQgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBMaXF1aWRpdHlQb29sQXNzZXQoYXNzZXRBLCBhc3NldEIsIGZlZSkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBMaXF1aWRpdHlQb29sQXNzZXQpO1xuICAgIGlmICghYXNzZXRBIHx8ICEoYXNzZXRBIGluc3RhbmNlb2YgX2Fzc2V0LkFzc2V0KSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdhc3NldEEgaXMgaW52YWxpZCcpO1xuICAgIH1cbiAgICBpZiAoIWFzc2V0QiB8fCAhKGFzc2V0QiBpbnN0YW5jZW9mIF9hc3NldC5Bc3NldCkpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignYXNzZXRCIGlzIGludmFsaWQnKTtcbiAgICB9XG4gICAgaWYgKF9hc3NldC5Bc3NldC5jb21wYXJlKGFzc2V0QSwgYXNzZXRCKSAhPT0gLTEpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignQXNzZXRzIGFyZSBub3QgaW4gbGV4aWNvZ3JhcGhpYyBvcmRlcicpO1xuICAgIH1cbiAgICBpZiAoIWZlZSB8fCBmZWUgIT09IF9nZXRfbGlxdWlkaXR5X3Bvb2xfaWQuTGlxdWlkaXR5UG9vbEZlZVYxOCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdmZWUgaXMgaW52YWxpZCcpO1xuICAgIH1cbiAgICB0aGlzLmFzc2V0QSA9IGFzc2V0QTtcbiAgICB0aGlzLmFzc2V0QiA9IGFzc2V0QjtcbiAgICB0aGlzLmZlZSA9IGZlZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGEgbGlxdWlkaXR5IHBvb2wgYXNzZXQgb2JqZWN0IGZyb20gaXRzIFhEUiBDaGFuZ2VUcnVzdEFzc2V0IG9iamVjdFxuICAgKiByZXByZXNlbnRhdGlvbi5cbiAgICogQHBhcmFtIHt4ZHIuQ2hhbmdlVHJ1c3RBc3NldH0gY3RBc3NldFhkciAtIFRoZSBhc3NldCBYRFIgb2JqZWN0LlxuICAgKiBAcmV0dXJucyB7TGlxdWlkaXR5UG9vbEFzc2V0fVxuICAgKi9cbiAgcmV0dXJuIF9jcmVhdGVDbGFzcyhMaXF1aWRpdHlQb29sQXNzZXQsIFt7XG4gICAga2V5OiBcInRvWERST2JqZWN0XCIsXG4gICAgdmFsdWU6XG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgYHhkci5DaGFuZ2VUcnVzdEFzc2V0YCBvYmplY3QgZm9yIHRoaXMgbGlxdWlkaXR5IHBvb2wgYXNzZXQuXG4gICAgICpcbiAgICAgKiBOb3RlOiBUbyBjb252ZXJ0IGZyb20gYW4ge0BsaW5rIEFzc2V0IGBBc3NldGB9IHRvIGB4ZHIuQ2hhbmdlVHJ1c3RBc3NldGBcbiAgICAgKiBwbGVhc2UgcmVmZXIgdG8gdGhlXG4gICAgICoge0BsaW5rIEFzc2V0LnRvQ2hhbmdlVHJ1c3RYRFJPYmplY3QgYEFzc2V0LnRvQ2hhbmdlVHJ1c3RYRFJPYmplY3RgfSBtZXRob2QuXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyB7eGRyLkNoYW5nZVRydXN0QXNzZXR9IFhEUiBDaGFuZ2VUcnVzdEFzc2V0IG9iamVjdC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0b1hEUk9iamVjdCgpIHtcbiAgICAgIHZhciBscENvbnN0YW50UHJvZHVjdFBhcmFtc1hkciA9IG5ldyBfeGRyW1wiZGVmYXVsdFwiXS5MaXF1aWRpdHlQb29sQ29uc3RhbnRQcm9kdWN0UGFyYW1ldGVycyh7XG4gICAgICAgIGFzc2V0QTogdGhpcy5hc3NldEEudG9YRFJPYmplY3QoKSxcbiAgICAgICAgYXNzZXRCOiB0aGlzLmFzc2V0Qi50b1hEUk9iamVjdCgpLFxuICAgICAgICBmZWU6IHRoaXMuZmVlXG4gICAgICB9KTtcbiAgICAgIHZhciBscFBhcmFtc1hkciA9IG5ldyBfeGRyW1wiZGVmYXVsdFwiXS5MaXF1aWRpdHlQb29sUGFyYW1ldGVycygnbGlxdWlkaXR5UG9vbENvbnN0YW50UHJvZHVjdCcsIGxwQ29uc3RhbnRQcm9kdWN0UGFyYW1zWGRyKTtcbiAgICAgIHJldHVybiBuZXcgX3hkcltcImRlZmF1bHRcIl0uQ2hhbmdlVHJ1c3RBc3NldCgnYXNzZXRUeXBlUG9vbFNoYXJlJywgbHBQYXJhbXNYZHIpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEByZXR1cm5zIHtMaXF1aWRpdHlQb29sUGFyYW1ldGVyc30gTGlxdWlkaXR5IHBvb2wgcGFyYW1ldGVycy5cbiAgICAgKi9cbiAgfSwge1xuICAgIGtleTogXCJnZXRMaXF1aWRpdHlQb29sUGFyYW1ldGVyc1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRMaXF1aWRpdHlQb29sUGFyYW1ldGVycygpIHtcbiAgICAgIHJldHVybiBfb2JqZWN0U3ByZWFkKF9vYmplY3RTcHJlYWQoe30sIHRoaXMpLCB7fSwge1xuICAgICAgICBhc3NldEE6IHRoaXMuYXNzZXRBLFxuICAgICAgICBhc3NldEI6IHRoaXMuYXNzZXRCLFxuICAgICAgICBmZWU6IHRoaXMuZmVlXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAc2VlIFtBc3NldHMgY29uY2VwdF0oaHR0cHM6Ly9kZXZlbG9wZXJzLnN0ZWxsYXIub3JnL2RvY3MvZ2xvc3NhcnkvYXNzZXRzLylcbiAgICAgKiBAcmV0dXJucyB7QXNzZXRUeXBlLmxpcXVpZGl0eVBvb2xTaGFyZXN9IGFzc2V0IHR5cGUuIENhbiBvbmx5IGJlIGBsaXF1aWRpdHlfcG9vbF9zaGFyZXNgLlxuICAgICAqL1xuICB9LCB7XG4gICAga2V5OiBcImdldEFzc2V0VHlwZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRBc3NldFR5cGUoKSB7XG4gICAgICByZXR1cm4gJ2xpcXVpZGl0eV9wb29sX3NoYXJlcyc7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtMaXF1aWRpdHlQb29sQXNzZXR9IG90aGVyIHRoZSBMaXF1aWRpdHlQb29sQXNzZXQgdG8gY29tcGFyZVxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBgdHJ1ZWAgaWYgdGhpcyBhc3NldCBlcXVhbHMgdGhlIGdpdmVuIGFzc2V0LlxuICAgICAqL1xuICB9LCB7XG4gICAga2V5OiBcImVxdWFsc1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBlcXVhbHMob3RoZXIpIHtcbiAgICAgIHJldHVybiB0aGlzLmFzc2V0QS5lcXVhbHMob3RoZXIuYXNzZXRBKSAmJiB0aGlzLmFzc2V0Qi5lcXVhbHMob3RoZXIuYXNzZXRCKSAmJiB0aGlzLmZlZSA9PT0gb3RoZXIuZmVlO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJ0b1N0cmluZ1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICAgIHZhciBwb29sSWQgPSAoMCwgX2dldF9saXF1aWRpdHlfcG9vbF9pZC5nZXRMaXF1aWRpdHlQb29sSWQpKCdjb25zdGFudF9wcm9kdWN0JywgdGhpcy5nZXRMaXF1aWRpdHlQb29sUGFyYW1ldGVycygpKS50b1N0cmluZygnaGV4Jyk7XG4gICAgICByZXR1cm4gXCJsaXF1aWRpdHlfcG9vbDpcIi5jb25jYXQocG9vbElkKTtcbiAgICB9XG4gIH1dLCBbe1xuICAgIGtleTogXCJmcm9tT3BlcmF0aW9uXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGZyb21PcGVyYXRpb24oY3RBc3NldFhkcikge1xuICAgICAgdmFyIGFzc2V0VHlwZSA9IGN0QXNzZXRYZHJbXCJzd2l0Y2hcIl0oKTtcbiAgICAgIGlmIChhc3NldFR5cGUgPT09IF94ZHJbXCJkZWZhdWx0XCJdLkFzc2V0VHlwZS5hc3NldFR5cGVQb29sU2hhcmUoKSkge1xuICAgICAgICB2YXIgbGlxdWlkaXR5UG9vbFBhcmFtZXRlcnMgPSBjdEFzc2V0WGRyLmxpcXVpZGl0eVBvb2woKS5jb25zdGFudFByb2R1Y3QoKTtcbiAgICAgICAgcmV0dXJuIG5ldyB0aGlzKF9hc3NldC5Bc3NldC5mcm9tT3BlcmF0aW9uKGxpcXVpZGl0eVBvb2xQYXJhbWV0ZXJzLmFzc2V0QSgpKSwgX2Fzc2V0LkFzc2V0LmZyb21PcGVyYXRpb24obGlxdWlkaXR5UG9vbFBhcmFtZXRlcnMuYXNzZXRCKCkpLCBsaXF1aWRpdHlQb29sUGFyYW1ldGVycy5mZWUoKSk7XG4gICAgICB9XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIGFzc2V0IHR5cGU6IFwiLmNvbmNhdChhc3NldFR5cGUubmFtZSkpO1xuICAgIH1cbiAgfV0pO1xufSgpOyJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@stellar/stellar-base/lib/liquidity_pool_asset.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@stellar/stellar-base/lib/liquidity_pool_id.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@stellar/stellar-base/lib/liquidity_pool_id.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.LiquidityPoolId = void 0;\nvar _xdr = _interopRequireDefault(__webpack_require__(/*! ./xdr */ \"(ssr)/./node_modules/@stellar/stellar-base/lib/xdr.js\"));\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { \"default\": e }; }\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\nfunction _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }\nfunction _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\n/**\n * LiquidityPoolId class represents the asset referenced by a trustline to a\n * liquidity pool.\n *\n * @constructor\n * @param {string} liquidityPoolId - The ID of the liquidity pool in string 'hex'.\n */\nvar LiquidityPoolId = exports.LiquidityPoolId = /*#__PURE__*/function () {\n  function LiquidityPoolId(liquidityPoolId) {\n    _classCallCheck(this, LiquidityPoolId);\n    if (!liquidityPoolId) {\n      throw new Error('liquidityPoolId cannot be empty');\n    }\n    if (!/^[a-f0-9]{64}$/.test(liquidityPoolId)) {\n      throw new Error('Liquidity pool ID is not a valid hash');\n    }\n    this.liquidityPoolId = liquidityPoolId;\n  }\n\n  /**\n   * Returns a liquidity pool ID object from its xdr.TrustLineAsset representation.\n   * @param {xdr.TrustLineAsset} tlAssetXdr - The asset XDR object.\n   * @returns {LiquidityPoolId}\n   */\n  return _createClass(LiquidityPoolId, [{\n    key: \"toXDRObject\",\n    value:\n    /**\n     * Returns the `xdr.TrustLineAsset` object for this liquidity pool ID.\n     *\n     * Note: To convert from {@link Asset `Asset`} to `xdr.TrustLineAsset` please\n     * refer to the\n     * {@link Asset.toTrustLineXDRObject `Asset.toTrustLineXDRObject`} method.\n     *\n     * @returns {xdr.TrustLineAsset} XDR LiquidityPoolId object\n     */\n    function toXDRObject() {\n      var xdrPoolId = _xdr[\"default\"].PoolId.fromXDR(this.liquidityPoolId, 'hex');\n      return new _xdr[\"default\"].TrustLineAsset('assetTypePoolShare', xdrPoolId);\n    }\n\n    /**\n     * @returns {string} Liquidity pool ID.\n     */\n  }, {\n    key: \"getLiquidityPoolId\",\n    value: function getLiquidityPoolId() {\n      return String(this.liquidityPoolId);\n    }\n\n    /**\n     * @see [Assets concept](https://developers.stellar.org/docs/glossary/assets/)\n     * @returns {AssetType.liquidityPoolShares} asset type. Can only be `liquidity_pool_shares`.\n     */\n  }, {\n    key: \"getAssetType\",\n    value: function getAssetType() {\n      return 'liquidity_pool_shares';\n    }\n\n    /**\n     * @param {LiquidityPoolId} asset LiquidityPoolId to compare.\n     * @returns {boolean} `true` if this asset equals the given asset.\n     */\n  }, {\n    key: \"equals\",\n    value: function equals(asset) {\n      return this.liquidityPoolId === asset.getLiquidityPoolId();\n    }\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return \"liquidity_pool:\".concat(this.liquidityPoolId);\n    }\n  }], [{\n    key: \"fromOperation\",\n    value: function fromOperation(tlAssetXdr) {\n      var assetType = tlAssetXdr[\"switch\"]();\n      if (assetType === _xdr[\"default\"].AssetType.assetTypePoolShare()) {\n        var liquidityPoolId = tlAssetXdr.liquidityPoolId().toString('hex');\n        return new this(liquidityPoolId);\n      }\n      throw new Error(\"Invalid asset type: \".concat(assetType.name));\n    }\n  }]);\n}();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHN0ZWxsYXIvc3RlbGxhci1iYXNlL2xpYi9saXF1aWRpdHlfcG9vbF9pZC5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYiw4Q0FBNkM7QUFDN0M7QUFDQSxDQUFDLEVBQUM7QUFDRix1QkFBdUI7QUFDdkIsa0NBQWtDLG1CQUFPLENBQUMsb0VBQU87QUFDakQscUNBQXFDLGlDQUFpQztBQUN0RSxzQkFBc0IsMkJBQTJCLG9HQUFvRyxtQkFBbUIsaUJBQWlCLHNIQUFzSDtBQUMvUyxpQ0FBaUM7QUFDakMsbUNBQW1DLGdCQUFnQixjQUFjLE9BQU8sY0FBYztBQUN0RixpQ0FBaUMscUhBQXFILGNBQWM7QUFDcEssNkJBQTZCLG1DQUFtQztBQUNoRSw4QkFBOEIsNENBQTRDLCtCQUErQixvQkFBb0IsbUNBQW1DLHNDQUFzQyx1RUFBdUU7QUFDN1E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsUUFBUTtBQUNuQjtBQUNBLHNCQUFzQix1QkFBdUI7QUFDN0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQixHQUFHO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxhQUFhLG9CQUFvQjtBQUNqQyxlQUFlO0FBQ2Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4QkFBOEIscUJBQXFCO0FBQ25EO0FBQ0EsUUFBUSwrREFBK0Q7QUFDdkU7QUFDQSxpQkFBaUIsb0JBQW9CO0FBQ3JDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxpQkFBaUIsUUFBUTtBQUN6QjtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsaUJBQWlCLCtCQUErQjtBQUNoRDtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLGVBQWUsaUJBQWlCO0FBQ2hDLGlCQUFpQixTQUFTO0FBQzFCO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSCxDQUFDIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXFVTVUFSSU9cXERvY3VtZW50c1xcR2l0aHViXFxHYWxheHlLSi13YWxsZXQtLS1IYWNrXFx3ZWJcXG5vZGVfbW9kdWxlc1xcQHN0ZWxsYXJcXHN0ZWxsYXItYmFzZVxcbGliXFxsaXF1aWRpdHlfcG9vbF9pZC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuTGlxdWlkaXR5UG9vbElkID0gdm9pZCAwO1xudmFyIF94ZHIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL3hkclwiKSk7XG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KGUpIHsgcmV0dXJuIGUgJiYgZS5fX2VzTW9kdWxlID8gZSA6IHsgXCJkZWZhdWx0XCI6IGUgfTsgfVxuZnVuY3Rpb24gX3R5cGVvZihvKSB7IFwiQGJhYmVsL2hlbHBlcnMgLSB0eXBlb2ZcIjsgcmV0dXJuIF90eXBlb2YgPSBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIFN5bWJvbCAmJiBcInN5bWJvbFwiID09IHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPyBmdW5jdGlvbiAobykgeyByZXR1cm4gdHlwZW9mIG87IH0gOiBmdW5jdGlvbiAobykgeyByZXR1cm4gbyAmJiBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIFN5bWJvbCAmJiBvLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgbyAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2YgbzsgfSwgX3R5cGVvZihvKTsgfVxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGEsIG4pIHsgaWYgKCEoYSBpbnN0YW5jZW9mIG4pKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9XG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyhlLCByKSB7IGZvciAodmFyIHQgPSAwOyB0IDwgci5sZW5ndGg7IHQrKykgeyB2YXIgbyA9IHJbdF07IG8uZW51bWVyYWJsZSA9IG8uZW51bWVyYWJsZSB8fCAhMSwgby5jb25maWd1cmFibGUgPSAhMCwgXCJ2YWx1ZVwiIGluIG8gJiYgKG8ud3JpdGFibGUgPSAhMCksIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLCBfdG9Qcm9wZXJ0eUtleShvLmtleSksIG8pOyB9IH1cbmZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhlLCByLCB0KSB7IHJldHVybiByICYmIF9kZWZpbmVQcm9wZXJ0aWVzKGUucHJvdG90eXBlLCByKSwgdCAmJiBfZGVmaW5lUHJvcGVydGllcyhlLCB0KSwgT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsIFwicHJvdG90eXBlXCIsIHsgd3JpdGFibGU6ICExIH0pLCBlOyB9XG5mdW5jdGlvbiBfdG9Qcm9wZXJ0eUtleSh0KSB7IHZhciBpID0gX3RvUHJpbWl0aXZlKHQsIFwic3RyaW5nXCIpOyByZXR1cm4gXCJzeW1ib2xcIiA9PSBfdHlwZW9mKGkpID8gaSA6IGkgKyBcIlwiOyB9XG5mdW5jdGlvbiBfdG9QcmltaXRpdmUodCwgcikgeyBpZiAoXCJvYmplY3RcIiAhPSBfdHlwZW9mKHQpIHx8ICF0KSByZXR1cm4gdDsgdmFyIGUgPSB0W1N5bWJvbC50b1ByaW1pdGl2ZV07IGlmICh2b2lkIDAgIT09IGUpIHsgdmFyIGkgPSBlLmNhbGwodCwgciB8fCBcImRlZmF1bHRcIik7IGlmIChcIm9iamVjdFwiICE9IF90eXBlb2YoaSkpIHJldHVybiBpOyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQEB0b1ByaW1pdGl2ZSBtdXN0IHJldHVybiBhIHByaW1pdGl2ZSB2YWx1ZS5cIik7IH0gcmV0dXJuIChcInN0cmluZ1wiID09PSByID8gU3RyaW5nIDogTnVtYmVyKSh0KTsgfVxuLyoqXG4gKiBMaXF1aWRpdHlQb29sSWQgY2xhc3MgcmVwcmVzZW50cyB0aGUgYXNzZXQgcmVmZXJlbmNlZCBieSBhIHRydXN0bGluZSB0byBhXG4gKiBsaXF1aWRpdHkgcG9vbC5cbiAqXG4gKiBAY29uc3RydWN0b3JcbiAqIEBwYXJhbSB7c3RyaW5nfSBsaXF1aWRpdHlQb29sSWQgLSBUaGUgSUQgb2YgdGhlIGxpcXVpZGl0eSBwb29sIGluIHN0cmluZyAnaGV4Jy5cbiAqL1xudmFyIExpcXVpZGl0eVBvb2xJZCA9IGV4cG9ydHMuTGlxdWlkaXR5UG9vbElkID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gTGlxdWlkaXR5UG9vbElkKGxpcXVpZGl0eVBvb2xJZCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBMaXF1aWRpdHlQb29sSWQpO1xuICAgIGlmICghbGlxdWlkaXR5UG9vbElkKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ2xpcXVpZGl0eVBvb2xJZCBjYW5ub3QgYmUgZW1wdHknKTtcbiAgICB9XG4gICAgaWYgKCEvXlthLWYwLTldezY0fSQvLnRlc3QobGlxdWlkaXR5UG9vbElkKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdMaXF1aWRpdHkgcG9vbCBJRCBpcyBub3QgYSB2YWxpZCBoYXNoJyk7XG4gICAgfVxuICAgIHRoaXMubGlxdWlkaXR5UG9vbElkID0gbGlxdWlkaXR5UG9vbElkO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgYSBsaXF1aWRpdHkgcG9vbCBJRCBvYmplY3QgZnJvbSBpdHMgeGRyLlRydXN0TGluZUFzc2V0IHJlcHJlc2VudGF0aW9uLlxuICAgKiBAcGFyYW0ge3hkci5UcnVzdExpbmVBc3NldH0gdGxBc3NldFhkciAtIFRoZSBhc3NldCBYRFIgb2JqZWN0LlxuICAgKiBAcmV0dXJucyB7TGlxdWlkaXR5UG9vbElkfVxuICAgKi9cbiAgcmV0dXJuIF9jcmVhdGVDbGFzcyhMaXF1aWRpdHlQb29sSWQsIFt7XG4gICAga2V5OiBcInRvWERST2JqZWN0XCIsXG4gICAgdmFsdWU6XG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgYHhkci5UcnVzdExpbmVBc3NldGAgb2JqZWN0IGZvciB0aGlzIGxpcXVpZGl0eSBwb29sIElELlxuICAgICAqXG4gICAgICogTm90ZTogVG8gY29udmVydCBmcm9tIHtAbGluayBBc3NldCBgQXNzZXRgfSB0byBgeGRyLlRydXN0TGluZUFzc2V0YCBwbGVhc2VcbiAgICAgKiByZWZlciB0byB0aGVcbiAgICAgKiB7QGxpbmsgQXNzZXQudG9UcnVzdExpbmVYRFJPYmplY3QgYEFzc2V0LnRvVHJ1c3RMaW5lWERST2JqZWN0YH0gbWV0aG9kLlxuICAgICAqXG4gICAgICogQHJldHVybnMge3hkci5UcnVzdExpbmVBc3NldH0gWERSIExpcXVpZGl0eVBvb2xJZCBvYmplY3RcbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0b1hEUk9iamVjdCgpIHtcbiAgICAgIHZhciB4ZHJQb29sSWQgPSBfeGRyW1wiZGVmYXVsdFwiXS5Qb29sSWQuZnJvbVhEUih0aGlzLmxpcXVpZGl0eVBvb2xJZCwgJ2hleCcpO1xuICAgICAgcmV0dXJuIG5ldyBfeGRyW1wiZGVmYXVsdFwiXS5UcnVzdExpbmVBc3NldCgnYXNzZXRUeXBlUG9vbFNoYXJlJywgeGRyUG9vbElkKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBMaXF1aWRpdHkgcG9vbCBJRC5cbiAgICAgKi9cbiAgfSwge1xuICAgIGtleTogXCJnZXRMaXF1aWRpdHlQb29sSWRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0TGlxdWlkaXR5UG9vbElkKCkge1xuICAgICAgcmV0dXJuIFN0cmluZyh0aGlzLmxpcXVpZGl0eVBvb2xJZCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHNlZSBbQXNzZXRzIGNvbmNlcHRdKGh0dHBzOi8vZGV2ZWxvcGVycy5zdGVsbGFyLm9yZy9kb2NzL2dsb3NzYXJ5L2Fzc2V0cy8pXG4gICAgICogQHJldHVybnMge0Fzc2V0VHlwZS5saXF1aWRpdHlQb29sU2hhcmVzfSBhc3NldCB0eXBlLiBDYW4gb25seSBiZSBgbGlxdWlkaXR5X3Bvb2xfc2hhcmVzYC5cbiAgICAgKi9cbiAgfSwge1xuICAgIGtleTogXCJnZXRBc3NldFR5cGVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0QXNzZXRUeXBlKCkge1xuICAgICAgcmV0dXJuICdsaXF1aWRpdHlfcG9vbF9zaGFyZXMnO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7TGlxdWlkaXR5UG9vbElkfSBhc3NldCBMaXF1aWRpdHlQb29sSWQgdG8gY29tcGFyZS5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gYHRydWVgIGlmIHRoaXMgYXNzZXQgZXF1YWxzIHRoZSBnaXZlbiBhc3NldC5cbiAgICAgKi9cbiAgfSwge1xuICAgIGtleTogXCJlcXVhbHNcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZXF1YWxzKGFzc2V0KSB7XG4gICAgICByZXR1cm4gdGhpcy5saXF1aWRpdHlQb29sSWQgPT09IGFzc2V0LmdldExpcXVpZGl0eVBvb2xJZCgpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJ0b1N0cmluZ1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICAgIHJldHVybiBcImxpcXVpZGl0eV9wb29sOlwiLmNvbmNhdCh0aGlzLmxpcXVpZGl0eVBvb2xJZCk7XG4gICAgfVxuICB9XSwgW3tcbiAgICBrZXk6IFwiZnJvbU9wZXJhdGlvblwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBmcm9tT3BlcmF0aW9uKHRsQXNzZXRYZHIpIHtcbiAgICAgIHZhciBhc3NldFR5cGUgPSB0bEFzc2V0WGRyW1wic3dpdGNoXCJdKCk7XG4gICAgICBpZiAoYXNzZXRUeXBlID09PSBfeGRyW1wiZGVmYXVsdFwiXS5Bc3NldFR5cGUuYXNzZXRUeXBlUG9vbFNoYXJlKCkpIHtcbiAgICAgICAgdmFyIGxpcXVpZGl0eVBvb2xJZCA9IHRsQXNzZXRYZHIubGlxdWlkaXR5UG9vbElkKCkudG9TdHJpbmcoJ2hleCcpO1xuICAgICAgICByZXR1cm4gbmV3IHRoaXMobGlxdWlkaXR5UG9vbElkKTtcbiAgICAgIH1cbiAgICAgIHRocm93IG5ldyBFcnJvcihcIkludmFsaWQgYXNzZXQgdHlwZTogXCIuY29uY2F0KGFzc2V0VHlwZS5uYW1lKSk7XG4gICAgfVxuICB9XSk7XG59KCk7Il0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@stellar/stellar-base/lib/liquidity_pool_id.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@stellar/stellar-base/lib/memo.js":
/*!********************************************************!*\
  !*** ./node_modules/@stellar/stellar-base/lib/memo.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.MemoText = exports.MemoReturn = exports.MemoNone = exports.MemoID = exports.MemoHash = exports.Memo = void 0;\nvar _jsXdr = __webpack_require__(/*! @stellar/js-xdr */ \"(ssr)/./node_modules/@stellar/js-xdr/src/index.js\");\nvar _bignumber = _interopRequireDefault(__webpack_require__(/*! ./util/bignumber */ \"(ssr)/./node_modules/@stellar/stellar-base/lib/util/bignumber.js\"));\nvar _xdr = _interopRequireDefault(__webpack_require__(/*! ./xdr */ \"(ssr)/./node_modules/@stellar/stellar-base/lib/xdr.js\"));\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { \"default\": e }; }\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\nfunction _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }\nfunction _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\n/**\n * Type of {@link Memo}.\n */\nvar MemoNone = exports.MemoNone = 'none';\n/**\n * Type of {@link Memo}.\n */\nvar MemoID = exports.MemoID = 'id';\n/**\n * Type of {@link Memo}.\n */\nvar MemoText = exports.MemoText = 'text';\n/**\n * Type of {@link Memo}.\n */\nvar MemoHash = exports.MemoHash = 'hash';\n/**\n * Type of {@link Memo}.\n */\nvar MemoReturn = exports.MemoReturn = 'return';\n\n/**\n * `Memo` represents memos attached to transactions.\n *\n * @param {string} type - `MemoNone`, `MemoID`, `MemoText`, `MemoHash` or `MemoReturn`\n * @param {*} value - `string` for `MemoID`, `MemoText`, buffer of hex string for `MemoHash` or `MemoReturn`\n * @see [Transactions concept](https://developers.stellar.org/docs/glossary/transactions/)\n * @class Memo\n */\nvar Memo = exports.Memo = /*#__PURE__*/function () {\n  function Memo(type) {\n    var value = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    _classCallCheck(this, Memo);\n    this._type = type;\n    this._value = value;\n    switch (this._type) {\n      case MemoNone:\n        break;\n      case MemoID:\n        Memo._validateIdValue(value);\n        break;\n      case MemoText:\n        Memo._validateTextValue(value);\n        break;\n      case MemoHash:\n      case MemoReturn:\n        Memo._validateHashValue(value);\n        // We want MemoHash and MemoReturn to have Buffer as a value\n        if (typeof value === 'string') {\n          this._value = Buffer.from(value, 'hex');\n        }\n        break;\n      default:\n        throw new Error('Invalid memo type');\n    }\n  }\n\n  /**\n   * Contains memo type: `MemoNone`, `MemoID`, `MemoText`, `MemoHash` or `MemoReturn`\n   */\n  return _createClass(Memo, [{\n    key: \"type\",\n    get: function get() {\n      return this._type;\n    },\n    set: function set(type) {\n      throw new Error('Memo is immutable');\n    }\n\n    /**\n     * Contains memo value:\n     * * `null` for `MemoNone`,\n     * * `string` for `MemoID`,\n     * * `Buffer` for `MemoText` after decoding using `fromXDRObject`, original value otherwise,\n     * * `Buffer` for `MemoHash`, `MemoReturn`.\n     */\n  }, {\n    key: \"value\",\n    get: function get() {\n      switch (this._type) {\n        case MemoNone:\n          return null;\n        case MemoID:\n        case MemoText:\n          return this._value;\n        case MemoHash:\n        case MemoReturn:\n          return Buffer.from(this._value);\n        default:\n          throw new Error('Invalid memo type');\n      }\n    },\n    set: function set(value) {\n      throw new Error('Memo is immutable');\n    }\n  }, {\n    key: \"toXDRObject\",\n    value:\n    /**\n     * Returns XDR memo object.\n     * @returns {xdr.Memo}\n     */\n    function toXDRObject() {\n      switch (this._type) {\n        case MemoNone:\n          return _xdr[\"default\"].Memo.memoNone();\n        case MemoID:\n          return _xdr[\"default\"].Memo.memoId(_jsXdr.UnsignedHyper.fromString(this._value));\n        case MemoText:\n          return _xdr[\"default\"].Memo.memoText(this._value);\n        case MemoHash:\n          return _xdr[\"default\"].Memo.memoHash(this._value);\n        case MemoReturn:\n          return _xdr[\"default\"].Memo.memoReturn(this._value);\n        default:\n          return null;\n      }\n    }\n\n    /**\n     * Returns {@link Memo} from XDR memo object.\n     * @param {xdr.Memo} object XDR memo object\n     * @returns {Memo}\n     */\n  }], [{\n    key: \"_validateIdValue\",\n    value: function _validateIdValue(value) {\n      var error = new Error(\"Expects a int64 as a string. Got \".concat(value));\n      if (typeof value !== 'string') {\n        throw error;\n      }\n      var number;\n      try {\n        number = new _bignumber[\"default\"](value);\n      } catch (e) {\n        throw error;\n      }\n\n      // Infinity\n      if (!number.isFinite()) {\n        throw error;\n      }\n\n      // NaN\n      if (number.isNaN()) {\n        throw error;\n      }\n    }\n  }, {\n    key: \"_validateTextValue\",\n    value: function _validateTextValue(value) {\n      if (!_xdr[\"default\"].Memo.armTypeForArm('text').isValid(value)) {\n        throw new Error('Expects string, array or buffer, max 28 bytes');\n      }\n    }\n  }, {\n    key: \"_validateHashValue\",\n    value: function _validateHashValue(value) {\n      var error = new Error(\"Expects a 32 byte hash value or hex encoded string. Got \".concat(value));\n      if (value === null || typeof value === 'undefined') {\n        throw error;\n      }\n      var valueBuffer;\n      if (typeof value === 'string') {\n        if (!/^[0-9A-Fa-f]{64}$/g.test(value)) {\n          throw error;\n        }\n        valueBuffer = Buffer.from(value, 'hex');\n      } else if (Buffer.isBuffer(value)) {\n        valueBuffer = Buffer.from(value);\n      } else {\n        throw error;\n      }\n      if (!valueBuffer.length || valueBuffer.length !== 32) {\n        throw error;\n      }\n    }\n\n    /**\n     * Returns an empty memo (`MemoNone`).\n     * @returns {Memo}\n     */\n  }, {\n    key: \"none\",\n    value: function none() {\n      return new Memo(MemoNone);\n    }\n\n    /**\n     * Creates and returns a `MemoText` memo.\n     * @param {string} text - memo text\n     * @returns {Memo}\n     */\n  }, {\n    key: \"text\",\n    value: function text(_text) {\n      return new Memo(MemoText, _text);\n    }\n\n    /**\n     * Creates and returns a `MemoID` memo.\n     * @param {string} id - 64-bit number represented as a string\n     * @returns {Memo}\n     */\n  }, {\n    key: \"id\",\n    value: function id(_id) {\n      return new Memo(MemoID, _id);\n    }\n\n    /**\n     * Creates and returns a `MemoHash` memo.\n     * @param {array|string} hash - 32 byte hash or hex encoded string\n     * @returns {Memo}\n     */\n  }, {\n    key: \"hash\",\n    value: function hash(_hash) {\n      return new Memo(MemoHash, _hash);\n    }\n\n    /**\n     * Creates and returns a `MemoReturn` memo.\n     * @param {array|string} hash - 32 byte hash or hex encoded string\n     * @returns {Memo}\n     */\n  }, {\n    key: \"return\",\n    value: function _return(hash) {\n      return new Memo(MemoReturn, hash);\n    }\n  }, {\n    key: \"fromXDRObject\",\n    value: function fromXDRObject(object) {\n      switch (object.arm()) {\n        case 'id':\n          return Memo.id(object.value().toString());\n        case 'text':\n          return Memo.text(object.value());\n        case 'hash':\n          return Memo.hash(object.value());\n        case 'retHash':\n          return Memo[\"return\"](object.value());\n        default:\n          break;\n      }\n      if (typeof object.value() === 'undefined') {\n        return Memo.none();\n      }\n      throw new Error('Unknown type');\n    }\n  }]);\n}();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@stellar/stellar-base/lib/memo.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@stellar/stellar-base/lib/muxed_account.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@stellar/stellar-base/lib/muxed_account.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.MuxedAccount = void 0;\nvar _xdr = _interopRequireDefault(__webpack_require__(/*! ./xdr */ \"(ssr)/./node_modules/@stellar/stellar-base/lib/xdr.js\"));\nvar _account = __webpack_require__(/*! ./account */ \"(ssr)/./node_modules/@stellar/stellar-base/lib/account.js\");\nvar _strkey = __webpack_require__(/*! ./strkey */ \"(ssr)/./node_modules/@stellar/stellar-base/lib/strkey.js\");\nvar _decode_encode_muxed_account = __webpack_require__(/*! ./util/decode_encode_muxed_account */ \"(ssr)/./node_modules/@stellar/stellar-base/lib/util/decode_encode_muxed_account.js\");\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { \"default\": e }; }\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\nfunction _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }\nfunction _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\n/**\n * Represents a muxed account for transactions and operations.\n *\n * A muxed (or *multiplexed*) account (defined rigorously in\n * [CAP-27](https://stellar.org/protocol/cap-27) and briefly in\n * [SEP-23](https://stellar.org/protocol/sep-23)) is one that resolves a single\n * Stellar `G...`` account to many different underlying IDs.\n *\n * For example, you may have a single Stellar address for accounting purposes:\n *   GA7QYNF7SOWQ3GLR2BGMZEHXAVIRZA4KVWLTJJFC7MGXUA74P7UJVSGZ\n *\n * Yet would like to use it for 4 different family members:\n *   1: MA7QYNF7SOWQ3GLR2BGMZEHXAVIRZA4KVWLTJJFC7MGXUA74P7UJUAAAAAAAAAAAAGZFQ\n *   2: MA7QYNF7SOWQ3GLR2BGMZEHXAVIRZA4KVWLTJJFC7MGXUA74P7UJUAAAAAAAAAAAALIWQ\n *   3: MA7QYNF7SOWQ3GLR2BGMZEHXAVIRZA4KVWLTJJFC7MGXUA74P7UJUAAAAAAAAAAAAPYHQ\n *   4: MA7QYNF7SOWQ3GLR2BGMZEHXAVIRZA4KVWLTJJFC7MGXUA74P7UJUAAAAAAAAAAAAQLQQ\n *\n * This object makes it easy to create muxed accounts from regular accounts,\n * duplicate them, get/set the underlying IDs, etc. without mucking around with\n * the raw XDR.\n *\n * Because muxed accounts are purely an off-chain convention, they all share the\n * sequence number tied to their underlying G... account. Thus, this object\n * *requires* an {@link Account} instance to be passed in, so that muxed\n * instances of an account can collectively modify the sequence number whenever\n * a muxed account is used as the source of a @{link Transaction} with {@link\n * TransactionBuilder}.\n *\n * @constructor\n *\n * @param {Account}   account - the @{link Account} instance representing the\n *                              underlying G... address\n * @param {string}    id      - a stringified uint64 value that represents the\n *                              ID of the muxed account\n *\n * @link https://developers.stellar.org/docs/glossary/muxed-accounts/\n */\nvar MuxedAccount = exports.MuxedAccount = /*#__PURE__*/function () {\n  function MuxedAccount(baseAccount, id) {\n    _classCallCheck(this, MuxedAccount);\n    var accountId = baseAccount.accountId();\n    if (!_strkey.StrKey.isValidEd25519PublicKey(accountId)) {\n      throw new Error('accountId is invalid');\n    }\n    this.account = baseAccount;\n    this._muxedXdr = (0, _decode_encode_muxed_account.encodeMuxedAccount)(accountId, id);\n    this._mAddress = (0, _decode_encode_muxed_account.encodeMuxedAccountToAddress)(this._muxedXdr);\n    this._id = id;\n  }\n\n  /**\n   * Parses an M-address into a MuxedAccount object.\n   *\n   * @param  {string} mAddress    - an M-address to transform\n   * @param  {string} sequenceNum - the sequence number of the underlying {@link\n   *     Account}, to use for the underlying base account (@link\n   *     MuxedAccount.baseAccount). If you're using the SDK, you can use\n   *     `server.loadAccount` to fetch this if you don't know it.\n   *\n   * @return {MuxedAccount}\n   */\n  return _createClass(MuxedAccount, [{\n    key: \"baseAccount\",\n    value:\n    /**\n     * @return {Account} the underlying account object shared among all muxed\n     *     accounts with this Stellar address\n     */\n    function baseAccount() {\n      return this.account;\n    }\n\n    /**\n     * @return {string} the M-address representing this account's (G-address, ID)\n     */\n  }, {\n    key: \"accountId\",\n    value: function accountId() {\n      return this._mAddress;\n    }\n  }, {\n    key: \"id\",\n    value: function id() {\n      return this._id;\n    }\n  }, {\n    key: \"setId\",\n    value: function setId(id) {\n      if (typeof id !== 'string') {\n        throw new Error('id should be a string representing a number (uint64)');\n      }\n      this._muxedXdr.med25519().id(_xdr[\"default\"].Uint64.fromString(id));\n      this._mAddress = (0, _decode_encode_muxed_account.encodeMuxedAccountToAddress)(this._muxedXdr);\n      this._id = id;\n      return this;\n    }\n\n    /**\n     * Accesses the underlying account's sequence number.\n     * @return {string}  strigified sequence number for the underlying account\n     */\n  }, {\n    key: \"sequenceNumber\",\n    value: function sequenceNumber() {\n      return this.account.sequenceNumber();\n    }\n\n    /**\n     * Increments the underlying account's sequence number by one.\n     * @return {void}\n     */\n  }, {\n    key: \"incrementSequenceNumber\",\n    value: function incrementSequenceNumber() {\n      return this.account.incrementSequenceNumber();\n    }\n\n    /**\n     * @return {xdr.MuxedAccount} the XDR object representing this muxed account's\n     *     G-address and uint64 ID\n     */\n  }, {\n    key: \"toXDRObject\",\n    value: function toXDRObject() {\n      return this._muxedXdr;\n    }\n  }, {\n    key: \"equals\",\n    value: function equals(otherMuxedAccount) {\n      return this.accountId() === otherMuxedAccount.accountId();\n    }\n  }], [{\n    key: \"fromAddress\",\n    value: function fromAddress(mAddress, sequenceNum) {\n      var muxedAccount = (0, _decode_encode_muxed_account.decodeAddressToMuxedAccount)(mAddress);\n      var gAddress = (0, _decode_encode_muxed_account.extractBaseAddress)(mAddress);\n      var id = muxedAccount.med25519().id().toString();\n      return new MuxedAccount(new _account.Account(gAddress, sequenceNum), id);\n    }\n  }]);\n}();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@stellar/stellar-base/lib/muxed_account.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@stellar/stellar-base/lib/network.js":
/*!***********************************************************!*\
  !*** ./node_modules/@stellar/stellar-base/lib/network.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.Networks = void 0;\n/**\n * Contains passphrases for common networks:\n * * `Networks.PUBLIC`: `Public Global Stellar Network ; September 2015`\n * * `Networks.TESTNET`: `Test SDF Network ; September 2015`\n * * `Networks.FUTURENET`: `Test SDF Future Network ; October 2022`\n * * `Networks.STANDALONE`: `Standalone Network ; February 2017`\n *\n * @type {{PUBLIC: string, TESTNET: string, FUTURENET: string, STANDALONE: string }}\n */\nvar Networks = exports.Networks = {\n  PUBLIC: 'Public Global Stellar Network ; September 2015',\n  TESTNET: 'Test SDF Network ; September 2015',\n  FUTURENET: 'Test SDF Future Network ; October 2022',\n  SANDBOX: 'Local Sandbox Stellar Network ; September 2022',\n  STANDALONE: 'Standalone Network ; February 2017'\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHN0ZWxsYXIvc3RlbGxhci1iYXNlL2xpYi9uZXR3b3JrLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLDhDQUE2QztBQUM3QztBQUNBLENBQUMsRUFBQztBQUNGLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0EseURBQXlEO0FBQ3pELDZDQUE2QztBQUM3QyxzREFBc0Q7QUFDdEQsa0RBQWtEO0FBQ2xEO0FBQ0EsV0FBVztBQUNYO0FBQ0EsZUFBZSxnQkFBZ0I7QUFDL0IsMkNBQTJDO0FBQzNDLCtCQUErQjtBQUMvQix3Q0FBd0M7QUFDeEMsNENBQTRDO0FBQzVDLG9DQUFvQztBQUNwQyIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxVU1VBUklPXFxEb2N1bWVudHNcXEdpdGh1YlxcR2FsYXh5S0otd2FsbGV0LS0tSGFja1xcd2ViXFxub2RlX21vZHVsZXNcXEBzdGVsbGFyXFxzdGVsbGFyLWJhc2VcXGxpYlxcbmV0d29yay5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuTmV0d29ya3MgPSB2b2lkIDA7XG4vKipcbiAqIENvbnRhaW5zIHBhc3NwaHJhc2VzIGZvciBjb21tb24gbmV0d29ya3M6XG4gKiAqIGBOZXR3b3Jrcy5QVUJMSUNgOiBgUHVibGljIEdsb2JhbCBTdGVsbGFyIE5ldHdvcmsgOyBTZXB0ZW1iZXIgMjAxNWBcbiAqICogYE5ldHdvcmtzLlRFU1RORVRgOiBgVGVzdCBTREYgTmV0d29yayA7IFNlcHRlbWJlciAyMDE1YFxuICogKiBgTmV0d29ya3MuRlVUVVJFTkVUYDogYFRlc3QgU0RGIEZ1dHVyZSBOZXR3b3JrIDsgT2N0b2JlciAyMDIyYFxuICogKiBgTmV0d29ya3MuU1RBTkRBTE9ORWA6IGBTdGFuZGFsb25lIE5ldHdvcmsgOyBGZWJydWFyeSAyMDE3YFxuICpcbiAqIEB0eXBlIHt7UFVCTElDOiBzdHJpbmcsIFRFU1RORVQ6IHN0cmluZywgRlVUVVJFTkVUOiBzdHJpbmcsIFNUQU5EQUxPTkU6IHN0cmluZyB9fVxuICovXG52YXIgTmV0d29ya3MgPSBleHBvcnRzLk5ldHdvcmtzID0ge1xuICBQVUJMSUM6ICdQdWJsaWMgR2xvYmFsIFN0ZWxsYXIgTmV0d29yayA7IFNlcHRlbWJlciAyMDE1JyxcbiAgVEVTVE5FVDogJ1Rlc3QgU0RGIE5ldHdvcmsgOyBTZXB0ZW1iZXIgMjAxNScsXG4gIEZVVFVSRU5FVDogJ1Rlc3QgU0RGIEZ1dHVyZSBOZXR3b3JrIDsgT2N0b2JlciAyMDIyJyxcbiAgU0FOREJPWDogJ0xvY2FsIFNhbmRib3ggU3RlbGxhciBOZXR3b3JrIDsgU2VwdGVtYmVyIDIwMjInLFxuICBTVEFOREFMT05FOiAnU3RhbmRhbG9uZSBOZXR3b3JrIDsgRmVicnVhcnkgMjAxNydcbn07Il0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@stellar/stellar-base/lib/network.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@stellar/stellar-base/lib/numbers/index.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@stellar/stellar-base/lib/numbers/index.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nObject.defineProperty(exports, \"Int128\", ({\n  enumerable: true,\n  get: function get() {\n    return _int.Int128;\n  }\n}));\nObject.defineProperty(exports, \"Int256\", ({\n  enumerable: true,\n  get: function get() {\n    return _int2.Int256;\n  }\n}));\nObject.defineProperty(exports, \"ScInt\", ({\n  enumerable: true,\n  get: function get() {\n    return _sc_int.ScInt;\n  }\n}));\nObject.defineProperty(exports, \"Uint128\", ({\n  enumerable: true,\n  get: function get() {\n    return _uint.Uint128;\n  }\n}));\nObject.defineProperty(exports, \"Uint256\", ({\n  enumerable: true,\n  get: function get() {\n    return _uint2.Uint256;\n  }\n}));\nObject.defineProperty(exports, \"XdrLargeInt\", ({\n  enumerable: true,\n  get: function get() {\n    return _xdr_large_int.XdrLargeInt;\n  }\n}));\nexports.scValToBigInt = scValToBigInt;\nvar _xdr_large_int = __webpack_require__(/*! ./xdr_large_int */ \"(ssr)/./node_modules/@stellar/stellar-base/lib/numbers/xdr_large_int.js\");\nvar _uint = __webpack_require__(/*! ./uint128 */ \"(ssr)/./node_modules/@stellar/stellar-base/lib/numbers/uint128.js\");\nvar _uint2 = __webpack_require__(/*! ./uint256 */ \"(ssr)/./node_modules/@stellar/stellar-base/lib/numbers/uint256.js\");\nvar _int = __webpack_require__(/*! ./int128 */ \"(ssr)/./node_modules/@stellar/stellar-base/lib/numbers/int128.js\");\nvar _int2 = __webpack_require__(/*! ./int256 */ \"(ssr)/./node_modules/@stellar/stellar-base/lib/numbers/int256.js\");\nvar _sc_int = __webpack_require__(/*! ./sc_int */ \"(ssr)/./node_modules/@stellar/stellar-base/lib/numbers/sc_int.js\");\n/**\n * Transforms an opaque {@link xdr.ScVal} into a native bigint, if possible.\n *\n * If you then want to use this in the abstractions provided by this module,\n * you can pass it to the constructor of {@link XdrLargeInt}.\n *\n * @example\n * let scv = contract.call(\"add\", x, y); // assume it returns an xdr.ScVal\n * let bigi = scValToBigInt(scv);\n *\n * new ScInt(bigi);               // if you don't care about types, and\n * new XdrLargeInt('i128', bigi); // if you do\n *\n * @param {xdr.ScVal} scv - the raw XDR value to parse into an integer\n * @returns {bigint} the native value of this input value\n *\n * @throws {TypeError} if the `scv` input value doesn't represent an integer\n */\nfunction scValToBigInt(scv) {\n  var scIntType = _xdr_large_int.XdrLargeInt.getType(scv[\"switch\"]().name);\n  switch (scv[\"switch\"]().name) {\n    case 'scvU32':\n    case 'scvI32':\n      return BigInt(scv.value());\n    case 'scvU64':\n    case 'scvI64':\n      return new _xdr_large_int.XdrLargeInt(scIntType, scv.value()).toBigInt();\n    case 'scvU128':\n    case 'scvI128':\n      return new _xdr_large_int.XdrLargeInt(scIntType, [scv.value().lo(), scv.value().hi()]).toBigInt();\n    case 'scvU256':\n    case 'scvI256':\n      return new _xdr_large_int.XdrLargeInt(scIntType, [scv.value().loLo(), scv.value().loHi(), scv.value().hiLo(), scv.value().hiHi()]).toBigInt();\n    default:\n      throw TypeError(\"expected integer type, got \".concat(scv[\"switch\"]()));\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHN0ZWxsYXIvc3RlbGxhci1iYXNlL2xpYi9udW1iZXJzL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLDhDQUE2QztBQUM3QztBQUNBLENBQUMsRUFBQztBQUNGLDBDQUF5QztBQUN6QztBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsRUFBQztBQUNGLDBDQUF5QztBQUN6QztBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsRUFBQztBQUNGLHlDQUF3QztBQUN4QztBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsRUFBQztBQUNGLDJDQUEwQztBQUMxQztBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsRUFBQztBQUNGLDJDQUEwQztBQUMxQztBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsRUFBQztBQUNGLCtDQUE4QztBQUM5QztBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsRUFBQztBQUNGLHFCQUFxQjtBQUNyQixxQkFBcUIsbUJBQU8sQ0FBQyxnR0FBaUI7QUFDOUMsWUFBWSxtQkFBTyxDQUFDLG9GQUFXO0FBQy9CLGFBQWEsbUJBQU8sQ0FBQyxvRkFBVztBQUNoQyxXQUFXLG1CQUFPLENBQUMsa0ZBQVU7QUFDN0IsWUFBWSxtQkFBTyxDQUFDLGtGQUFVO0FBQzlCLGNBQWMsbUJBQU8sQ0FBQyxrRkFBVTtBQUNoQztBQUNBLHlCQUF5QixpQkFBaUI7QUFDMUM7QUFDQTtBQUNBLDBDQUEwQyxrQkFBa0I7QUFDNUQ7QUFDQTtBQUNBLHlDQUF5QztBQUN6QztBQUNBO0FBQ0Esa0NBQWtDO0FBQ2xDLGtDQUFrQztBQUNsQztBQUNBLFdBQVcsV0FBVztBQUN0QixhQUFhLFFBQVE7QUFDckI7QUFDQSxZQUFZLFdBQVc7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxVU1VBUklPXFxEb2N1bWVudHNcXEdpdGh1YlxcR2FsYXh5S0otd2FsbGV0LS0tSGFja1xcd2ViXFxub2RlX21vZHVsZXNcXEBzdGVsbGFyXFxzdGVsbGFyLWJhc2VcXGxpYlxcbnVtYmVyc1xcaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJJbnQxMjhcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gX2ludC5JbnQxMjg7XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiSW50MjU2XCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIF9pbnQyLkludDI1NjtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJTY0ludFwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBfc2NfaW50LlNjSW50O1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIlVpbnQxMjhcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gX3VpbnQuVWludDEyODtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJVaW50MjU2XCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIF91aW50Mi5VaW50MjU2O1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIlhkckxhcmdlSW50XCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIF94ZHJfbGFyZ2VfaW50LlhkckxhcmdlSW50O1xuICB9XG59KTtcbmV4cG9ydHMuc2NWYWxUb0JpZ0ludCA9IHNjVmFsVG9CaWdJbnQ7XG52YXIgX3hkcl9sYXJnZV9pbnQgPSByZXF1aXJlKFwiLi94ZHJfbGFyZ2VfaW50XCIpO1xudmFyIF91aW50ID0gcmVxdWlyZShcIi4vdWludDEyOFwiKTtcbnZhciBfdWludDIgPSByZXF1aXJlKFwiLi91aW50MjU2XCIpO1xudmFyIF9pbnQgPSByZXF1aXJlKFwiLi9pbnQxMjhcIik7XG52YXIgX2ludDIgPSByZXF1aXJlKFwiLi9pbnQyNTZcIik7XG52YXIgX3NjX2ludCA9IHJlcXVpcmUoXCIuL3NjX2ludFwiKTtcbi8qKlxuICogVHJhbnNmb3JtcyBhbiBvcGFxdWUge0BsaW5rIHhkci5TY1ZhbH0gaW50byBhIG5hdGl2ZSBiaWdpbnQsIGlmIHBvc3NpYmxlLlxuICpcbiAqIElmIHlvdSB0aGVuIHdhbnQgdG8gdXNlIHRoaXMgaW4gdGhlIGFic3RyYWN0aW9ucyBwcm92aWRlZCBieSB0aGlzIG1vZHVsZSxcbiAqIHlvdSBjYW4gcGFzcyBpdCB0byB0aGUgY29uc3RydWN0b3Igb2Yge0BsaW5rIFhkckxhcmdlSW50fS5cbiAqXG4gKiBAZXhhbXBsZVxuICogbGV0IHNjdiA9IGNvbnRyYWN0LmNhbGwoXCJhZGRcIiwgeCwgeSk7IC8vIGFzc3VtZSBpdCByZXR1cm5zIGFuIHhkci5TY1ZhbFxuICogbGV0IGJpZ2kgPSBzY1ZhbFRvQmlnSW50KHNjdik7XG4gKlxuICogbmV3IFNjSW50KGJpZ2kpOyAgICAgICAgICAgICAgIC8vIGlmIHlvdSBkb24ndCBjYXJlIGFib3V0IHR5cGVzLCBhbmRcbiAqIG5ldyBYZHJMYXJnZUludCgnaTEyOCcsIGJpZ2kpOyAvLyBpZiB5b3UgZG9cbiAqXG4gKiBAcGFyYW0ge3hkci5TY1ZhbH0gc2N2IC0gdGhlIHJhdyBYRFIgdmFsdWUgdG8gcGFyc2UgaW50byBhbiBpbnRlZ2VyXG4gKiBAcmV0dXJucyB7YmlnaW50fSB0aGUgbmF0aXZlIHZhbHVlIG9mIHRoaXMgaW5wdXQgdmFsdWVcbiAqXG4gKiBAdGhyb3dzIHtUeXBlRXJyb3J9IGlmIHRoZSBgc2N2YCBpbnB1dCB2YWx1ZSBkb2Vzbid0IHJlcHJlc2VudCBhbiBpbnRlZ2VyXG4gKi9cbmZ1bmN0aW9uIHNjVmFsVG9CaWdJbnQoc2N2KSB7XG4gIHZhciBzY0ludFR5cGUgPSBfeGRyX2xhcmdlX2ludC5YZHJMYXJnZUludC5nZXRUeXBlKHNjdltcInN3aXRjaFwiXSgpLm5hbWUpO1xuICBzd2l0Y2ggKHNjdltcInN3aXRjaFwiXSgpLm5hbWUpIHtcbiAgICBjYXNlICdzY3ZVMzInOlxuICAgIGNhc2UgJ3NjdkkzMic6XG4gICAgICByZXR1cm4gQmlnSW50KHNjdi52YWx1ZSgpKTtcbiAgICBjYXNlICdzY3ZVNjQnOlxuICAgIGNhc2UgJ3Njdkk2NCc6XG4gICAgICByZXR1cm4gbmV3IF94ZHJfbGFyZ2VfaW50LlhkckxhcmdlSW50KHNjSW50VHlwZSwgc2N2LnZhbHVlKCkpLnRvQmlnSW50KCk7XG4gICAgY2FzZSAnc2N2VTEyOCc6XG4gICAgY2FzZSAnc2N2STEyOCc6XG4gICAgICByZXR1cm4gbmV3IF94ZHJfbGFyZ2VfaW50LlhkckxhcmdlSW50KHNjSW50VHlwZSwgW3Njdi52YWx1ZSgpLmxvKCksIHNjdi52YWx1ZSgpLmhpKCldKS50b0JpZ0ludCgpO1xuICAgIGNhc2UgJ3NjdlUyNTYnOlxuICAgIGNhc2UgJ3NjdkkyNTYnOlxuICAgICAgcmV0dXJuIG5ldyBfeGRyX2xhcmdlX2ludC5YZHJMYXJnZUludChzY0ludFR5cGUsIFtzY3YudmFsdWUoKS5sb0xvKCksIHNjdi52YWx1ZSgpLmxvSGkoKSwgc2N2LnZhbHVlKCkuaGlMbygpLCBzY3YudmFsdWUoKS5oaUhpKCldKS50b0JpZ0ludCgpO1xuICAgIGRlZmF1bHQ6XG4gICAgICB0aHJvdyBUeXBlRXJyb3IoXCJleHBlY3RlZCBpbnRlZ2VyIHR5cGUsIGdvdCBcIi5jb25jYXQoc2N2W1wic3dpdGNoXCJdKCkpKTtcbiAgfVxufSJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@stellar/stellar-base/lib/numbers/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@stellar/stellar-base/lib/numbers/int128.js":
/*!******************************************************************!*\
  !*** ./node_modules/@stellar/stellar-base/lib/numbers/int128.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.Int128 = void 0;\nvar _jsXdr = __webpack_require__(/*! @stellar/js-xdr */ \"(ssr)/./node_modules/@stellar/js-xdr/src/index.js\");\nfunction _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\nfunction _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }\nfunction _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nfunction _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }\nfunction _possibleConstructorReturn(t, e) { if (e && (\"object\" == _typeof(e) || \"function\" == typeof e)) return e; if (void 0 !== e) throw new TypeError(\"Derived constructors may only return object or undefined\"); return _assertThisInitialized(t); }\nfunction _assertThisInitialized(e) { if (void 0 === e) throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); return e; }\nfunction _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }\nfunction _getPrototypeOf(t) { return _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function (t) { return t.__proto__ || Object.getPrototypeOf(t); }, _getPrototypeOf(t); }\nfunction _inherits(t, e) { if (\"function\" != typeof e && null !== e) throw new TypeError(\"Super expression must either be null or a function\"); t.prototype = Object.create(e && e.prototype, { constructor: { value: t, writable: !0, configurable: !0 } }), Object.defineProperty(t, \"prototype\", { writable: !1 }), e && _setPrototypeOf(t, e); }\nfunction _setPrototypeOf(t, e) { return _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function (t, e) { return t.__proto__ = e, t; }, _setPrototypeOf(t, e); }\nvar Int128 = exports.Int128 = /*#__PURE__*/function (_LargeInt) {\n  /**\n   * Construct a signed 128-bit integer that can be XDR-encoded.\n   *\n   * @param  {Array<number|bigint|string>}  args - one or more slices to encode\n   *     in big-endian format (i.e. earlier elements are higher bits)\n   */\n  function Int128() {\n    _classCallCheck(this, Int128);\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    return _callSuper(this, Int128, [args]);\n  }\n  _inherits(Int128, _LargeInt);\n  return _createClass(Int128, [{\n    key: \"unsigned\",\n    get: function get() {\n      return false;\n    }\n  }, {\n    key: \"size\",\n    get: function get() {\n      return 128;\n    }\n  }]);\n}(_jsXdr.LargeInt);\nInt128.defineIntBoundaries();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHN0ZWxsYXIvc3RlbGxhci1iYXNlL2xpYi9udW1iZXJzL2ludDEyOC5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYixzQkFBc0IsMkJBQTJCLG9HQUFvRyxtQkFBbUIsaUJBQWlCLHNIQUFzSDtBQUMvUyw4Q0FBNkM7QUFDN0M7QUFDQSxDQUFDLEVBQUM7QUFDRixjQUFjO0FBQ2QsYUFBYSxtQkFBTyxDQUFDLDBFQUFpQjtBQUN0QyxpQ0FBaUM7QUFDakMsbUNBQW1DLGdCQUFnQixjQUFjLE9BQU8sY0FBYztBQUN0RixpQ0FBaUMscUhBQXFILGNBQWM7QUFDcEssNkJBQTZCLG1DQUFtQztBQUNoRSw4QkFBOEIsNENBQTRDLCtCQUErQixvQkFBb0IsbUNBQW1DLHNDQUFzQyx1RUFBdUU7QUFDN1EsK0JBQStCO0FBQy9CLDRDQUE0Qyx1RUFBdUUsbUdBQW1HO0FBQ3ROLHFDQUFxQyx5R0FBeUc7QUFDOUksdUNBQXVDLE1BQU0scUZBQXFGLE1BQU0sYUFBYSwyRUFBMkUsYUFBYTtBQUM3Tyw4QkFBOEIsK0ZBQStGLGlEQUFpRDtBQUM5SywyQkFBMkIscUhBQXFILGdEQUFnRCxlQUFlLDRDQUE0QywyQ0FBMkMsY0FBYztBQUNwVCxpQ0FBaUMsa0dBQWtHLDRCQUE0QjtBQUMvSixhQUFhLGNBQWM7QUFDM0I7QUFDQTtBQUNBO0FBQ0EsY0FBYyw4QkFBOEI7QUFDNUM7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3RUFBd0UsYUFBYTtBQUNyRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSCxDQUFDO0FBQ0QiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcVVNVQVJJT1xcRG9jdW1lbnRzXFxHaXRodWJcXEdhbGF4eUtKLXdhbGxldC0tLUhhY2tcXHdlYlxcbm9kZV9tb2R1bGVzXFxAc3RlbGxhclxcc3RlbGxhci1iYXNlXFxsaWJcXG51bWJlcnNcXGludDEyOC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuZnVuY3Rpb24gX3R5cGVvZihvKSB7IFwiQGJhYmVsL2hlbHBlcnMgLSB0eXBlb2ZcIjsgcmV0dXJuIF90eXBlb2YgPSBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIFN5bWJvbCAmJiBcInN5bWJvbFwiID09IHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPyBmdW5jdGlvbiAobykgeyByZXR1cm4gdHlwZW9mIG87IH0gOiBmdW5jdGlvbiAobykgeyByZXR1cm4gbyAmJiBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIFN5bWJvbCAmJiBvLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgbyAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2YgbzsgfSwgX3R5cGVvZihvKTsgfVxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuSW50MTI4ID0gdm9pZCAwO1xudmFyIF9qc1hkciA9IHJlcXVpcmUoXCJAc3RlbGxhci9qcy14ZHJcIik7XG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soYSwgbikgeyBpZiAoIShhIGluc3RhbmNlb2YgbikpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH1cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKGUsIHIpIHsgZm9yICh2YXIgdCA9IDA7IHQgPCByLmxlbmd0aDsgdCsrKSB7IHZhciBvID0gclt0XTsgby5lbnVtZXJhYmxlID0gby5lbnVtZXJhYmxlIHx8ICExLCBvLmNvbmZpZ3VyYWJsZSA9ICEwLCBcInZhbHVlXCIgaW4gbyAmJiAoby53cml0YWJsZSA9ICEwKSwgT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsIF90b1Byb3BlcnR5S2V5KG8ua2V5KSwgbyk7IH0gfVxuZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKGUsIHIsIHQpIHsgcmV0dXJuIHIgJiYgX2RlZmluZVByb3BlcnRpZXMoZS5wcm90b3R5cGUsIHIpLCB0ICYmIF9kZWZpbmVQcm9wZXJ0aWVzKGUsIHQpLCBPYmplY3QuZGVmaW5lUHJvcGVydHkoZSwgXCJwcm90b3R5cGVcIiwgeyB3cml0YWJsZTogITEgfSksIGU7IH1cbmZ1bmN0aW9uIF90b1Byb3BlcnR5S2V5KHQpIHsgdmFyIGkgPSBfdG9QcmltaXRpdmUodCwgXCJzdHJpbmdcIik7IHJldHVybiBcInN5bWJvbFwiID09IF90eXBlb2YoaSkgPyBpIDogaSArIFwiXCI7IH1cbmZ1bmN0aW9uIF90b1ByaW1pdGl2ZSh0LCByKSB7IGlmIChcIm9iamVjdFwiICE9IF90eXBlb2YodCkgfHwgIXQpIHJldHVybiB0OyB2YXIgZSA9IHRbU3ltYm9sLnRvUHJpbWl0aXZlXTsgaWYgKHZvaWQgMCAhPT0gZSkgeyB2YXIgaSA9IGUuY2FsbCh0LCByIHx8IFwiZGVmYXVsdFwiKTsgaWYgKFwib2JqZWN0XCIgIT0gX3R5cGVvZihpKSkgcmV0dXJuIGk7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJAQHRvUHJpbWl0aXZlIG11c3QgcmV0dXJuIGEgcHJpbWl0aXZlIHZhbHVlLlwiKTsgfSByZXR1cm4gKFwic3RyaW5nXCIgPT09IHIgPyBTdHJpbmcgOiBOdW1iZXIpKHQpOyB9XG5mdW5jdGlvbiBfY2FsbFN1cGVyKHQsIG8sIGUpIHsgcmV0dXJuIG8gPSBfZ2V0UHJvdG90eXBlT2YobyksIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHQsIF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKSA/IFJlZmxlY3QuY29uc3RydWN0KG8sIGUgfHwgW10sIF9nZXRQcm90b3R5cGVPZih0KS5jb25zdHJ1Y3RvcikgOiBvLmFwcGx5KHQsIGUpKTsgfVxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odCwgZSkgeyBpZiAoZSAmJiAoXCJvYmplY3RcIiA9PSBfdHlwZW9mKGUpIHx8IFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgZSkpIHJldHVybiBlOyBpZiAodm9pZCAwICE9PSBlKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiRGVyaXZlZCBjb25zdHJ1Y3RvcnMgbWF5IG9ubHkgcmV0dXJuIG9iamVjdCBvciB1bmRlZmluZWRcIik7IHJldHVybiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHQpOyB9XG5mdW5jdGlvbiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKGUpIHsgaWYgKHZvaWQgMCA9PT0gZSkgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyByZXR1cm4gZTsgfVxuZnVuY3Rpb24gX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpIHsgdHJ5IHsgdmFyIHQgPSAhQm9vbGVhbi5wcm90b3R5cGUudmFsdWVPZi5jYWxsKFJlZmxlY3QuY29uc3RydWN0KEJvb2xlYW4sIFtdLCBmdW5jdGlvbiAoKSB7fSkpOyB9IGNhdGNoICh0KSB7fSByZXR1cm4gKF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QgPSBmdW5jdGlvbiBfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KCkgeyByZXR1cm4gISF0OyB9KSgpOyB9XG5mdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2YodCkgeyByZXR1cm4gX2dldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LmdldFByb3RvdHlwZU9mLmJpbmQoKSA6IGZ1bmN0aW9uICh0KSB7IHJldHVybiB0Ll9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YodCk7IH0sIF9nZXRQcm90b3R5cGVPZih0KTsgfVxuZnVuY3Rpb24gX2luaGVyaXRzKHQsIGUpIHsgaWYgKFwiZnVuY3Rpb25cIiAhPSB0eXBlb2YgZSAmJiBudWxsICE9PSBlKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb25cIik7IHQucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShlICYmIGUucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiB0LCB3cml0YWJsZTogITAsIGNvbmZpZ3VyYWJsZTogITAgfSB9KSwgT2JqZWN0LmRlZmluZVByb3BlcnR5KHQsIFwicHJvdG90eXBlXCIsIHsgd3JpdGFibGU6ICExIH0pLCBlICYmIF9zZXRQcm90b3R5cGVPZih0LCBlKTsgfVxuZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKHQsIGUpIHsgcmV0dXJuIF9zZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZi5iaW5kKCkgOiBmdW5jdGlvbiAodCwgZSkgeyByZXR1cm4gdC5fX3Byb3RvX18gPSBlLCB0OyB9LCBfc2V0UHJvdG90eXBlT2YodCwgZSk7IH1cbnZhciBJbnQxMjggPSBleHBvcnRzLkludDEyOCA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX0xhcmdlSW50KSB7XG4gIC8qKlxuICAgKiBDb25zdHJ1Y3QgYSBzaWduZWQgMTI4LWJpdCBpbnRlZ2VyIHRoYXQgY2FuIGJlIFhEUi1lbmNvZGVkLlxuICAgKlxuICAgKiBAcGFyYW0gIHtBcnJheTxudW1iZXJ8YmlnaW50fHN0cmluZz59ICBhcmdzIC0gb25lIG9yIG1vcmUgc2xpY2VzIHRvIGVuY29kZVxuICAgKiAgICAgaW4gYmlnLWVuZGlhbiBmb3JtYXQgKGkuZS4gZWFybGllciBlbGVtZW50cyBhcmUgaGlnaGVyIGJpdHMpXG4gICAqL1xuICBmdW5jdGlvbiBJbnQxMjgoKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEludDEyOCk7XG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cbiAgICByZXR1cm4gX2NhbGxTdXBlcih0aGlzLCBJbnQxMjgsIFthcmdzXSk7XG4gIH1cbiAgX2luaGVyaXRzKEludDEyOCwgX0xhcmdlSW50KTtcbiAgcmV0dXJuIF9jcmVhdGVDbGFzcyhJbnQxMjgsIFt7XG4gICAga2V5OiBcInVuc2lnbmVkXCIsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInNpemVcIixcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiAxMjg7XG4gICAgfVxuICB9XSk7XG59KF9qc1hkci5MYXJnZUludCk7XG5JbnQxMjguZGVmaW5lSW50Qm91bmRhcmllcygpOyJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@stellar/stellar-base/lib/numbers/int128.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@stellar/stellar-base/lib/numbers/int256.js":
/*!******************************************************************!*\
  !*** ./node_modules/@stellar/stellar-base/lib/numbers/int256.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.Int256 = void 0;\nvar _jsXdr = __webpack_require__(/*! @stellar/js-xdr */ \"(ssr)/./node_modules/@stellar/js-xdr/src/index.js\");\nfunction _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\nfunction _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }\nfunction _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nfunction _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }\nfunction _possibleConstructorReturn(t, e) { if (e && (\"object\" == _typeof(e) || \"function\" == typeof e)) return e; if (void 0 !== e) throw new TypeError(\"Derived constructors may only return object or undefined\"); return _assertThisInitialized(t); }\nfunction _assertThisInitialized(e) { if (void 0 === e) throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); return e; }\nfunction _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }\nfunction _getPrototypeOf(t) { return _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function (t) { return t.__proto__ || Object.getPrototypeOf(t); }, _getPrototypeOf(t); }\nfunction _inherits(t, e) { if (\"function\" != typeof e && null !== e) throw new TypeError(\"Super expression must either be null or a function\"); t.prototype = Object.create(e && e.prototype, { constructor: { value: t, writable: !0, configurable: !0 } }), Object.defineProperty(t, \"prototype\", { writable: !1 }), e && _setPrototypeOf(t, e); }\nfunction _setPrototypeOf(t, e) { return _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function (t, e) { return t.__proto__ = e, t; }, _setPrototypeOf(t, e); }\nvar Int256 = exports.Int256 = /*#__PURE__*/function (_LargeInt) {\n  /**\n   * Construct a signed 256-bit integer that can be XDR-encoded.\n   *\n   * @param  {Array<number|bigint|string>}  args - one or more slices to encode\n   *     in big-endian format (i.e. earlier elements are higher bits)\n   */\n  function Int256() {\n    _classCallCheck(this, Int256);\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    return _callSuper(this, Int256, [args]);\n  }\n  _inherits(Int256, _LargeInt);\n  return _createClass(Int256, [{\n    key: \"unsigned\",\n    get: function get() {\n      return false;\n    }\n  }, {\n    key: \"size\",\n    get: function get() {\n      return 256;\n    }\n  }]);\n}(_jsXdr.LargeInt);\nInt256.defineIntBoundaries();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHN0ZWxsYXIvc3RlbGxhci1iYXNlL2xpYi9udW1iZXJzL2ludDI1Ni5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYixzQkFBc0IsMkJBQTJCLG9HQUFvRyxtQkFBbUIsaUJBQWlCLHNIQUFzSDtBQUMvUyw4Q0FBNkM7QUFDN0M7QUFDQSxDQUFDLEVBQUM7QUFDRixjQUFjO0FBQ2QsYUFBYSxtQkFBTyxDQUFDLDBFQUFpQjtBQUN0QyxpQ0FBaUM7QUFDakMsbUNBQW1DLGdCQUFnQixjQUFjLE9BQU8sY0FBYztBQUN0RixpQ0FBaUMscUhBQXFILGNBQWM7QUFDcEssNkJBQTZCLG1DQUFtQztBQUNoRSw4QkFBOEIsNENBQTRDLCtCQUErQixvQkFBb0IsbUNBQW1DLHNDQUFzQyx1RUFBdUU7QUFDN1EsK0JBQStCO0FBQy9CLDRDQUE0Qyx1RUFBdUUsbUdBQW1HO0FBQ3ROLHFDQUFxQyx5R0FBeUc7QUFDOUksdUNBQXVDLE1BQU0scUZBQXFGLE1BQU0sYUFBYSwyRUFBMkUsYUFBYTtBQUM3Tyw4QkFBOEIsK0ZBQStGLGlEQUFpRDtBQUM5SywyQkFBMkIscUhBQXFILGdEQUFnRCxlQUFlLDRDQUE0QywyQ0FBMkMsY0FBYztBQUNwVCxpQ0FBaUMsa0dBQWtHLDRCQUE0QjtBQUMvSixhQUFhLGNBQWM7QUFDM0I7QUFDQTtBQUNBO0FBQ0EsY0FBYyw4QkFBOEI7QUFDNUM7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3RUFBd0UsYUFBYTtBQUNyRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSCxDQUFDO0FBQ0QiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcVVNVQVJJT1xcRG9jdW1lbnRzXFxHaXRodWJcXEdhbGF4eUtKLXdhbGxldC0tLUhhY2tcXHdlYlxcbm9kZV9tb2R1bGVzXFxAc3RlbGxhclxcc3RlbGxhci1iYXNlXFxsaWJcXG51bWJlcnNcXGludDI1Ni5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuZnVuY3Rpb24gX3R5cGVvZihvKSB7IFwiQGJhYmVsL2hlbHBlcnMgLSB0eXBlb2ZcIjsgcmV0dXJuIF90eXBlb2YgPSBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIFN5bWJvbCAmJiBcInN5bWJvbFwiID09IHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPyBmdW5jdGlvbiAobykgeyByZXR1cm4gdHlwZW9mIG87IH0gOiBmdW5jdGlvbiAobykgeyByZXR1cm4gbyAmJiBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIFN5bWJvbCAmJiBvLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgbyAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2YgbzsgfSwgX3R5cGVvZihvKTsgfVxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuSW50MjU2ID0gdm9pZCAwO1xudmFyIF9qc1hkciA9IHJlcXVpcmUoXCJAc3RlbGxhci9qcy14ZHJcIik7XG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soYSwgbikgeyBpZiAoIShhIGluc3RhbmNlb2YgbikpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH1cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKGUsIHIpIHsgZm9yICh2YXIgdCA9IDA7IHQgPCByLmxlbmd0aDsgdCsrKSB7IHZhciBvID0gclt0XTsgby5lbnVtZXJhYmxlID0gby5lbnVtZXJhYmxlIHx8ICExLCBvLmNvbmZpZ3VyYWJsZSA9ICEwLCBcInZhbHVlXCIgaW4gbyAmJiAoby53cml0YWJsZSA9ICEwKSwgT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsIF90b1Byb3BlcnR5S2V5KG8ua2V5KSwgbyk7IH0gfVxuZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKGUsIHIsIHQpIHsgcmV0dXJuIHIgJiYgX2RlZmluZVByb3BlcnRpZXMoZS5wcm90b3R5cGUsIHIpLCB0ICYmIF9kZWZpbmVQcm9wZXJ0aWVzKGUsIHQpLCBPYmplY3QuZGVmaW5lUHJvcGVydHkoZSwgXCJwcm90b3R5cGVcIiwgeyB3cml0YWJsZTogITEgfSksIGU7IH1cbmZ1bmN0aW9uIF90b1Byb3BlcnR5S2V5KHQpIHsgdmFyIGkgPSBfdG9QcmltaXRpdmUodCwgXCJzdHJpbmdcIik7IHJldHVybiBcInN5bWJvbFwiID09IF90eXBlb2YoaSkgPyBpIDogaSArIFwiXCI7IH1cbmZ1bmN0aW9uIF90b1ByaW1pdGl2ZSh0LCByKSB7IGlmIChcIm9iamVjdFwiICE9IF90eXBlb2YodCkgfHwgIXQpIHJldHVybiB0OyB2YXIgZSA9IHRbU3ltYm9sLnRvUHJpbWl0aXZlXTsgaWYgKHZvaWQgMCAhPT0gZSkgeyB2YXIgaSA9IGUuY2FsbCh0LCByIHx8IFwiZGVmYXVsdFwiKTsgaWYgKFwib2JqZWN0XCIgIT0gX3R5cGVvZihpKSkgcmV0dXJuIGk7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJAQHRvUHJpbWl0aXZlIG11c3QgcmV0dXJuIGEgcHJpbWl0aXZlIHZhbHVlLlwiKTsgfSByZXR1cm4gKFwic3RyaW5nXCIgPT09IHIgPyBTdHJpbmcgOiBOdW1iZXIpKHQpOyB9XG5mdW5jdGlvbiBfY2FsbFN1cGVyKHQsIG8sIGUpIHsgcmV0dXJuIG8gPSBfZ2V0UHJvdG90eXBlT2YobyksIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHQsIF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKSA/IFJlZmxlY3QuY29uc3RydWN0KG8sIGUgfHwgW10sIF9nZXRQcm90b3R5cGVPZih0KS5jb25zdHJ1Y3RvcikgOiBvLmFwcGx5KHQsIGUpKTsgfVxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odCwgZSkgeyBpZiAoZSAmJiAoXCJvYmplY3RcIiA9PSBfdHlwZW9mKGUpIHx8IFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgZSkpIHJldHVybiBlOyBpZiAodm9pZCAwICE9PSBlKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiRGVyaXZlZCBjb25zdHJ1Y3RvcnMgbWF5IG9ubHkgcmV0dXJuIG9iamVjdCBvciB1bmRlZmluZWRcIik7IHJldHVybiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHQpOyB9XG5mdW5jdGlvbiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKGUpIHsgaWYgKHZvaWQgMCA9PT0gZSkgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyByZXR1cm4gZTsgfVxuZnVuY3Rpb24gX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpIHsgdHJ5IHsgdmFyIHQgPSAhQm9vbGVhbi5wcm90b3R5cGUudmFsdWVPZi5jYWxsKFJlZmxlY3QuY29uc3RydWN0KEJvb2xlYW4sIFtdLCBmdW5jdGlvbiAoKSB7fSkpOyB9IGNhdGNoICh0KSB7fSByZXR1cm4gKF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QgPSBmdW5jdGlvbiBfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KCkgeyByZXR1cm4gISF0OyB9KSgpOyB9XG5mdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2YodCkgeyByZXR1cm4gX2dldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LmdldFByb3RvdHlwZU9mLmJpbmQoKSA6IGZ1bmN0aW9uICh0KSB7IHJldHVybiB0Ll9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YodCk7IH0sIF9nZXRQcm90b3R5cGVPZih0KTsgfVxuZnVuY3Rpb24gX2luaGVyaXRzKHQsIGUpIHsgaWYgKFwiZnVuY3Rpb25cIiAhPSB0eXBlb2YgZSAmJiBudWxsICE9PSBlKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb25cIik7IHQucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShlICYmIGUucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiB0LCB3cml0YWJsZTogITAsIGNvbmZpZ3VyYWJsZTogITAgfSB9KSwgT2JqZWN0LmRlZmluZVByb3BlcnR5KHQsIFwicHJvdG90eXBlXCIsIHsgd3JpdGFibGU6ICExIH0pLCBlICYmIF9zZXRQcm90b3R5cGVPZih0LCBlKTsgfVxuZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKHQsIGUpIHsgcmV0dXJuIF9zZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZi5iaW5kKCkgOiBmdW5jdGlvbiAodCwgZSkgeyByZXR1cm4gdC5fX3Byb3RvX18gPSBlLCB0OyB9LCBfc2V0UHJvdG90eXBlT2YodCwgZSk7IH1cbnZhciBJbnQyNTYgPSBleHBvcnRzLkludDI1NiA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX0xhcmdlSW50KSB7XG4gIC8qKlxuICAgKiBDb25zdHJ1Y3QgYSBzaWduZWQgMjU2LWJpdCBpbnRlZ2VyIHRoYXQgY2FuIGJlIFhEUi1lbmNvZGVkLlxuICAgKlxuICAgKiBAcGFyYW0gIHtBcnJheTxudW1iZXJ8YmlnaW50fHN0cmluZz59ICBhcmdzIC0gb25lIG9yIG1vcmUgc2xpY2VzIHRvIGVuY29kZVxuICAgKiAgICAgaW4gYmlnLWVuZGlhbiBmb3JtYXQgKGkuZS4gZWFybGllciBlbGVtZW50cyBhcmUgaGlnaGVyIGJpdHMpXG4gICAqL1xuICBmdW5jdGlvbiBJbnQyNTYoKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEludDI1Nik7XG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cbiAgICByZXR1cm4gX2NhbGxTdXBlcih0aGlzLCBJbnQyNTYsIFthcmdzXSk7XG4gIH1cbiAgX2luaGVyaXRzKEludDI1NiwgX0xhcmdlSW50KTtcbiAgcmV0dXJuIF9jcmVhdGVDbGFzcyhJbnQyNTYsIFt7XG4gICAga2V5OiBcInVuc2lnbmVkXCIsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInNpemVcIixcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiAyNTY7XG4gICAgfVxuICB9XSk7XG59KF9qc1hkci5MYXJnZUludCk7XG5JbnQyNTYuZGVmaW5lSW50Qm91bmRhcmllcygpOyJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@stellar/stellar-base/lib/numbers/int256.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@stellar/stellar-base/lib/numbers/sc_int.js":
/*!******************************************************************!*\
  !*** ./node_modules/@stellar/stellar-base/lib/numbers/sc_int.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.ScInt = void 0;\nvar _xdr_large_int = __webpack_require__(/*! ./xdr_large_int */ \"(ssr)/./node_modules/@stellar/stellar-base/lib/numbers/xdr_large_int.js\");\nfunction _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }\nfunction _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nfunction _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\nfunction _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }\nfunction _possibleConstructorReturn(t, e) { if (e && (\"object\" == _typeof(e) || \"function\" == typeof e)) return e; if (void 0 !== e) throw new TypeError(\"Derived constructors may only return object or undefined\"); return _assertThisInitialized(t); }\nfunction _assertThisInitialized(e) { if (void 0 === e) throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); return e; }\nfunction _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }\nfunction _getPrototypeOf(t) { return _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function (t) { return t.__proto__ || Object.getPrototypeOf(t); }, _getPrototypeOf(t); }\nfunction _inherits(t, e) { if (\"function\" != typeof e && null !== e) throw new TypeError(\"Super expression must either be null or a function\"); t.prototype = Object.create(e && e.prototype, { constructor: { value: t, writable: !0, configurable: !0 } }), Object.defineProperty(t, \"prototype\", { writable: !1 }), e && _setPrototypeOf(t, e); }\nfunction _setPrototypeOf(t, e) { return _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function (t, e) { return t.__proto__ = e, t; }, _setPrototypeOf(t, e); }\n/**\n * Provides an easier way to manipulate large numbers for Stellar operations.\n *\n * You can instantiate this \"**s**mart **c**ontract integer\" value either from\n * bigints, strings, or numbers (whole numbers, or this will throw).\n *\n * If you need to create a native BigInt from a list of integer \"parts\" (for\n * example, you have a series of encoded 32-bit integers that represent a larger\n * value), you can use the lower level abstraction {@link XdrLargeInt}. For\n * example, you could do `new XdrLargeInt('u128', bytes...).toBigInt()`.\n *\n * @example\n * import { xdr, ScInt, scValToBigInt } from \"@stellar/stellar-base\";\n *\n * // You have an ScVal from a contract and want to parse it into JS native.\n * const value = xdr.ScVal.fromXDR(someXdr, \"base64\");\n * const bigi = scValToBigInt(value); // grab it as a BigInt\n * let sci = new ScInt(bigi);\n *\n * sci.toNumber(); // gives native JS type (w/ size check)\n * sci.toBigInt(); // gives the native BigInt value\n * sci.toU64();    // gives ScValType-specific XDR constructs (with size checks)\n *\n * // You have a number and want to shove it into a contract.\n * sci = ScInt(0xdeadcafebabe);\n * sci.toBigInt() // returns 244838016400062n\n * sci.toNumber() // throws: too large\n *\n * // Pass any to e.g. a Contract.call(), conversion happens automatically\n * // regardless of the initial type.\n * const scValU128 = sci.toU128();\n * const scValI256 = sci.toI256();\n * const scValU64  = sci.toU64();\n *\n * // Lots of ways to initialize:\n * ScInt(\"123456789123456789\")\n * ScInt(123456789123456789n);\n * ScInt(1n << 140n);\n * ScInt(-42);\n * ScInt(scValToBigInt(scValU128)); // from above\n *\n * // If you know the type ahead of time (accessing `.raw` is faster than\n * // conversions), you can specify the type directly (otherwise, it's\n * // interpreted from the numbers you pass in):\n * const i = ScInt(123456789n, { type: \"u256\" });\n *\n * // For example, you can use the underlying `sdk.U256` and convert it to an\n * // `xdr.ScVal` directly like so:\n * const scv = new xdr.ScVal.scvU256(i.raw);\n *\n * // Or reinterpret it as a different type (size permitting):\n * const scv = i.toI64();\n *\n * @param {number|bigint|string} value - a single, integer-like value which will\n *    be interpreted in the smallest appropriate XDR type supported by Stellar\n *    (64, 128, or 256 bit integer values). signed values are supported, though\n *    they are sanity-checked against `opts.type`. if you need 32-bit values,\n *    you can construct them directly without needing this wrapper, e.g.\n *    `xdr.ScVal.scvU32(1234)`.\n *\n * @param {object}  [opts] - an optional object controlling optional parameters\n * @param {string}  [opts.type] - force a specific data type. the type choices\n *    are: 'i64', 'u64', 'i128', 'u128', 'i256', and 'u256' (default: the\n *    smallest one that fits the `value`)\n *\n * @throws {RangeError} if the `value` is invalid (e.g. floating point), too\n *    large (i.e. exceeds a 256-bit value), or doesn't fit in the `opts.type`\n * @throws {TypeError} on missing parameters, or if the \"signedness\" of `opts`\n *    doesn't match input `value`, e.g. passing `{type: 'u64'}` yet passing -1n\n * @throws {SyntaxError} if a string `value` can't be parsed as a big integer\n */\nvar ScInt = exports.ScInt = /*#__PURE__*/function (_XdrLargeInt) {\n  function ScInt(value, opts) {\n    var _opts$type;\n    _classCallCheck(this, ScInt);\n    var signed = value < 0;\n    var type = (_opts$type = opts === null || opts === void 0 ? void 0 : opts.type) !== null && _opts$type !== void 0 ? _opts$type : '';\n    if (type.startsWith('u') && signed) {\n      throw TypeError(\"specified type \".concat(opts.type, \" yet negative (\").concat(value, \")\"));\n    }\n\n    // If unspecified, we make a best guess at the type based on the bit length\n    // of the value, treating 64 as a minimum and 256 as a maximum.\n    if (type === '') {\n      type = signed ? 'i' : 'u';\n      var bitlen = nearestBigIntSize(value);\n      switch (bitlen) {\n        case 64:\n        case 128:\n        case 256:\n          type += bitlen.toString();\n          break;\n        default:\n          throw RangeError(\"expected 64/128/256 bits for input (\".concat(value, \"), got \").concat(bitlen));\n      }\n    }\n    return _callSuper(this, ScInt, [type, value]);\n  }\n  _inherits(ScInt, _XdrLargeInt);\n  return _createClass(ScInt);\n}(_xdr_large_int.XdrLargeInt);\nfunction nearestBigIntSize(bigI) {\n  var _find;\n  // Note: Even though BigInt.toString(2) includes the negative sign for\n  // negative values (???), the following is still accurate, because the\n  // negative sign would be represented by a sign bit.\n  var bitlen = bigI.toString(2).length;\n  return (_find = [64, 128, 256].find(function (len) {\n    return bitlen <= len;\n  })) !== null && _find !== void 0 ? _find : bitlen;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@stellar/stellar-base/lib/numbers/sc_int.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@stellar/stellar-base/lib/numbers/uint128.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@stellar/stellar-base/lib/numbers/uint128.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.Uint128 = void 0;\nvar _jsXdr = __webpack_require__(/*! @stellar/js-xdr */ \"(ssr)/./node_modules/@stellar/js-xdr/src/index.js\");\nfunction _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\nfunction _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }\nfunction _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nfunction _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }\nfunction _possibleConstructorReturn(t, e) { if (e && (\"object\" == _typeof(e) || \"function\" == typeof e)) return e; if (void 0 !== e) throw new TypeError(\"Derived constructors may only return object or undefined\"); return _assertThisInitialized(t); }\nfunction _assertThisInitialized(e) { if (void 0 === e) throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); return e; }\nfunction _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }\nfunction _getPrototypeOf(t) { return _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function (t) { return t.__proto__ || Object.getPrototypeOf(t); }, _getPrototypeOf(t); }\nfunction _inherits(t, e) { if (\"function\" != typeof e && null !== e) throw new TypeError(\"Super expression must either be null or a function\"); t.prototype = Object.create(e && e.prototype, { constructor: { value: t, writable: !0, configurable: !0 } }), Object.defineProperty(t, \"prototype\", { writable: !1 }), e && _setPrototypeOf(t, e); }\nfunction _setPrototypeOf(t, e) { return _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function (t, e) { return t.__proto__ = e, t; }, _setPrototypeOf(t, e); }\nvar Uint128 = exports.Uint128 = /*#__PURE__*/function (_LargeInt) {\n  /**\n   * Construct an unsigned 128-bit integer that can be XDR-encoded.\n   *\n   * @param  {Array<number|bigint|string>}  args - one or more slices to encode\n   *     in big-endian format (i.e. earlier elements are higher bits)\n   */\n  function Uint128() {\n    _classCallCheck(this, Uint128);\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    return _callSuper(this, Uint128, [args]);\n  }\n  _inherits(Uint128, _LargeInt);\n  return _createClass(Uint128, [{\n    key: \"unsigned\",\n    get: function get() {\n      return true;\n    }\n  }, {\n    key: \"size\",\n    get: function get() {\n      return 128;\n    }\n  }]);\n}(_jsXdr.LargeInt);\nUint128.defineIntBoundaries();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHN0ZWxsYXIvc3RlbGxhci1iYXNlL2xpYi9udW1iZXJzL3VpbnQxMjguanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsc0JBQXNCLDJCQUEyQixvR0FBb0csbUJBQW1CLGlCQUFpQixzSEFBc0g7QUFDL1MsOENBQTZDO0FBQzdDO0FBQ0EsQ0FBQyxFQUFDO0FBQ0YsZUFBZTtBQUNmLGFBQWEsbUJBQU8sQ0FBQywwRUFBaUI7QUFDdEMsaUNBQWlDO0FBQ2pDLG1DQUFtQyxnQkFBZ0IsY0FBYyxPQUFPLGNBQWM7QUFDdEYsaUNBQWlDLHFIQUFxSCxjQUFjO0FBQ3BLLDZCQUE2QixtQ0FBbUM7QUFDaEUsOEJBQThCLDRDQUE0QywrQkFBK0Isb0JBQW9CLG1DQUFtQyxzQ0FBc0MsdUVBQXVFO0FBQzdRLCtCQUErQjtBQUMvQiw0Q0FBNEMsdUVBQXVFLG1HQUFtRztBQUN0TixxQ0FBcUMseUdBQXlHO0FBQzlJLHVDQUF1QyxNQUFNLHFGQUFxRixNQUFNLGFBQWEsMkVBQTJFLGFBQWE7QUFDN08sOEJBQThCLCtGQUErRixpREFBaUQ7QUFDOUssMkJBQTJCLHFIQUFxSCxnREFBZ0QsZUFBZSw0Q0FBNEMsMkNBQTJDLGNBQWM7QUFDcFQsaUNBQWlDLGtHQUFrRyw0QkFBNEI7QUFDL0osY0FBYyxlQUFlO0FBQzdCO0FBQ0E7QUFDQTtBQUNBLGNBQWMsOEJBQThCO0FBQzVDO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0VBQXdFLGFBQWE7QUFDckY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0gsQ0FBQztBQUNEIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXFVTVUFSSU9cXERvY3VtZW50c1xcR2l0aHViXFxHYWxheHlLSi13YWxsZXQtLS1IYWNrXFx3ZWJcXG5vZGVfbW9kdWxlc1xcQHN0ZWxsYXJcXHN0ZWxsYXItYmFzZVxcbGliXFxudW1iZXJzXFx1aW50MTI4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5mdW5jdGlvbiBfdHlwZW9mKG8pIHsgXCJAYmFiZWwvaGVscGVycyAtIHR5cGVvZlwiOyByZXR1cm4gX3R5cGVvZiA9IFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgU3ltYm9sICYmIFwic3ltYm9sXCIgPT0gdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA/IGZ1bmN0aW9uIChvKSB7IHJldHVybiB0eXBlb2YgbzsgfSA6IGZ1bmN0aW9uIChvKSB7IHJldHVybiBvICYmIFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgU3ltYm9sICYmIG8uY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvOyB9LCBfdHlwZW9mKG8pOyB9XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5VaW50MTI4ID0gdm9pZCAwO1xudmFyIF9qc1hkciA9IHJlcXVpcmUoXCJAc3RlbGxhci9qcy14ZHJcIik7XG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soYSwgbikgeyBpZiAoIShhIGluc3RhbmNlb2YgbikpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH1cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKGUsIHIpIHsgZm9yICh2YXIgdCA9IDA7IHQgPCByLmxlbmd0aDsgdCsrKSB7IHZhciBvID0gclt0XTsgby5lbnVtZXJhYmxlID0gby5lbnVtZXJhYmxlIHx8ICExLCBvLmNvbmZpZ3VyYWJsZSA9ICEwLCBcInZhbHVlXCIgaW4gbyAmJiAoby53cml0YWJsZSA9ICEwKSwgT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsIF90b1Byb3BlcnR5S2V5KG8ua2V5KSwgbyk7IH0gfVxuZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKGUsIHIsIHQpIHsgcmV0dXJuIHIgJiYgX2RlZmluZVByb3BlcnRpZXMoZS5wcm90b3R5cGUsIHIpLCB0ICYmIF9kZWZpbmVQcm9wZXJ0aWVzKGUsIHQpLCBPYmplY3QuZGVmaW5lUHJvcGVydHkoZSwgXCJwcm90b3R5cGVcIiwgeyB3cml0YWJsZTogITEgfSksIGU7IH1cbmZ1bmN0aW9uIF90b1Byb3BlcnR5S2V5KHQpIHsgdmFyIGkgPSBfdG9QcmltaXRpdmUodCwgXCJzdHJpbmdcIik7IHJldHVybiBcInN5bWJvbFwiID09IF90eXBlb2YoaSkgPyBpIDogaSArIFwiXCI7IH1cbmZ1bmN0aW9uIF90b1ByaW1pdGl2ZSh0LCByKSB7IGlmIChcIm9iamVjdFwiICE9IF90eXBlb2YodCkgfHwgIXQpIHJldHVybiB0OyB2YXIgZSA9IHRbU3ltYm9sLnRvUHJpbWl0aXZlXTsgaWYgKHZvaWQgMCAhPT0gZSkgeyB2YXIgaSA9IGUuY2FsbCh0LCByIHx8IFwiZGVmYXVsdFwiKTsgaWYgKFwib2JqZWN0XCIgIT0gX3R5cGVvZihpKSkgcmV0dXJuIGk7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJAQHRvUHJpbWl0aXZlIG11c3QgcmV0dXJuIGEgcHJpbWl0aXZlIHZhbHVlLlwiKTsgfSByZXR1cm4gKFwic3RyaW5nXCIgPT09IHIgPyBTdHJpbmcgOiBOdW1iZXIpKHQpOyB9XG5mdW5jdGlvbiBfY2FsbFN1cGVyKHQsIG8sIGUpIHsgcmV0dXJuIG8gPSBfZ2V0UHJvdG90eXBlT2YobyksIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHQsIF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKSA/IFJlZmxlY3QuY29uc3RydWN0KG8sIGUgfHwgW10sIF9nZXRQcm90b3R5cGVPZih0KS5jb25zdHJ1Y3RvcikgOiBvLmFwcGx5KHQsIGUpKTsgfVxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odCwgZSkgeyBpZiAoZSAmJiAoXCJvYmplY3RcIiA9PSBfdHlwZW9mKGUpIHx8IFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgZSkpIHJldHVybiBlOyBpZiAodm9pZCAwICE9PSBlKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiRGVyaXZlZCBjb25zdHJ1Y3RvcnMgbWF5IG9ubHkgcmV0dXJuIG9iamVjdCBvciB1bmRlZmluZWRcIik7IHJldHVybiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHQpOyB9XG5mdW5jdGlvbiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKGUpIHsgaWYgKHZvaWQgMCA9PT0gZSkgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyByZXR1cm4gZTsgfVxuZnVuY3Rpb24gX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpIHsgdHJ5IHsgdmFyIHQgPSAhQm9vbGVhbi5wcm90b3R5cGUudmFsdWVPZi5jYWxsKFJlZmxlY3QuY29uc3RydWN0KEJvb2xlYW4sIFtdLCBmdW5jdGlvbiAoKSB7fSkpOyB9IGNhdGNoICh0KSB7fSByZXR1cm4gKF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QgPSBmdW5jdGlvbiBfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KCkgeyByZXR1cm4gISF0OyB9KSgpOyB9XG5mdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2YodCkgeyByZXR1cm4gX2dldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LmdldFByb3RvdHlwZU9mLmJpbmQoKSA6IGZ1bmN0aW9uICh0KSB7IHJldHVybiB0Ll9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YodCk7IH0sIF9nZXRQcm90b3R5cGVPZih0KTsgfVxuZnVuY3Rpb24gX2luaGVyaXRzKHQsIGUpIHsgaWYgKFwiZnVuY3Rpb25cIiAhPSB0eXBlb2YgZSAmJiBudWxsICE9PSBlKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb25cIik7IHQucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShlICYmIGUucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiB0LCB3cml0YWJsZTogITAsIGNvbmZpZ3VyYWJsZTogITAgfSB9KSwgT2JqZWN0LmRlZmluZVByb3BlcnR5KHQsIFwicHJvdG90eXBlXCIsIHsgd3JpdGFibGU6ICExIH0pLCBlICYmIF9zZXRQcm90b3R5cGVPZih0LCBlKTsgfVxuZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKHQsIGUpIHsgcmV0dXJuIF9zZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZi5iaW5kKCkgOiBmdW5jdGlvbiAodCwgZSkgeyByZXR1cm4gdC5fX3Byb3RvX18gPSBlLCB0OyB9LCBfc2V0UHJvdG90eXBlT2YodCwgZSk7IH1cbnZhciBVaW50MTI4ID0gZXhwb3J0cy5VaW50MTI4ID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfTGFyZ2VJbnQpIHtcbiAgLyoqXG4gICAqIENvbnN0cnVjdCBhbiB1bnNpZ25lZCAxMjgtYml0IGludGVnZXIgdGhhdCBjYW4gYmUgWERSLWVuY29kZWQuXG4gICAqXG4gICAqIEBwYXJhbSAge0FycmF5PG51bWJlcnxiaWdpbnR8c3RyaW5nPn0gIGFyZ3MgLSBvbmUgb3IgbW9yZSBzbGljZXMgdG8gZW5jb2RlXG4gICAqICAgICBpbiBiaWctZW5kaWFuIGZvcm1hdCAoaS5lLiBlYXJsaWVyIGVsZW1lbnRzIGFyZSBoaWdoZXIgYml0cylcbiAgICovXG4gIGZ1bmN0aW9uIFVpbnQxMjgoKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFVpbnQxMjgpO1xuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG4gICAgcmV0dXJuIF9jYWxsU3VwZXIodGhpcywgVWludDEyOCwgW2FyZ3NdKTtcbiAgfVxuICBfaW5oZXJpdHMoVWludDEyOCwgX0xhcmdlSW50KTtcbiAgcmV0dXJuIF9jcmVhdGVDbGFzcyhVaW50MTI4LCBbe1xuICAgIGtleTogXCJ1bnNpZ25lZFwiLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInNpemVcIixcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiAxMjg7XG4gICAgfVxuICB9XSk7XG59KF9qc1hkci5MYXJnZUludCk7XG5VaW50MTI4LmRlZmluZUludEJvdW5kYXJpZXMoKTsiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@stellar/stellar-base/lib/numbers/uint128.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@stellar/stellar-base/lib/numbers/uint256.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@stellar/stellar-base/lib/numbers/uint256.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.Uint256 = void 0;\nvar _jsXdr = __webpack_require__(/*! @stellar/js-xdr */ \"(ssr)/./node_modules/@stellar/js-xdr/src/index.js\");\nfunction _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\nfunction _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }\nfunction _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nfunction _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }\nfunction _possibleConstructorReturn(t, e) { if (e && (\"object\" == _typeof(e) || \"function\" == typeof e)) return e; if (void 0 !== e) throw new TypeError(\"Derived constructors may only return object or undefined\"); return _assertThisInitialized(t); }\nfunction _assertThisInitialized(e) { if (void 0 === e) throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); return e; }\nfunction _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }\nfunction _getPrototypeOf(t) { return _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function (t) { return t.__proto__ || Object.getPrototypeOf(t); }, _getPrototypeOf(t); }\nfunction _inherits(t, e) { if (\"function\" != typeof e && null !== e) throw new TypeError(\"Super expression must either be null or a function\"); t.prototype = Object.create(e && e.prototype, { constructor: { value: t, writable: !0, configurable: !0 } }), Object.defineProperty(t, \"prototype\", { writable: !1 }), e && _setPrototypeOf(t, e); }\nfunction _setPrototypeOf(t, e) { return _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function (t, e) { return t.__proto__ = e, t; }, _setPrototypeOf(t, e); }\nvar Uint256 = exports.Uint256 = /*#__PURE__*/function (_LargeInt) {\n  /**\n   * Construct an unsigned 256-bit integer that can be XDR-encoded.\n   *\n   * @param  {Array<number|bigint|string>}  args - one or more slices to encode\n   *     in big-endian format (i.e. earlier elements are higher bits)\n   */\n  function Uint256() {\n    _classCallCheck(this, Uint256);\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    return _callSuper(this, Uint256, [args]);\n  }\n  _inherits(Uint256, _LargeInt);\n  return _createClass(Uint256, [{\n    key: \"unsigned\",\n    get: function get() {\n      return true;\n    }\n  }, {\n    key: \"size\",\n    get: function get() {\n      return 256;\n    }\n  }]);\n}(_jsXdr.LargeInt);\nUint256.defineIntBoundaries();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHN0ZWxsYXIvc3RlbGxhci1iYXNlL2xpYi9udW1iZXJzL3VpbnQyNTYuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsc0JBQXNCLDJCQUEyQixvR0FBb0csbUJBQW1CLGlCQUFpQixzSEFBc0g7QUFDL1MsOENBQTZDO0FBQzdDO0FBQ0EsQ0FBQyxFQUFDO0FBQ0YsZUFBZTtBQUNmLGFBQWEsbUJBQU8sQ0FBQywwRUFBaUI7QUFDdEMsaUNBQWlDO0FBQ2pDLG1DQUFtQyxnQkFBZ0IsY0FBYyxPQUFPLGNBQWM7QUFDdEYsaUNBQWlDLHFIQUFxSCxjQUFjO0FBQ3BLLDZCQUE2QixtQ0FBbUM7QUFDaEUsOEJBQThCLDRDQUE0QywrQkFBK0Isb0JBQW9CLG1DQUFtQyxzQ0FBc0MsdUVBQXVFO0FBQzdRLCtCQUErQjtBQUMvQiw0Q0FBNEMsdUVBQXVFLG1HQUFtRztBQUN0TixxQ0FBcUMseUdBQXlHO0FBQzlJLHVDQUF1QyxNQUFNLHFGQUFxRixNQUFNLGFBQWEsMkVBQTJFLGFBQWE7QUFDN08sOEJBQThCLCtGQUErRixpREFBaUQ7QUFDOUssMkJBQTJCLHFIQUFxSCxnREFBZ0QsZUFBZSw0Q0FBNEMsMkNBQTJDLGNBQWM7QUFDcFQsaUNBQWlDLGtHQUFrRyw0QkFBNEI7QUFDL0osY0FBYyxlQUFlO0FBQzdCO0FBQ0E7QUFDQTtBQUNBLGNBQWMsOEJBQThCO0FBQzVDO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0VBQXdFLGFBQWE7QUFDckY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0gsQ0FBQztBQUNEIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXFVTVUFSSU9cXERvY3VtZW50c1xcR2l0aHViXFxHYWxheHlLSi13YWxsZXQtLS1IYWNrXFx3ZWJcXG5vZGVfbW9kdWxlc1xcQHN0ZWxsYXJcXHN0ZWxsYXItYmFzZVxcbGliXFxudW1iZXJzXFx1aW50MjU2LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5mdW5jdGlvbiBfdHlwZW9mKG8pIHsgXCJAYmFiZWwvaGVscGVycyAtIHR5cGVvZlwiOyByZXR1cm4gX3R5cGVvZiA9IFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgU3ltYm9sICYmIFwic3ltYm9sXCIgPT0gdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA/IGZ1bmN0aW9uIChvKSB7IHJldHVybiB0eXBlb2YgbzsgfSA6IGZ1bmN0aW9uIChvKSB7IHJldHVybiBvICYmIFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgU3ltYm9sICYmIG8uY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvOyB9LCBfdHlwZW9mKG8pOyB9XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5VaW50MjU2ID0gdm9pZCAwO1xudmFyIF9qc1hkciA9IHJlcXVpcmUoXCJAc3RlbGxhci9qcy14ZHJcIik7XG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soYSwgbikgeyBpZiAoIShhIGluc3RhbmNlb2YgbikpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH1cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKGUsIHIpIHsgZm9yICh2YXIgdCA9IDA7IHQgPCByLmxlbmd0aDsgdCsrKSB7IHZhciBvID0gclt0XTsgby5lbnVtZXJhYmxlID0gby5lbnVtZXJhYmxlIHx8ICExLCBvLmNvbmZpZ3VyYWJsZSA9ICEwLCBcInZhbHVlXCIgaW4gbyAmJiAoby53cml0YWJsZSA9ICEwKSwgT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsIF90b1Byb3BlcnR5S2V5KG8ua2V5KSwgbyk7IH0gfVxuZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKGUsIHIsIHQpIHsgcmV0dXJuIHIgJiYgX2RlZmluZVByb3BlcnRpZXMoZS5wcm90b3R5cGUsIHIpLCB0ICYmIF9kZWZpbmVQcm9wZXJ0aWVzKGUsIHQpLCBPYmplY3QuZGVmaW5lUHJvcGVydHkoZSwgXCJwcm90b3R5cGVcIiwgeyB3cml0YWJsZTogITEgfSksIGU7IH1cbmZ1bmN0aW9uIF90b1Byb3BlcnR5S2V5KHQpIHsgdmFyIGkgPSBfdG9QcmltaXRpdmUodCwgXCJzdHJpbmdcIik7IHJldHVybiBcInN5bWJvbFwiID09IF90eXBlb2YoaSkgPyBpIDogaSArIFwiXCI7IH1cbmZ1bmN0aW9uIF90b1ByaW1pdGl2ZSh0LCByKSB7IGlmIChcIm9iamVjdFwiICE9IF90eXBlb2YodCkgfHwgIXQpIHJldHVybiB0OyB2YXIgZSA9IHRbU3ltYm9sLnRvUHJpbWl0aXZlXTsgaWYgKHZvaWQgMCAhPT0gZSkgeyB2YXIgaSA9IGUuY2FsbCh0LCByIHx8IFwiZGVmYXVsdFwiKTsgaWYgKFwib2JqZWN0XCIgIT0gX3R5cGVvZihpKSkgcmV0dXJuIGk7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJAQHRvUHJpbWl0aXZlIG11c3QgcmV0dXJuIGEgcHJpbWl0aXZlIHZhbHVlLlwiKTsgfSByZXR1cm4gKFwic3RyaW5nXCIgPT09IHIgPyBTdHJpbmcgOiBOdW1iZXIpKHQpOyB9XG5mdW5jdGlvbiBfY2FsbFN1cGVyKHQsIG8sIGUpIHsgcmV0dXJuIG8gPSBfZ2V0UHJvdG90eXBlT2YobyksIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHQsIF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKSA/IFJlZmxlY3QuY29uc3RydWN0KG8sIGUgfHwgW10sIF9nZXRQcm90b3R5cGVPZih0KS5jb25zdHJ1Y3RvcikgOiBvLmFwcGx5KHQsIGUpKTsgfVxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odCwgZSkgeyBpZiAoZSAmJiAoXCJvYmplY3RcIiA9PSBfdHlwZW9mKGUpIHx8IFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgZSkpIHJldHVybiBlOyBpZiAodm9pZCAwICE9PSBlKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiRGVyaXZlZCBjb25zdHJ1Y3RvcnMgbWF5IG9ubHkgcmV0dXJuIG9iamVjdCBvciB1bmRlZmluZWRcIik7IHJldHVybiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHQpOyB9XG5mdW5jdGlvbiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKGUpIHsgaWYgKHZvaWQgMCA9PT0gZSkgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyByZXR1cm4gZTsgfVxuZnVuY3Rpb24gX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpIHsgdHJ5IHsgdmFyIHQgPSAhQm9vbGVhbi5wcm90b3R5cGUudmFsdWVPZi5jYWxsKFJlZmxlY3QuY29uc3RydWN0KEJvb2xlYW4sIFtdLCBmdW5jdGlvbiAoKSB7fSkpOyB9IGNhdGNoICh0KSB7fSByZXR1cm4gKF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QgPSBmdW5jdGlvbiBfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KCkgeyByZXR1cm4gISF0OyB9KSgpOyB9XG5mdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2YodCkgeyByZXR1cm4gX2dldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LmdldFByb3RvdHlwZU9mLmJpbmQoKSA6IGZ1bmN0aW9uICh0KSB7IHJldHVybiB0Ll9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YodCk7IH0sIF9nZXRQcm90b3R5cGVPZih0KTsgfVxuZnVuY3Rpb24gX2luaGVyaXRzKHQsIGUpIHsgaWYgKFwiZnVuY3Rpb25cIiAhPSB0eXBlb2YgZSAmJiBudWxsICE9PSBlKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb25cIik7IHQucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShlICYmIGUucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiB0LCB3cml0YWJsZTogITAsIGNvbmZpZ3VyYWJsZTogITAgfSB9KSwgT2JqZWN0LmRlZmluZVByb3BlcnR5KHQsIFwicHJvdG90eXBlXCIsIHsgd3JpdGFibGU6ICExIH0pLCBlICYmIF9zZXRQcm90b3R5cGVPZih0LCBlKTsgfVxuZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKHQsIGUpIHsgcmV0dXJuIF9zZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZi5iaW5kKCkgOiBmdW5jdGlvbiAodCwgZSkgeyByZXR1cm4gdC5fX3Byb3RvX18gPSBlLCB0OyB9LCBfc2V0UHJvdG90eXBlT2YodCwgZSk7IH1cbnZhciBVaW50MjU2ID0gZXhwb3J0cy5VaW50MjU2ID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfTGFyZ2VJbnQpIHtcbiAgLyoqXG4gICAqIENvbnN0cnVjdCBhbiB1bnNpZ25lZCAyNTYtYml0IGludGVnZXIgdGhhdCBjYW4gYmUgWERSLWVuY29kZWQuXG4gICAqXG4gICAqIEBwYXJhbSAge0FycmF5PG51bWJlcnxiaWdpbnR8c3RyaW5nPn0gIGFyZ3MgLSBvbmUgb3IgbW9yZSBzbGljZXMgdG8gZW5jb2RlXG4gICAqICAgICBpbiBiaWctZW5kaWFuIGZvcm1hdCAoaS5lLiBlYXJsaWVyIGVsZW1lbnRzIGFyZSBoaWdoZXIgYml0cylcbiAgICovXG4gIGZ1bmN0aW9uIFVpbnQyNTYoKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFVpbnQyNTYpO1xuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG4gICAgcmV0dXJuIF9jYWxsU3VwZXIodGhpcywgVWludDI1NiwgW2FyZ3NdKTtcbiAgfVxuICBfaW5oZXJpdHMoVWludDI1NiwgX0xhcmdlSW50KTtcbiAgcmV0dXJuIF9jcmVhdGVDbGFzcyhVaW50MjU2LCBbe1xuICAgIGtleTogXCJ1bnNpZ25lZFwiLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInNpemVcIixcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiAyNTY7XG4gICAgfVxuICB9XSk7XG59KF9qc1hkci5MYXJnZUludCk7XG5VaW50MjU2LmRlZmluZUludEJvdW5kYXJpZXMoKTsiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@stellar/stellar-base/lib/numbers/uint256.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@stellar/stellar-base/lib/numbers/xdr_large_int.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@stellar/stellar-base/lib/numbers/xdr_large_int.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.XdrLargeInt = void 0;\nvar _jsXdr = __webpack_require__(/*! @stellar/js-xdr */ \"(ssr)/./node_modules/@stellar/js-xdr/src/index.js\");\nvar _uint = __webpack_require__(/*! ./uint128 */ \"(ssr)/./node_modules/@stellar/stellar-base/lib/numbers/uint128.js\");\nvar _uint2 = __webpack_require__(/*! ./uint256 */ \"(ssr)/./node_modules/@stellar/stellar-base/lib/numbers/uint256.js\");\nvar _int = __webpack_require__(/*! ./int128 */ \"(ssr)/./node_modules/@stellar/stellar-base/lib/numbers/int128.js\");\nvar _int2 = __webpack_require__(/*! ./int256 */ \"(ssr)/./node_modules/@stellar/stellar-base/lib/numbers/int256.js\");\nvar _xdr = _interopRequireDefault(__webpack_require__(/*! ../xdr */ \"(ssr)/./node_modules/@stellar/stellar-base/lib/xdr.js\"));\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { \"default\": e }; }\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\nfunction _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }\nfunction _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\nfunction _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); } /* eslint no-bitwise: [\"error\", {\"allow\": [\">>\"]}] */\n/**\n * A wrapper class to represent large XDR-encodable integers.\n *\n * This operates at a lower level than {@link ScInt} by forcing you to specify\n * the type / width / size in bits of the integer you're targeting, regardless\n * of the input value(s) you provide.\n *\n * @param {string}  type - force a specific data type. the type choices are:\n *    'i64', 'u64', 'i128', 'u128', 'i256', and 'u256' (default: the smallest\n *    one that fits the `value`) (see {@link XdrLargeInt.isType})\n * @param {number|bigint|string|Array<number|bigint|string>} values   a list of\n *    integer-like values interpreted in big-endian order\n */\nvar XdrLargeInt = exports.XdrLargeInt = /*#__PURE__*/function () {\n  function XdrLargeInt(type, values) {\n    _classCallCheck(this, XdrLargeInt);\n    /** @type {xdr.LargeInt} */\n    _defineProperty(this, \"int\", void 0);\n    // child class of a jsXdr.LargeInt\n    /** @type {string} */\n    _defineProperty(this, \"type\", void 0);\n    if (!(values instanceof Array)) {\n      values = [values];\n    }\n\n    // normalize values to one type\n    values = values.map(function (i) {\n      // micro-optimization to no-op on the likeliest input value:\n      if (typeof i === 'bigint') {\n        return i;\n      }\n      if (i instanceof XdrLargeInt) {\n        return i.toBigInt();\n      }\n      return BigInt(i);\n    });\n    switch (type) {\n      case 'i64':\n        this[\"int\"] = new _jsXdr.Hyper(values);\n        break;\n      case 'i128':\n        this[\"int\"] = new _int.Int128(values);\n        break;\n      case 'i256':\n        this[\"int\"] = new _int2.Int256(values);\n        break;\n      case 'u64':\n        this[\"int\"] = new _jsXdr.UnsignedHyper(values);\n        break;\n      case 'u128':\n        this[\"int\"] = new _uint.Uint128(values);\n        break;\n      case 'u256':\n        this[\"int\"] = new _uint2.Uint256(values);\n        break;\n      default:\n        throw TypeError(\"invalid type: \".concat(type));\n    }\n    this.type = type;\n  }\n\n  /**\n   * @returns {number}\n   * @throws {RangeError} if the value can't fit into a Number\n   */\n  return _createClass(XdrLargeInt, [{\n    key: \"toNumber\",\n    value: function toNumber() {\n      var bi = this[\"int\"].toBigInt();\n      if (bi > Number.MAX_SAFE_INTEGER || bi < Number.MIN_SAFE_INTEGER) {\n        throw RangeError(\"value \".concat(bi, \" not in range for Number \") + \"[\".concat(Number.MAX_SAFE_INTEGER, \", \").concat(Number.MIN_SAFE_INTEGER, \"]\"));\n      }\n      return Number(bi);\n    }\n\n    /** @returns {bigint} */\n  }, {\n    key: \"toBigInt\",\n    value: function toBigInt() {\n      return this[\"int\"].toBigInt();\n    }\n\n    /** @returns {xdr.ScVal} the integer encoded with `ScValType = I64` */\n  }, {\n    key: \"toI64\",\n    value: function toI64() {\n      this._sizeCheck(64);\n      var v = this.toBigInt();\n      if (BigInt.asIntN(64, v) !== v) {\n        throw RangeError(\"value too large for i64: \".concat(v));\n      }\n      return _xdr[\"default\"].ScVal.scvI64(new _xdr[\"default\"].Int64(v));\n    }\n\n    /** @returns {xdr.ScVal} the integer encoded with `ScValType = U64` */\n  }, {\n    key: \"toU64\",\n    value: function toU64() {\n      this._sizeCheck(64);\n      return _xdr[\"default\"].ScVal.scvU64(new _xdr[\"default\"].Uint64(BigInt.asUintN(64, this.toBigInt())) // reiterpret as unsigned\n      );\n    }\n\n    /**\n     * @returns {xdr.ScVal} the integer encoded with `ScValType = I128`\n     * @throws {RangeError} if the value cannot fit in 128 bits\n     */\n  }, {\n    key: \"toI128\",\n    value: function toI128() {\n      this._sizeCheck(128);\n      var v = this[\"int\"].toBigInt();\n      var hi64 = BigInt.asIntN(64, v >> 64n); // encode top 64 w/ sign bit\n      var lo64 = BigInt.asUintN(64, v); // grab btm 64, encode sign\n\n      return _xdr[\"default\"].ScVal.scvI128(new _xdr[\"default\"].Int128Parts({\n        hi: new _xdr[\"default\"].Int64(hi64),\n        lo: new _xdr[\"default\"].Uint64(lo64)\n      }));\n    }\n\n    /**\n     * @returns {xdr.ScVal} the integer encoded with `ScValType = U128`\n     * @throws {RangeError} if the value cannot fit in 128 bits\n     */\n  }, {\n    key: \"toU128\",\n    value: function toU128() {\n      this._sizeCheck(128);\n      var v = this[\"int\"].toBigInt();\n      return _xdr[\"default\"].ScVal.scvU128(new _xdr[\"default\"].UInt128Parts({\n        hi: new _xdr[\"default\"].Uint64(BigInt.asUintN(64, v >> 64n)),\n        lo: new _xdr[\"default\"].Uint64(BigInt.asUintN(64, v))\n      }));\n    }\n\n    /** @returns {xdr.ScVal} the integer encoded with `ScValType = I256` */\n  }, {\n    key: \"toI256\",\n    value: function toI256() {\n      var v = this[\"int\"].toBigInt();\n      var hiHi64 = BigInt.asIntN(64, v >> 192n); // keep sign bit\n      var hiLo64 = BigInt.asUintN(64, v >> 128n);\n      var loHi64 = BigInt.asUintN(64, v >> 64n);\n      var loLo64 = BigInt.asUintN(64, v);\n      return _xdr[\"default\"].ScVal.scvI256(new _xdr[\"default\"].Int256Parts({\n        hiHi: new _xdr[\"default\"].Int64(hiHi64),\n        hiLo: new _xdr[\"default\"].Uint64(hiLo64),\n        loHi: new _xdr[\"default\"].Uint64(loHi64),\n        loLo: new _xdr[\"default\"].Uint64(loLo64)\n      }));\n    }\n\n    /** @returns {xdr.ScVal} the integer encoded with `ScValType = U256` */\n  }, {\n    key: \"toU256\",\n    value: function toU256() {\n      var v = this[\"int\"].toBigInt();\n      var hiHi64 = BigInt.asUintN(64, v >> 192n); // encode sign bit\n      var hiLo64 = BigInt.asUintN(64, v >> 128n);\n      var loHi64 = BigInt.asUintN(64, v >> 64n);\n      var loLo64 = BigInt.asUintN(64, v);\n      return _xdr[\"default\"].ScVal.scvU256(new _xdr[\"default\"].UInt256Parts({\n        hiHi: new _xdr[\"default\"].Uint64(hiHi64),\n        hiLo: new _xdr[\"default\"].Uint64(hiLo64),\n        loHi: new _xdr[\"default\"].Uint64(loHi64),\n        loLo: new _xdr[\"default\"].Uint64(loLo64)\n      }));\n    }\n\n    /** @returns {xdr.ScVal} the smallest interpretation of the stored value */\n  }, {\n    key: \"toScVal\",\n    value: function toScVal() {\n      switch (this.type) {\n        case 'i64':\n          return this.toI64();\n        case 'i128':\n          return this.toI128();\n        case 'i256':\n          return this.toI256();\n        case 'u64':\n          return this.toU64();\n        case 'u128':\n          return this.toU128();\n        case 'u256':\n          return this.toU256();\n        default:\n          throw TypeError(\"invalid type: \".concat(this.type));\n      }\n    }\n  }, {\n    key: \"valueOf\",\n    value: function valueOf() {\n      return this[\"int\"].valueOf();\n    }\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return this[\"int\"].toString();\n    }\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      return {\n        value: this.toBigInt().toString(),\n        type: this.type\n      };\n    }\n  }, {\n    key: \"_sizeCheck\",\n    value: function _sizeCheck(bits) {\n      if (this[\"int\"].size > bits) {\n        throw RangeError(\"value too large for \".concat(bits, \" bits (\").concat(this.type, \")\"));\n      }\n    }\n  }], [{\n    key: \"isType\",\n    value: function isType(type) {\n      switch (type) {\n        case 'i64':\n        case 'i128':\n        case 'i256':\n        case 'u64':\n        case 'u128':\n        case 'u256':\n          return true;\n        default:\n          return false;\n      }\n    }\n\n    /**\n     * Convert the raw `ScValType` string (e.g. 'scvI128', generated by the XDR)\n     * to a type description for {@link XdrLargeInt} construction (e.g. 'i128')\n     *\n     * @param {string} scvType  the `xdr.ScValType` as a string\n     * @returns {string} a suitable equivalent type to construct this object\n     */\n  }, {\n    key: \"getType\",\n    value: function getType(scvType) {\n      return scvType.slice(3).toLowerCase();\n    }\n  }]);\n}();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@stellar/stellar-base/lib/numbers/xdr_large_int.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@stellar/stellar-base/lib/operation.js":
/*!*************************************************************!*\
  !*** ./node_modules/@stellar/stellar-base/lib/operation.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.Operation = exports.AuthRevocableFlag = exports.AuthRequiredFlag = exports.AuthImmutableFlag = exports.AuthClawbackEnabledFlag = void 0;\nvar _jsXdr = __webpack_require__(/*! @stellar/js-xdr */ \"(ssr)/./node_modules/@stellar/js-xdr/src/index.js\");\nvar _bignumber = _interopRequireDefault(__webpack_require__(/*! ./util/bignumber */ \"(ssr)/./node_modules/@stellar/stellar-base/lib/util/bignumber.js\"));\nvar _util = __webpack_require__(/*! ./util/util */ \"(ssr)/./node_modules/@stellar/stellar-base/lib/util/util.js\");\nvar _continued_fraction = __webpack_require__(/*! ./util/continued_fraction */ \"(ssr)/./node_modules/@stellar/stellar-base/lib/util/continued_fraction.js\");\nvar _asset = __webpack_require__(/*! ./asset */ \"(ssr)/./node_modules/@stellar/stellar-base/lib/asset.js\");\nvar _liquidity_pool_asset = __webpack_require__(/*! ./liquidity_pool_asset */ \"(ssr)/./node_modules/@stellar/stellar-base/lib/liquidity_pool_asset.js\");\nvar _claimant = __webpack_require__(/*! ./claimant */ \"(ssr)/./node_modules/@stellar/stellar-base/lib/claimant.js\");\nvar _strkey = __webpack_require__(/*! ./strkey */ \"(ssr)/./node_modules/@stellar/stellar-base/lib/strkey.js\");\nvar _liquidity_pool_id = __webpack_require__(/*! ./liquidity_pool_id */ \"(ssr)/./node_modules/@stellar/stellar-base/lib/liquidity_pool_id.js\");\nvar _xdr = _interopRequireDefault(__webpack_require__(/*! ./xdr */ \"(ssr)/./node_modules/@stellar/stellar-base/lib/xdr.js\"));\nvar ops = _interopRequireWildcard(__webpack_require__(/*! ./operations */ \"(ssr)/./node_modules/@stellar/stellar-base/lib/operations/index.js\"));\nvar _decode_encode_muxed_account = __webpack_require__(/*! ./util/decode_encode_muxed_account */ \"(ssr)/./node_modules/@stellar/stellar-base/lib/util/decode_encode_muxed_account.js\");\nfunction _getRequireWildcardCache(e) { if (\"function\" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }\nfunction _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || \"object\" != _typeof(e) && \"function\" != typeof e) return { \"default\": e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if (\"default\" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n[\"default\"] = e, t && t.set(e, n), n; }\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { \"default\": e }; }\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\nfunction _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }\nfunction _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); } /* eslint-disable no-bitwise */\nvar ONE = 10000000;\nvar MAX_INT64 = '9223372036854775807';\n\n/**\n * When set using `{@link Operation.setOptions}` option, requires the issuing\n * account to give other accounts permission before they can hold the issuing\n * account’s credit.\n *\n * @constant\n * @see [Account flags](https://developers.stellar.org/docs/glossary/accounts/#flags)\n */\nvar AuthRequiredFlag = exports.AuthRequiredFlag = 1 << 0;\n/**\n * When set using `{@link Operation.setOptions}` option, allows the issuing\n * account to revoke its credit held by other accounts.\n *\n * @constant\n * @see [Account flags](https://developers.stellar.org/docs/glossary/accounts/#flags)\n */\nvar AuthRevocableFlag = exports.AuthRevocableFlag = 1 << 1;\n/**\n * When set using `{@link Operation.setOptions}` option, then none of the\n * authorization flags can be set and the account can never be deleted.\n *\n * @constant\n * @see [Account flags](https://developers.stellar.org/docs/glossary/accounts/#flags)\n */\nvar AuthImmutableFlag = exports.AuthImmutableFlag = 1 << 2;\n\n/**\n * When set using `{@link Operation.setOptions}` option, then any trustlines\n * created by this account can have a ClawbackOp operation submitted for the\n * corresponding asset.\n *\n * @constant\n * @see [Account flags](https://developers.stellar.org/docs/glossary/accounts/#flags)\n */\nvar AuthClawbackEnabledFlag = exports.AuthClawbackEnabledFlag = 1 << 3;\n\n/**\n * `Operation` class represents\n * [operations](https://developers.stellar.org/docs/glossary/operations/) in\n * Stellar network.\n *\n * Use one of static methods to create operations:\n * * `{@link Operation.createAccount}`\n * * `{@link Operation.payment}`\n * * `{@link Operation.pathPaymentStrictReceive}`\n * * `{@link Operation.pathPaymentStrictSend}`\n * * `{@link Operation.manageSellOffer}`\n * * `{@link Operation.manageBuyOffer}`\n * * `{@link Operation.createPassiveSellOffer}`\n * * `{@link Operation.setOptions}`\n * * `{@link Operation.changeTrust}`\n * * `{@link Operation.allowTrust}`\n * * `{@link Operation.accountMerge}`\n * * `{@link Operation.inflation}`\n * * `{@link Operation.manageData}`\n * * `{@link Operation.bumpSequence}`\n * * `{@link Operation.createClaimableBalance}`\n * * `{@link Operation.claimClaimableBalance}`\n * * `{@link Operation.beginSponsoringFutureReserves}`\n * * `{@link Operation.endSponsoringFutureReserves}`\n * * `{@link Operation.revokeAccountSponsorship}`\n * * `{@link Operation.revokeTrustlineSponsorship}`\n * * `{@link Operation.revokeOfferSponsorship}`\n * * `{@link Operation.revokeDataSponsorship}`\n * * `{@link Operation.revokeClaimableBalanceSponsorship}`\n * * `{@link Operation.revokeLiquidityPoolSponsorship}`\n * * `{@link Operation.revokeSignerSponsorship}`\n * * `{@link Operation.clawback}`\n * * `{@link Operation.clawbackClaimableBalance}`\n * * `{@link Operation.setTrustLineFlags}`\n * * `{@link Operation.liquidityPoolDeposit}`\n * * `{@link Operation.liquidityPoolWithdraw}`\n * * `{@link Operation.invokeHostFunction}`, which has the following additional\n *   \"pseudo-operations\" that make building host functions easier:\n *   - `{@link Operation.createStellarAssetContract}`\n *   - `{@link Operation.invokeContractFunction}`\n *   - `{@link Operation.createCustomContract}`\n *   - `{@link Operation.uploadContractWasm}`\n * * `{@link Operation.extendFootprintTtlOp}`\n * * `{@link Operation.restoreFootprint}`\n *\n * @class Operation\n */\nvar Operation = exports.Operation = /*#__PURE__*/function () {\n  function Operation() {\n    _classCallCheck(this, Operation);\n  }\n  return _createClass(Operation, null, [{\n    key: \"setSourceAccount\",\n    value: function setSourceAccount(opAttributes, opts) {\n      if (opts.source) {\n        try {\n          opAttributes.sourceAccount = (0, _decode_encode_muxed_account.decodeAddressToMuxedAccount)(opts.source);\n        } catch (e) {\n          throw new Error('Source address is invalid');\n        }\n      }\n    }\n\n    /**\n     * Deconstructs the raw XDR operation object into the structured object that\n     * was used to create the operation (i.e. the `opts` parameter to most ops).\n     *\n     * @param {xdr.Operation}   operation - An XDR Operation.\n     * @return {Operation}\n     */\n  }, {\n    key: \"fromXDRObject\",\n    value: function fromXDRObject(operation) {\n      var result = {};\n      if (operation.sourceAccount()) {\n        result.source = (0, _decode_encode_muxed_account.encodeMuxedAccountToAddress)(operation.sourceAccount());\n      }\n      var attrs = operation.body().value();\n      var operationName = operation.body()[\"switch\"]().name;\n      switch (operationName) {\n        case 'createAccount':\n          {\n            result.type = 'createAccount';\n            result.destination = accountIdtoAddress(attrs.destination());\n            result.startingBalance = this._fromXDRAmount(attrs.startingBalance());\n            break;\n          }\n        case 'payment':\n          {\n            result.type = 'payment';\n            result.destination = (0, _decode_encode_muxed_account.encodeMuxedAccountToAddress)(attrs.destination());\n            result.asset = _asset.Asset.fromOperation(attrs.asset());\n            result.amount = this._fromXDRAmount(attrs.amount());\n            break;\n          }\n        case 'pathPaymentStrictReceive':\n          {\n            result.type = 'pathPaymentStrictReceive';\n            result.sendAsset = _asset.Asset.fromOperation(attrs.sendAsset());\n            result.sendMax = this._fromXDRAmount(attrs.sendMax());\n            result.destination = (0, _decode_encode_muxed_account.encodeMuxedAccountToAddress)(attrs.destination());\n            result.destAsset = _asset.Asset.fromOperation(attrs.destAsset());\n            result.destAmount = this._fromXDRAmount(attrs.destAmount());\n            result.path = [];\n            var path = attrs.path();\n\n            // note that Object.values isn't supported by node 6!\n            Object.keys(path).forEach(function (pathKey) {\n              result.path.push(_asset.Asset.fromOperation(path[pathKey]));\n            });\n            break;\n          }\n        case 'pathPaymentStrictSend':\n          {\n            result.type = 'pathPaymentStrictSend';\n            result.sendAsset = _asset.Asset.fromOperation(attrs.sendAsset());\n            result.sendAmount = this._fromXDRAmount(attrs.sendAmount());\n            result.destination = (0, _decode_encode_muxed_account.encodeMuxedAccountToAddress)(attrs.destination());\n            result.destAsset = _asset.Asset.fromOperation(attrs.destAsset());\n            result.destMin = this._fromXDRAmount(attrs.destMin());\n            result.path = [];\n            var _path = attrs.path();\n\n            // note that Object.values isn't supported by node 6!\n            Object.keys(_path).forEach(function (pathKey) {\n              result.path.push(_asset.Asset.fromOperation(_path[pathKey]));\n            });\n            break;\n          }\n        case 'changeTrust':\n          {\n            result.type = 'changeTrust';\n            switch (attrs.line()[\"switch\"]()) {\n              case _xdr[\"default\"].AssetType.assetTypePoolShare():\n                result.line = _liquidity_pool_asset.LiquidityPoolAsset.fromOperation(attrs.line());\n                break;\n              default:\n                result.line = _asset.Asset.fromOperation(attrs.line());\n                break;\n            }\n            result.limit = this._fromXDRAmount(attrs.limit());\n            break;\n          }\n        case 'allowTrust':\n          {\n            result.type = 'allowTrust';\n            result.trustor = accountIdtoAddress(attrs.trustor());\n            result.assetCode = attrs.asset().value().toString();\n            result.assetCode = (0, _util.trimEnd)(result.assetCode, '\\0');\n            result.authorize = attrs.authorize();\n            break;\n          }\n        case 'setOptions':\n          {\n            result.type = 'setOptions';\n            if (attrs.inflationDest()) {\n              result.inflationDest = accountIdtoAddress(attrs.inflationDest());\n            }\n            result.clearFlags = attrs.clearFlags();\n            result.setFlags = attrs.setFlags();\n            result.masterWeight = attrs.masterWeight();\n            result.lowThreshold = attrs.lowThreshold();\n            result.medThreshold = attrs.medThreshold();\n            result.highThreshold = attrs.highThreshold();\n            // home_domain is checked by iscntrl in stellar-core\n            result.homeDomain = attrs.homeDomain() !== undefined ? attrs.homeDomain().toString('ascii') : undefined;\n            if (attrs.signer()) {\n              var signer = {};\n              var arm = attrs.signer().key().arm();\n              if (arm === 'ed25519') {\n                signer.ed25519PublicKey = accountIdtoAddress(attrs.signer().key());\n              } else if (arm === 'preAuthTx') {\n                signer.preAuthTx = attrs.signer().key().preAuthTx();\n              } else if (arm === 'hashX') {\n                signer.sha256Hash = attrs.signer().key().hashX();\n              } else if (arm === 'ed25519SignedPayload') {\n                var signedPayload = attrs.signer().key().ed25519SignedPayload();\n                signer.ed25519SignedPayload = _strkey.StrKey.encodeSignedPayload(signedPayload.toXDR());\n              }\n              signer.weight = attrs.signer().weight();\n              result.signer = signer;\n            }\n            break;\n          }\n        // the next case intentionally falls through!\n        case 'manageOffer':\n        case 'manageSellOffer':\n          {\n            result.type = 'manageSellOffer';\n            result.selling = _asset.Asset.fromOperation(attrs.selling());\n            result.buying = _asset.Asset.fromOperation(attrs.buying());\n            result.amount = this._fromXDRAmount(attrs.amount());\n            result.price = this._fromXDRPrice(attrs.price());\n            result.offerId = attrs.offerId().toString();\n            break;\n          }\n        case 'manageBuyOffer':\n          {\n            result.type = 'manageBuyOffer';\n            result.selling = _asset.Asset.fromOperation(attrs.selling());\n            result.buying = _asset.Asset.fromOperation(attrs.buying());\n            result.buyAmount = this._fromXDRAmount(attrs.buyAmount());\n            result.price = this._fromXDRPrice(attrs.price());\n            result.offerId = attrs.offerId().toString();\n            break;\n          }\n        // the next case intentionally falls through!\n        case 'createPassiveOffer':\n        case 'createPassiveSellOffer':\n          {\n            result.type = 'createPassiveSellOffer';\n            result.selling = _asset.Asset.fromOperation(attrs.selling());\n            result.buying = _asset.Asset.fromOperation(attrs.buying());\n            result.amount = this._fromXDRAmount(attrs.amount());\n            result.price = this._fromXDRPrice(attrs.price());\n            break;\n          }\n        case 'accountMerge':\n          {\n            result.type = 'accountMerge';\n            result.destination = (0, _decode_encode_muxed_account.encodeMuxedAccountToAddress)(attrs);\n            break;\n          }\n        case 'manageData':\n          {\n            result.type = 'manageData';\n            // manage_data.name is checked by iscntrl in stellar-core\n            result.name = attrs.dataName().toString('ascii');\n            result.value = attrs.dataValue();\n            break;\n          }\n        case 'inflation':\n          {\n            result.type = 'inflation';\n            break;\n          }\n        case 'bumpSequence':\n          {\n            result.type = 'bumpSequence';\n            result.bumpTo = attrs.bumpTo().toString();\n            break;\n          }\n        case 'createClaimableBalance':\n          {\n            result.type = 'createClaimableBalance';\n            result.asset = _asset.Asset.fromOperation(attrs.asset());\n            result.amount = this._fromXDRAmount(attrs.amount());\n            result.claimants = [];\n            attrs.claimants().forEach(function (claimant) {\n              result.claimants.push(_claimant.Claimant.fromXDR(claimant));\n            });\n            break;\n          }\n        case 'claimClaimableBalance':\n          {\n            result.type = 'claimClaimableBalance';\n            result.balanceId = attrs.toXDR('hex');\n            break;\n          }\n        case 'beginSponsoringFutureReserves':\n          {\n            result.type = 'beginSponsoringFutureReserves';\n            result.sponsoredId = accountIdtoAddress(attrs.sponsoredId());\n            break;\n          }\n        case 'endSponsoringFutureReserves':\n          {\n            result.type = 'endSponsoringFutureReserves';\n            break;\n          }\n        case 'revokeSponsorship':\n          {\n            extractRevokeSponshipDetails(attrs, result);\n            break;\n          }\n        case 'clawback':\n          {\n            result.type = 'clawback';\n            result.amount = this._fromXDRAmount(attrs.amount());\n            result.from = (0, _decode_encode_muxed_account.encodeMuxedAccountToAddress)(attrs.from());\n            result.asset = _asset.Asset.fromOperation(attrs.asset());\n            break;\n          }\n        case 'clawbackClaimableBalance':\n          {\n            result.type = 'clawbackClaimableBalance';\n            result.balanceId = attrs.toXDR('hex');\n            break;\n          }\n        case 'setTrustLineFlags':\n          {\n            result.type = 'setTrustLineFlags';\n            result.asset = _asset.Asset.fromOperation(attrs.asset());\n            result.trustor = accountIdtoAddress(attrs.trustor());\n\n            // Convert from the integer-bitwised flag into a sensible object that\n            // indicates true/false for each flag that's on/off.\n            var clears = attrs.clearFlags();\n            var sets = attrs.setFlags();\n            var mapping = {\n              authorized: _xdr[\"default\"].TrustLineFlags.authorizedFlag(),\n              authorizedToMaintainLiabilities: _xdr[\"default\"].TrustLineFlags.authorizedToMaintainLiabilitiesFlag(),\n              clawbackEnabled: _xdr[\"default\"].TrustLineFlags.trustlineClawbackEnabledFlag()\n            };\n            var getFlagValue = function getFlagValue(key) {\n              var bit = mapping[key].value;\n              if (sets & bit) {\n                return true;\n              }\n              if (clears & bit) {\n                return false;\n              }\n              return undefined;\n            };\n            result.flags = {};\n            Object.keys(mapping).forEach(function (flagName) {\n              result.flags[flagName] = getFlagValue(flagName);\n            });\n            break;\n          }\n        case 'liquidityPoolDeposit':\n          {\n            result.type = 'liquidityPoolDeposit';\n            result.liquidityPoolId = attrs.liquidityPoolId().toString('hex');\n            result.maxAmountA = this._fromXDRAmount(attrs.maxAmountA());\n            result.maxAmountB = this._fromXDRAmount(attrs.maxAmountB());\n            result.minPrice = this._fromXDRPrice(attrs.minPrice());\n            result.maxPrice = this._fromXDRPrice(attrs.maxPrice());\n            break;\n          }\n        case 'liquidityPoolWithdraw':\n          {\n            result.type = 'liquidityPoolWithdraw';\n            result.liquidityPoolId = attrs.liquidityPoolId().toString('hex');\n            result.amount = this._fromXDRAmount(attrs.amount());\n            result.minAmountA = this._fromXDRAmount(attrs.minAmountA());\n            result.minAmountB = this._fromXDRAmount(attrs.minAmountB());\n            break;\n          }\n        case 'invokeHostFunction':\n          {\n            var _attrs$auth;\n            result.type = 'invokeHostFunction';\n            result.func = attrs.hostFunction();\n            result.auth = (_attrs$auth = attrs.auth()) !== null && _attrs$auth !== void 0 ? _attrs$auth : [];\n            break;\n          }\n        case 'extendFootprintTtl':\n          {\n            result.type = 'extendFootprintTtl';\n            result.extendTo = attrs.extendTo();\n            break;\n          }\n        case 'restoreFootprint':\n          {\n            result.type = 'restoreFootprint';\n            break;\n          }\n        default:\n          {\n            throw new Error(\"Unknown operation: \".concat(operationName));\n          }\n      }\n      return result;\n    }\n\n    /**\n     * Validates that a given amount is possible for a Stellar asset.\n     *\n     * Specifically, this means that the amount is well, a valid number, but also\n     * that it is within the int64 range and has no more than 7 decimal levels of\n     * precision.\n     *\n     * Note that while smart contracts allow larger amounts, this is oriented\n     * towards validating the standard Stellar operations.\n     *\n     * @param {string}  value       the amount to validate\n     * @param {boolean} allowZero   optionally, whether or not zero is valid (default: no)\n     *\n     * @returns {boolean}\n     */\n  }, {\n    key: \"isValidAmount\",\n    value: function isValidAmount(value) {\n      var allowZero = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      if (typeof value !== 'string') {\n        return false;\n      }\n      var amount;\n      try {\n        amount = new _bignumber[\"default\"](value);\n      } catch (e) {\n        return false;\n      }\n      if (\n      // == 0\n      !allowZero && amount.isZero() ||\n      // < 0\n      amount.isNegative() ||\n      // > Max value\n      amount.times(ONE).gt(new _bignumber[\"default\"](MAX_INT64).toString()) ||\n      // Decimal places (max 7)\n      amount.decimalPlaces() > 7 ||\n      // NaN or Infinity\n      amount.isNaN() || !amount.isFinite()) {\n        return false;\n      }\n      return true;\n    }\n  }, {\n    key: \"constructAmountRequirementsError\",\n    value: function constructAmountRequirementsError(arg) {\n      return \"\".concat(arg, \" argument must be of type String, represent a positive number and have at most 7 digits after the decimal\");\n    }\n\n    /**\n     * Returns value converted to uint32 value or undefined.\n     * If `value` is not `Number`, `String` or `Undefined` then throws an error.\n     * Used in {@link Operation.setOptions}.\n     * @private\n     * @param {string} name Name of the property (used in error message only)\n     * @param {*} value Value to check\n     * @param {function(value, name)} isValidFunction Function to check other constraints (the argument will be a `Number`)\n     * @returns {undefined|Number}\n     */\n  }, {\n    key: \"_checkUnsignedIntValue\",\n    value: function _checkUnsignedIntValue(name, value) {\n      var isValidFunction = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n      if (typeof value === 'undefined') {\n        return undefined;\n      }\n      if (typeof value === 'string') {\n        value = parseFloat(value);\n      }\n      switch (true) {\n        case typeof value !== 'number' || !Number.isFinite(value) || value % 1 !== 0:\n          throw new Error(\"\".concat(name, \" value is invalid\"));\n        case value < 0:\n          throw new Error(\"\".concat(name, \" value must be unsigned\"));\n        case !isValidFunction || isValidFunction && isValidFunction(value, name):\n          return value;\n        default:\n          throw new Error(\"\".concat(name, \" value is invalid\"));\n      }\n    }\n    /**\n     * @private\n     * @param {string|BigNumber} value Value\n     * @returns {Hyper} XDR amount\n     */\n  }, {\n    key: \"_toXDRAmount\",\n    value: function _toXDRAmount(value) {\n      var amount = new _bignumber[\"default\"](value).times(ONE);\n      return _jsXdr.Hyper.fromString(amount.toString());\n    }\n\n    /**\n     * @private\n     * @param {string|BigNumber} value XDR amount\n     * @returns {BigNumber} Number\n     */\n  }, {\n    key: \"_fromXDRAmount\",\n    value: function _fromXDRAmount(value) {\n      return new _bignumber[\"default\"](value).div(ONE).toFixed(7);\n    }\n\n    /**\n     * @private\n     * @param {object} price Price object\n     * @param {function} price.n numerator function that returns a value\n     * @param {function} price.d denominator function that returns a value\n     * @returns {BigNumber} Big string\n     */\n  }, {\n    key: \"_fromXDRPrice\",\n    value: function _fromXDRPrice(price) {\n      var n = new _bignumber[\"default\"](price.n());\n      return n.div(new _bignumber[\"default\"](price.d())).toString();\n    }\n\n    /**\n     * @private\n     * @param {object} price Price object\n     * @param {function} price.n numerator function that returns a value\n     * @param {function} price.d denominator function that returns a value\n     * @returns {object} XDR price object\n     */\n  }, {\n    key: \"_toXDRPrice\",\n    value: function _toXDRPrice(price) {\n      var xdrObject;\n      if (price.n && price.d) {\n        xdrObject = new _xdr[\"default\"].Price(price);\n      } else {\n        var approx = (0, _continued_fraction.best_r)(price);\n        xdrObject = new _xdr[\"default\"].Price({\n          n: parseInt(approx[0], 10),\n          d: parseInt(approx[1], 10)\n        });\n      }\n      if (xdrObject.n() < 0 || xdrObject.d() < 0) {\n        throw new Error('price must be positive');\n      }\n      return xdrObject;\n    }\n  }]);\n}();\nfunction extractRevokeSponshipDetails(attrs, result) {\n  switch (attrs[\"switch\"]().name) {\n    case 'revokeSponsorshipLedgerEntry':\n      {\n        var ledgerKey = attrs.ledgerKey();\n        switch (ledgerKey[\"switch\"]().name) {\n          case _xdr[\"default\"].LedgerEntryType.account().name:\n            {\n              result.type = 'revokeAccountSponsorship';\n              result.account = accountIdtoAddress(ledgerKey.account().accountId());\n              break;\n            }\n          case _xdr[\"default\"].LedgerEntryType.trustline().name:\n            {\n              result.type = 'revokeTrustlineSponsorship';\n              result.account = accountIdtoAddress(ledgerKey.trustLine().accountId());\n              var xdrAsset = ledgerKey.trustLine().asset();\n              switch (xdrAsset[\"switch\"]()) {\n                case _xdr[\"default\"].AssetType.assetTypePoolShare():\n                  result.asset = _liquidity_pool_id.LiquidityPoolId.fromOperation(xdrAsset);\n                  break;\n                default:\n                  result.asset = _asset.Asset.fromOperation(xdrAsset);\n                  break;\n              }\n              break;\n            }\n          case _xdr[\"default\"].LedgerEntryType.offer().name:\n            {\n              result.type = 'revokeOfferSponsorship';\n              result.seller = accountIdtoAddress(ledgerKey.offer().sellerId());\n              result.offerId = ledgerKey.offer().offerId().toString();\n              break;\n            }\n          case _xdr[\"default\"].LedgerEntryType.data().name:\n            {\n              result.type = 'revokeDataSponsorship';\n              result.account = accountIdtoAddress(ledgerKey.data().accountId());\n              result.name = ledgerKey.data().dataName().toString('ascii');\n              break;\n            }\n          case _xdr[\"default\"].LedgerEntryType.claimableBalance().name:\n            {\n              result.type = 'revokeClaimableBalanceSponsorship';\n              result.balanceId = ledgerKey.claimableBalance().balanceId().toXDR('hex');\n              break;\n            }\n          case _xdr[\"default\"].LedgerEntryType.liquidityPool().name:\n            {\n              result.type = 'revokeLiquidityPoolSponsorship';\n              result.liquidityPoolId = ledgerKey.liquidityPool().liquidityPoolId().toString('hex');\n              break;\n            }\n          default:\n            {\n              throw new Error(\"Unknown ledgerKey: \".concat(attrs[\"switch\"]().name));\n            }\n        }\n        break;\n      }\n    case 'revokeSponsorshipSigner':\n      {\n        result.type = 'revokeSignerSponsorship';\n        result.account = accountIdtoAddress(attrs.signer().accountId());\n        result.signer = convertXDRSignerKeyToObject(attrs.signer().signerKey());\n        break;\n      }\n    default:\n      {\n        throw new Error(\"Unknown revokeSponsorship: \".concat(attrs[\"switch\"]().name));\n      }\n  }\n}\nfunction convertXDRSignerKeyToObject(signerKey) {\n  var attrs = {};\n  switch (signerKey[\"switch\"]().name) {\n    case _xdr[\"default\"].SignerKeyType.signerKeyTypeEd25519().name:\n      {\n        attrs.ed25519PublicKey = _strkey.StrKey.encodeEd25519PublicKey(signerKey.ed25519());\n        break;\n      }\n    case _xdr[\"default\"].SignerKeyType.signerKeyTypePreAuthTx().name:\n      {\n        attrs.preAuthTx = signerKey.preAuthTx().toString('hex');\n        break;\n      }\n    case _xdr[\"default\"].SignerKeyType.signerKeyTypeHashX().name:\n      {\n        attrs.sha256Hash = signerKey.hashX().toString('hex');\n        break;\n      }\n    default:\n      {\n        throw new Error(\"Unknown signerKey: \".concat(signerKey[\"switch\"]().name));\n      }\n  }\n  return attrs;\n}\nfunction accountIdtoAddress(accountId) {\n  return _strkey.StrKey.encodeEd25519PublicKey(accountId.ed25519());\n}\n\n// Attach all imported operations as static methods on the Operation class\nOperation.accountMerge = ops.accountMerge;\nOperation.allowTrust = ops.allowTrust;\nOperation.bumpSequence = ops.bumpSequence;\nOperation.changeTrust = ops.changeTrust;\nOperation.createAccount = ops.createAccount;\nOperation.createClaimableBalance = ops.createClaimableBalance;\nOperation.claimClaimableBalance = ops.claimClaimableBalance;\nOperation.clawbackClaimableBalance = ops.clawbackClaimableBalance;\nOperation.createPassiveSellOffer = ops.createPassiveSellOffer;\nOperation.inflation = ops.inflation;\nOperation.manageData = ops.manageData;\nOperation.manageSellOffer = ops.manageSellOffer;\nOperation.manageBuyOffer = ops.manageBuyOffer;\nOperation.pathPaymentStrictReceive = ops.pathPaymentStrictReceive;\nOperation.pathPaymentStrictSend = ops.pathPaymentStrictSend;\nOperation.payment = ops.payment;\nOperation.setOptions = ops.setOptions;\nOperation.beginSponsoringFutureReserves = ops.beginSponsoringFutureReserves;\nOperation.endSponsoringFutureReserves = ops.endSponsoringFutureReserves;\nOperation.revokeAccountSponsorship = ops.revokeAccountSponsorship;\nOperation.revokeTrustlineSponsorship = ops.revokeTrustlineSponsorship;\nOperation.revokeOfferSponsorship = ops.revokeOfferSponsorship;\nOperation.revokeDataSponsorship = ops.revokeDataSponsorship;\nOperation.revokeClaimableBalanceSponsorship = ops.revokeClaimableBalanceSponsorship;\nOperation.revokeLiquidityPoolSponsorship = ops.revokeLiquidityPoolSponsorship;\nOperation.revokeSignerSponsorship = ops.revokeSignerSponsorship;\nOperation.clawback = ops.clawback;\nOperation.setTrustLineFlags = ops.setTrustLineFlags;\nOperation.liquidityPoolDeposit = ops.liquidityPoolDeposit;\nOperation.liquidityPoolWithdraw = ops.liquidityPoolWithdraw;\nOperation.invokeHostFunction = ops.invokeHostFunction;\nOperation.extendFootprintTtl = ops.extendFootprintTtl;\nOperation.restoreFootprint = ops.restoreFootprint;\n\n// these are not `xdr.Operation`s directly, but are proxies for complex but\n// common versions of `Operation.invokeHostFunction`\nOperation.createStellarAssetContract = ops.createStellarAssetContract;\nOperation.invokeContractFunction = ops.invokeContractFunction;\nOperation.createCustomContract = ops.createCustomContract;\nOperation.uploadContractWasm = ops.uploadContractWasm;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@stellar/stellar-base/lib/operation.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@stellar/stellar-base/lib/operations/account_merge.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@stellar/stellar-base/lib/operations/account_merge.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.accountMerge = accountMerge;\nvar _xdr = _interopRequireDefault(__webpack_require__(/*! ../xdr */ \"(ssr)/./node_modules/@stellar/stellar-base/lib/xdr.js\"));\nvar _decode_encode_muxed_account = __webpack_require__(/*! ../util/decode_encode_muxed_account */ \"(ssr)/./node_modules/@stellar/stellar-base/lib/util/decode_encode_muxed_account.js\");\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { \"default\": e }; }\n/**\n * Transfers native balance to destination account.\n *\n * @function\n * @alias Operation.accountMerge\n *\n * @param {object} opts - options object\n * @param {string} opts.destination - destination to merge the source account into\n * @param {string} [opts.source]    - operation source account (defaults to\n *     transaction source)\n *\n * @returns {xdr.Operation} an Account Merge operation (xdr.AccountMergeOp)\n */\nfunction accountMerge(opts) {\n  var opAttributes = {};\n  try {\n    opAttributes.body = _xdr[\"default\"].OperationBody.accountMerge((0, _decode_encode_muxed_account.decodeAddressToMuxedAccount)(opts.destination));\n  } catch (e) {\n    throw new Error('destination is invalid');\n  }\n  this.setSourceAccount(opAttributes, opts);\n  return new _xdr[\"default\"].Operation(opAttributes);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHN0ZWxsYXIvc3RlbGxhci1iYXNlL2xpYi9vcGVyYXRpb25zL2FjY291bnRfbWVyZ2UuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsOENBQTZDO0FBQzdDO0FBQ0EsQ0FBQyxFQUFDO0FBQ0Ysb0JBQW9CO0FBQ3BCLGtDQUFrQyxtQkFBTyxDQUFDLHFFQUFRO0FBQ2xELG1DQUFtQyxtQkFBTyxDQUFDLCtIQUFxQztBQUNoRixxQ0FBcUMsaUNBQWlDO0FBQ3RFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsUUFBUTtBQUNuQixXQUFXLFFBQVE7QUFDbkIsV0FBVyxRQUFRO0FBQ25CO0FBQ0E7QUFDQSxhQUFhLGVBQWU7QUFDNUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXFVTVUFSSU9cXERvY3VtZW50c1xcR2l0aHViXFxHYWxheHlLSi13YWxsZXQtLS1IYWNrXFx3ZWJcXG5vZGVfbW9kdWxlc1xcQHN0ZWxsYXJcXHN0ZWxsYXItYmFzZVxcbGliXFxvcGVyYXRpb25zXFxhY2NvdW50X21lcmdlLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5hY2NvdW50TWVyZ2UgPSBhY2NvdW50TWVyZ2U7XG52YXIgX3hkciA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL3hkclwiKSk7XG52YXIgX2RlY29kZV9lbmNvZGVfbXV4ZWRfYWNjb3VudCA9IHJlcXVpcmUoXCIuLi91dGlsL2RlY29kZV9lbmNvZGVfbXV4ZWRfYWNjb3VudFwiKTtcbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoZSkgeyByZXR1cm4gZSAmJiBlLl9fZXNNb2R1bGUgPyBlIDogeyBcImRlZmF1bHRcIjogZSB9OyB9XG4vKipcbiAqIFRyYW5zZmVycyBuYXRpdmUgYmFsYW5jZSB0byBkZXN0aW5hdGlvbiBhY2NvdW50LlxuICpcbiAqIEBmdW5jdGlvblxuICogQGFsaWFzIE9wZXJhdGlvbi5hY2NvdW50TWVyZ2VcbiAqXG4gKiBAcGFyYW0ge29iamVjdH0gb3B0cyAtIG9wdGlvbnMgb2JqZWN0XG4gKiBAcGFyYW0ge3N0cmluZ30gb3B0cy5kZXN0aW5hdGlvbiAtIGRlc3RpbmF0aW9uIHRvIG1lcmdlIHRoZSBzb3VyY2UgYWNjb3VudCBpbnRvXG4gKiBAcGFyYW0ge3N0cmluZ30gW29wdHMuc291cmNlXSAgICAtIG9wZXJhdGlvbiBzb3VyY2UgYWNjb3VudCAoZGVmYXVsdHMgdG9cbiAqICAgICB0cmFuc2FjdGlvbiBzb3VyY2UpXG4gKlxuICogQHJldHVybnMge3hkci5PcGVyYXRpb259IGFuIEFjY291bnQgTWVyZ2Ugb3BlcmF0aW9uICh4ZHIuQWNjb3VudE1lcmdlT3ApXG4gKi9cbmZ1bmN0aW9uIGFjY291bnRNZXJnZShvcHRzKSB7XG4gIHZhciBvcEF0dHJpYnV0ZXMgPSB7fTtcbiAgdHJ5IHtcbiAgICBvcEF0dHJpYnV0ZXMuYm9keSA9IF94ZHJbXCJkZWZhdWx0XCJdLk9wZXJhdGlvbkJvZHkuYWNjb3VudE1lcmdlKCgwLCBfZGVjb2RlX2VuY29kZV9tdXhlZF9hY2NvdW50LmRlY29kZUFkZHJlc3NUb011eGVkQWNjb3VudCkob3B0cy5kZXN0aW5hdGlvbikpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdkZXN0aW5hdGlvbiBpcyBpbnZhbGlkJyk7XG4gIH1cbiAgdGhpcy5zZXRTb3VyY2VBY2NvdW50KG9wQXR0cmlidXRlcywgb3B0cyk7XG4gIHJldHVybiBuZXcgX3hkcltcImRlZmF1bHRcIl0uT3BlcmF0aW9uKG9wQXR0cmlidXRlcyk7XG59Il0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@stellar/stellar-base/lib/operations/account_merge.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@stellar/stellar-base/lib/operations/allow_trust.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@stellar/stellar-base/lib/operations/allow_trust.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.allowTrust = allowTrust;\nvar _xdr = _interopRequireDefault(__webpack_require__(/*! ../xdr */ \"(ssr)/./node_modules/@stellar/stellar-base/lib/xdr.js\"));\nvar _keypair = __webpack_require__(/*! ../keypair */ \"(ssr)/./node_modules/@stellar/stellar-base/lib/keypair.js\");\nvar _strkey = __webpack_require__(/*! ../strkey */ \"(ssr)/./node_modules/@stellar/stellar-base/lib/strkey.js\");\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { \"default\": e }; }\n/**\n * @deprecated since v5.0\n *\n * Returns an XDR AllowTrustOp. An \"allow trust\" operation authorizes another\n * account to hold your account's credit for a given asset.\n *\n * @function\n * @alias Operation.allowTrust\n *\n * @param {object} opts Options object\n * @param {string} opts.trustor - The trusting account (the one being authorized)\n * @param {string} opts.assetCode - The asset code being authorized.\n * @param {(0|1|2)} opts.authorize - `1` to authorize, `2` to authorize to maintain liabilities, and `0` to deauthorize.\n * @param {string} [opts.source] - The source account (defaults to transaction source).\n *\n * @returns {xdr.AllowTrustOp} Allow Trust operation\n */\nfunction allowTrust(opts) {\n  if (!_strkey.StrKey.isValidEd25519PublicKey(opts.trustor)) {\n    throw new Error('trustor is invalid');\n  }\n  var attributes = {};\n  attributes.trustor = _keypair.Keypair.fromPublicKey(opts.trustor).xdrAccountId();\n  if (opts.assetCode.length <= 4) {\n    var code = opts.assetCode.padEnd(4, '\\0');\n    attributes.asset = _xdr[\"default\"].AssetCode.assetTypeCreditAlphanum4(code);\n  } else if (opts.assetCode.length <= 12) {\n    var _code = opts.assetCode.padEnd(12, '\\0');\n    attributes.asset = _xdr[\"default\"].AssetCode.assetTypeCreditAlphanum12(_code);\n  } else {\n    throw new Error('Asset code must be 12 characters at max.');\n  }\n  if (typeof opts.authorize === 'boolean') {\n    if (opts.authorize) {\n      attributes.authorize = _xdr[\"default\"].TrustLineFlags.authorizedFlag().value;\n    } else {\n      attributes.authorize = 0;\n    }\n  } else {\n    attributes.authorize = opts.authorize;\n  }\n  var allowTrustOp = new _xdr[\"default\"].AllowTrustOp(attributes);\n  var opAttributes = {};\n  opAttributes.body = _xdr[\"default\"].OperationBody.allowTrust(allowTrustOp);\n  this.setSourceAccount(opAttributes, opts);\n  return new _xdr[\"default\"].Operation(opAttributes);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHN0ZWxsYXIvc3RlbGxhci1iYXNlL2xpYi9vcGVyYXRpb25zL2FsbG93X3RydXN0LmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLDhDQUE2QztBQUM3QztBQUNBLENBQUMsRUFBQztBQUNGLGtCQUFrQjtBQUNsQixrQ0FBa0MsbUJBQU8sQ0FBQyxxRUFBUTtBQUNsRCxlQUFlLG1CQUFPLENBQUMsNkVBQVk7QUFDbkMsY0FBYyxtQkFBTyxDQUFDLDJFQUFXO0FBQ2pDLHFDQUFxQyxpQ0FBaUM7QUFDdEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CLFdBQVcsUUFBUTtBQUNuQixXQUFXLFFBQVE7QUFDbkIsV0FBVyxTQUFTO0FBQ3BCLFdBQVcsUUFBUTtBQUNuQjtBQUNBLGFBQWEsa0JBQWtCO0FBQy9CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcVVNVQVJJT1xcRG9jdW1lbnRzXFxHaXRodWJcXEdhbGF4eUtKLXdhbGxldC0tLUhhY2tcXHdlYlxcbm9kZV9tb2R1bGVzXFxAc3RlbGxhclxcc3RlbGxhci1iYXNlXFxsaWJcXG9wZXJhdGlvbnNcXGFsbG93X3RydXN0LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5hbGxvd1RydXN0ID0gYWxsb3dUcnVzdDtcbnZhciBfeGRyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4veGRyXCIpKTtcbnZhciBfa2V5cGFpciA9IHJlcXVpcmUoXCIuLi9rZXlwYWlyXCIpO1xudmFyIF9zdHJrZXkgPSByZXF1aXJlKFwiLi4vc3Rya2V5XCIpO1xuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChlKSB7IHJldHVybiBlICYmIGUuX19lc01vZHVsZSA/IGUgOiB7IFwiZGVmYXVsdFwiOiBlIH07IH1cbi8qKlxuICogQGRlcHJlY2F0ZWQgc2luY2UgdjUuMFxuICpcbiAqIFJldHVybnMgYW4gWERSIEFsbG93VHJ1c3RPcC4gQW4gXCJhbGxvdyB0cnVzdFwiIG9wZXJhdGlvbiBhdXRob3JpemVzIGFub3RoZXJcbiAqIGFjY291bnQgdG8gaG9sZCB5b3VyIGFjY291bnQncyBjcmVkaXQgZm9yIGEgZ2l2ZW4gYXNzZXQuXG4gKlxuICogQGZ1bmN0aW9uXG4gKiBAYWxpYXMgT3BlcmF0aW9uLmFsbG93VHJ1c3RcbiAqXG4gKiBAcGFyYW0ge29iamVjdH0gb3B0cyBPcHRpb25zIG9iamVjdFxuICogQHBhcmFtIHtzdHJpbmd9IG9wdHMudHJ1c3RvciAtIFRoZSB0cnVzdGluZyBhY2NvdW50ICh0aGUgb25lIGJlaW5nIGF1dGhvcml6ZWQpXG4gKiBAcGFyYW0ge3N0cmluZ30gb3B0cy5hc3NldENvZGUgLSBUaGUgYXNzZXQgY29kZSBiZWluZyBhdXRob3JpemVkLlxuICogQHBhcmFtIHsoMHwxfDIpfSBvcHRzLmF1dGhvcml6ZSAtIGAxYCB0byBhdXRob3JpemUsIGAyYCB0byBhdXRob3JpemUgdG8gbWFpbnRhaW4gbGlhYmlsaXRpZXMsIGFuZCBgMGAgdG8gZGVhdXRob3JpemUuXG4gKiBAcGFyYW0ge3N0cmluZ30gW29wdHMuc291cmNlXSAtIFRoZSBzb3VyY2UgYWNjb3VudCAoZGVmYXVsdHMgdG8gdHJhbnNhY3Rpb24gc291cmNlKS5cbiAqXG4gKiBAcmV0dXJucyB7eGRyLkFsbG93VHJ1c3RPcH0gQWxsb3cgVHJ1c3Qgb3BlcmF0aW9uXG4gKi9cbmZ1bmN0aW9uIGFsbG93VHJ1c3Qob3B0cykge1xuICBpZiAoIV9zdHJrZXkuU3RyS2V5LmlzVmFsaWRFZDI1NTE5UHVibGljS2V5KG9wdHMudHJ1c3RvcikpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3RydXN0b3IgaXMgaW52YWxpZCcpO1xuICB9XG4gIHZhciBhdHRyaWJ1dGVzID0ge307XG4gIGF0dHJpYnV0ZXMudHJ1c3RvciA9IF9rZXlwYWlyLktleXBhaXIuZnJvbVB1YmxpY0tleShvcHRzLnRydXN0b3IpLnhkckFjY291bnRJZCgpO1xuICBpZiAob3B0cy5hc3NldENvZGUubGVuZ3RoIDw9IDQpIHtcbiAgICB2YXIgY29kZSA9IG9wdHMuYXNzZXRDb2RlLnBhZEVuZCg0LCAnXFwwJyk7XG4gICAgYXR0cmlidXRlcy5hc3NldCA9IF94ZHJbXCJkZWZhdWx0XCJdLkFzc2V0Q29kZS5hc3NldFR5cGVDcmVkaXRBbHBoYW51bTQoY29kZSk7XG4gIH0gZWxzZSBpZiAob3B0cy5hc3NldENvZGUubGVuZ3RoIDw9IDEyKSB7XG4gICAgdmFyIF9jb2RlID0gb3B0cy5hc3NldENvZGUucGFkRW5kKDEyLCAnXFwwJyk7XG4gICAgYXR0cmlidXRlcy5hc3NldCA9IF94ZHJbXCJkZWZhdWx0XCJdLkFzc2V0Q29kZS5hc3NldFR5cGVDcmVkaXRBbHBoYW51bTEyKF9jb2RlKTtcbiAgfSBlbHNlIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0Fzc2V0IGNvZGUgbXVzdCBiZSAxMiBjaGFyYWN0ZXJzIGF0IG1heC4nKTtcbiAgfVxuICBpZiAodHlwZW9mIG9wdHMuYXV0aG9yaXplID09PSAnYm9vbGVhbicpIHtcbiAgICBpZiAob3B0cy5hdXRob3JpemUpIHtcbiAgICAgIGF0dHJpYnV0ZXMuYXV0aG9yaXplID0gX3hkcltcImRlZmF1bHRcIl0uVHJ1c3RMaW5lRmxhZ3MuYXV0aG9yaXplZEZsYWcoKS52YWx1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgYXR0cmlidXRlcy5hdXRob3JpemUgPSAwO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBhdHRyaWJ1dGVzLmF1dGhvcml6ZSA9IG9wdHMuYXV0aG9yaXplO1xuICB9XG4gIHZhciBhbGxvd1RydXN0T3AgPSBuZXcgX3hkcltcImRlZmF1bHRcIl0uQWxsb3dUcnVzdE9wKGF0dHJpYnV0ZXMpO1xuICB2YXIgb3BBdHRyaWJ1dGVzID0ge307XG4gIG9wQXR0cmlidXRlcy5ib2R5ID0gX3hkcltcImRlZmF1bHRcIl0uT3BlcmF0aW9uQm9keS5hbGxvd1RydXN0KGFsbG93VHJ1c3RPcCk7XG4gIHRoaXMuc2V0U291cmNlQWNjb3VudChvcEF0dHJpYnV0ZXMsIG9wdHMpO1xuICByZXR1cm4gbmV3IF94ZHJbXCJkZWZhdWx0XCJdLk9wZXJhdGlvbihvcEF0dHJpYnV0ZXMpO1xufSJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@stellar/stellar-base/lib/operations/allow_trust.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@stellar/stellar-base/lib/operations/begin_sponsoring_future_reserves.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/@stellar/stellar-base/lib/operations/begin_sponsoring_future_reserves.js ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.beginSponsoringFutureReserves = beginSponsoringFutureReserves;\nvar _xdr = _interopRequireDefault(__webpack_require__(/*! ../xdr */ \"(ssr)/./node_modules/@stellar/stellar-base/lib/xdr.js\"));\nvar _strkey = __webpack_require__(/*! ../strkey */ \"(ssr)/./node_modules/@stellar/stellar-base/lib/strkey.js\");\nvar _keypair = __webpack_require__(/*! ../keypair */ \"(ssr)/./node_modules/@stellar/stellar-base/lib/keypair.js\");\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { \"default\": e }; }\n/**\n * Create a \"begin sponsoring future reserves\" operation.\n * @function\n * @alias Operation.beginSponsoringFutureReserves\n * @param {object} opts Options object\n * @param {string} opts.sponsoredId - The sponsored account id.\n * @param {string} [opts.source] - The source account for the operation. Defaults to the transaction's source account.\n * @returns {xdr.Operation} xdr operation\n *\n * @example\n * const op = Operation.beginSponsoringFutureReserves({\n *   sponsoredId: 'GDGU5OAPHNPU5UCLE5RDJHG7PXZFQYWKCFOEXSXNMR6KRQRI5T6XXCD7'\n * });\n *\n */\nfunction beginSponsoringFutureReserves() {\n  var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  if (!_strkey.StrKey.isValidEd25519PublicKey(opts.sponsoredId)) {\n    throw new Error('sponsoredId is invalid');\n  }\n  var op = new _xdr[\"default\"].BeginSponsoringFutureReservesOp({\n    sponsoredId: _keypair.Keypair.fromPublicKey(opts.sponsoredId).xdrAccountId()\n  });\n  var opAttributes = {};\n  opAttributes.body = _xdr[\"default\"].OperationBody.beginSponsoringFutureReserves(op);\n  this.setSourceAccount(opAttributes, opts);\n  return new _xdr[\"default\"].Operation(opAttributes);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHN0ZWxsYXIvc3RlbGxhci1iYXNlL2xpYi9vcGVyYXRpb25zL2JlZ2luX3Nwb25zb3JpbmdfZnV0dXJlX3Jlc2VydmVzLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLDhDQUE2QztBQUM3QztBQUNBLENBQUMsRUFBQztBQUNGLHFDQUFxQztBQUNyQyxrQ0FBa0MsbUJBQU8sQ0FBQyxxRUFBUTtBQUNsRCxjQUFjLG1CQUFPLENBQUMsMkVBQVc7QUFDakMsZUFBZSxtQkFBTyxDQUFDLDZFQUFZO0FBQ25DLHFDQUFxQyxpQ0FBaUM7QUFDdEU7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFFBQVE7QUFDbkIsV0FBVyxRQUFRO0FBQ25CLFdBQVcsUUFBUTtBQUNuQixhQUFhLGVBQWU7QUFDNUI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcVVNVQVJJT1xcRG9jdW1lbnRzXFxHaXRodWJcXEdhbGF4eUtKLXdhbGxldC0tLUhhY2tcXHdlYlxcbm9kZV9tb2R1bGVzXFxAc3RlbGxhclxcc3RlbGxhci1iYXNlXFxsaWJcXG9wZXJhdGlvbnNcXGJlZ2luX3Nwb25zb3JpbmdfZnV0dXJlX3Jlc2VydmVzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5iZWdpblNwb25zb3JpbmdGdXR1cmVSZXNlcnZlcyA9IGJlZ2luU3BvbnNvcmluZ0Z1dHVyZVJlc2VydmVzO1xudmFyIF94ZHIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi94ZHJcIikpO1xudmFyIF9zdHJrZXkgPSByZXF1aXJlKFwiLi4vc3Rya2V5XCIpO1xudmFyIF9rZXlwYWlyID0gcmVxdWlyZShcIi4uL2tleXBhaXJcIik7XG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KGUpIHsgcmV0dXJuIGUgJiYgZS5fX2VzTW9kdWxlID8gZSA6IHsgXCJkZWZhdWx0XCI6IGUgfTsgfVxuLyoqXG4gKiBDcmVhdGUgYSBcImJlZ2luIHNwb25zb3JpbmcgZnV0dXJlIHJlc2VydmVzXCIgb3BlcmF0aW9uLlxuICogQGZ1bmN0aW9uXG4gKiBAYWxpYXMgT3BlcmF0aW9uLmJlZ2luU3BvbnNvcmluZ0Z1dHVyZVJlc2VydmVzXG4gKiBAcGFyYW0ge29iamVjdH0gb3B0cyBPcHRpb25zIG9iamVjdFxuICogQHBhcmFtIHtzdHJpbmd9IG9wdHMuc3BvbnNvcmVkSWQgLSBUaGUgc3BvbnNvcmVkIGFjY291bnQgaWQuXG4gKiBAcGFyYW0ge3N0cmluZ30gW29wdHMuc291cmNlXSAtIFRoZSBzb3VyY2UgYWNjb3VudCBmb3IgdGhlIG9wZXJhdGlvbi4gRGVmYXVsdHMgdG8gdGhlIHRyYW5zYWN0aW9uJ3Mgc291cmNlIGFjY291bnQuXG4gKiBAcmV0dXJucyB7eGRyLk9wZXJhdGlvbn0geGRyIG9wZXJhdGlvblxuICpcbiAqIEBleGFtcGxlXG4gKiBjb25zdCBvcCA9IE9wZXJhdGlvbi5iZWdpblNwb25zb3JpbmdGdXR1cmVSZXNlcnZlcyh7XG4gKiAgIHNwb25zb3JlZElkOiAnR0RHVTVPQVBITlBVNVVDTEU1UkRKSEc3UFhaRlFZV0tDRk9FWFNYTk1SNktSUVJJNVQ2WFhDRDcnXG4gKiB9KTtcbiAqXG4gKi9cbmZ1bmN0aW9uIGJlZ2luU3BvbnNvcmluZ0Z1dHVyZVJlc2VydmVzKCkge1xuICB2YXIgb3B0cyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge307XG4gIGlmICghX3N0cmtleS5TdHJLZXkuaXNWYWxpZEVkMjU1MTlQdWJsaWNLZXkob3B0cy5zcG9uc29yZWRJZCkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3Nwb25zb3JlZElkIGlzIGludmFsaWQnKTtcbiAgfVxuICB2YXIgb3AgPSBuZXcgX3hkcltcImRlZmF1bHRcIl0uQmVnaW5TcG9uc29yaW5nRnV0dXJlUmVzZXJ2ZXNPcCh7XG4gICAgc3BvbnNvcmVkSWQ6IF9rZXlwYWlyLktleXBhaXIuZnJvbVB1YmxpY0tleShvcHRzLnNwb25zb3JlZElkKS54ZHJBY2NvdW50SWQoKVxuICB9KTtcbiAgdmFyIG9wQXR0cmlidXRlcyA9IHt9O1xuICBvcEF0dHJpYnV0ZXMuYm9keSA9IF94ZHJbXCJkZWZhdWx0XCJdLk9wZXJhdGlvbkJvZHkuYmVnaW5TcG9uc29yaW5nRnV0dXJlUmVzZXJ2ZXMob3ApO1xuICB0aGlzLnNldFNvdXJjZUFjY291bnQob3BBdHRyaWJ1dGVzLCBvcHRzKTtcbiAgcmV0dXJuIG5ldyBfeGRyW1wiZGVmYXVsdFwiXS5PcGVyYXRpb24ob3BBdHRyaWJ1dGVzKTtcbn0iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@stellar/stellar-base/lib/operations/begin_sponsoring_future_reserves.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@stellar/stellar-base/lib/operations/bump_sequence.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@stellar/stellar-base/lib/operations/bump_sequence.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.bumpSequence = bumpSequence;\nvar _jsXdr = __webpack_require__(/*! @stellar/js-xdr */ \"(ssr)/./node_modules/@stellar/js-xdr/src/index.js\");\nvar _bignumber = _interopRequireDefault(__webpack_require__(/*! ../util/bignumber */ \"(ssr)/./node_modules/@stellar/stellar-base/lib/util/bignumber.js\"));\nvar _xdr = _interopRequireDefault(__webpack_require__(/*! ../xdr */ \"(ssr)/./node_modules/@stellar/stellar-base/lib/xdr.js\"));\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { \"default\": e }; }\n/**\n * This operation bumps sequence number.\n * @function\n * @alias Operation.bumpSequence\n * @param {object} opts Options object\n * @param {string} opts.bumpTo - Sequence number to bump to.\n * @param {string} [opts.source] - The optional source account.\n * @returns {xdr.BumpSequenceOp} Operation\n */\nfunction bumpSequence(opts) {\n  var attributes = {};\n  if (typeof opts.bumpTo !== 'string') {\n    throw new Error('bumpTo must be a string');\n  }\n  try {\n    // eslint-disable-next-line no-new\n    new _bignumber[\"default\"](opts.bumpTo);\n  } catch (e) {\n    throw new Error('bumpTo must be a stringified number');\n  }\n  attributes.bumpTo = _jsXdr.Hyper.fromString(opts.bumpTo);\n  var bumpSequenceOp = new _xdr[\"default\"].BumpSequenceOp(attributes);\n  var opAttributes = {};\n  opAttributes.body = _xdr[\"default\"].OperationBody.bumpSequence(bumpSequenceOp);\n  this.setSourceAccount(opAttributes, opts);\n  return new _xdr[\"default\"].Operation(opAttributes);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHN0ZWxsYXIvc3RlbGxhci1iYXNlL2xpYi9vcGVyYXRpb25zL2J1bXBfc2VxdWVuY2UuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsOENBQTZDO0FBQzdDO0FBQ0EsQ0FBQyxFQUFDO0FBQ0Ysb0JBQW9CO0FBQ3BCLGFBQWEsbUJBQU8sQ0FBQywwRUFBaUI7QUFDdEMsd0NBQXdDLG1CQUFPLENBQUMsMkZBQW1CO0FBQ25FLGtDQUFrQyxtQkFBTyxDQUFDLHFFQUFRO0FBQ2xELHFDQUFxQyxpQ0FBaUM7QUFDdEU7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFFBQVE7QUFDbkIsV0FBVyxRQUFRO0FBQ25CLFdBQVcsUUFBUTtBQUNuQixhQUFhLG9CQUFvQjtBQUNqQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXFVTVUFSSU9cXERvY3VtZW50c1xcR2l0aHViXFxHYWxheHlLSi13YWxsZXQtLS1IYWNrXFx3ZWJcXG5vZGVfbW9kdWxlc1xcQHN0ZWxsYXJcXHN0ZWxsYXItYmFzZVxcbGliXFxvcGVyYXRpb25zXFxidW1wX3NlcXVlbmNlLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5idW1wU2VxdWVuY2UgPSBidW1wU2VxdWVuY2U7XG52YXIgX2pzWGRyID0gcmVxdWlyZShcIkBzdGVsbGFyL2pzLXhkclwiKTtcbnZhciBfYmlnbnVtYmVyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vdXRpbC9iaWdudW1iZXJcIikpO1xudmFyIF94ZHIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi94ZHJcIikpO1xuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChlKSB7IHJldHVybiBlICYmIGUuX19lc01vZHVsZSA/IGUgOiB7IFwiZGVmYXVsdFwiOiBlIH07IH1cbi8qKlxuICogVGhpcyBvcGVyYXRpb24gYnVtcHMgc2VxdWVuY2UgbnVtYmVyLlxuICogQGZ1bmN0aW9uXG4gKiBAYWxpYXMgT3BlcmF0aW9uLmJ1bXBTZXF1ZW5jZVxuICogQHBhcmFtIHtvYmplY3R9IG9wdHMgT3B0aW9ucyBvYmplY3RcbiAqIEBwYXJhbSB7c3RyaW5nfSBvcHRzLmJ1bXBUbyAtIFNlcXVlbmNlIG51bWJlciB0byBidW1wIHRvLlxuICogQHBhcmFtIHtzdHJpbmd9IFtvcHRzLnNvdXJjZV0gLSBUaGUgb3B0aW9uYWwgc291cmNlIGFjY291bnQuXG4gKiBAcmV0dXJucyB7eGRyLkJ1bXBTZXF1ZW5jZU9wfSBPcGVyYXRpb25cbiAqL1xuZnVuY3Rpb24gYnVtcFNlcXVlbmNlKG9wdHMpIHtcbiAgdmFyIGF0dHJpYnV0ZXMgPSB7fTtcbiAgaWYgKHR5cGVvZiBvcHRzLmJ1bXBUbyAhPT0gJ3N0cmluZycpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2J1bXBUbyBtdXN0IGJlIGEgc3RyaW5nJyk7XG4gIH1cbiAgdHJ5IHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tbmV3XG4gICAgbmV3IF9iaWdudW1iZXJbXCJkZWZhdWx0XCJdKG9wdHMuYnVtcFRvKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHRocm93IG5ldyBFcnJvcignYnVtcFRvIG11c3QgYmUgYSBzdHJpbmdpZmllZCBudW1iZXInKTtcbiAgfVxuICBhdHRyaWJ1dGVzLmJ1bXBUbyA9IF9qc1hkci5IeXBlci5mcm9tU3RyaW5nKG9wdHMuYnVtcFRvKTtcbiAgdmFyIGJ1bXBTZXF1ZW5jZU9wID0gbmV3IF94ZHJbXCJkZWZhdWx0XCJdLkJ1bXBTZXF1ZW5jZU9wKGF0dHJpYnV0ZXMpO1xuICB2YXIgb3BBdHRyaWJ1dGVzID0ge307XG4gIG9wQXR0cmlidXRlcy5ib2R5ID0gX3hkcltcImRlZmF1bHRcIl0uT3BlcmF0aW9uQm9keS5idW1wU2VxdWVuY2UoYnVtcFNlcXVlbmNlT3ApO1xuICB0aGlzLnNldFNvdXJjZUFjY291bnQob3BBdHRyaWJ1dGVzLCBvcHRzKTtcbiAgcmV0dXJuIG5ldyBfeGRyW1wiZGVmYXVsdFwiXS5PcGVyYXRpb24ob3BBdHRyaWJ1dGVzKTtcbn0iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@stellar/stellar-base/lib/operations/bump_sequence.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@stellar/stellar-base/lib/operations/change_trust.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@stellar/stellar-base/lib/operations/change_trust.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.changeTrust = changeTrust;\nvar _jsXdr = __webpack_require__(/*! @stellar/js-xdr */ \"(ssr)/./node_modules/@stellar/js-xdr/src/index.js\");\nvar _bignumber = _interopRequireDefault(__webpack_require__(/*! ../util/bignumber */ \"(ssr)/./node_modules/@stellar/stellar-base/lib/util/bignumber.js\"));\nvar _xdr = _interopRequireDefault(__webpack_require__(/*! ../xdr */ \"(ssr)/./node_modules/@stellar/stellar-base/lib/xdr.js\"));\nvar _asset = __webpack_require__(/*! ../asset */ \"(ssr)/./node_modules/@stellar/stellar-base/lib/asset.js\");\nvar _liquidity_pool_asset = __webpack_require__(/*! ../liquidity_pool_asset */ \"(ssr)/./node_modules/@stellar/stellar-base/lib/liquidity_pool_asset.js\");\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { \"default\": e }; }\nvar MAX_INT64 = '9223372036854775807';\n\n/**\n * Returns an XDR ChangeTrustOp. A \"change trust\" operation adds, removes, or updates a\n * trust line for a given asset from the source account to another.\n * @function\n * @alias Operation.changeTrust\n * @param {object} opts Options object\n * @param {Asset | LiquidityPoolAsset} opts.asset - The asset for the trust line.\n * @param {string} [opts.limit] - The limit for the asset, defaults to max int64.\n *                                If the limit is set to \"0\" it deletes the trustline.\n * @param {string} [opts.source] - The source account (defaults to transaction source).\n * @returns {xdr.ChangeTrustOp} Change Trust operation\n */\nfunction changeTrust(opts) {\n  var attributes = {};\n  if (opts.asset instanceof _asset.Asset) {\n    attributes.line = opts.asset.toChangeTrustXDRObject();\n  } else if (opts.asset instanceof _liquidity_pool_asset.LiquidityPoolAsset) {\n    attributes.line = opts.asset.toXDRObject();\n  } else {\n    throw new TypeError('asset must be Asset or LiquidityPoolAsset');\n  }\n  if (opts.limit !== undefined && !this.isValidAmount(opts.limit, true)) {\n    throw new TypeError(this.constructAmountRequirementsError('limit'));\n  }\n  if (opts.limit) {\n    attributes.limit = this._toXDRAmount(opts.limit);\n  } else {\n    attributes.limit = _jsXdr.Hyper.fromString(new _bignumber[\"default\"](MAX_INT64).toString());\n  }\n  if (opts.source) {\n    attributes.source = opts.source.masterKeypair;\n  }\n  var changeTrustOP = new _xdr[\"default\"].ChangeTrustOp(attributes);\n  var opAttributes = {};\n  opAttributes.body = _xdr[\"default\"].OperationBody.changeTrust(changeTrustOP);\n  this.setSourceAccount(opAttributes, opts);\n  return new _xdr[\"default\"].Operation(opAttributes);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHN0ZWxsYXIvc3RlbGxhci1iYXNlL2xpYi9vcGVyYXRpb25zL2NoYW5nZV90cnVzdC5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYiw4Q0FBNkM7QUFDN0M7QUFDQSxDQUFDLEVBQUM7QUFDRixtQkFBbUI7QUFDbkIsYUFBYSxtQkFBTyxDQUFDLDBFQUFpQjtBQUN0Qyx3Q0FBd0MsbUJBQU8sQ0FBQywyRkFBbUI7QUFDbkUsa0NBQWtDLG1CQUFPLENBQUMscUVBQVE7QUFDbEQsYUFBYSxtQkFBTyxDQUFDLHlFQUFVO0FBQy9CLDRCQUE0QixtQkFBTyxDQUFDLHVHQUF5QjtBQUM3RCxxQ0FBcUMsaUNBQWlDO0FBQ3RFOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFFBQVE7QUFDbkIsV0FBVyw0QkFBNEI7QUFDdkMsV0FBVyxRQUFRO0FBQ25CO0FBQ0EsV0FBVyxRQUFRO0FBQ25CLGFBQWEsbUJBQW1CO0FBQ2hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxVU1VBUklPXFxEb2N1bWVudHNcXEdpdGh1YlxcR2FsYXh5S0otd2FsbGV0LS0tSGFja1xcd2ViXFxub2RlX21vZHVsZXNcXEBzdGVsbGFyXFxzdGVsbGFyLWJhc2VcXGxpYlxcb3BlcmF0aW9uc1xcY2hhbmdlX3RydXN0LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5jaGFuZ2VUcnVzdCA9IGNoYW5nZVRydXN0O1xudmFyIF9qc1hkciA9IHJlcXVpcmUoXCJAc3RlbGxhci9qcy14ZHJcIik7XG52YXIgX2JpZ251bWJlciA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL3V0aWwvYmlnbnVtYmVyXCIpKTtcbnZhciBfeGRyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4veGRyXCIpKTtcbnZhciBfYXNzZXQgPSByZXF1aXJlKFwiLi4vYXNzZXRcIik7XG52YXIgX2xpcXVpZGl0eV9wb29sX2Fzc2V0ID0gcmVxdWlyZShcIi4uL2xpcXVpZGl0eV9wb29sX2Fzc2V0XCIpO1xuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChlKSB7IHJldHVybiBlICYmIGUuX19lc01vZHVsZSA/IGUgOiB7IFwiZGVmYXVsdFwiOiBlIH07IH1cbnZhciBNQVhfSU5UNjQgPSAnOTIyMzM3MjAzNjg1NDc3NTgwNyc7XG5cbi8qKlxuICogUmV0dXJucyBhbiBYRFIgQ2hhbmdlVHJ1c3RPcC4gQSBcImNoYW5nZSB0cnVzdFwiIG9wZXJhdGlvbiBhZGRzLCByZW1vdmVzLCBvciB1cGRhdGVzIGFcbiAqIHRydXN0IGxpbmUgZm9yIGEgZ2l2ZW4gYXNzZXQgZnJvbSB0aGUgc291cmNlIGFjY291bnQgdG8gYW5vdGhlci5cbiAqIEBmdW5jdGlvblxuICogQGFsaWFzIE9wZXJhdGlvbi5jaGFuZ2VUcnVzdFxuICogQHBhcmFtIHtvYmplY3R9IG9wdHMgT3B0aW9ucyBvYmplY3RcbiAqIEBwYXJhbSB7QXNzZXQgfCBMaXF1aWRpdHlQb29sQXNzZXR9IG9wdHMuYXNzZXQgLSBUaGUgYXNzZXQgZm9yIHRoZSB0cnVzdCBsaW5lLlxuICogQHBhcmFtIHtzdHJpbmd9IFtvcHRzLmxpbWl0XSAtIFRoZSBsaW1pdCBmb3IgdGhlIGFzc2V0LCBkZWZhdWx0cyB0byBtYXggaW50NjQuXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgSWYgdGhlIGxpbWl0IGlzIHNldCB0byBcIjBcIiBpdCBkZWxldGVzIHRoZSB0cnVzdGxpbmUuXG4gKiBAcGFyYW0ge3N0cmluZ30gW29wdHMuc291cmNlXSAtIFRoZSBzb3VyY2UgYWNjb3VudCAoZGVmYXVsdHMgdG8gdHJhbnNhY3Rpb24gc291cmNlKS5cbiAqIEByZXR1cm5zIHt4ZHIuQ2hhbmdlVHJ1c3RPcH0gQ2hhbmdlIFRydXN0IG9wZXJhdGlvblxuICovXG5mdW5jdGlvbiBjaGFuZ2VUcnVzdChvcHRzKSB7XG4gIHZhciBhdHRyaWJ1dGVzID0ge307XG4gIGlmIChvcHRzLmFzc2V0IGluc3RhbmNlb2YgX2Fzc2V0LkFzc2V0KSB7XG4gICAgYXR0cmlidXRlcy5saW5lID0gb3B0cy5hc3NldC50b0NoYW5nZVRydXN0WERST2JqZWN0KCk7XG4gIH0gZWxzZSBpZiAob3B0cy5hc3NldCBpbnN0YW5jZW9mIF9saXF1aWRpdHlfcG9vbF9hc3NldC5MaXF1aWRpdHlQb29sQXNzZXQpIHtcbiAgICBhdHRyaWJ1dGVzLmxpbmUgPSBvcHRzLmFzc2V0LnRvWERST2JqZWN0KCk7XG4gIH0gZWxzZSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignYXNzZXQgbXVzdCBiZSBBc3NldCBvciBMaXF1aWRpdHlQb29sQXNzZXQnKTtcbiAgfVxuICBpZiAob3B0cy5saW1pdCAhPT0gdW5kZWZpbmVkICYmICF0aGlzLmlzVmFsaWRBbW91bnQob3B0cy5saW1pdCwgdHJ1ZSkpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKHRoaXMuY29uc3RydWN0QW1vdW50UmVxdWlyZW1lbnRzRXJyb3IoJ2xpbWl0JykpO1xuICB9XG4gIGlmIChvcHRzLmxpbWl0KSB7XG4gICAgYXR0cmlidXRlcy5saW1pdCA9IHRoaXMuX3RvWERSQW1vdW50KG9wdHMubGltaXQpO1xuICB9IGVsc2Uge1xuICAgIGF0dHJpYnV0ZXMubGltaXQgPSBfanNYZHIuSHlwZXIuZnJvbVN0cmluZyhuZXcgX2JpZ251bWJlcltcImRlZmF1bHRcIl0oTUFYX0lOVDY0KS50b1N0cmluZygpKTtcbiAgfVxuICBpZiAob3B0cy5zb3VyY2UpIHtcbiAgICBhdHRyaWJ1dGVzLnNvdXJjZSA9IG9wdHMuc291cmNlLm1hc3RlcktleXBhaXI7XG4gIH1cbiAgdmFyIGNoYW5nZVRydXN0T1AgPSBuZXcgX3hkcltcImRlZmF1bHRcIl0uQ2hhbmdlVHJ1c3RPcChhdHRyaWJ1dGVzKTtcbiAgdmFyIG9wQXR0cmlidXRlcyA9IHt9O1xuICBvcEF0dHJpYnV0ZXMuYm9keSA9IF94ZHJbXCJkZWZhdWx0XCJdLk9wZXJhdGlvbkJvZHkuY2hhbmdlVHJ1c3QoY2hhbmdlVHJ1c3RPUCk7XG4gIHRoaXMuc2V0U291cmNlQWNjb3VudChvcEF0dHJpYnV0ZXMsIG9wdHMpO1xuICByZXR1cm4gbmV3IF94ZHJbXCJkZWZhdWx0XCJdLk9wZXJhdGlvbihvcEF0dHJpYnV0ZXMpO1xufSJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@stellar/stellar-base/lib/operations/change_trust.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@stellar/stellar-base/lib/operations/claim_claimable_balance.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/@stellar/stellar-base/lib/operations/claim_claimable_balance.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.claimClaimableBalance = claimClaimableBalance;\nexports.validateClaimableBalanceId = validateClaimableBalanceId;\nvar _xdr = _interopRequireDefault(__webpack_require__(/*! ../xdr */ \"(ssr)/./node_modules/@stellar/stellar-base/lib/xdr.js\"));\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { \"default\": e }; }\n/**\n * Create a new claim claimable balance operation.\n * @function\n * @alias Operation.claimClaimableBalance\n * @param {object} opts Options object\n * @param {string} opts.balanceId - The claimable balance id to be claimed.\n * @param {string} [opts.source] - The source account for the operation. Defaults to the transaction's source account.\n * @returns {xdr.Operation} Claim claimable balance operation\n *\n * @example\n * const op = Operation.claimClaimableBalance({\n *   balanceId: '00000000da0d57da7d4850e7fc10d2a9d0ebc731f7afb40574c03395b17d49149b91f5be',\n * });\n *\n */\nfunction claimClaimableBalance() {\n  var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  validateClaimableBalanceId(opts.balanceId);\n  var attributes = {};\n  attributes.balanceId = _xdr[\"default\"].ClaimableBalanceId.fromXDR(opts.balanceId, 'hex');\n  var claimClaimableBalanceOp = new _xdr[\"default\"].ClaimClaimableBalanceOp(attributes);\n  var opAttributes = {};\n  opAttributes.body = _xdr[\"default\"].OperationBody.claimClaimableBalance(claimClaimableBalanceOp);\n  this.setSourceAccount(opAttributes, opts);\n  return new _xdr[\"default\"].Operation(opAttributes);\n}\nfunction validateClaimableBalanceId(balanceId) {\n  if (typeof balanceId !== 'string' || balanceId.length !== 8 + 64 /* 8b discriminant + 64b string */) {\n    throw new Error('must provide a valid claimable balance id');\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHN0ZWxsYXIvc3RlbGxhci1iYXNlL2xpYi9vcGVyYXRpb25zL2NsYWltX2NsYWltYWJsZV9iYWxhbmNlLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLDhDQUE2QztBQUM3QztBQUNBLENBQUMsRUFBQztBQUNGLDZCQUE2QjtBQUM3QixrQ0FBa0M7QUFDbEMsa0NBQWtDLG1CQUFPLENBQUMscUVBQVE7QUFDbEQscUNBQXFDLGlDQUFpQztBQUN0RTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsUUFBUTtBQUNuQixXQUFXLFFBQVE7QUFDbkIsV0FBVyxRQUFRO0FBQ25CLGFBQWEsZUFBZTtBQUM1QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcVVNVQVJJT1xcRG9jdW1lbnRzXFxHaXRodWJcXEdhbGF4eUtKLXdhbGxldC0tLUhhY2tcXHdlYlxcbm9kZV9tb2R1bGVzXFxAc3RlbGxhclxcc3RlbGxhci1iYXNlXFxsaWJcXG9wZXJhdGlvbnNcXGNsYWltX2NsYWltYWJsZV9iYWxhbmNlLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5jbGFpbUNsYWltYWJsZUJhbGFuY2UgPSBjbGFpbUNsYWltYWJsZUJhbGFuY2U7XG5leHBvcnRzLnZhbGlkYXRlQ2xhaW1hYmxlQmFsYW5jZUlkID0gdmFsaWRhdGVDbGFpbWFibGVCYWxhbmNlSWQ7XG52YXIgX3hkciA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL3hkclwiKSk7XG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KGUpIHsgcmV0dXJuIGUgJiYgZS5fX2VzTW9kdWxlID8gZSA6IHsgXCJkZWZhdWx0XCI6IGUgfTsgfVxuLyoqXG4gKiBDcmVhdGUgYSBuZXcgY2xhaW0gY2xhaW1hYmxlIGJhbGFuY2Ugb3BlcmF0aW9uLlxuICogQGZ1bmN0aW9uXG4gKiBAYWxpYXMgT3BlcmF0aW9uLmNsYWltQ2xhaW1hYmxlQmFsYW5jZVxuICogQHBhcmFtIHtvYmplY3R9IG9wdHMgT3B0aW9ucyBvYmplY3RcbiAqIEBwYXJhbSB7c3RyaW5nfSBvcHRzLmJhbGFuY2VJZCAtIFRoZSBjbGFpbWFibGUgYmFsYW5jZSBpZCB0byBiZSBjbGFpbWVkLlxuICogQHBhcmFtIHtzdHJpbmd9IFtvcHRzLnNvdXJjZV0gLSBUaGUgc291cmNlIGFjY291bnQgZm9yIHRoZSBvcGVyYXRpb24uIERlZmF1bHRzIHRvIHRoZSB0cmFuc2FjdGlvbidzIHNvdXJjZSBhY2NvdW50LlxuICogQHJldHVybnMge3hkci5PcGVyYXRpb259IENsYWltIGNsYWltYWJsZSBiYWxhbmNlIG9wZXJhdGlvblxuICpcbiAqIEBleGFtcGxlXG4gKiBjb25zdCBvcCA9IE9wZXJhdGlvbi5jbGFpbUNsYWltYWJsZUJhbGFuY2Uoe1xuICogICBiYWxhbmNlSWQ6ICcwMDAwMDAwMGRhMGQ1N2RhN2Q0ODUwZTdmYzEwZDJhOWQwZWJjNzMxZjdhZmI0MDU3NGMwMzM5NWIxN2Q0OTE0OWI5MWY1YmUnLFxuICogfSk7XG4gKlxuICovXG5mdW5jdGlvbiBjbGFpbUNsYWltYWJsZUJhbGFuY2UoKSB7XG4gIHZhciBvcHRzID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fTtcbiAgdmFsaWRhdGVDbGFpbWFibGVCYWxhbmNlSWQob3B0cy5iYWxhbmNlSWQpO1xuICB2YXIgYXR0cmlidXRlcyA9IHt9O1xuICBhdHRyaWJ1dGVzLmJhbGFuY2VJZCA9IF94ZHJbXCJkZWZhdWx0XCJdLkNsYWltYWJsZUJhbGFuY2VJZC5mcm9tWERSKG9wdHMuYmFsYW5jZUlkLCAnaGV4Jyk7XG4gIHZhciBjbGFpbUNsYWltYWJsZUJhbGFuY2VPcCA9IG5ldyBfeGRyW1wiZGVmYXVsdFwiXS5DbGFpbUNsYWltYWJsZUJhbGFuY2VPcChhdHRyaWJ1dGVzKTtcbiAgdmFyIG9wQXR0cmlidXRlcyA9IHt9O1xuICBvcEF0dHJpYnV0ZXMuYm9keSA9IF94ZHJbXCJkZWZhdWx0XCJdLk9wZXJhdGlvbkJvZHkuY2xhaW1DbGFpbWFibGVCYWxhbmNlKGNsYWltQ2xhaW1hYmxlQmFsYW5jZU9wKTtcbiAgdGhpcy5zZXRTb3VyY2VBY2NvdW50KG9wQXR0cmlidXRlcywgb3B0cyk7XG4gIHJldHVybiBuZXcgX3hkcltcImRlZmF1bHRcIl0uT3BlcmF0aW9uKG9wQXR0cmlidXRlcyk7XG59XG5mdW5jdGlvbiB2YWxpZGF0ZUNsYWltYWJsZUJhbGFuY2VJZChiYWxhbmNlSWQpIHtcbiAgaWYgKHR5cGVvZiBiYWxhbmNlSWQgIT09ICdzdHJpbmcnIHx8IGJhbGFuY2VJZC5sZW5ndGggIT09IDggKyA2NCAvKiA4YiBkaXNjcmltaW5hbnQgKyA2NGIgc3RyaW5nICovKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdtdXN0IHByb3ZpZGUgYSB2YWxpZCBjbGFpbWFibGUgYmFsYW5jZSBpZCcpO1xuICB9XG59Il0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@stellar/stellar-base/lib/operations/claim_claimable_balance.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@stellar/stellar-base/lib/operations/clawback.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@stellar/stellar-base/lib/operations/clawback.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.clawback = clawback;\nvar _xdr = _interopRequireDefault(__webpack_require__(/*! ../xdr */ \"(ssr)/./node_modules/@stellar/stellar-base/lib/xdr.js\"));\nvar _decode_encode_muxed_account = __webpack_require__(/*! ../util/decode_encode_muxed_account */ \"(ssr)/./node_modules/@stellar/stellar-base/lib/util/decode_encode_muxed_account.js\");\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { \"default\": e }; }\n/**\n * Creates a clawback operation.\n *\n * @function\n * @alias Operation.clawback\n *\n * @param {object} opts - Options object\n * @param {Asset}  opts.asset   - The asset being clawed back.\n * @param {string} opts.amount  - The amount of the asset to claw back.\n * @param {string} opts.from    - The public key of the (optionally-muxed)\n *     account to claw back from.\n *\n * @param {string} [opts.source] - The source account for the operation.\n *     Defaults to the transaction's source account.\n *\n * @return {xdr.ClawbackOp}\n *\n * @see https://github.com/stellar/stellar-protocol/blob/master/core/cap-0035.md#clawback-operation\n */\nfunction clawback(opts) {\n  var attributes = {};\n  if (!this.isValidAmount(opts.amount)) {\n    throw new TypeError(this.constructAmountRequirementsError('amount'));\n  }\n  attributes.amount = this._toXDRAmount(opts.amount);\n  attributes.asset = opts.asset.toXDRObject();\n  try {\n    attributes.from = (0, _decode_encode_muxed_account.decodeAddressToMuxedAccount)(opts.from);\n  } catch (e) {\n    throw new Error('from address is invalid');\n  }\n  var opAttributes = {\n    body: _xdr[\"default\"].OperationBody.clawback(new _xdr[\"default\"].ClawbackOp(attributes))\n  };\n  this.setSourceAccount(opAttributes, opts);\n  return new _xdr[\"default\"].Operation(opAttributes);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHN0ZWxsYXIvc3RlbGxhci1iYXNlL2xpYi9vcGVyYXRpb25zL2NsYXdiYWNrLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLDhDQUE2QztBQUM3QztBQUNBLENBQUMsRUFBQztBQUNGLGdCQUFnQjtBQUNoQixrQ0FBa0MsbUJBQU8sQ0FBQyxxRUFBUTtBQUNsRCxtQ0FBbUMsbUJBQU8sQ0FBQywrSEFBcUM7QUFDaEYscUNBQXFDLGlDQUFpQztBQUN0RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFFBQVE7QUFDbkIsV0FBVyxRQUFRO0FBQ25CLFdBQVcsUUFBUTtBQUNuQixXQUFXLFFBQVE7QUFDbkI7QUFDQTtBQUNBLFdBQVcsUUFBUTtBQUNuQjtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXFVTVUFSSU9cXERvY3VtZW50c1xcR2l0aHViXFxHYWxheHlLSi13YWxsZXQtLS1IYWNrXFx3ZWJcXG5vZGVfbW9kdWxlc1xcQHN0ZWxsYXJcXHN0ZWxsYXItYmFzZVxcbGliXFxvcGVyYXRpb25zXFxjbGF3YmFjay5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuY2xhd2JhY2sgPSBjbGF3YmFjaztcbnZhciBfeGRyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4veGRyXCIpKTtcbnZhciBfZGVjb2RlX2VuY29kZV9tdXhlZF9hY2NvdW50ID0gcmVxdWlyZShcIi4uL3V0aWwvZGVjb2RlX2VuY29kZV9tdXhlZF9hY2NvdW50XCIpO1xuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChlKSB7IHJldHVybiBlICYmIGUuX19lc01vZHVsZSA/IGUgOiB7IFwiZGVmYXVsdFwiOiBlIH07IH1cbi8qKlxuICogQ3JlYXRlcyBhIGNsYXdiYWNrIG9wZXJhdGlvbi5cbiAqXG4gKiBAZnVuY3Rpb25cbiAqIEBhbGlhcyBPcGVyYXRpb24uY2xhd2JhY2tcbiAqXG4gKiBAcGFyYW0ge29iamVjdH0gb3B0cyAtIE9wdGlvbnMgb2JqZWN0XG4gKiBAcGFyYW0ge0Fzc2V0fSAgb3B0cy5hc3NldCAgIC0gVGhlIGFzc2V0IGJlaW5nIGNsYXdlZCBiYWNrLlxuICogQHBhcmFtIHtzdHJpbmd9IG9wdHMuYW1vdW50ICAtIFRoZSBhbW91bnQgb2YgdGhlIGFzc2V0IHRvIGNsYXcgYmFjay5cbiAqIEBwYXJhbSB7c3RyaW5nfSBvcHRzLmZyb20gICAgLSBUaGUgcHVibGljIGtleSBvZiB0aGUgKG9wdGlvbmFsbHktbXV4ZWQpXG4gKiAgICAgYWNjb3VudCB0byBjbGF3IGJhY2sgZnJvbS5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gW29wdHMuc291cmNlXSAtIFRoZSBzb3VyY2UgYWNjb3VudCBmb3IgdGhlIG9wZXJhdGlvbi5cbiAqICAgICBEZWZhdWx0cyB0byB0aGUgdHJhbnNhY3Rpb24ncyBzb3VyY2UgYWNjb3VudC5cbiAqXG4gKiBAcmV0dXJuIHt4ZHIuQ2xhd2JhY2tPcH1cbiAqXG4gKiBAc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9zdGVsbGFyL3N0ZWxsYXItcHJvdG9jb2wvYmxvYi9tYXN0ZXIvY29yZS9jYXAtMDAzNS5tZCNjbGF3YmFjay1vcGVyYXRpb25cbiAqL1xuZnVuY3Rpb24gY2xhd2JhY2sob3B0cykge1xuICB2YXIgYXR0cmlidXRlcyA9IHt9O1xuICBpZiAoIXRoaXMuaXNWYWxpZEFtb3VudChvcHRzLmFtb3VudCkpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKHRoaXMuY29uc3RydWN0QW1vdW50UmVxdWlyZW1lbnRzRXJyb3IoJ2Ftb3VudCcpKTtcbiAgfVxuICBhdHRyaWJ1dGVzLmFtb3VudCA9IHRoaXMuX3RvWERSQW1vdW50KG9wdHMuYW1vdW50KTtcbiAgYXR0cmlidXRlcy5hc3NldCA9IG9wdHMuYXNzZXQudG9YRFJPYmplY3QoKTtcbiAgdHJ5IHtcbiAgICBhdHRyaWJ1dGVzLmZyb20gPSAoMCwgX2RlY29kZV9lbmNvZGVfbXV4ZWRfYWNjb3VudC5kZWNvZGVBZGRyZXNzVG9NdXhlZEFjY291bnQpKG9wdHMuZnJvbSk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2Zyb20gYWRkcmVzcyBpcyBpbnZhbGlkJyk7XG4gIH1cbiAgdmFyIG9wQXR0cmlidXRlcyA9IHtcbiAgICBib2R5OiBfeGRyW1wiZGVmYXVsdFwiXS5PcGVyYXRpb25Cb2R5LmNsYXdiYWNrKG5ldyBfeGRyW1wiZGVmYXVsdFwiXS5DbGF3YmFja09wKGF0dHJpYnV0ZXMpKVxuICB9O1xuICB0aGlzLnNldFNvdXJjZUFjY291bnQob3BBdHRyaWJ1dGVzLCBvcHRzKTtcbiAgcmV0dXJuIG5ldyBfeGRyW1wiZGVmYXVsdFwiXS5PcGVyYXRpb24ob3BBdHRyaWJ1dGVzKTtcbn0iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@stellar/stellar-base/lib/operations/clawback.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@stellar/stellar-base/lib/operations/clawback_claimable_balance.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/@stellar/stellar-base/lib/operations/clawback_claimable_balance.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.clawbackClaimableBalance = clawbackClaimableBalance;\nvar _xdr = _interopRequireDefault(__webpack_require__(/*! ../xdr */ \"(ssr)/./node_modules/@stellar/stellar-base/lib/xdr.js\"));\nvar _claim_claimable_balance = __webpack_require__(/*! ./claim_claimable_balance */ \"(ssr)/./node_modules/@stellar/stellar-base/lib/operations/claim_claimable_balance.js\");\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { \"default\": e }; }\n/**\n * Creates a clawback operation for a claimable balance.\n *\n * @function\n * @alias Operation.clawbackClaimableBalance\n * @param {object} opts - Options object\n * @param {string} opts.balanceId - The claimable balance ID to be clawed back.\n * @param {string} [opts.source] - The source account for the operation. Defaults to the transaction's source account.\n *\n * @return {xdr.ClawbackClaimableBalanceOp}\n *\n * @example\n * const op = Operation.clawbackClaimableBalance({\n *   balanceId: '00000000da0d57da7d4850e7fc10d2a9d0ebc731f7afb40574c03395b17d49149b91f5be',\n * });\n *\n * @link https://github.com/stellar/stellar-protocol/blob/master/core/cap-0035.md#clawback-claimable-balance-operation\n */\nfunction clawbackClaimableBalance() {\n  var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  (0, _claim_claimable_balance.validateClaimableBalanceId)(opts.balanceId);\n  var attributes = {\n    balanceId: _xdr[\"default\"].ClaimableBalanceId.fromXDR(opts.balanceId, 'hex')\n  };\n  var opAttributes = {\n    body: _xdr[\"default\"].OperationBody.clawbackClaimableBalance(new _xdr[\"default\"].ClawbackClaimableBalanceOp(attributes))\n  };\n  this.setSourceAccount(opAttributes, opts);\n  return new _xdr[\"default\"].Operation(opAttributes);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHN0ZWxsYXIvc3RlbGxhci1iYXNlL2xpYi9vcGVyYXRpb25zL2NsYXdiYWNrX2NsYWltYWJsZV9iYWxhbmNlLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLDhDQUE2QztBQUM3QztBQUNBLENBQUMsRUFBQztBQUNGLGdDQUFnQztBQUNoQyxrQ0FBa0MsbUJBQU8sQ0FBQyxxRUFBUTtBQUNsRCwrQkFBK0IsbUJBQU8sQ0FBQyx1SEFBMkI7QUFDbEUscUNBQXFDLGlDQUFpQztBQUN0RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CLFdBQVcsUUFBUTtBQUNuQixXQUFXLFFBQVE7QUFDbkI7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXFVTVUFSSU9cXERvY3VtZW50c1xcR2l0aHViXFxHYWxheHlLSi13YWxsZXQtLS1IYWNrXFx3ZWJcXG5vZGVfbW9kdWxlc1xcQHN0ZWxsYXJcXHN0ZWxsYXItYmFzZVxcbGliXFxvcGVyYXRpb25zXFxjbGF3YmFja19jbGFpbWFibGVfYmFsYW5jZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuY2xhd2JhY2tDbGFpbWFibGVCYWxhbmNlID0gY2xhd2JhY2tDbGFpbWFibGVCYWxhbmNlO1xudmFyIF94ZHIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi94ZHJcIikpO1xudmFyIF9jbGFpbV9jbGFpbWFibGVfYmFsYW5jZSA9IHJlcXVpcmUoXCIuL2NsYWltX2NsYWltYWJsZV9iYWxhbmNlXCIpO1xuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChlKSB7IHJldHVybiBlICYmIGUuX19lc01vZHVsZSA/IGUgOiB7IFwiZGVmYXVsdFwiOiBlIH07IH1cbi8qKlxuICogQ3JlYXRlcyBhIGNsYXdiYWNrIG9wZXJhdGlvbiBmb3IgYSBjbGFpbWFibGUgYmFsYW5jZS5cbiAqXG4gKiBAZnVuY3Rpb25cbiAqIEBhbGlhcyBPcGVyYXRpb24uY2xhd2JhY2tDbGFpbWFibGVCYWxhbmNlXG4gKiBAcGFyYW0ge29iamVjdH0gb3B0cyAtIE9wdGlvbnMgb2JqZWN0XG4gKiBAcGFyYW0ge3N0cmluZ30gb3B0cy5iYWxhbmNlSWQgLSBUaGUgY2xhaW1hYmxlIGJhbGFuY2UgSUQgdG8gYmUgY2xhd2VkIGJhY2suXG4gKiBAcGFyYW0ge3N0cmluZ30gW29wdHMuc291cmNlXSAtIFRoZSBzb3VyY2UgYWNjb3VudCBmb3IgdGhlIG9wZXJhdGlvbi4gRGVmYXVsdHMgdG8gdGhlIHRyYW5zYWN0aW9uJ3Mgc291cmNlIGFjY291bnQuXG4gKlxuICogQHJldHVybiB7eGRyLkNsYXdiYWNrQ2xhaW1hYmxlQmFsYW5jZU9wfVxuICpcbiAqIEBleGFtcGxlXG4gKiBjb25zdCBvcCA9IE9wZXJhdGlvbi5jbGF3YmFja0NsYWltYWJsZUJhbGFuY2Uoe1xuICogICBiYWxhbmNlSWQ6ICcwMDAwMDAwMGRhMGQ1N2RhN2Q0ODUwZTdmYzEwZDJhOWQwZWJjNzMxZjdhZmI0MDU3NGMwMzM5NWIxN2Q0OTE0OWI5MWY1YmUnLFxuICogfSk7XG4gKlxuICogQGxpbmsgaHR0cHM6Ly9naXRodWIuY29tL3N0ZWxsYXIvc3RlbGxhci1wcm90b2NvbC9ibG9iL21hc3Rlci9jb3JlL2NhcC0wMDM1Lm1kI2NsYXdiYWNrLWNsYWltYWJsZS1iYWxhbmNlLW9wZXJhdGlvblxuICovXG5mdW5jdGlvbiBjbGF3YmFja0NsYWltYWJsZUJhbGFuY2UoKSB7XG4gIHZhciBvcHRzID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fTtcbiAgKDAsIF9jbGFpbV9jbGFpbWFibGVfYmFsYW5jZS52YWxpZGF0ZUNsYWltYWJsZUJhbGFuY2VJZCkob3B0cy5iYWxhbmNlSWQpO1xuICB2YXIgYXR0cmlidXRlcyA9IHtcbiAgICBiYWxhbmNlSWQ6IF94ZHJbXCJkZWZhdWx0XCJdLkNsYWltYWJsZUJhbGFuY2VJZC5mcm9tWERSKG9wdHMuYmFsYW5jZUlkLCAnaGV4JylcbiAgfTtcbiAgdmFyIG9wQXR0cmlidXRlcyA9IHtcbiAgICBib2R5OiBfeGRyW1wiZGVmYXVsdFwiXS5PcGVyYXRpb25Cb2R5LmNsYXdiYWNrQ2xhaW1hYmxlQmFsYW5jZShuZXcgX3hkcltcImRlZmF1bHRcIl0uQ2xhd2JhY2tDbGFpbWFibGVCYWxhbmNlT3AoYXR0cmlidXRlcykpXG4gIH07XG4gIHRoaXMuc2V0U291cmNlQWNjb3VudChvcEF0dHJpYnV0ZXMsIG9wdHMpO1xuICByZXR1cm4gbmV3IF94ZHJbXCJkZWZhdWx0XCJdLk9wZXJhdGlvbihvcEF0dHJpYnV0ZXMpO1xufSJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@stellar/stellar-base/lib/operations/clawback_claimable_balance.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@stellar/stellar-base/lib/operations/create_account.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@stellar/stellar-base/lib/operations/create_account.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.createAccount = createAccount;\nvar _xdr = _interopRequireDefault(__webpack_require__(/*! ../xdr */ \"(ssr)/./node_modules/@stellar/stellar-base/lib/xdr.js\"));\nvar _keypair = __webpack_require__(/*! ../keypair */ \"(ssr)/./node_modules/@stellar/stellar-base/lib/keypair.js\");\nvar _strkey = __webpack_require__(/*! ../strkey */ \"(ssr)/./node_modules/@stellar/stellar-base/lib/strkey.js\");\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { \"default\": e }; }\n/**\n * Create and fund a non existent account.\n * @function\n * @alias Operation.createAccount\n * @param {object} opts Options object\n * @param {string} opts.destination - Destination account ID to create an account for.\n * @param {string} opts.startingBalance - Amount in XLM the account should be funded for. Must be greater\n *                                   than the [reserve balance amount](https://developers.stellar.org/docs/glossary/fees/).\n * @param {string} [opts.source] - The source account for the payment. Defaults to the transaction's source account.\n * @returns {xdr.CreateAccountOp} Create account operation\n */\nfunction createAccount(opts) {\n  if (!_strkey.StrKey.isValidEd25519PublicKey(opts.destination)) {\n    throw new Error('destination is invalid');\n  }\n  if (!this.isValidAmount(opts.startingBalance, true)) {\n    throw new TypeError(this.constructAmountRequirementsError('startingBalance'));\n  }\n  var attributes = {};\n  attributes.destination = _keypair.Keypair.fromPublicKey(opts.destination).xdrAccountId();\n  attributes.startingBalance = this._toXDRAmount(opts.startingBalance);\n  var createAccountOp = new _xdr[\"default\"].CreateAccountOp(attributes);\n  var opAttributes = {};\n  opAttributes.body = _xdr[\"default\"].OperationBody.createAccount(createAccountOp);\n  this.setSourceAccount(opAttributes, opts);\n  return new _xdr[\"default\"].Operation(opAttributes);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHN0ZWxsYXIvc3RlbGxhci1iYXNlL2xpYi9vcGVyYXRpb25zL2NyZWF0ZV9hY2NvdW50LmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLDhDQUE2QztBQUM3QztBQUNBLENBQUMsRUFBQztBQUNGLHFCQUFxQjtBQUNyQixrQ0FBa0MsbUJBQU8sQ0FBQyxxRUFBUTtBQUNsRCxlQUFlLG1CQUFPLENBQUMsNkVBQVk7QUFDbkMsY0FBYyxtQkFBTyxDQUFDLDJFQUFXO0FBQ2pDLHFDQUFxQyxpQ0FBaUM7QUFDdEU7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFFBQVE7QUFDbkIsV0FBVyxRQUFRO0FBQ25CLFdBQVcsUUFBUTtBQUNuQjtBQUNBLFdBQVcsUUFBUTtBQUNuQixhQUFhLHFCQUFxQjtBQUNsQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXFVTVUFSSU9cXERvY3VtZW50c1xcR2l0aHViXFxHYWxheHlLSi13YWxsZXQtLS1IYWNrXFx3ZWJcXG5vZGVfbW9kdWxlc1xcQHN0ZWxsYXJcXHN0ZWxsYXItYmFzZVxcbGliXFxvcGVyYXRpb25zXFxjcmVhdGVfYWNjb3VudC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuY3JlYXRlQWNjb3VudCA9IGNyZWF0ZUFjY291bnQ7XG52YXIgX3hkciA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL3hkclwiKSk7XG52YXIgX2tleXBhaXIgPSByZXF1aXJlKFwiLi4va2V5cGFpclwiKTtcbnZhciBfc3Rya2V5ID0gcmVxdWlyZShcIi4uL3N0cmtleVwiKTtcbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoZSkgeyByZXR1cm4gZSAmJiBlLl9fZXNNb2R1bGUgPyBlIDogeyBcImRlZmF1bHRcIjogZSB9OyB9XG4vKipcbiAqIENyZWF0ZSBhbmQgZnVuZCBhIG5vbiBleGlzdGVudCBhY2NvdW50LlxuICogQGZ1bmN0aW9uXG4gKiBAYWxpYXMgT3BlcmF0aW9uLmNyZWF0ZUFjY291bnRcbiAqIEBwYXJhbSB7b2JqZWN0fSBvcHRzIE9wdGlvbnMgb2JqZWN0XG4gKiBAcGFyYW0ge3N0cmluZ30gb3B0cy5kZXN0aW5hdGlvbiAtIERlc3RpbmF0aW9uIGFjY291bnQgSUQgdG8gY3JlYXRlIGFuIGFjY291bnQgZm9yLlxuICogQHBhcmFtIHtzdHJpbmd9IG9wdHMuc3RhcnRpbmdCYWxhbmNlIC0gQW1vdW50IGluIFhMTSB0aGUgYWNjb3VudCBzaG91bGQgYmUgZnVuZGVkIGZvci4gTXVzdCBiZSBncmVhdGVyXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhhbiB0aGUgW3Jlc2VydmUgYmFsYW5jZSBhbW91bnRdKGh0dHBzOi8vZGV2ZWxvcGVycy5zdGVsbGFyLm9yZy9kb2NzL2dsb3NzYXJ5L2ZlZXMvKS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0cy5zb3VyY2VdIC0gVGhlIHNvdXJjZSBhY2NvdW50IGZvciB0aGUgcGF5bWVudC4gRGVmYXVsdHMgdG8gdGhlIHRyYW5zYWN0aW9uJ3Mgc291cmNlIGFjY291bnQuXG4gKiBAcmV0dXJucyB7eGRyLkNyZWF0ZUFjY291bnRPcH0gQ3JlYXRlIGFjY291bnQgb3BlcmF0aW9uXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUFjY291bnQob3B0cykge1xuICBpZiAoIV9zdHJrZXkuU3RyS2V5LmlzVmFsaWRFZDI1NTE5UHVibGljS2V5KG9wdHMuZGVzdGluYXRpb24pKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdkZXN0aW5hdGlvbiBpcyBpbnZhbGlkJyk7XG4gIH1cbiAgaWYgKCF0aGlzLmlzVmFsaWRBbW91bnQob3B0cy5zdGFydGluZ0JhbGFuY2UsIHRydWUpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcih0aGlzLmNvbnN0cnVjdEFtb3VudFJlcXVpcmVtZW50c0Vycm9yKCdzdGFydGluZ0JhbGFuY2UnKSk7XG4gIH1cbiAgdmFyIGF0dHJpYnV0ZXMgPSB7fTtcbiAgYXR0cmlidXRlcy5kZXN0aW5hdGlvbiA9IF9rZXlwYWlyLktleXBhaXIuZnJvbVB1YmxpY0tleShvcHRzLmRlc3RpbmF0aW9uKS54ZHJBY2NvdW50SWQoKTtcbiAgYXR0cmlidXRlcy5zdGFydGluZ0JhbGFuY2UgPSB0aGlzLl90b1hEUkFtb3VudChvcHRzLnN0YXJ0aW5nQmFsYW5jZSk7XG4gIHZhciBjcmVhdGVBY2NvdW50T3AgPSBuZXcgX3hkcltcImRlZmF1bHRcIl0uQ3JlYXRlQWNjb3VudE9wKGF0dHJpYnV0ZXMpO1xuICB2YXIgb3BBdHRyaWJ1dGVzID0ge307XG4gIG9wQXR0cmlidXRlcy5ib2R5ID0gX3hkcltcImRlZmF1bHRcIl0uT3BlcmF0aW9uQm9keS5jcmVhdGVBY2NvdW50KGNyZWF0ZUFjY291bnRPcCk7XG4gIHRoaXMuc2V0U291cmNlQWNjb3VudChvcEF0dHJpYnV0ZXMsIG9wdHMpO1xuICByZXR1cm4gbmV3IF94ZHJbXCJkZWZhdWx0XCJdLk9wZXJhdGlvbihvcEF0dHJpYnV0ZXMpO1xufSJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@stellar/stellar-base/lib/operations/create_account.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@stellar/stellar-base/lib/operations/create_claimable_balance.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/@stellar/stellar-base/lib/operations/create_claimable_balance.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.createClaimableBalance = createClaimableBalance;\nvar _xdr = _interopRequireDefault(__webpack_require__(/*! ../xdr */ \"(ssr)/./node_modules/@stellar/stellar-base/lib/xdr.js\"));\nvar _asset = __webpack_require__(/*! ../asset */ \"(ssr)/./node_modules/@stellar/stellar-base/lib/asset.js\");\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { \"default\": e }; }\n/**\n * Create a new claimable balance operation.\n *\n * @function\n * @alias Operation.createClaimableBalance\n *\n * @param {object} opts Options object\n * @param {Asset} opts.asset - The asset for the claimable balance.\n * @param {string} opts.amount - Amount.\n * @param {Claimant[]} opts.claimants - An array of Claimants\n * @param {string} [opts.source] - The source account for the operation. Defaults to the transaction's source account.\n *\n * @returns {xdr.Operation} Create claimable balance operation\n *\n * @example\n * const asset = new Asset(\n *   'USD',\n *   'GDGU5OAPHNPU5UCLE5RDJHG7PXZFQYWKCFOEXSXNMR6KRQRI5T6XXCD7'\n * );\n * const amount = '100.0000000';\n * const claimants = [\n *   new Claimant(\n *     'GCEZWKCA5VLDNRLN3RPRJMRZOX3Z6G5CHCGSNFHEYVXM3XOJMDS674JZ',\n *      Claimant.predicateBeforeAbsoluteTime(\"4102444800000\")\n *   )\n * ];\n *\n * const op = Operation.createClaimableBalance({\n *   asset,\n *   amount,\n *   claimants\n * });\n *\n */\nfunction createClaimableBalance(opts) {\n  if (!(opts.asset instanceof _asset.Asset)) {\n    throw new Error('must provide an asset for create claimable balance operation');\n  }\n  if (!this.isValidAmount(opts.amount)) {\n    throw new TypeError(this.constructAmountRequirementsError('amount'));\n  }\n  if (!Array.isArray(opts.claimants) || opts.claimants.length === 0) {\n    throw new Error('must provide at least one claimant');\n  }\n  var attributes = {};\n  attributes.asset = opts.asset.toXDRObject();\n  attributes.amount = this._toXDRAmount(opts.amount);\n  attributes.claimants = Object.values(opts.claimants).map(function (c) {\n    return c.toXDRObject();\n  });\n  var createClaimableBalanceOp = new _xdr[\"default\"].CreateClaimableBalanceOp(attributes);\n  var opAttributes = {};\n  opAttributes.body = _xdr[\"default\"].OperationBody.createClaimableBalance(createClaimableBalanceOp);\n  this.setSourceAccount(opAttributes, opts);\n  return new _xdr[\"default\"].Operation(opAttributes);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHN0ZWxsYXIvc3RlbGxhci1iYXNlL2xpYi9vcGVyYXRpb25zL2NyZWF0ZV9jbGFpbWFibGVfYmFsYW5jZS5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYiw4Q0FBNkM7QUFDN0M7QUFDQSxDQUFDLEVBQUM7QUFDRiw4QkFBOEI7QUFDOUIsa0NBQWtDLG1CQUFPLENBQUMscUVBQVE7QUFDbEQsYUFBYSxtQkFBTyxDQUFDLHlFQUFVO0FBQy9CLHFDQUFxQyxpQ0FBaUM7QUFDdEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CLFdBQVcsT0FBTztBQUNsQixXQUFXLFFBQVE7QUFDbkIsV0FBVyxZQUFZO0FBQ3ZCLFdBQVcsUUFBUTtBQUNuQjtBQUNBLGFBQWEsZUFBZTtBQUM1QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcVVNVQVJJT1xcRG9jdW1lbnRzXFxHaXRodWJcXEdhbGF4eUtKLXdhbGxldC0tLUhhY2tcXHdlYlxcbm9kZV9tb2R1bGVzXFxAc3RlbGxhclxcc3RlbGxhci1iYXNlXFxsaWJcXG9wZXJhdGlvbnNcXGNyZWF0ZV9jbGFpbWFibGVfYmFsYW5jZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuY3JlYXRlQ2xhaW1hYmxlQmFsYW5jZSA9IGNyZWF0ZUNsYWltYWJsZUJhbGFuY2U7XG52YXIgX3hkciA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL3hkclwiKSk7XG52YXIgX2Fzc2V0ID0gcmVxdWlyZShcIi4uL2Fzc2V0XCIpO1xuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChlKSB7IHJldHVybiBlICYmIGUuX19lc01vZHVsZSA/IGUgOiB7IFwiZGVmYXVsdFwiOiBlIH07IH1cbi8qKlxuICogQ3JlYXRlIGEgbmV3IGNsYWltYWJsZSBiYWxhbmNlIG9wZXJhdGlvbi5cbiAqXG4gKiBAZnVuY3Rpb25cbiAqIEBhbGlhcyBPcGVyYXRpb24uY3JlYXRlQ2xhaW1hYmxlQmFsYW5jZVxuICpcbiAqIEBwYXJhbSB7b2JqZWN0fSBvcHRzIE9wdGlvbnMgb2JqZWN0XG4gKiBAcGFyYW0ge0Fzc2V0fSBvcHRzLmFzc2V0IC0gVGhlIGFzc2V0IGZvciB0aGUgY2xhaW1hYmxlIGJhbGFuY2UuXG4gKiBAcGFyYW0ge3N0cmluZ30gb3B0cy5hbW91bnQgLSBBbW91bnQuXG4gKiBAcGFyYW0ge0NsYWltYW50W119IG9wdHMuY2xhaW1hbnRzIC0gQW4gYXJyYXkgb2YgQ2xhaW1hbnRzXG4gKiBAcGFyYW0ge3N0cmluZ30gW29wdHMuc291cmNlXSAtIFRoZSBzb3VyY2UgYWNjb3VudCBmb3IgdGhlIG9wZXJhdGlvbi4gRGVmYXVsdHMgdG8gdGhlIHRyYW5zYWN0aW9uJ3Mgc291cmNlIGFjY291bnQuXG4gKlxuICogQHJldHVybnMge3hkci5PcGVyYXRpb259IENyZWF0ZSBjbGFpbWFibGUgYmFsYW5jZSBvcGVyYXRpb25cbiAqXG4gKiBAZXhhbXBsZVxuICogY29uc3QgYXNzZXQgPSBuZXcgQXNzZXQoXG4gKiAgICdVU0QnLFxuICogICAnR0RHVTVPQVBITlBVNVVDTEU1UkRKSEc3UFhaRlFZV0tDRk9FWFNYTk1SNktSUVJJNVQ2WFhDRDcnXG4gKiApO1xuICogY29uc3QgYW1vdW50ID0gJzEwMC4wMDAwMDAwJztcbiAqIGNvbnN0IGNsYWltYW50cyA9IFtcbiAqICAgbmV3IENsYWltYW50KFxuICogICAgICdHQ0VaV0tDQTVWTEROUkxOM1JQUkpNUlpPWDNaNkc1Q0hDR1NORkhFWVZYTTNYT0pNRFM2NzRKWicsXG4gKiAgICAgIENsYWltYW50LnByZWRpY2F0ZUJlZm9yZUFic29sdXRlVGltZShcIjQxMDI0NDQ4MDAwMDBcIilcbiAqICAgKVxuICogXTtcbiAqXG4gKiBjb25zdCBvcCA9IE9wZXJhdGlvbi5jcmVhdGVDbGFpbWFibGVCYWxhbmNlKHtcbiAqICAgYXNzZXQsXG4gKiAgIGFtb3VudCxcbiAqICAgY2xhaW1hbnRzXG4gKiB9KTtcbiAqXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUNsYWltYWJsZUJhbGFuY2Uob3B0cykge1xuICBpZiAoIShvcHRzLmFzc2V0IGluc3RhbmNlb2YgX2Fzc2V0LkFzc2V0KSkge1xuICAgIHRocm93IG5ldyBFcnJvcignbXVzdCBwcm92aWRlIGFuIGFzc2V0IGZvciBjcmVhdGUgY2xhaW1hYmxlIGJhbGFuY2Ugb3BlcmF0aW9uJyk7XG4gIH1cbiAgaWYgKCF0aGlzLmlzVmFsaWRBbW91bnQob3B0cy5hbW91bnQpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcih0aGlzLmNvbnN0cnVjdEFtb3VudFJlcXVpcmVtZW50c0Vycm9yKCdhbW91bnQnKSk7XG4gIH1cbiAgaWYgKCFBcnJheS5pc0FycmF5KG9wdHMuY2xhaW1hbnRzKSB8fCBvcHRzLmNsYWltYW50cy5sZW5ndGggPT09IDApIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ211c3QgcHJvdmlkZSBhdCBsZWFzdCBvbmUgY2xhaW1hbnQnKTtcbiAgfVxuICB2YXIgYXR0cmlidXRlcyA9IHt9O1xuICBhdHRyaWJ1dGVzLmFzc2V0ID0gb3B0cy5hc3NldC50b1hEUk9iamVjdCgpO1xuICBhdHRyaWJ1dGVzLmFtb3VudCA9IHRoaXMuX3RvWERSQW1vdW50KG9wdHMuYW1vdW50KTtcbiAgYXR0cmlidXRlcy5jbGFpbWFudHMgPSBPYmplY3QudmFsdWVzKG9wdHMuY2xhaW1hbnRzKS5tYXAoZnVuY3Rpb24gKGMpIHtcbiAgICByZXR1cm4gYy50b1hEUk9iamVjdCgpO1xuICB9KTtcbiAgdmFyIGNyZWF0ZUNsYWltYWJsZUJhbGFuY2VPcCA9IG5ldyBfeGRyW1wiZGVmYXVsdFwiXS5DcmVhdGVDbGFpbWFibGVCYWxhbmNlT3AoYXR0cmlidXRlcyk7XG4gIHZhciBvcEF0dHJpYnV0ZXMgPSB7fTtcbiAgb3BBdHRyaWJ1dGVzLmJvZHkgPSBfeGRyW1wiZGVmYXVsdFwiXS5PcGVyYXRpb25Cb2R5LmNyZWF0ZUNsYWltYWJsZUJhbGFuY2UoY3JlYXRlQ2xhaW1hYmxlQmFsYW5jZU9wKTtcbiAgdGhpcy5zZXRTb3VyY2VBY2NvdW50KG9wQXR0cmlidXRlcywgb3B0cyk7XG4gIHJldHVybiBuZXcgX3hkcltcImRlZmF1bHRcIl0uT3BlcmF0aW9uKG9wQXR0cmlidXRlcyk7XG59Il0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@stellar/stellar-base/lib/operations/create_claimable_balance.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@stellar/stellar-base/lib/operations/create_passive_sell_offer.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/@stellar/stellar-base/lib/operations/create_passive_sell_offer.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.createPassiveSellOffer = createPassiveSellOffer;\nvar _xdr = _interopRequireDefault(__webpack_require__(/*! ../xdr */ \"(ssr)/./node_modules/@stellar/stellar-base/lib/xdr.js\"));\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { \"default\": e }; }\n/**\n * Returns a XDR CreatePasiveSellOfferOp. A \"create passive offer\" operation creates an\n * offer that won't consume a counter offer that exactly matches this offer. This is\n * useful for offers just used as 1:1 exchanges for path payments. Use manage offer\n * to manage this offer after using this operation to create it.\n * @function\n * @alias Operation.createPassiveSellOffer\n * @param {object} opts Options object\n * @param {Asset} opts.selling - What you're selling.\n * @param {Asset} opts.buying - What you're buying.\n * @param {string} opts.amount - The total amount you're selling. If 0, deletes the offer.\n * @param {number|string|BigNumber|Object} opts.price - Price of 1 unit of `selling` in terms of `buying`.\n * @param {number} opts.price.n - If `opts.price` is an object: the price numerator\n * @param {number} opts.price.d - If `opts.price` is an object: the price denominator\n * @param {string} [opts.source] - The source account (defaults to transaction source).\n * @throws {Error} Throws `Error` when the best rational approximation of `price` cannot be found.\n * @returns {xdr.CreatePassiveSellOfferOp} Create Passive Sell Offer operation\n */\nfunction createPassiveSellOffer(opts) {\n  var attributes = {};\n  attributes.selling = opts.selling.toXDRObject();\n  attributes.buying = opts.buying.toXDRObject();\n  if (!this.isValidAmount(opts.amount)) {\n    throw new TypeError(this.constructAmountRequirementsError('amount'));\n  }\n  attributes.amount = this._toXDRAmount(opts.amount);\n  if (opts.price === undefined) {\n    throw new TypeError('price argument is required');\n  }\n  attributes.price = this._toXDRPrice(opts.price);\n  var createPassiveSellOfferOp = new _xdr[\"default\"].CreatePassiveSellOfferOp(attributes);\n  var opAttributes = {};\n  opAttributes.body = _xdr[\"default\"].OperationBody.createPassiveSellOffer(createPassiveSellOfferOp);\n  this.setSourceAccount(opAttributes, opts);\n  return new _xdr[\"default\"].Operation(opAttributes);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHN0ZWxsYXIvc3RlbGxhci1iYXNlL2xpYi9vcGVyYXRpb25zL2NyZWF0ZV9wYXNzaXZlX3NlbGxfb2ZmZXIuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsOENBQTZDO0FBQzdDO0FBQ0EsQ0FBQyxFQUFDO0FBQ0YsOEJBQThCO0FBQzlCLGtDQUFrQyxtQkFBTyxDQUFDLHFFQUFRO0FBQ2xELHFDQUFxQyxpQ0FBaUM7QUFDdEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFFBQVE7QUFDbkIsV0FBVyxPQUFPO0FBQ2xCLFdBQVcsT0FBTztBQUNsQixXQUFXLFFBQVE7QUFDbkIsV0FBVyxnQ0FBZ0M7QUFDM0MsV0FBVyxRQUFRO0FBQ25CLFdBQVcsUUFBUTtBQUNuQixXQUFXLFFBQVE7QUFDbkIsWUFBWSxPQUFPO0FBQ25CLGFBQWEsOEJBQThCO0FBQzNDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXFVTVUFSSU9cXERvY3VtZW50c1xcR2l0aHViXFxHYWxheHlLSi13YWxsZXQtLS1IYWNrXFx3ZWJcXG5vZGVfbW9kdWxlc1xcQHN0ZWxsYXJcXHN0ZWxsYXItYmFzZVxcbGliXFxvcGVyYXRpb25zXFxjcmVhdGVfcGFzc2l2ZV9zZWxsX29mZmVyLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5jcmVhdGVQYXNzaXZlU2VsbE9mZmVyID0gY3JlYXRlUGFzc2l2ZVNlbGxPZmZlcjtcbnZhciBfeGRyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4veGRyXCIpKTtcbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoZSkgeyByZXR1cm4gZSAmJiBlLl9fZXNNb2R1bGUgPyBlIDogeyBcImRlZmF1bHRcIjogZSB9OyB9XG4vKipcbiAqIFJldHVybnMgYSBYRFIgQ3JlYXRlUGFzaXZlU2VsbE9mZmVyT3AuIEEgXCJjcmVhdGUgcGFzc2l2ZSBvZmZlclwiIG9wZXJhdGlvbiBjcmVhdGVzIGFuXG4gKiBvZmZlciB0aGF0IHdvbid0IGNvbnN1bWUgYSBjb3VudGVyIG9mZmVyIHRoYXQgZXhhY3RseSBtYXRjaGVzIHRoaXMgb2ZmZXIuIFRoaXMgaXNcbiAqIHVzZWZ1bCBmb3Igb2ZmZXJzIGp1c3QgdXNlZCBhcyAxOjEgZXhjaGFuZ2VzIGZvciBwYXRoIHBheW1lbnRzLiBVc2UgbWFuYWdlIG9mZmVyXG4gKiB0byBtYW5hZ2UgdGhpcyBvZmZlciBhZnRlciB1c2luZyB0aGlzIG9wZXJhdGlvbiB0byBjcmVhdGUgaXQuXG4gKiBAZnVuY3Rpb25cbiAqIEBhbGlhcyBPcGVyYXRpb24uY3JlYXRlUGFzc2l2ZVNlbGxPZmZlclxuICogQHBhcmFtIHtvYmplY3R9IG9wdHMgT3B0aW9ucyBvYmplY3RcbiAqIEBwYXJhbSB7QXNzZXR9IG9wdHMuc2VsbGluZyAtIFdoYXQgeW91J3JlIHNlbGxpbmcuXG4gKiBAcGFyYW0ge0Fzc2V0fSBvcHRzLmJ1eWluZyAtIFdoYXQgeW91J3JlIGJ1eWluZy5cbiAqIEBwYXJhbSB7c3RyaW5nfSBvcHRzLmFtb3VudCAtIFRoZSB0b3RhbCBhbW91bnQgeW91J3JlIHNlbGxpbmcuIElmIDAsIGRlbGV0ZXMgdGhlIG9mZmVyLlxuICogQHBhcmFtIHtudW1iZXJ8c3RyaW5nfEJpZ051bWJlcnxPYmplY3R9IG9wdHMucHJpY2UgLSBQcmljZSBvZiAxIHVuaXQgb2YgYHNlbGxpbmdgIGluIHRlcm1zIG9mIGBidXlpbmdgLlxuICogQHBhcmFtIHtudW1iZXJ9IG9wdHMucHJpY2UubiAtIElmIGBvcHRzLnByaWNlYCBpcyBhbiBvYmplY3Q6IHRoZSBwcmljZSBudW1lcmF0b3JcbiAqIEBwYXJhbSB7bnVtYmVyfSBvcHRzLnByaWNlLmQgLSBJZiBgb3B0cy5wcmljZWAgaXMgYW4gb2JqZWN0OiB0aGUgcHJpY2UgZGVub21pbmF0b3JcbiAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0cy5zb3VyY2VdIC0gVGhlIHNvdXJjZSBhY2NvdW50IChkZWZhdWx0cyB0byB0cmFuc2FjdGlvbiBzb3VyY2UpLlxuICogQHRocm93cyB7RXJyb3J9IFRocm93cyBgRXJyb3JgIHdoZW4gdGhlIGJlc3QgcmF0aW9uYWwgYXBwcm94aW1hdGlvbiBvZiBgcHJpY2VgIGNhbm5vdCBiZSBmb3VuZC5cbiAqIEByZXR1cm5zIHt4ZHIuQ3JlYXRlUGFzc2l2ZVNlbGxPZmZlck9wfSBDcmVhdGUgUGFzc2l2ZSBTZWxsIE9mZmVyIG9wZXJhdGlvblxuICovXG5mdW5jdGlvbiBjcmVhdGVQYXNzaXZlU2VsbE9mZmVyKG9wdHMpIHtcbiAgdmFyIGF0dHJpYnV0ZXMgPSB7fTtcbiAgYXR0cmlidXRlcy5zZWxsaW5nID0gb3B0cy5zZWxsaW5nLnRvWERST2JqZWN0KCk7XG4gIGF0dHJpYnV0ZXMuYnV5aW5nID0gb3B0cy5idXlpbmcudG9YRFJPYmplY3QoKTtcbiAgaWYgKCF0aGlzLmlzVmFsaWRBbW91bnQob3B0cy5hbW91bnQpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcih0aGlzLmNvbnN0cnVjdEFtb3VudFJlcXVpcmVtZW50c0Vycm9yKCdhbW91bnQnKSk7XG4gIH1cbiAgYXR0cmlidXRlcy5hbW91bnQgPSB0aGlzLl90b1hEUkFtb3VudChvcHRzLmFtb3VudCk7XG4gIGlmIChvcHRzLnByaWNlID09PSB1bmRlZmluZWQpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdwcmljZSBhcmd1bWVudCBpcyByZXF1aXJlZCcpO1xuICB9XG4gIGF0dHJpYnV0ZXMucHJpY2UgPSB0aGlzLl90b1hEUlByaWNlKG9wdHMucHJpY2UpO1xuICB2YXIgY3JlYXRlUGFzc2l2ZVNlbGxPZmZlck9wID0gbmV3IF94ZHJbXCJkZWZhdWx0XCJdLkNyZWF0ZVBhc3NpdmVTZWxsT2ZmZXJPcChhdHRyaWJ1dGVzKTtcbiAgdmFyIG9wQXR0cmlidXRlcyA9IHt9O1xuICBvcEF0dHJpYnV0ZXMuYm9keSA9IF94ZHJbXCJkZWZhdWx0XCJdLk9wZXJhdGlvbkJvZHkuY3JlYXRlUGFzc2l2ZVNlbGxPZmZlcihjcmVhdGVQYXNzaXZlU2VsbE9mZmVyT3ApO1xuICB0aGlzLnNldFNvdXJjZUFjY291bnQob3BBdHRyaWJ1dGVzLCBvcHRzKTtcbiAgcmV0dXJuIG5ldyBfeGRyW1wiZGVmYXVsdFwiXS5PcGVyYXRpb24ob3BBdHRyaWJ1dGVzKTtcbn0iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@stellar/stellar-base/lib/operations/create_passive_sell_offer.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@stellar/stellar-base/lib/operations/end_sponsoring_future_reserves.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/@stellar/stellar-base/lib/operations/end_sponsoring_future_reserves.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.endSponsoringFutureReserves = endSponsoringFutureReserves;\nvar _xdr = _interopRequireDefault(__webpack_require__(/*! ../xdr */ \"(ssr)/./node_modules/@stellar/stellar-base/lib/xdr.js\"));\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { \"default\": e }; }\n/**\n * Create an \"end sponsoring future reserves\" operation.\n * @function\n * @alias Operation.endSponsoringFutureReserves\n * @param {object} opts Options object\n * @param {string} [opts.source] - The source account for the operation. Defaults to the transaction's source account.\n * @returns {xdr.Operation} xdr operation\n *\n * @example\n * const op = Operation.endSponsoringFutureReserves();\n *\n */\nfunction endSponsoringFutureReserves() {\n  var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var opAttributes = {};\n  opAttributes.body = _xdr[\"default\"].OperationBody.endSponsoringFutureReserves();\n  this.setSourceAccount(opAttributes, opts);\n  return new _xdr[\"default\"].Operation(opAttributes);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHN0ZWxsYXIvc3RlbGxhci1iYXNlL2xpYi9vcGVyYXRpb25zL2VuZF9zcG9uc29yaW5nX2Z1dHVyZV9yZXNlcnZlcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYiw4Q0FBNkM7QUFDN0M7QUFDQSxDQUFDLEVBQUM7QUFDRixtQ0FBbUM7QUFDbkMsa0NBQWtDLG1CQUFPLENBQUMscUVBQVE7QUFDbEQscUNBQXFDLGlDQUFpQztBQUN0RTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsUUFBUTtBQUNuQixXQUFXLFFBQVE7QUFDbkIsYUFBYSxlQUFlO0FBQzVCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxVU1VBUklPXFxEb2N1bWVudHNcXEdpdGh1YlxcR2FsYXh5S0otd2FsbGV0LS0tSGFja1xcd2ViXFxub2RlX21vZHVsZXNcXEBzdGVsbGFyXFxzdGVsbGFyLWJhc2VcXGxpYlxcb3BlcmF0aW9uc1xcZW5kX3Nwb25zb3JpbmdfZnV0dXJlX3Jlc2VydmVzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5lbmRTcG9uc29yaW5nRnV0dXJlUmVzZXJ2ZXMgPSBlbmRTcG9uc29yaW5nRnV0dXJlUmVzZXJ2ZXM7XG52YXIgX3hkciA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL3hkclwiKSk7XG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KGUpIHsgcmV0dXJuIGUgJiYgZS5fX2VzTW9kdWxlID8gZSA6IHsgXCJkZWZhdWx0XCI6IGUgfTsgfVxuLyoqXG4gKiBDcmVhdGUgYW4gXCJlbmQgc3BvbnNvcmluZyBmdXR1cmUgcmVzZXJ2ZXNcIiBvcGVyYXRpb24uXG4gKiBAZnVuY3Rpb25cbiAqIEBhbGlhcyBPcGVyYXRpb24uZW5kU3BvbnNvcmluZ0Z1dHVyZVJlc2VydmVzXG4gKiBAcGFyYW0ge29iamVjdH0gb3B0cyBPcHRpb25zIG9iamVjdFxuICogQHBhcmFtIHtzdHJpbmd9IFtvcHRzLnNvdXJjZV0gLSBUaGUgc291cmNlIGFjY291bnQgZm9yIHRoZSBvcGVyYXRpb24uIERlZmF1bHRzIHRvIHRoZSB0cmFuc2FjdGlvbidzIHNvdXJjZSBhY2NvdW50LlxuICogQHJldHVybnMge3hkci5PcGVyYXRpb259IHhkciBvcGVyYXRpb25cbiAqXG4gKiBAZXhhbXBsZVxuICogY29uc3Qgb3AgPSBPcGVyYXRpb24uZW5kU3BvbnNvcmluZ0Z1dHVyZVJlc2VydmVzKCk7XG4gKlxuICovXG5mdW5jdGlvbiBlbmRTcG9uc29yaW5nRnV0dXJlUmVzZXJ2ZXMoKSB7XG4gIHZhciBvcHRzID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fTtcbiAgdmFyIG9wQXR0cmlidXRlcyA9IHt9O1xuICBvcEF0dHJpYnV0ZXMuYm9keSA9IF94ZHJbXCJkZWZhdWx0XCJdLk9wZXJhdGlvbkJvZHkuZW5kU3BvbnNvcmluZ0Z1dHVyZVJlc2VydmVzKCk7XG4gIHRoaXMuc2V0U291cmNlQWNjb3VudChvcEF0dHJpYnV0ZXMsIG9wdHMpO1xuICByZXR1cm4gbmV3IF94ZHJbXCJkZWZhdWx0XCJdLk9wZXJhdGlvbihvcEF0dHJpYnV0ZXMpO1xufSJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@stellar/stellar-base/lib/operations/end_sponsoring_future_reserves.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@stellar/stellar-base/lib/operations/extend_footprint_ttl.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/@stellar/stellar-base/lib/operations/extend_footprint_ttl.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.extendFootprintTtl = extendFootprintTtl;\nvar _xdr = _interopRequireDefault(__webpack_require__(/*! ../xdr */ \"(ssr)/./node_modules/@stellar/stellar-base/lib/xdr.js\"));\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { \"default\": e }; }\n/**\n * Builds an operation to bump the time-to-live (TTL) of the ledger keys. The\n * keys for extension have to be provided in the read-only footprint of\n * the transaction.\n *\n * The only parameter of the operation itself is the new minimum TTL for\n * all the provided entries. If an entry already has a higher TTL, then it\n * will just be skipped.\n *\n * TTL is the number of ledgers from the current ledger (exclusive) until\n * the last ledger the entry is still considered alive (inclusive). Thus\n * the exact ledger until the entries will live will only be determined\n * when transaction has been applied.\n *\n * The footprint has to be specified in the transaction. See\n * {@link TransactionBuilder}'s `opts.sorobanData` parameter, which is a\n * {@link xdr.SorobanTransactionData} instance that contains fee data & resource\n * usage as part of {@link xdr.SorobanResources}.\n *\n * @function\n * @alias Operation.extendFootprintTtl\n *\n * @param {object} opts - object holding operation parameters\n * @param {number} opts.extendTo - the minimum TTL that all the entries in\n *    the read-only footprint will have\n * @param {string} [opts.source] - an optional source account\n *\n * @returns {xdr.Operation} an Extend Footprint TTL operation\n *    (xdr.ExtendFootprintTTLOp)\n */\nfunction extendFootprintTtl(opts) {\n  var _opts$extendTo;\n  if (((_opts$extendTo = opts.extendTo) !== null && _opts$extendTo !== void 0 ? _opts$extendTo : -1) <= 0) {\n    throw new RangeError('extendTo has to be positive');\n  }\n  var extendFootprintOp = new _xdr[\"default\"].ExtendFootprintTtlOp({\n    ext: new _xdr[\"default\"].ExtensionPoint(0),\n    extendTo: opts.extendTo\n  });\n  var opAttributes = {\n    body: _xdr[\"default\"].OperationBody.extendFootprintTtl(extendFootprintOp)\n  };\n  this.setSourceAccount(opAttributes, opts);\n  return new _xdr[\"default\"].Operation(opAttributes);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHN0ZWxsYXIvc3RlbGxhci1iYXNlL2xpYi9vcGVyYXRpb25zL2V4dGVuZF9mb290cHJpbnRfdHRsLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLDhDQUE2QztBQUM3QztBQUNBLENBQUMsRUFBQztBQUNGLDBCQUEwQjtBQUMxQixrQ0FBa0MsbUJBQU8sQ0FBQyxxRUFBUTtBQUNsRCxxQ0FBcUMsaUNBQWlDO0FBQ3RFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUkseUJBQXlCO0FBQzdCLElBQUksa0NBQWtDO0FBQ3RDLHFCQUFxQiwyQkFBMkI7QUFDaEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFFBQVE7QUFDbkIsV0FBVyxRQUFRO0FBQ25CO0FBQ0EsV0FBVyxRQUFRO0FBQ25CO0FBQ0EsYUFBYSxlQUFlO0FBQzVCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxVU1VBUklPXFxEb2N1bWVudHNcXEdpdGh1YlxcR2FsYXh5S0otd2FsbGV0LS0tSGFja1xcd2ViXFxub2RlX21vZHVsZXNcXEBzdGVsbGFyXFxzdGVsbGFyLWJhc2VcXGxpYlxcb3BlcmF0aW9uc1xcZXh0ZW5kX2Zvb3RwcmludF90dGwuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmV4dGVuZEZvb3RwcmludFR0bCA9IGV4dGVuZEZvb3RwcmludFR0bDtcbnZhciBfeGRyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4veGRyXCIpKTtcbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoZSkgeyByZXR1cm4gZSAmJiBlLl9fZXNNb2R1bGUgPyBlIDogeyBcImRlZmF1bHRcIjogZSB9OyB9XG4vKipcbiAqIEJ1aWxkcyBhbiBvcGVyYXRpb24gdG8gYnVtcCB0aGUgdGltZS10by1saXZlIChUVEwpIG9mIHRoZSBsZWRnZXIga2V5cy4gVGhlXG4gKiBrZXlzIGZvciBleHRlbnNpb24gaGF2ZSB0byBiZSBwcm92aWRlZCBpbiB0aGUgcmVhZC1vbmx5IGZvb3RwcmludCBvZlxuICogdGhlIHRyYW5zYWN0aW9uLlxuICpcbiAqIFRoZSBvbmx5IHBhcmFtZXRlciBvZiB0aGUgb3BlcmF0aW9uIGl0c2VsZiBpcyB0aGUgbmV3IG1pbmltdW0gVFRMIGZvclxuICogYWxsIHRoZSBwcm92aWRlZCBlbnRyaWVzLiBJZiBhbiBlbnRyeSBhbHJlYWR5IGhhcyBhIGhpZ2hlciBUVEwsIHRoZW4gaXRcbiAqIHdpbGwganVzdCBiZSBza2lwcGVkLlxuICpcbiAqIFRUTCBpcyB0aGUgbnVtYmVyIG9mIGxlZGdlcnMgZnJvbSB0aGUgY3VycmVudCBsZWRnZXIgKGV4Y2x1c2l2ZSkgdW50aWxcbiAqIHRoZSBsYXN0IGxlZGdlciB0aGUgZW50cnkgaXMgc3RpbGwgY29uc2lkZXJlZCBhbGl2ZSAoaW5jbHVzaXZlKS4gVGh1c1xuICogdGhlIGV4YWN0IGxlZGdlciB1bnRpbCB0aGUgZW50cmllcyB3aWxsIGxpdmUgd2lsbCBvbmx5IGJlIGRldGVybWluZWRcbiAqIHdoZW4gdHJhbnNhY3Rpb24gaGFzIGJlZW4gYXBwbGllZC5cbiAqXG4gKiBUaGUgZm9vdHByaW50IGhhcyB0byBiZSBzcGVjaWZpZWQgaW4gdGhlIHRyYW5zYWN0aW9uLiBTZWVcbiAqIHtAbGluayBUcmFuc2FjdGlvbkJ1aWxkZXJ9J3MgYG9wdHMuc29yb2JhbkRhdGFgIHBhcmFtZXRlciwgd2hpY2ggaXMgYVxuICoge0BsaW5rIHhkci5Tb3JvYmFuVHJhbnNhY3Rpb25EYXRhfSBpbnN0YW5jZSB0aGF0IGNvbnRhaW5zIGZlZSBkYXRhICYgcmVzb3VyY2VcbiAqIHVzYWdlIGFzIHBhcnQgb2Yge0BsaW5rIHhkci5Tb3JvYmFuUmVzb3VyY2VzfS5cbiAqXG4gKiBAZnVuY3Rpb25cbiAqIEBhbGlhcyBPcGVyYXRpb24uZXh0ZW5kRm9vdHByaW50VHRsXG4gKlxuICogQHBhcmFtIHtvYmplY3R9IG9wdHMgLSBvYmplY3QgaG9sZGluZyBvcGVyYXRpb24gcGFyYW1ldGVyc1xuICogQHBhcmFtIHtudW1iZXJ9IG9wdHMuZXh0ZW5kVG8gLSB0aGUgbWluaW11bSBUVEwgdGhhdCBhbGwgdGhlIGVudHJpZXMgaW5cbiAqICAgIHRoZSByZWFkLW9ubHkgZm9vdHByaW50IHdpbGwgaGF2ZVxuICogQHBhcmFtIHtzdHJpbmd9IFtvcHRzLnNvdXJjZV0gLSBhbiBvcHRpb25hbCBzb3VyY2UgYWNjb3VudFxuICpcbiAqIEByZXR1cm5zIHt4ZHIuT3BlcmF0aW9ufSBhbiBFeHRlbmQgRm9vdHByaW50IFRUTCBvcGVyYXRpb25cbiAqICAgICh4ZHIuRXh0ZW5kRm9vdHByaW50VFRMT3ApXG4gKi9cbmZ1bmN0aW9uIGV4dGVuZEZvb3RwcmludFR0bChvcHRzKSB7XG4gIHZhciBfb3B0cyRleHRlbmRUbztcbiAgaWYgKCgoX29wdHMkZXh0ZW5kVG8gPSBvcHRzLmV4dGVuZFRvKSAhPT0gbnVsbCAmJiBfb3B0cyRleHRlbmRUbyAhPT0gdm9pZCAwID8gX29wdHMkZXh0ZW5kVG8gOiAtMSkgPD0gMCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdleHRlbmRUbyBoYXMgdG8gYmUgcG9zaXRpdmUnKTtcbiAgfVxuICB2YXIgZXh0ZW5kRm9vdHByaW50T3AgPSBuZXcgX3hkcltcImRlZmF1bHRcIl0uRXh0ZW5kRm9vdHByaW50VHRsT3Aoe1xuICAgIGV4dDogbmV3IF94ZHJbXCJkZWZhdWx0XCJdLkV4dGVuc2lvblBvaW50KDApLFxuICAgIGV4dGVuZFRvOiBvcHRzLmV4dGVuZFRvXG4gIH0pO1xuICB2YXIgb3BBdHRyaWJ1dGVzID0ge1xuICAgIGJvZHk6IF94ZHJbXCJkZWZhdWx0XCJdLk9wZXJhdGlvbkJvZHkuZXh0ZW5kRm9vdHByaW50VHRsKGV4dGVuZEZvb3RwcmludE9wKVxuICB9O1xuICB0aGlzLnNldFNvdXJjZUFjY291bnQob3BBdHRyaWJ1dGVzLCBvcHRzKTtcbiAgcmV0dXJuIG5ldyBfeGRyW1wiZGVmYXVsdFwiXS5PcGVyYXRpb24ob3BBdHRyaWJ1dGVzKTtcbn0iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@stellar/stellar-base/lib/operations/extend_footprint_ttl.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@stellar/stellar-base/lib/operations/index.js":
/*!********************************************************************!*\
  !*** ./node_modules/@stellar/stellar-base/lib/operations/index.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nObject.defineProperty(exports, \"accountMerge\", ({\n  enumerable: true,\n  get: function get() {\n    return _account_merge.accountMerge;\n  }\n}));\nObject.defineProperty(exports, \"allowTrust\", ({\n  enumerable: true,\n  get: function get() {\n    return _allow_trust.allowTrust;\n  }\n}));\nObject.defineProperty(exports, \"beginSponsoringFutureReserves\", ({\n  enumerable: true,\n  get: function get() {\n    return _begin_sponsoring_future_reserves.beginSponsoringFutureReserves;\n  }\n}));\nObject.defineProperty(exports, \"bumpSequence\", ({\n  enumerable: true,\n  get: function get() {\n    return _bump_sequence.bumpSequence;\n  }\n}));\nObject.defineProperty(exports, \"changeTrust\", ({\n  enumerable: true,\n  get: function get() {\n    return _change_trust.changeTrust;\n  }\n}));\nObject.defineProperty(exports, \"claimClaimableBalance\", ({\n  enumerable: true,\n  get: function get() {\n    return _claim_claimable_balance.claimClaimableBalance;\n  }\n}));\nObject.defineProperty(exports, \"clawback\", ({\n  enumerable: true,\n  get: function get() {\n    return _clawback.clawback;\n  }\n}));\nObject.defineProperty(exports, \"clawbackClaimableBalance\", ({\n  enumerable: true,\n  get: function get() {\n    return _clawback_claimable_balance.clawbackClaimableBalance;\n  }\n}));\nObject.defineProperty(exports, \"createAccount\", ({\n  enumerable: true,\n  get: function get() {\n    return _create_account.createAccount;\n  }\n}));\nObject.defineProperty(exports, \"createClaimableBalance\", ({\n  enumerable: true,\n  get: function get() {\n    return _create_claimable_balance.createClaimableBalance;\n  }\n}));\nObject.defineProperty(exports, \"createCustomContract\", ({\n  enumerable: true,\n  get: function get() {\n    return _invoke_host_function.createCustomContract;\n  }\n}));\nObject.defineProperty(exports, \"createPassiveSellOffer\", ({\n  enumerable: true,\n  get: function get() {\n    return _create_passive_sell_offer.createPassiveSellOffer;\n  }\n}));\nObject.defineProperty(exports, \"createStellarAssetContract\", ({\n  enumerable: true,\n  get: function get() {\n    return _invoke_host_function.createStellarAssetContract;\n  }\n}));\nObject.defineProperty(exports, \"endSponsoringFutureReserves\", ({\n  enumerable: true,\n  get: function get() {\n    return _end_sponsoring_future_reserves.endSponsoringFutureReserves;\n  }\n}));\nObject.defineProperty(exports, \"extendFootprintTtl\", ({\n  enumerable: true,\n  get: function get() {\n    return _extend_footprint_ttl.extendFootprintTtl;\n  }\n}));\nObject.defineProperty(exports, \"inflation\", ({\n  enumerable: true,\n  get: function get() {\n    return _inflation.inflation;\n  }\n}));\nObject.defineProperty(exports, \"invokeContractFunction\", ({\n  enumerable: true,\n  get: function get() {\n    return _invoke_host_function.invokeContractFunction;\n  }\n}));\nObject.defineProperty(exports, \"invokeHostFunction\", ({\n  enumerable: true,\n  get: function get() {\n    return _invoke_host_function.invokeHostFunction;\n  }\n}));\nObject.defineProperty(exports, \"liquidityPoolDeposit\", ({\n  enumerable: true,\n  get: function get() {\n    return _liquidity_pool_deposit.liquidityPoolDeposit;\n  }\n}));\nObject.defineProperty(exports, \"liquidityPoolWithdraw\", ({\n  enumerable: true,\n  get: function get() {\n    return _liquidity_pool_withdraw.liquidityPoolWithdraw;\n  }\n}));\nObject.defineProperty(exports, \"manageBuyOffer\", ({\n  enumerable: true,\n  get: function get() {\n    return _manage_buy_offer.manageBuyOffer;\n  }\n}));\nObject.defineProperty(exports, \"manageData\", ({\n  enumerable: true,\n  get: function get() {\n    return _manage_data.manageData;\n  }\n}));\nObject.defineProperty(exports, \"manageSellOffer\", ({\n  enumerable: true,\n  get: function get() {\n    return _manage_sell_offer.manageSellOffer;\n  }\n}));\nObject.defineProperty(exports, \"pathPaymentStrictReceive\", ({\n  enumerable: true,\n  get: function get() {\n    return _path_payment_strict_receive.pathPaymentStrictReceive;\n  }\n}));\nObject.defineProperty(exports, \"pathPaymentStrictSend\", ({\n  enumerable: true,\n  get: function get() {\n    return _path_payment_strict_send.pathPaymentStrictSend;\n  }\n}));\nObject.defineProperty(exports, \"payment\", ({\n  enumerable: true,\n  get: function get() {\n    return _payment.payment;\n  }\n}));\nObject.defineProperty(exports, \"restoreFootprint\", ({\n  enumerable: true,\n  get: function get() {\n    return _restore_footprint.restoreFootprint;\n  }\n}));\nObject.defineProperty(exports, \"revokeAccountSponsorship\", ({\n  enumerable: true,\n  get: function get() {\n    return _revoke_sponsorship.revokeAccountSponsorship;\n  }\n}));\nObject.defineProperty(exports, \"revokeClaimableBalanceSponsorship\", ({\n  enumerable: true,\n  get: function get() {\n    return _revoke_sponsorship.revokeClaimableBalanceSponsorship;\n  }\n}));\nObject.defineProperty(exports, \"revokeDataSponsorship\", ({\n  enumerable: true,\n  get: function get() {\n    return _revoke_sponsorship.revokeDataSponsorship;\n  }\n}));\nObject.defineProperty(exports, \"revokeLiquidityPoolSponsorship\", ({\n  enumerable: true,\n  get: function get() {\n    return _revoke_sponsorship.revokeLiquidityPoolSponsorship;\n  }\n}));\nObject.defineProperty(exports, \"revokeOfferSponsorship\", ({\n  enumerable: true,\n  get: function get() {\n    return _revoke_sponsorship.revokeOfferSponsorship;\n  }\n}));\nObject.defineProperty(exports, \"revokeSignerSponsorship\", ({\n  enumerable: true,\n  get: function get() {\n    return _revoke_sponsorship.revokeSignerSponsorship;\n  }\n}));\nObject.defineProperty(exports, \"revokeTrustlineSponsorship\", ({\n  enumerable: true,\n  get: function get() {\n    return _revoke_sponsorship.revokeTrustlineSponsorship;\n  }\n}));\nObject.defineProperty(exports, \"setOptions\", ({\n  enumerable: true,\n  get: function get() {\n    return _set_options.setOptions;\n  }\n}));\nObject.defineProperty(exports, \"setTrustLineFlags\", ({\n  enumerable: true,\n  get: function get() {\n    return _set_trustline_flags.setTrustLineFlags;\n  }\n}));\nObject.defineProperty(exports, \"uploadContractWasm\", ({\n  enumerable: true,\n  get: function get() {\n    return _invoke_host_function.uploadContractWasm;\n  }\n}));\nvar _manage_sell_offer = __webpack_require__(/*! ./manage_sell_offer */ \"(ssr)/./node_modules/@stellar/stellar-base/lib/operations/manage_sell_offer.js\");\nvar _create_passive_sell_offer = __webpack_require__(/*! ./create_passive_sell_offer */ \"(ssr)/./node_modules/@stellar/stellar-base/lib/operations/create_passive_sell_offer.js\");\nvar _account_merge = __webpack_require__(/*! ./account_merge */ \"(ssr)/./node_modules/@stellar/stellar-base/lib/operations/account_merge.js\");\nvar _allow_trust = __webpack_require__(/*! ./allow_trust */ \"(ssr)/./node_modules/@stellar/stellar-base/lib/operations/allow_trust.js\");\nvar _bump_sequence = __webpack_require__(/*! ./bump_sequence */ \"(ssr)/./node_modules/@stellar/stellar-base/lib/operations/bump_sequence.js\");\nvar _change_trust = __webpack_require__(/*! ./change_trust */ \"(ssr)/./node_modules/@stellar/stellar-base/lib/operations/change_trust.js\");\nvar _create_account = __webpack_require__(/*! ./create_account */ \"(ssr)/./node_modules/@stellar/stellar-base/lib/operations/create_account.js\");\nvar _create_claimable_balance = __webpack_require__(/*! ./create_claimable_balance */ \"(ssr)/./node_modules/@stellar/stellar-base/lib/operations/create_claimable_balance.js\");\nvar _claim_claimable_balance = __webpack_require__(/*! ./claim_claimable_balance */ \"(ssr)/./node_modules/@stellar/stellar-base/lib/operations/claim_claimable_balance.js\");\nvar _clawback_claimable_balance = __webpack_require__(/*! ./clawback_claimable_balance */ \"(ssr)/./node_modules/@stellar/stellar-base/lib/operations/clawback_claimable_balance.js\");\nvar _inflation = __webpack_require__(/*! ./inflation */ \"(ssr)/./node_modules/@stellar/stellar-base/lib/operations/inflation.js\");\nvar _manage_data = __webpack_require__(/*! ./manage_data */ \"(ssr)/./node_modules/@stellar/stellar-base/lib/operations/manage_data.js\");\nvar _manage_buy_offer = __webpack_require__(/*! ./manage_buy_offer */ \"(ssr)/./node_modules/@stellar/stellar-base/lib/operations/manage_buy_offer.js\");\nvar _path_payment_strict_receive = __webpack_require__(/*! ./path_payment_strict_receive */ \"(ssr)/./node_modules/@stellar/stellar-base/lib/operations/path_payment_strict_receive.js\");\nvar _path_payment_strict_send = __webpack_require__(/*! ./path_payment_strict_send */ \"(ssr)/./node_modules/@stellar/stellar-base/lib/operations/path_payment_strict_send.js\");\nvar _payment = __webpack_require__(/*! ./payment */ \"(ssr)/./node_modules/@stellar/stellar-base/lib/operations/payment.js\");\nvar _set_options = __webpack_require__(/*! ./set_options */ \"(ssr)/./node_modules/@stellar/stellar-base/lib/operations/set_options.js\");\nvar _begin_sponsoring_future_reserves = __webpack_require__(/*! ./begin_sponsoring_future_reserves */ \"(ssr)/./node_modules/@stellar/stellar-base/lib/operations/begin_sponsoring_future_reserves.js\");\nvar _end_sponsoring_future_reserves = __webpack_require__(/*! ./end_sponsoring_future_reserves */ \"(ssr)/./node_modules/@stellar/stellar-base/lib/operations/end_sponsoring_future_reserves.js\");\nvar _revoke_sponsorship = __webpack_require__(/*! ./revoke_sponsorship */ \"(ssr)/./node_modules/@stellar/stellar-base/lib/operations/revoke_sponsorship.js\");\nvar _clawback = __webpack_require__(/*! ./clawback */ \"(ssr)/./node_modules/@stellar/stellar-base/lib/operations/clawback.js\");\nvar _set_trustline_flags = __webpack_require__(/*! ./set_trustline_flags */ \"(ssr)/./node_modules/@stellar/stellar-base/lib/operations/set_trustline_flags.js\");\nvar _liquidity_pool_deposit = __webpack_require__(/*! ./liquidity_pool_deposit */ \"(ssr)/./node_modules/@stellar/stellar-base/lib/operations/liquidity_pool_deposit.js\");\nvar _liquidity_pool_withdraw = __webpack_require__(/*! ./liquidity_pool_withdraw */ \"(ssr)/./node_modules/@stellar/stellar-base/lib/operations/liquidity_pool_withdraw.js\");\nvar _invoke_host_function = __webpack_require__(/*! ./invoke_host_function */ \"(ssr)/./node_modules/@stellar/stellar-base/lib/operations/invoke_host_function.js\");\nvar _extend_footprint_ttl = __webpack_require__(/*! ./extend_footprint_ttl */ \"(ssr)/./node_modules/@stellar/stellar-base/lib/operations/extend_footprint_ttl.js\");\nvar _restore_footprint = __webpack_require__(/*! ./restore_footprint */ \"(ssr)/./node_modules/@stellar/stellar-base/lib/operations/restore_footprint.js\");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@stellar/stellar-base/lib/operations/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@stellar/stellar-base/lib/operations/inflation.js":
/*!************************************************************************!*\
  !*** ./node_modules/@stellar/stellar-base/lib/operations/inflation.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.inflation = inflation;\nvar _xdr = _interopRequireDefault(__webpack_require__(/*! ../xdr */ \"(ssr)/./node_modules/@stellar/stellar-base/lib/xdr.js\"));\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { \"default\": e }; }\n/**\n * This operation generates the inflation.\n * @function\n * @alias Operation.inflation\n * @param {object} [opts] Options object\n * @param {string} [opts.source] - The optional source account.\n * @returns {xdr.InflationOp} Inflation operation\n */\nfunction inflation() {\n  var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var opAttributes = {};\n  opAttributes.body = _xdr[\"default\"].OperationBody.inflation();\n  this.setSourceAccount(opAttributes, opts);\n  return new _xdr[\"default\"].Operation(opAttributes);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHN0ZWxsYXIvc3RlbGxhci1iYXNlL2xpYi9vcGVyYXRpb25zL2luZmxhdGlvbi5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYiw4Q0FBNkM7QUFDN0M7QUFDQSxDQUFDLEVBQUM7QUFDRixpQkFBaUI7QUFDakIsa0NBQWtDLG1CQUFPLENBQUMscUVBQVE7QUFDbEQscUNBQXFDLGlDQUFpQztBQUN0RTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsUUFBUTtBQUNuQixXQUFXLFFBQVE7QUFDbkIsYUFBYSxpQkFBaUI7QUFDOUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxVU1VBUklPXFxEb2N1bWVudHNcXEdpdGh1YlxcR2FsYXh5S0otd2FsbGV0LS0tSGFja1xcd2ViXFxub2RlX21vZHVsZXNcXEBzdGVsbGFyXFxzdGVsbGFyLWJhc2VcXGxpYlxcb3BlcmF0aW9uc1xcaW5mbGF0aW9uLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5pbmZsYXRpb24gPSBpbmZsYXRpb247XG52YXIgX3hkciA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL3hkclwiKSk7XG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KGUpIHsgcmV0dXJuIGUgJiYgZS5fX2VzTW9kdWxlID8gZSA6IHsgXCJkZWZhdWx0XCI6IGUgfTsgfVxuLyoqXG4gKiBUaGlzIG9wZXJhdGlvbiBnZW5lcmF0ZXMgdGhlIGluZmxhdGlvbi5cbiAqIEBmdW5jdGlvblxuICogQGFsaWFzIE9wZXJhdGlvbi5pbmZsYXRpb25cbiAqIEBwYXJhbSB7b2JqZWN0fSBbb3B0c10gT3B0aW9ucyBvYmplY3RcbiAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0cy5zb3VyY2VdIC0gVGhlIG9wdGlvbmFsIHNvdXJjZSBhY2NvdW50LlxuICogQHJldHVybnMge3hkci5JbmZsYXRpb25PcH0gSW5mbGF0aW9uIG9wZXJhdGlvblxuICovXG5mdW5jdGlvbiBpbmZsYXRpb24oKSB7XG4gIHZhciBvcHRzID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fTtcbiAgdmFyIG9wQXR0cmlidXRlcyA9IHt9O1xuICBvcEF0dHJpYnV0ZXMuYm9keSA9IF94ZHJbXCJkZWZhdWx0XCJdLk9wZXJhdGlvbkJvZHkuaW5mbGF0aW9uKCk7XG4gIHRoaXMuc2V0U291cmNlQWNjb3VudChvcEF0dHJpYnV0ZXMsIG9wdHMpO1xuICByZXR1cm4gbmV3IF94ZHJbXCJkZWZhdWx0XCJdLk9wZXJhdGlvbihvcEF0dHJpYnV0ZXMpO1xufSJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@stellar/stellar-base/lib/operations/inflation.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@stellar/stellar-base/lib/operations/invoke_host_function.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/@stellar/stellar-base/lib/operations/invoke_host_function.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.createCustomContract = createCustomContract;\nexports.createStellarAssetContract = createStellarAssetContract;\nexports.invokeContractFunction = invokeContractFunction;\nexports.invokeHostFunction = invokeHostFunction;\nexports.uploadContractWasm = uploadContractWasm;\nvar _xdr = _interopRequireDefault(__webpack_require__(/*! ../xdr */ \"(ssr)/./node_modules/@stellar/stellar-base/lib/xdr.js\"));\nvar _keypair = __webpack_require__(/*! ../keypair */ \"(ssr)/./node_modules/@stellar/stellar-base/lib/keypair.js\");\nvar _address = __webpack_require__(/*! ../address */ \"(ssr)/./node_modules/@stellar/stellar-base/lib/address.js\");\nvar _asset = __webpack_require__(/*! ../asset */ \"(ssr)/./node_modules/@stellar/stellar-base/lib/asset.js\");\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { \"default\": e }; }\nfunction _slicedToArray(r, e) { return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest(); }\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _unsupportedIterableToArray(r, a) { if (r) { if (\"string\" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return \"Object\" === t && r.constructor && (t = r.constructor.name), \"Map\" === t || \"Set\" === t ? Array.from(r) : \"Arguments\" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }\nfunction _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }\nfunction _iterableToArrayLimit(r, l) { var t = null == r ? null : \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t[\"return\"] && (u = t[\"return\"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }\nfunction _arrayWithHoles(r) { if (Array.isArray(r)) return r; }\n/**\n * Invokes a single smart contract host function.\n *\n * @function\n * @alias Operation.invokeHostFunction\n *\n * @param {object} opts - options object\n * @param {xdr.HostFunction} opts.func - host function to execute (with its\n *    wrapped parameters)\n * @param {xdr.SorobanAuthorizationEntry[]} [opts.auth] - list outlining the\n *    tree of authorizations required for the call\n * @param {string} [opts.source] - an optional source account\n *\n * @returns {xdr.Operation} an Invoke Host Function operation\n *    (xdr.InvokeHostFunctionOp)\n *\n * @see https://soroban.stellar.org/docs/fundamentals-and-concepts/invoking-contracts-with-transactions#function\n * @see Operation.invokeContractFunction\n * @see Operation.createCustomContract\n * @see Operation.createStellarAssetContract\n * @see Operation.uploadContractWasm\n * @see Contract.call\n */\nfunction invokeHostFunction(opts) {\n  if (!opts.func) {\n    throw new TypeError(\"host function invocation ('func') required (got \".concat(JSON.stringify(opts), \")\"));\n  }\n  var invokeHostFunctionOp = new _xdr[\"default\"].InvokeHostFunctionOp({\n    hostFunction: opts.func,\n    auth: opts.auth || []\n  });\n  var opAttributes = {\n    body: _xdr[\"default\"].OperationBody.invokeHostFunction(invokeHostFunctionOp)\n  };\n  this.setSourceAccount(opAttributes, opts);\n  return new _xdr[\"default\"].Operation(opAttributes);\n}\n\n/**\n * Returns an operation that invokes a contract function.\n *\n * @function\n * @alias Operation.invokeContractFunction\n *\n * @param {any}         opts - the set of parameters\n * @param {string}      opts.contract - a strkey-fied contract address (`C...`)\n * @param {string}      opts.function - the name of the contract fn to invoke\n * @param {xdr.ScVal[]} opts.args - parameters to pass to the function\n *    invocation (try {@link nativeToScVal} or {@link ScInt} to make building\n *    these easier)\n * @param {xdr.SorobanAuthorizationEntry[]} [opts.auth] - an optional list\n *    outlining the tree of authorizations required for the call\n * @param {string} [opts.source] - an optional source account\n *\n * @returns {xdr.Operation} an Invoke Host Function operation\n *    (xdr.InvokeHostFunctionOp)\n *\n * @see Operation.invokeHostFunction\n * @see Contract.call\n * @see Address\n */\nfunction invokeContractFunction(opts) {\n  var c = new _address.Address(opts.contract);\n  if (c._type !== 'contract') {\n    throw new TypeError(\"expected contract strkey instance, got \".concat(c));\n  }\n  return this.invokeHostFunction({\n    source: opts.source,\n    auth: opts.auth,\n    func: _xdr[\"default\"].HostFunction.hostFunctionTypeInvokeContract(new _xdr[\"default\"].InvokeContractArgs({\n      contractAddress: c.toScAddress(),\n      functionName: opts[\"function\"],\n      args: opts.args\n    }))\n  });\n}\n\n/**\n * Returns an operation that creates a custom WASM contract and atomically\n * invokes its constructor.\n *\n * @function\n * @alias Operation.createCustomContract\n *\n * @param {any}     opts - the set of parameters\n * @param {Address} opts.address - the contract uploader address\n * @param {Uint8Array|Buffer}  opts.wasmHash - the SHA-256 hash of the contract\n *    WASM you're uploading (see {@link hash} and\n *    {@link Operation.uploadContractWasm})\n * @param {xdr.ScVal[]} [opts.constructorArgs] - the optional parameters to pass\n *    to the constructor of this contract (see {@link nativeToScVal} for ways to\n *    easily create these parameters from native JS values)\n * @param {Uint8Array|Buffer} [opts.salt] - an optional, 32-byte salt to\n *    distinguish deployment instances of the same wasm from the same user (if\n *    omitted, one will be generated for you)\n * @param {xdr.SorobanAuthorizationEntry[]} [opts.auth] - an optional list\n *    outlining the tree of authorizations required for the call\n * @param {string} [opts.source] - an optional source account\n *\n * @returns {xdr.Operation} an Invoke Host Function operation\n *    (xdr.InvokeHostFunctionOp)\n *\n * @see\n * https://soroban.stellar.org/docs/fundamentals-and-concepts/invoking-contracts-with-transactions#function\n */\nfunction createCustomContract(opts) {\n  var _opts$constructorArgs;\n  var salt = Buffer.from(opts.salt || getSalty());\n  if (!opts.wasmHash || opts.wasmHash.length !== 32) {\n    throw new TypeError(\"expected hash(contract WASM) in 'opts.wasmHash', got \".concat(opts.wasmHash));\n  }\n  if (salt.length !== 32) {\n    throw new TypeError(\"expected 32-byte salt in 'opts.salt', got \".concat(opts.wasmHash));\n  }\n  return this.invokeHostFunction({\n    source: opts.source,\n    auth: opts.auth,\n    func: _xdr[\"default\"].HostFunction.hostFunctionTypeCreateContractV2(new _xdr[\"default\"].CreateContractArgsV2({\n      executable: _xdr[\"default\"].ContractExecutable.contractExecutableWasm(Buffer.from(opts.wasmHash)),\n      contractIdPreimage: _xdr[\"default\"].ContractIdPreimage.contractIdPreimageFromAddress(new _xdr[\"default\"].ContractIdPreimageFromAddress({\n        address: opts.address.toScAddress(),\n        salt: salt\n      })),\n      constructorArgs: (_opts$constructorArgs = opts.constructorArgs) !== null && _opts$constructorArgs !== void 0 ? _opts$constructorArgs : []\n    }))\n  });\n}\n\n/**\n * Returns an operation that wraps a Stellar asset into a token contract.\n *\n * @function\n * @alias Operation.createStellarAssetContract\n *\n * @param {any}          opts - the set of parameters\n * @param {Asset|string} opts.asset - the Stellar asset to wrap, either as an\n *    {@link Asset} object or in canonical form (SEP-11, `code:issuer`)\n * @param {xdr.SorobanAuthorizationEntry[]} [opts.auth] - an optional list\n *    outlining the tree of authorizations required for the call\n * @param {string} [opts.source] - an optional source account\n *\n * @returns {xdr.Operation} an Invoke Host Function operation\n *    (xdr.InvokeHostFunctionOp)\n *\n * @see https://stellar.org/protocol/sep-11#alphanum4-alphanum12\n * @see\n * https://soroban.stellar.org/docs/fundamentals-and-concepts/invoking-contracts-with-transactions\n * @see\n * https://soroban.stellar.org/docs/advanced-tutorials/stellar-asset-contract\n * @see Operation.invokeHostFunction\n */\nfunction createStellarAssetContract(opts) {\n  var asset = opts.asset;\n  if (typeof asset === 'string') {\n    var _asset$split = asset.split(':'),\n      _asset$split2 = _slicedToArray(_asset$split, 2),\n      code = _asset$split2[0],\n      issuer = _asset$split2[1];\n    asset = new _asset.Asset(code, issuer); // handles 'xlm' by default\n  }\n  if (!(asset instanceof _asset.Asset)) {\n    throw new TypeError(\"expected Asset in 'opts.asset', got \".concat(asset));\n  }\n  return this.invokeHostFunction({\n    source: opts.source,\n    auth: opts.auth,\n    func: _xdr[\"default\"].HostFunction.hostFunctionTypeCreateContract(new _xdr[\"default\"].CreateContractArgs({\n      executable: _xdr[\"default\"].ContractExecutable.contractExecutableStellarAsset(),\n      contractIdPreimage: _xdr[\"default\"].ContractIdPreimage.contractIdPreimageFromAsset(asset.toXDRObject())\n    }))\n  });\n}\n\n/**\n * Returns an operation that uploads WASM for a contract.\n *\n * @function\n * @alias Operation.uploadContractWasm\n *\n * @param {any}               opts - the set of parameters\n * @param {Uint8Array|Buffer} opts.wasm - a WASM blob to upload to the ledger\n * @param {xdr.SorobanAuthorizationEntry[]} [opts.auth] - an optional list\n *    outlining the tree of authorizations required for the call\n * @param {string} [opts.source] - an optional source account\n *\n * @returns {xdr.Operation} an Invoke Host Function operation\n *    (xdr.InvokeHostFunctionOp)\n *\n * @see\n * https://soroban.stellar.org/docs/fundamentals-and-concepts/invoking-contracts-with-transactions#function\n */\nfunction uploadContractWasm(opts) {\n  return this.invokeHostFunction({\n    source: opts.source,\n    auth: opts.auth,\n    func: _xdr[\"default\"].HostFunction.hostFunctionTypeUploadContractWasm(Buffer.from(opts.wasm) // coalesce so we can drop `Buffer` someday\n    )\n  });\n}\n\n/** @returns {Buffer} a random 256-bit \"salt\" value. */\nfunction getSalty() {\n  return _keypair.Keypair.random().xdrPublicKey().value(); // ed25519 is 256 bits, too\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@stellar/stellar-base/lib/operations/invoke_host_function.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@stellar/stellar-base/lib/operations/liquidity_pool_deposit.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@stellar/stellar-base/lib/operations/liquidity_pool_deposit.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.liquidityPoolDeposit = liquidityPoolDeposit;\nvar _xdr = _interopRequireDefault(__webpack_require__(/*! ../xdr */ \"(ssr)/./node_modules/@stellar/stellar-base/lib/xdr.js\"));\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { \"default\": e }; }\n/**\n * Creates a liquidity pool deposit operation.\n *\n * @function\n * @alias Operation.liquidityPoolDeposit\n * @see https://developers.stellar.org/docs/start/list-of-operations/#liquidity-pool-deposit\n *\n * @param {object} opts - Options object\n * @param {string} opts.liquidityPoolId - The liquidity pool ID.\n * @param {string} opts.maxAmountA - Maximum amount of first asset to deposit.\n * @param {string} opts.maxAmountB - Maximum amount of second asset to deposit.\n * @param {number|string|BigNumber|Object} opts.minPrice -  Minimum depositA/depositB price.\n * @param {number} opts.minPrice.n - If `opts.minPrice` is an object: the price numerator\n * @param {number} opts.minPrice.d - If `opts.minPrice` is an object: the price denominator\n * @param {number|string|BigNumber|Object} opts.maxPrice -  Maximum depositA/depositB price.\n * @param {number} opts.maxPrice.n - If `opts.maxPrice` is an object: the price numerator\n * @param {number} opts.maxPrice.d - If `opts.maxPrice` is an object: the price denominator\n * @param {string} [opts.source] - The source account for the operation. Defaults to the transaction's source account.\n *\n * @returns {xdr.Operation} The resulting operation (xdr.LiquidityPoolDepositOp).\n */\nfunction liquidityPoolDeposit() {\n  var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var liquidityPoolId = opts.liquidityPoolId,\n    maxAmountA = opts.maxAmountA,\n    maxAmountB = opts.maxAmountB,\n    minPrice = opts.minPrice,\n    maxPrice = opts.maxPrice;\n  var attributes = {};\n  if (!liquidityPoolId) {\n    throw new TypeError('liquidityPoolId argument is required');\n  }\n  attributes.liquidityPoolId = _xdr[\"default\"].PoolId.fromXDR(liquidityPoolId, 'hex');\n  if (!this.isValidAmount(maxAmountA, true)) {\n    throw new TypeError(this.constructAmountRequirementsError('maxAmountA'));\n  }\n  attributes.maxAmountA = this._toXDRAmount(maxAmountA);\n  if (!this.isValidAmount(maxAmountB, true)) {\n    throw new TypeError(this.constructAmountRequirementsError('maxAmountB'));\n  }\n  attributes.maxAmountB = this._toXDRAmount(maxAmountB);\n  if (minPrice === undefined) {\n    throw new TypeError('minPrice argument is required');\n  }\n  attributes.minPrice = this._toXDRPrice(minPrice);\n  if (maxPrice === undefined) {\n    throw new TypeError('maxPrice argument is required');\n  }\n  attributes.maxPrice = this._toXDRPrice(maxPrice);\n  var liquidityPoolDepositOp = new _xdr[\"default\"].LiquidityPoolDepositOp(attributes);\n  var opAttributes = {\n    body: _xdr[\"default\"].OperationBody.liquidityPoolDeposit(liquidityPoolDepositOp)\n  };\n  this.setSourceAccount(opAttributes, opts);\n  return new _xdr[\"default\"].Operation(opAttributes);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHN0ZWxsYXIvc3RlbGxhci1iYXNlL2xpYi9vcGVyYXRpb25zL2xpcXVpZGl0eV9wb29sX2RlcG9zaXQuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsOENBQTZDO0FBQzdDO0FBQ0EsQ0FBQyxFQUFDO0FBQ0YsNEJBQTRCO0FBQzVCLGtDQUFrQyxtQkFBTyxDQUFDLHFFQUFRO0FBQ2xELHFDQUFxQyxpQ0FBaUM7QUFDdEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFFBQVE7QUFDbkIsV0FBVyxRQUFRO0FBQ25CLFdBQVcsUUFBUTtBQUNuQixXQUFXLFFBQVE7QUFDbkIsV0FBVyxnQ0FBZ0M7QUFDM0MsV0FBVyxRQUFRO0FBQ25CLFdBQVcsUUFBUTtBQUNuQixXQUFXLGdDQUFnQztBQUMzQyxXQUFXLFFBQVE7QUFDbkIsV0FBVyxRQUFRO0FBQ25CLFdBQVcsUUFBUTtBQUNuQjtBQUNBLGFBQWEsZUFBZTtBQUM1QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcVVNVQVJJT1xcRG9jdW1lbnRzXFxHaXRodWJcXEdhbGF4eUtKLXdhbGxldC0tLUhhY2tcXHdlYlxcbm9kZV9tb2R1bGVzXFxAc3RlbGxhclxcc3RlbGxhci1iYXNlXFxsaWJcXG9wZXJhdGlvbnNcXGxpcXVpZGl0eV9wb29sX2RlcG9zaXQuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmxpcXVpZGl0eVBvb2xEZXBvc2l0ID0gbGlxdWlkaXR5UG9vbERlcG9zaXQ7XG52YXIgX3hkciA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL3hkclwiKSk7XG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KGUpIHsgcmV0dXJuIGUgJiYgZS5fX2VzTW9kdWxlID8gZSA6IHsgXCJkZWZhdWx0XCI6IGUgfTsgfVxuLyoqXG4gKiBDcmVhdGVzIGEgbGlxdWlkaXR5IHBvb2wgZGVwb3NpdCBvcGVyYXRpb24uXG4gKlxuICogQGZ1bmN0aW9uXG4gKiBAYWxpYXMgT3BlcmF0aW9uLmxpcXVpZGl0eVBvb2xEZXBvc2l0XG4gKiBAc2VlIGh0dHBzOi8vZGV2ZWxvcGVycy5zdGVsbGFyLm9yZy9kb2NzL3N0YXJ0L2xpc3Qtb2Ytb3BlcmF0aW9ucy8jbGlxdWlkaXR5LXBvb2wtZGVwb3NpdFxuICpcbiAqIEBwYXJhbSB7b2JqZWN0fSBvcHRzIC0gT3B0aW9ucyBvYmplY3RcbiAqIEBwYXJhbSB7c3RyaW5nfSBvcHRzLmxpcXVpZGl0eVBvb2xJZCAtIFRoZSBsaXF1aWRpdHkgcG9vbCBJRC5cbiAqIEBwYXJhbSB7c3RyaW5nfSBvcHRzLm1heEFtb3VudEEgLSBNYXhpbXVtIGFtb3VudCBvZiBmaXJzdCBhc3NldCB0byBkZXBvc2l0LlxuICogQHBhcmFtIHtzdHJpbmd9IG9wdHMubWF4QW1vdW50QiAtIE1heGltdW0gYW1vdW50IG9mIHNlY29uZCBhc3NldCB0byBkZXBvc2l0LlxuICogQHBhcmFtIHtudW1iZXJ8c3RyaW5nfEJpZ051bWJlcnxPYmplY3R9IG9wdHMubWluUHJpY2UgLSAgTWluaW11bSBkZXBvc2l0QS9kZXBvc2l0QiBwcmljZS5cbiAqIEBwYXJhbSB7bnVtYmVyfSBvcHRzLm1pblByaWNlLm4gLSBJZiBgb3B0cy5taW5QcmljZWAgaXMgYW4gb2JqZWN0OiB0aGUgcHJpY2UgbnVtZXJhdG9yXG4gKiBAcGFyYW0ge251bWJlcn0gb3B0cy5taW5QcmljZS5kIC0gSWYgYG9wdHMubWluUHJpY2VgIGlzIGFuIG9iamVjdDogdGhlIHByaWNlIGRlbm9taW5hdG9yXG4gKiBAcGFyYW0ge251bWJlcnxzdHJpbmd8QmlnTnVtYmVyfE9iamVjdH0gb3B0cy5tYXhQcmljZSAtICBNYXhpbXVtIGRlcG9zaXRBL2RlcG9zaXRCIHByaWNlLlxuICogQHBhcmFtIHtudW1iZXJ9IG9wdHMubWF4UHJpY2UubiAtIElmIGBvcHRzLm1heFByaWNlYCBpcyBhbiBvYmplY3Q6IHRoZSBwcmljZSBudW1lcmF0b3JcbiAqIEBwYXJhbSB7bnVtYmVyfSBvcHRzLm1heFByaWNlLmQgLSBJZiBgb3B0cy5tYXhQcmljZWAgaXMgYW4gb2JqZWN0OiB0aGUgcHJpY2UgZGVub21pbmF0b3JcbiAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0cy5zb3VyY2VdIC0gVGhlIHNvdXJjZSBhY2NvdW50IGZvciB0aGUgb3BlcmF0aW9uLiBEZWZhdWx0cyB0byB0aGUgdHJhbnNhY3Rpb24ncyBzb3VyY2UgYWNjb3VudC5cbiAqXG4gKiBAcmV0dXJucyB7eGRyLk9wZXJhdGlvbn0gVGhlIHJlc3VsdGluZyBvcGVyYXRpb24gKHhkci5MaXF1aWRpdHlQb29sRGVwb3NpdE9wKS5cbiAqL1xuZnVuY3Rpb24gbGlxdWlkaXR5UG9vbERlcG9zaXQoKSB7XG4gIHZhciBvcHRzID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fTtcbiAgdmFyIGxpcXVpZGl0eVBvb2xJZCA9IG9wdHMubGlxdWlkaXR5UG9vbElkLFxuICAgIG1heEFtb3VudEEgPSBvcHRzLm1heEFtb3VudEEsXG4gICAgbWF4QW1vdW50QiA9IG9wdHMubWF4QW1vdW50QixcbiAgICBtaW5QcmljZSA9IG9wdHMubWluUHJpY2UsXG4gICAgbWF4UHJpY2UgPSBvcHRzLm1heFByaWNlO1xuICB2YXIgYXR0cmlidXRlcyA9IHt9O1xuICBpZiAoIWxpcXVpZGl0eVBvb2xJZCkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2xpcXVpZGl0eVBvb2xJZCBhcmd1bWVudCBpcyByZXF1aXJlZCcpO1xuICB9XG4gIGF0dHJpYnV0ZXMubGlxdWlkaXR5UG9vbElkID0gX3hkcltcImRlZmF1bHRcIl0uUG9vbElkLmZyb21YRFIobGlxdWlkaXR5UG9vbElkLCAnaGV4Jyk7XG4gIGlmICghdGhpcy5pc1ZhbGlkQW1vdW50KG1heEFtb3VudEEsIHRydWUpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcih0aGlzLmNvbnN0cnVjdEFtb3VudFJlcXVpcmVtZW50c0Vycm9yKCdtYXhBbW91bnRBJykpO1xuICB9XG4gIGF0dHJpYnV0ZXMubWF4QW1vdW50QSA9IHRoaXMuX3RvWERSQW1vdW50KG1heEFtb3VudEEpO1xuICBpZiAoIXRoaXMuaXNWYWxpZEFtb3VudChtYXhBbW91bnRCLCB0cnVlKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IodGhpcy5jb25zdHJ1Y3RBbW91bnRSZXF1aXJlbWVudHNFcnJvcignbWF4QW1vdW50QicpKTtcbiAgfVxuICBhdHRyaWJ1dGVzLm1heEFtb3VudEIgPSB0aGlzLl90b1hEUkFtb3VudChtYXhBbW91bnRCKTtcbiAgaWYgKG1pblByaWNlID09PSB1bmRlZmluZWQpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdtaW5QcmljZSBhcmd1bWVudCBpcyByZXF1aXJlZCcpO1xuICB9XG4gIGF0dHJpYnV0ZXMubWluUHJpY2UgPSB0aGlzLl90b1hEUlByaWNlKG1pblByaWNlKTtcbiAgaWYgKG1heFByaWNlID09PSB1bmRlZmluZWQpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdtYXhQcmljZSBhcmd1bWVudCBpcyByZXF1aXJlZCcpO1xuICB9XG4gIGF0dHJpYnV0ZXMubWF4UHJpY2UgPSB0aGlzLl90b1hEUlByaWNlKG1heFByaWNlKTtcbiAgdmFyIGxpcXVpZGl0eVBvb2xEZXBvc2l0T3AgPSBuZXcgX3hkcltcImRlZmF1bHRcIl0uTGlxdWlkaXR5UG9vbERlcG9zaXRPcChhdHRyaWJ1dGVzKTtcbiAgdmFyIG9wQXR0cmlidXRlcyA9IHtcbiAgICBib2R5OiBfeGRyW1wiZGVmYXVsdFwiXS5PcGVyYXRpb25Cb2R5LmxpcXVpZGl0eVBvb2xEZXBvc2l0KGxpcXVpZGl0eVBvb2xEZXBvc2l0T3ApXG4gIH07XG4gIHRoaXMuc2V0U291cmNlQWNjb3VudChvcEF0dHJpYnV0ZXMsIG9wdHMpO1xuICByZXR1cm4gbmV3IF94ZHJbXCJkZWZhdWx0XCJdLk9wZXJhdGlvbihvcEF0dHJpYnV0ZXMpO1xufSJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@stellar/stellar-base/lib/operations/liquidity_pool_deposit.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@stellar/stellar-base/lib/operations/liquidity_pool_withdraw.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/@stellar/stellar-base/lib/operations/liquidity_pool_withdraw.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.liquidityPoolWithdraw = liquidityPoolWithdraw;\nvar _xdr = _interopRequireDefault(__webpack_require__(/*! ../xdr */ \"(ssr)/./node_modules/@stellar/stellar-base/lib/xdr.js\"));\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { \"default\": e }; }\n/**\n * Creates a liquidity pool withdraw operation.\n *\n * @function\n * @alias Operation.liquidityPoolWithdraw\n * @see https://developers.stellar.org/docs/start/list-of-operations/#liquidity-pool-withdraw\n *\n * @param {object} opts - Options object\n * @param {string} opts.liquidityPoolId - The liquidity pool ID.\n * @param {string} opts.amount - Amount of pool shares to withdraw.\n * @param {string} opts.minAmountA - Minimum amount of first asset to withdraw.\n * @param {string} opts.minAmountB - Minimum amount of second asset to withdraw.\n * @param {string} [opts.source] - The source account for the operation. Defaults to the transaction's source account.\n *\n * @returns {xdr.Operation}   The resulting operation (xdr.LiquidityPoolWithdrawOp).\n */\nfunction liquidityPoolWithdraw() {\n  var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var attributes = {};\n  if (!opts.liquidityPoolId) {\n    throw new TypeError('liquidityPoolId argument is required');\n  }\n  attributes.liquidityPoolId = _xdr[\"default\"].PoolId.fromXDR(opts.liquidityPoolId, 'hex');\n  if (!this.isValidAmount(opts.amount)) {\n    throw new TypeError(this.constructAmountRequirementsError('amount'));\n  }\n  attributes.amount = this._toXDRAmount(opts.amount);\n  if (!this.isValidAmount(opts.minAmountA, true)) {\n    throw new TypeError(this.constructAmountRequirementsError('minAmountA'));\n  }\n  attributes.minAmountA = this._toXDRAmount(opts.minAmountA);\n  if (!this.isValidAmount(opts.minAmountB, true)) {\n    throw new TypeError(this.constructAmountRequirementsError('minAmountB'));\n  }\n  attributes.minAmountB = this._toXDRAmount(opts.minAmountB);\n  var liquidityPoolWithdrawOp = new _xdr[\"default\"].LiquidityPoolWithdrawOp(attributes);\n  var opAttributes = {\n    body: _xdr[\"default\"].OperationBody.liquidityPoolWithdraw(liquidityPoolWithdrawOp)\n  };\n  this.setSourceAccount(opAttributes, opts);\n  return new _xdr[\"default\"].Operation(opAttributes);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHN0ZWxsYXIvc3RlbGxhci1iYXNlL2xpYi9vcGVyYXRpb25zL2xpcXVpZGl0eV9wb29sX3dpdGhkcmF3LmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLDhDQUE2QztBQUM3QztBQUNBLENBQUMsRUFBQztBQUNGLDZCQUE2QjtBQUM3QixrQ0FBa0MsbUJBQU8sQ0FBQyxxRUFBUTtBQUNsRCxxQ0FBcUMsaUNBQWlDO0FBQ3RFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CLFdBQVcsUUFBUTtBQUNuQixXQUFXLFFBQVE7QUFDbkIsV0FBVyxRQUFRO0FBQ25CLFdBQVcsUUFBUTtBQUNuQixXQUFXLFFBQVE7QUFDbkI7QUFDQSxhQUFhLGlCQUFpQjtBQUM5QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcVVNVQVJJT1xcRG9jdW1lbnRzXFxHaXRodWJcXEdhbGF4eUtKLXdhbGxldC0tLUhhY2tcXHdlYlxcbm9kZV9tb2R1bGVzXFxAc3RlbGxhclxcc3RlbGxhci1iYXNlXFxsaWJcXG9wZXJhdGlvbnNcXGxpcXVpZGl0eV9wb29sX3dpdGhkcmF3LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5saXF1aWRpdHlQb29sV2l0aGRyYXcgPSBsaXF1aWRpdHlQb29sV2l0aGRyYXc7XG52YXIgX3hkciA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL3hkclwiKSk7XG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KGUpIHsgcmV0dXJuIGUgJiYgZS5fX2VzTW9kdWxlID8gZSA6IHsgXCJkZWZhdWx0XCI6IGUgfTsgfVxuLyoqXG4gKiBDcmVhdGVzIGEgbGlxdWlkaXR5IHBvb2wgd2l0aGRyYXcgb3BlcmF0aW9uLlxuICpcbiAqIEBmdW5jdGlvblxuICogQGFsaWFzIE9wZXJhdGlvbi5saXF1aWRpdHlQb29sV2l0aGRyYXdcbiAqIEBzZWUgaHR0cHM6Ly9kZXZlbG9wZXJzLnN0ZWxsYXIub3JnL2RvY3Mvc3RhcnQvbGlzdC1vZi1vcGVyYXRpb25zLyNsaXF1aWRpdHktcG9vbC13aXRoZHJhd1xuICpcbiAqIEBwYXJhbSB7b2JqZWN0fSBvcHRzIC0gT3B0aW9ucyBvYmplY3RcbiAqIEBwYXJhbSB7c3RyaW5nfSBvcHRzLmxpcXVpZGl0eVBvb2xJZCAtIFRoZSBsaXF1aWRpdHkgcG9vbCBJRC5cbiAqIEBwYXJhbSB7c3RyaW5nfSBvcHRzLmFtb3VudCAtIEFtb3VudCBvZiBwb29sIHNoYXJlcyB0byB3aXRoZHJhdy5cbiAqIEBwYXJhbSB7c3RyaW5nfSBvcHRzLm1pbkFtb3VudEEgLSBNaW5pbXVtIGFtb3VudCBvZiBmaXJzdCBhc3NldCB0byB3aXRoZHJhdy5cbiAqIEBwYXJhbSB7c3RyaW5nfSBvcHRzLm1pbkFtb3VudEIgLSBNaW5pbXVtIGFtb3VudCBvZiBzZWNvbmQgYXNzZXQgdG8gd2l0aGRyYXcuXG4gKiBAcGFyYW0ge3N0cmluZ30gW29wdHMuc291cmNlXSAtIFRoZSBzb3VyY2UgYWNjb3VudCBmb3IgdGhlIG9wZXJhdGlvbi4gRGVmYXVsdHMgdG8gdGhlIHRyYW5zYWN0aW9uJ3Mgc291cmNlIGFjY291bnQuXG4gKlxuICogQHJldHVybnMge3hkci5PcGVyYXRpb259ICAgVGhlIHJlc3VsdGluZyBvcGVyYXRpb24gKHhkci5MaXF1aWRpdHlQb29sV2l0aGRyYXdPcCkuXG4gKi9cbmZ1bmN0aW9uIGxpcXVpZGl0eVBvb2xXaXRoZHJhdygpIHtcbiAgdmFyIG9wdHMgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9O1xuICB2YXIgYXR0cmlidXRlcyA9IHt9O1xuICBpZiAoIW9wdHMubGlxdWlkaXR5UG9vbElkKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignbGlxdWlkaXR5UG9vbElkIGFyZ3VtZW50IGlzIHJlcXVpcmVkJyk7XG4gIH1cbiAgYXR0cmlidXRlcy5saXF1aWRpdHlQb29sSWQgPSBfeGRyW1wiZGVmYXVsdFwiXS5Qb29sSWQuZnJvbVhEUihvcHRzLmxpcXVpZGl0eVBvb2xJZCwgJ2hleCcpO1xuICBpZiAoIXRoaXMuaXNWYWxpZEFtb3VudChvcHRzLmFtb3VudCkpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKHRoaXMuY29uc3RydWN0QW1vdW50UmVxdWlyZW1lbnRzRXJyb3IoJ2Ftb3VudCcpKTtcbiAgfVxuICBhdHRyaWJ1dGVzLmFtb3VudCA9IHRoaXMuX3RvWERSQW1vdW50KG9wdHMuYW1vdW50KTtcbiAgaWYgKCF0aGlzLmlzVmFsaWRBbW91bnQob3B0cy5taW5BbW91bnRBLCB0cnVlKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IodGhpcy5jb25zdHJ1Y3RBbW91bnRSZXF1aXJlbWVudHNFcnJvcignbWluQW1vdW50QScpKTtcbiAgfVxuICBhdHRyaWJ1dGVzLm1pbkFtb3VudEEgPSB0aGlzLl90b1hEUkFtb3VudChvcHRzLm1pbkFtb3VudEEpO1xuICBpZiAoIXRoaXMuaXNWYWxpZEFtb3VudChvcHRzLm1pbkFtb3VudEIsIHRydWUpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcih0aGlzLmNvbnN0cnVjdEFtb3VudFJlcXVpcmVtZW50c0Vycm9yKCdtaW5BbW91bnRCJykpO1xuICB9XG4gIGF0dHJpYnV0ZXMubWluQW1vdW50QiA9IHRoaXMuX3RvWERSQW1vdW50KG9wdHMubWluQW1vdW50Qik7XG4gIHZhciBsaXF1aWRpdHlQb29sV2l0aGRyYXdPcCA9IG5ldyBfeGRyW1wiZGVmYXVsdFwiXS5MaXF1aWRpdHlQb29sV2l0aGRyYXdPcChhdHRyaWJ1dGVzKTtcbiAgdmFyIG9wQXR0cmlidXRlcyA9IHtcbiAgICBib2R5OiBfeGRyW1wiZGVmYXVsdFwiXS5PcGVyYXRpb25Cb2R5LmxpcXVpZGl0eVBvb2xXaXRoZHJhdyhsaXF1aWRpdHlQb29sV2l0aGRyYXdPcClcbiAgfTtcbiAgdGhpcy5zZXRTb3VyY2VBY2NvdW50KG9wQXR0cmlidXRlcywgb3B0cyk7XG4gIHJldHVybiBuZXcgX3hkcltcImRlZmF1bHRcIl0uT3BlcmF0aW9uKG9wQXR0cmlidXRlcyk7XG59Il0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@stellar/stellar-base/lib/operations/liquidity_pool_withdraw.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@stellar/stellar-base/lib/operations/manage_buy_offer.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@stellar/stellar-base/lib/operations/manage_buy_offer.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.manageBuyOffer = manageBuyOffer;\nvar _jsXdr = __webpack_require__(/*! @stellar/js-xdr */ \"(ssr)/./node_modules/@stellar/js-xdr/src/index.js\");\nvar _xdr = _interopRequireDefault(__webpack_require__(/*! ../xdr */ \"(ssr)/./node_modules/@stellar/stellar-base/lib/xdr.js\"));\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { \"default\": e }; }\n/**\n * Returns a XDR ManageBuyOfferOp. A \"manage buy offer\" operation creates, updates, or\n * deletes a buy offer.\n * @function\n * @alias Operation.manageBuyOffer\n * @param {object} opts Options object\n * @param {Asset} opts.selling - What you're selling.\n * @param {Asset} opts.buying - What you're buying.\n * @param {string} opts.buyAmount - The total amount you're buying. If 0, deletes the offer.\n * @param {number|string|BigNumber|Object} opts.price - Price of 1 unit of `buying` in terms of `selling`.\n * @param {number} opts.price.n - If `opts.price` is an object: the price numerator\n * @param {number} opts.price.d - If `opts.price` is an object: the price denominator\n * @param {number|string} [opts.offerId ] - If `0`, will create a new offer (default). Otherwise, edits an exisiting offer.\n * @param {string} [opts.source] - The source account (defaults to transaction source).\n * @throws {Error} Throws `Error` when the best rational approximation of `price` cannot be found.\n * @returns {xdr.ManageBuyOfferOp} Manage Buy Offer operation\n */\nfunction manageBuyOffer(opts) {\n  var attributes = {};\n  attributes.selling = opts.selling.toXDRObject();\n  attributes.buying = opts.buying.toXDRObject();\n  if (!this.isValidAmount(opts.buyAmount, true)) {\n    throw new TypeError(this.constructAmountRequirementsError('buyAmount'));\n  }\n  attributes.buyAmount = this._toXDRAmount(opts.buyAmount);\n  if (opts.price === undefined) {\n    throw new TypeError('price argument is required');\n  }\n  attributes.price = this._toXDRPrice(opts.price);\n  if (opts.offerId !== undefined) {\n    opts.offerId = opts.offerId.toString();\n  } else {\n    opts.offerId = '0';\n  }\n  attributes.offerId = _jsXdr.Hyper.fromString(opts.offerId);\n  var manageBuyOfferOp = new _xdr[\"default\"].ManageBuyOfferOp(attributes);\n  var opAttributes = {};\n  opAttributes.body = _xdr[\"default\"].OperationBody.manageBuyOffer(manageBuyOfferOp);\n  this.setSourceAccount(opAttributes, opts);\n  return new _xdr[\"default\"].Operation(opAttributes);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHN0ZWxsYXIvc3RlbGxhci1iYXNlL2xpYi9vcGVyYXRpb25zL21hbmFnZV9idXlfb2ZmZXIuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsOENBQTZDO0FBQzdDO0FBQ0EsQ0FBQyxFQUFDO0FBQ0Ysc0JBQXNCO0FBQ3RCLGFBQWEsbUJBQU8sQ0FBQywwRUFBaUI7QUFDdEMsa0NBQWtDLG1CQUFPLENBQUMscUVBQVE7QUFDbEQscUNBQXFDLGlDQUFpQztBQUN0RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CLFdBQVcsT0FBTztBQUNsQixXQUFXLE9BQU87QUFDbEIsV0FBVyxRQUFRO0FBQ25CLFdBQVcsZ0NBQWdDO0FBQzNDLFdBQVcsUUFBUTtBQUNuQixXQUFXLFFBQVE7QUFDbkIsV0FBVyxlQUFlO0FBQzFCLFdBQVcsUUFBUTtBQUNuQixZQUFZLE9BQU87QUFDbkIsYUFBYSxzQkFBc0I7QUFDbkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxVU1VBUklPXFxEb2N1bWVudHNcXEdpdGh1YlxcR2FsYXh5S0otd2FsbGV0LS0tSGFja1xcd2ViXFxub2RlX21vZHVsZXNcXEBzdGVsbGFyXFxzdGVsbGFyLWJhc2VcXGxpYlxcb3BlcmF0aW9uc1xcbWFuYWdlX2J1eV9vZmZlci5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMubWFuYWdlQnV5T2ZmZXIgPSBtYW5hZ2VCdXlPZmZlcjtcbnZhciBfanNYZHIgPSByZXF1aXJlKFwiQHN0ZWxsYXIvanMteGRyXCIpO1xudmFyIF94ZHIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi94ZHJcIikpO1xuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChlKSB7IHJldHVybiBlICYmIGUuX19lc01vZHVsZSA/IGUgOiB7IFwiZGVmYXVsdFwiOiBlIH07IH1cbi8qKlxuICogUmV0dXJucyBhIFhEUiBNYW5hZ2VCdXlPZmZlck9wLiBBIFwibWFuYWdlIGJ1eSBvZmZlclwiIG9wZXJhdGlvbiBjcmVhdGVzLCB1cGRhdGVzLCBvclxuICogZGVsZXRlcyBhIGJ1eSBvZmZlci5cbiAqIEBmdW5jdGlvblxuICogQGFsaWFzIE9wZXJhdGlvbi5tYW5hZ2VCdXlPZmZlclxuICogQHBhcmFtIHtvYmplY3R9IG9wdHMgT3B0aW9ucyBvYmplY3RcbiAqIEBwYXJhbSB7QXNzZXR9IG9wdHMuc2VsbGluZyAtIFdoYXQgeW91J3JlIHNlbGxpbmcuXG4gKiBAcGFyYW0ge0Fzc2V0fSBvcHRzLmJ1eWluZyAtIFdoYXQgeW91J3JlIGJ1eWluZy5cbiAqIEBwYXJhbSB7c3RyaW5nfSBvcHRzLmJ1eUFtb3VudCAtIFRoZSB0b3RhbCBhbW91bnQgeW91J3JlIGJ1eWluZy4gSWYgMCwgZGVsZXRlcyB0aGUgb2ZmZXIuXG4gKiBAcGFyYW0ge251bWJlcnxzdHJpbmd8QmlnTnVtYmVyfE9iamVjdH0gb3B0cy5wcmljZSAtIFByaWNlIG9mIDEgdW5pdCBvZiBgYnV5aW5nYCBpbiB0ZXJtcyBvZiBgc2VsbGluZ2AuXG4gKiBAcGFyYW0ge251bWJlcn0gb3B0cy5wcmljZS5uIC0gSWYgYG9wdHMucHJpY2VgIGlzIGFuIG9iamVjdDogdGhlIHByaWNlIG51bWVyYXRvclxuICogQHBhcmFtIHtudW1iZXJ9IG9wdHMucHJpY2UuZCAtIElmIGBvcHRzLnByaWNlYCBpcyBhbiBvYmplY3Q6IHRoZSBwcmljZSBkZW5vbWluYXRvclxuICogQHBhcmFtIHtudW1iZXJ8c3RyaW5nfSBbb3B0cy5vZmZlcklkIF0gLSBJZiBgMGAsIHdpbGwgY3JlYXRlIGEgbmV3IG9mZmVyIChkZWZhdWx0KS4gT3RoZXJ3aXNlLCBlZGl0cyBhbiBleGlzaXRpbmcgb2ZmZXIuXG4gKiBAcGFyYW0ge3N0cmluZ30gW29wdHMuc291cmNlXSAtIFRoZSBzb3VyY2UgYWNjb3VudCAoZGVmYXVsdHMgdG8gdHJhbnNhY3Rpb24gc291cmNlKS5cbiAqIEB0aHJvd3Mge0Vycm9yfSBUaHJvd3MgYEVycm9yYCB3aGVuIHRoZSBiZXN0IHJhdGlvbmFsIGFwcHJveGltYXRpb24gb2YgYHByaWNlYCBjYW5ub3QgYmUgZm91bmQuXG4gKiBAcmV0dXJucyB7eGRyLk1hbmFnZUJ1eU9mZmVyT3B9IE1hbmFnZSBCdXkgT2ZmZXIgb3BlcmF0aW9uXG4gKi9cbmZ1bmN0aW9uIG1hbmFnZUJ1eU9mZmVyKG9wdHMpIHtcbiAgdmFyIGF0dHJpYnV0ZXMgPSB7fTtcbiAgYXR0cmlidXRlcy5zZWxsaW5nID0gb3B0cy5zZWxsaW5nLnRvWERST2JqZWN0KCk7XG4gIGF0dHJpYnV0ZXMuYnV5aW5nID0gb3B0cy5idXlpbmcudG9YRFJPYmplY3QoKTtcbiAgaWYgKCF0aGlzLmlzVmFsaWRBbW91bnQob3B0cy5idXlBbW91bnQsIHRydWUpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcih0aGlzLmNvbnN0cnVjdEFtb3VudFJlcXVpcmVtZW50c0Vycm9yKCdidXlBbW91bnQnKSk7XG4gIH1cbiAgYXR0cmlidXRlcy5idXlBbW91bnQgPSB0aGlzLl90b1hEUkFtb3VudChvcHRzLmJ1eUFtb3VudCk7XG4gIGlmIChvcHRzLnByaWNlID09PSB1bmRlZmluZWQpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdwcmljZSBhcmd1bWVudCBpcyByZXF1aXJlZCcpO1xuICB9XG4gIGF0dHJpYnV0ZXMucHJpY2UgPSB0aGlzLl90b1hEUlByaWNlKG9wdHMucHJpY2UpO1xuICBpZiAob3B0cy5vZmZlcklkICE9PSB1bmRlZmluZWQpIHtcbiAgICBvcHRzLm9mZmVySWQgPSBvcHRzLm9mZmVySWQudG9TdHJpbmcoKTtcbiAgfSBlbHNlIHtcbiAgICBvcHRzLm9mZmVySWQgPSAnMCc7XG4gIH1cbiAgYXR0cmlidXRlcy5vZmZlcklkID0gX2pzWGRyLkh5cGVyLmZyb21TdHJpbmcob3B0cy5vZmZlcklkKTtcbiAgdmFyIG1hbmFnZUJ1eU9mZmVyT3AgPSBuZXcgX3hkcltcImRlZmF1bHRcIl0uTWFuYWdlQnV5T2ZmZXJPcChhdHRyaWJ1dGVzKTtcbiAgdmFyIG9wQXR0cmlidXRlcyA9IHt9O1xuICBvcEF0dHJpYnV0ZXMuYm9keSA9IF94ZHJbXCJkZWZhdWx0XCJdLk9wZXJhdGlvbkJvZHkubWFuYWdlQnV5T2ZmZXIobWFuYWdlQnV5T2ZmZXJPcCk7XG4gIHRoaXMuc2V0U291cmNlQWNjb3VudChvcEF0dHJpYnV0ZXMsIG9wdHMpO1xuICByZXR1cm4gbmV3IF94ZHJbXCJkZWZhdWx0XCJdLk9wZXJhdGlvbihvcEF0dHJpYnV0ZXMpO1xufSJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@stellar/stellar-base/lib/operations/manage_buy_offer.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@stellar/stellar-base/lib/operations/manage_data.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@stellar/stellar-base/lib/operations/manage_data.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.manageData = manageData;\nvar _xdr = _interopRequireDefault(__webpack_require__(/*! ../xdr */ \"(ssr)/./node_modules/@stellar/stellar-base/lib/xdr.js\"));\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { \"default\": e }; }\n/**\n * This operation adds data entry to the ledger.\n * @function\n * @alias Operation.manageData\n * @param {object} opts Options object\n * @param {string} opts.name - The name of the data entry.\n * @param {string|Buffer} opts.value - The value of the data entry.\n * @param {string} [opts.source] - The optional source account.\n * @returns {xdr.ManageDataOp} Manage Data operation\n */\nfunction manageData(opts) {\n  var attributes = {};\n  if (!(typeof opts.name === 'string' && opts.name.length <= 64)) {\n    throw new Error('name must be a string, up to 64 characters');\n  }\n  attributes.dataName = opts.name;\n  if (typeof opts.value !== 'string' && !Buffer.isBuffer(opts.value) && opts.value !== null) {\n    throw new Error('value must be a string, Buffer or null');\n  }\n  if (typeof opts.value === 'string') {\n    attributes.dataValue = Buffer.from(opts.value);\n  } else {\n    attributes.dataValue = opts.value;\n  }\n  if (attributes.dataValue !== null && attributes.dataValue.length > 64) {\n    throw new Error('value cannot be longer that 64 bytes');\n  }\n  var manageDataOp = new _xdr[\"default\"].ManageDataOp(attributes);\n  var opAttributes = {};\n  opAttributes.body = _xdr[\"default\"].OperationBody.manageData(manageDataOp);\n  this.setSourceAccount(opAttributes, opts);\n  return new _xdr[\"default\"].Operation(opAttributes);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHN0ZWxsYXIvc3RlbGxhci1iYXNlL2xpYi9vcGVyYXRpb25zL21hbmFnZV9kYXRhLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLDhDQUE2QztBQUM3QztBQUNBLENBQUMsRUFBQztBQUNGLGtCQUFrQjtBQUNsQixrQ0FBa0MsbUJBQU8sQ0FBQyxxRUFBUTtBQUNsRCxxQ0FBcUMsaUNBQWlDO0FBQ3RFO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CLFdBQVcsUUFBUTtBQUNuQixXQUFXLGVBQWU7QUFDMUIsV0FBVyxRQUFRO0FBQ25CLGFBQWEsa0JBQWtCO0FBQy9CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXFVTVUFSSU9cXERvY3VtZW50c1xcR2l0aHViXFxHYWxheHlLSi13YWxsZXQtLS1IYWNrXFx3ZWJcXG5vZGVfbW9kdWxlc1xcQHN0ZWxsYXJcXHN0ZWxsYXItYmFzZVxcbGliXFxvcGVyYXRpb25zXFxtYW5hZ2VfZGF0YS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMubWFuYWdlRGF0YSA9IG1hbmFnZURhdGE7XG52YXIgX3hkciA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL3hkclwiKSk7XG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KGUpIHsgcmV0dXJuIGUgJiYgZS5fX2VzTW9kdWxlID8gZSA6IHsgXCJkZWZhdWx0XCI6IGUgfTsgfVxuLyoqXG4gKiBUaGlzIG9wZXJhdGlvbiBhZGRzIGRhdGEgZW50cnkgdG8gdGhlIGxlZGdlci5cbiAqIEBmdW5jdGlvblxuICogQGFsaWFzIE9wZXJhdGlvbi5tYW5hZ2VEYXRhXG4gKiBAcGFyYW0ge29iamVjdH0gb3B0cyBPcHRpb25zIG9iamVjdFxuICogQHBhcmFtIHtzdHJpbmd9IG9wdHMubmFtZSAtIFRoZSBuYW1lIG9mIHRoZSBkYXRhIGVudHJ5LlxuICogQHBhcmFtIHtzdHJpbmd8QnVmZmVyfSBvcHRzLnZhbHVlIC0gVGhlIHZhbHVlIG9mIHRoZSBkYXRhIGVudHJ5LlxuICogQHBhcmFtIHtzdHJpbmd9IFtvcHRzLnNvdXJjZV0gLSBUaGUgb3B0aW9uYWwgc291cmNlIGFjY291bnQuXG4gKiBAcmV0dXJucyB7eGRyLk1hbmFnZURhdGFPcH0gTWFuYWdlIERhdGEgb3BlcmF0aW9uXG4gKi9cbmZ1bmN0aW9uIG1hbmFnZURhdGEob3B0cykge1xuICB2YXIgYXR0cmlidXRlcyA9IHt9O1xuICBpZiAoISh0eXBlb2Ygb3B0cy5uYW1lID09PSAnc3RyaW5nJyAmJiBvcHRzLm5hbWUubGVuZ3RoIDw9IDY0KSkge1xuICAgIHRocm93IG5ldyBFcnJvcignbmFtZSBtdXN0IGJlIGEgc3RyaW5nLCB1cCB0byA2NCBjaGFyYWN0ZXJzJyk7XG4gIH1cbiAgYXR0cmlidXRlcy5kYXRhTmFtZSA9IG9wdHMubmFtZTtcbiAgaWYgKHR5cGVvZiBvcHRzLnZhbHVlICE9PSAnc3RyaW5nJyAmJiAhQnVmZmVyLmlzQnVmZmVyKG9wdHMudmFsdWUpICYmIG9wdHMudmFsdWUgIT09IG51bGwpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3ZhbHVlIG11c3QgYmUgYSBzdHJpbmcsIEJ1ZmZlciBvciBudWxsJyk7XG4gIH1cbiAgaWYgKHR5cGVvZiBvcHRzLnZhbHVlID09PSAnc3RyaW5nJykge1xuICAgIGF0dHJpYnV0ZXMuZGF0YVZhbHVlID0gQnVmZmVyLmZyb20ob3B0cy52YWx1ZSk7XG4gIH0gZWxzZSB7XG4gICAgYXR0cmlidXRlcy5kYXRhVmFsdWUgPSBvcHRzLnZhbHVlO1xuICB9XG4gIGlmIChhdHRyaWJ1dGVzLmRhdGFWYWx1ZSAhPT0gbnVsbCAmJiBhdHRyaWJ1dGVzLmRhdGFWYWx1ZS5sZW5ndGggPiA2NCkge1xuICAgIHRocm93IG5ldyBFcnJvcigndmFsdWUgY2Fubm90IGJlIGxvbmdlciB0aGF0IDY0IGJ5dGVzJyk7XG4gIH1cbiAgdmFyIG1hbmFnZURhdGFPcCA9IG5ldyBfeGRyW1wiZGVmYXVsdFwiXS5NYW5hZ2VEYXRhT3AoYXR0cmlidXRlcyk7XG4gIHZhciBvcEF0dHJpYnV0ZXMgPSB7fTtcbiAgb3BBdHRyaWJ1dGVzLmJvZHkgPSBfeGRyW1wiZGVmYXVsdFwiXS5PcGVyYXRpb25Cb2R5Lm1hbmFnZURhdGEobWFuYWdlRGF0YU9wKTtcbiAgdGhpcy5zZXRTb3VyY2VBY2NvdW50KG9wQXR0cmlidXRlcywgb3B0cyk7XG4gIHJldHVybiBuZXcgX3hkcltcImRlZmF1bHRcIl0uT3BlcmF0aW9uKG9wQXR0cmlidXRlcyk7XG59Il0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@stellar/stellar-base/lib/operations/manage_data.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@stellar/stellar-base/lib/operations/manage_sell_offer.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@stellar/stellar-base/lib/operations/manage_sell_offer.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.manageSellOffer = manageSellOffer;\nvar _jsXdr = __webpack_require__(/*! @stellar/js-xdr */ \"(ssr)/./node_modules/@stellar/js-xdr/src/index.js\");\nvar _xdr = _interopRequireDefault(__webpack_require__(/*! ../xdr */ \"(ssr)/./node_modules/@stellar/stellar-base/lib/xdr.js\"));\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { \"default\": e }; }\n/**\n * Returns a XDR ManageSellOfferOp. A \"manage sell offer\" operation creates, updates, or\n * deletes an offer.\n * @function\n * @alias Operation.manageSellOffer\n * @param {object} opts Options object\n * @param {Asset} opts.selling - What you're selling.\n * @param {Asset} opts.buying - What you're buying.\n * @param {string} opts.amount - The total amount you're selling. If 0, deletes the offer.\n * @param {number|string|BigNumber|Object} opts.price - Price of 1 unit of `selling` in terms of `buying`.\n * @param {number} opts.price.n - If `opts.price` is an object: the price numerator\n * @param {number} opts.price.d - If `opts.price` is an object: the price denominator\n * @param {number|string} [opts.offerId ] - If `0`, will create a new offer (default). Otherwise, edits an exisiting offer.\n * @param {string} [opts.source] - The source account (defaults to transaction source).\n * @throws {Error} Throws `Error` when the best rational approximation of `price` cannot be found.\n * @returns {xdr.ManageSellOfferOp} Manage Sell Offer operation\n */\nfunction manageSellOffer(opts) {\n  var attributes = {};\n  attributes.selling = opts.selling.toXDRObject();\n  attributes.buying = opts.buying.toXDRObject();\n  if (!this.isValidAmount(opts.amount, true)) {\n    throw new TypeError(this.constructAmountRequirementsError('amount'));\n  }\n  attributes.amount = this._toXDRAmount(opts.amount);\n  if (opts.price === undefined) {\n    throw new TypeError('price argument is required');\n  }\n  attributes.price = this._toXDRPrice(opts.price);\n  if (opts.offerId !== undefined) {\n    opts.offerId = opts.offerId.toString();\n  } else {\n    opts.offerId = '0';\n  }\n  attributes.offerId = _jsXdr.Hyper.fromString(opts.offerId);\n  var manageSellOfferOp = new _xdr[\"default\"].ManageSellOfferOp(attributes);\n  var opAttributes = {};\n  opAttributes.body = _xdr[\"default\"].OperationBody.manageSellOffer(manageSellOfferOp);\n  this.setSourceAccount(opAttributes, opts);\n  return new _xdr[\"default\"].Operation(opAttributes);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHN0ZWxsYXIvc3RlbGxhci1iYXNlL2xpYi9vcGVyYXRpb25zL21hbmFnZV9zZWxsX29mZmVyLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLDhDQUE2QztBQUM3QztBQUNBLENBQUMsRUFBQztBQUNGLHVCQUF1QjtBQUN2QixhQUFhLG1CQUFPLENBQUMsMEVBQWlCO0FBQ3RDLGtDQUFrQyxtQkFBTyxDQUFDLHFFQUFRO0FBQ2xELHFDQUFxQyxpQ0FBaUM7QUFDdEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsUUFBUTtBQUNuQixXQUFXLE9BQU87QUFDbEIsV0FBVyxPQUFPO0FBQ2xCLFdBQVcsUUFBUTtBQUNuQixXQUFXLGdDQUFnQztBQUMzQyxXQUFXLFFBQVE7QUFDbkIsV0FBVyxRQUFRO0FBQ25CLFdBQVcsZUFBZTtBQUMxQixXQUFXLFFBQVE7QUFDbkIsWUFBWSxPQUFPO0FBQ25CLGFBQWEsdUJBQXVCO0FBQ3BDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcVVNVQVJJT1xcRG9jdW1lbnRzXFxHaXRodWJcXEdhbGF4eUtKLXdhbGxldC0tLUhhY2tcXHdlYlxcbm9kZV9tb2R1bGVzXFxAc3RlbGxhclxcc3RlbGxhci1iYXNlXFxsaWJcXG9wZXJhdGlvbnNcXG1hbmFnZV9zZWxsX29mZmVyLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5tYW5hZ2VTZWxsT2ZmZXIgPSBtYW5hZ2VTZWxsT2ZmZXI7XG52YXIgX2pzWGRyID0gcmVxdWlyZShcIkBzdGVsbGFyL2pzLXhkclwiKTtcbnZhciBfeGRyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4veGRyXCIpKTtcbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoZSkgeyByZXR1cm4gZSAmJiBlLl9fZXNNb2R1bGUgPyBlIDogeyBcImRlZmF1bHRcIjogZSB9OyB9XG4vKipcbiAqIFJldHVybnMgYSBYRFIgTWFuYWdlU2VsbE9mZmVyT3AuIEEgXCJtYW5hZ2Ugc2VsbCBvZmZlclwiIG9wZXJhdGlvbiBjcmVhdGVzLCB1cGRhdGVzLCBvclxuICogZGVsZXRlcyBhbiBvZmZlci5cbiAqIEBmdW5jdGlvblxuICogQGFsaWFzIE9wZXJhdGlvbi5tYW5hZ2VTZWxsT2ZmZXJcbiAqIEBwYXJhbSB7b2JqZWN0fSBvcHRzIE9wdGlvbnMgb2JqZWN0XG4gKiBAcGFyYW0ge0Fzc2V0fSBvcHRzLnNlbGxpbmcgLSBXaGF0IHlvdSdyZSBzZWxsaW5nLlxuICogQHBhcmFtIHtBc3NldH0gb3B0cy5idXlpbmcgLSBXaGF0IHlvdSdyZSBidXlpbmcuXG4gKiBAcGFyYW0ge3N0cmluZ30gb3B0cy5hbW91bnQgLSBUaGUgdG90YWwgYW1vdW50IHlvdSdyZSBzZWxsaW5nLiBJZiAwLCBkZWxldGVzIHRoZSBvZmZlci5cbiAqIEBwYXJhbSB7bnVtYmVyfHN0cmluZ3xCaWdOdW1iZXJ8T2JqZWN0fSBvcHRzLnByaWNlIC0gUHJpY2Ugb2YgMSB1bml0IG9mIGBzZWxsaW5nYCBpbiB0ZXJtcyBvZiBgYnV5aW5nYC5cbiAqIEBwYXJhbSB7bnVtYmVyfSBvcHRzLnByaWNlLm4gLSBJZiBgb3B0cy5wcmljZWAgaXMgYW4gb2JqZWN0OiB0aGUgcHJpY2UgbnVtZXJhdG9yXG4gKiBAcGFyYW0ge251bWJlcn0gb3B0cy5wcmljZS5kIC0gSWYgYG9wdHMucHJpY2VgIGlzIGFuIG9iamVjdDogdGhlIHByaWNlIGRlbm9taW5hdG9yXG4gKiBAcGFyYW0ge251bWJlcnxzdHJpbmd9IFtvcHRzLm9mZmVySWQgXSAtIElmIGAwYCwgd2lsbCBjcmVhdGUgYSBuZXcgb2ZmZXIgKGRlZmF1bHQpLiBPdGhlcndpc2UsIGVkaXRzIGFuIGV4aXNpdGluZyBvZmZlci5cbiAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0cy5zb3VyY2VdIC0gVGhlIHNvdXJjZSBhY2NvdW50IChkZWZhdWx0cyB0byB0cmFuc2FjdGlvbiBzb3VyY2UpLlxuICogQHRocm93cyB7RXJyb3J9IFRocm93cyBgRXJyb3JgIHdoZW4gdGhlIGJlc3QgcmF0aW9uYWwgYXBwcm94aW1hdGlvbiBvZiBgcHJpY2VgIGNhbm5vdCBiZSBmb3VuZC5cbiAqIEByZXR1cm5zIHt4ZHIuTWFuYWdlU2VsbE9mZmVyT3B9IE1hbmFnZSBTZWxsIE9mZmVyIG9wZXJhdGlvblxuICovXG5mdW5jdGlvbiBtYW5hZ2VTZWxsT2ZmZXIob3B0cykge1xuICB2YXIgYXR0cmlidXRlcyA9IHt9O1xuICBhdHRyaWJ1dGVzLnNlbGxpbmcgPSBvcHRzLnNlbGxpbmcudG9YRFJPYmplY3QoKTtcbiAgYXR0cmlidXRlcy5idXlpbmcgPSBvcHRzLmJ1eWluZy50b1hEUk9iamVjdCgpO1xuICBpZiAoIXRoaXMuaXNWYWxpZEFtb3VudChvcHRzLmFtb3VudCwgdHJ1ZSkpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKHRoaXMuY29uc3RydWN0QW1vdW50UmVxdWlyZW1lbnRzRXJyb3IoJ2Ftb3VudCcpKTtcbiAgfVxuICBhdHRyaWJ1dGVzLmFtb3VudCA9IHRoaXMuX3RvWERSQW1vdW50KG9wdHMuYW1vdW50KTtcbiAgaWYgKG9wdHMucHJpY2UgPT09IHVuZGVmaW5lZCkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ3ByaWNlIGFyZ3VtZW50IGlzIHJlcXVpcmVkJyk7XG4gIH1cbiAgYXR0cmlidXRlcy5wcmljZSA9IHRoaXMuX3RvWERSUHJpY2Uob3B0cy5wcmljZSk7XG4gIGlmIChvcHRzLm9mZmVySWQgIT09IHVuZGVmaW5lZCkge1xuICAgIG9wdHMub2ZmZXJJZCA9IG9wdHMub2ZmZXJJZC50b1N0cmluZygpO1xuICB9IGVsc2Uge1xuICAgIG9wdHMub2ZmZXJJZCA9ICcwJztcbiAgfVxuICBhdHRyaWJ1dGVzLm9mZmVySWQgPSBfanNYZHIuSHlwZXIuZnJvbVN0cmluZyhvcHRzLm9mZmVySWQpO1xuICB2YXIgbWFuYWdlU2VsbE9mZmVyT3AgPSBuZXcgX3hkcltcImRlZmF1bHRcIl0uTWFuYWdlU2VsbE9mZmVyT3AoYXR0cmlidXRlcyk7XG4gIHZhciBvcEF0dHJpYnV0ZXMgPSB7fTtcbiAgb3BBdHRyaWJ1dGVzLmJvZHkgPSBfeGRyW1wiZGVmYXVsdFwiXS5PcGVyYXRpb25Cb2R5Lm1hbmFnZVNlbGxPZmZlcihtYW5hZ2VTZWxsT2ZmZXJPcCk7XG4gIHRoaXMuc2V0U291cmNlQWNjb3VudChvcEF0dHJpYnV0ZXMsIG9wdHMpO1xuICByZXR1cm4gbmV3IF94ZHJbXCJkZWZhdWx0XCJdLk9wZXJhdGlvbihvcEF0dHJpYnV0ZXMpO1xufSJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@stellar/stellar-base/lib/operations/manage_sell_offer.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@stellar/stellar-base/lib/operations/path_payment_strict_receive.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/@stellar/stellar-base/lib/operations/path_payment_strict_receive.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.pathPaymentStrictReceive = pathPaymentStrictReceive;\nvar _xdr = _interopRequireDefault(__webpack_require__(/*! ../xdr */ \"(ssr)/./node_modules/@stellar/stellar-base/lib/xdr.js\"));\nvar _decode_encode_muxed_account = __webpack_require__(/*! ../util/decode_encode_muxed_account */ \"(ssr)/./node_modules/@stellar/stellar-base/lib/util/decode_encode_muxed_account.js\");\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { \"default\": e }; }\n/**\n * Creates a PathPaymentStrictReceive operation.\n *\n * A `PathPaymentStrictReceive` operation sends the specified amount to the\n * destination account. It credits the destination with `destAmount` of\n * `destAsset`, while debiting at most `sendMax` of `sendAsset` from the source.\n * The transfer optionally occurs through a path. XLM payments create the\n * destination account if it does not exist.\n *\n * @function\n * @alias Operation.pathPaymentStrictReceive\n * @see https://developers.stellar.org/docs/start/list-of-operations/#path-payment-strict-receive\n *\n * @param {object}  opts - Options object\n * @param {Asset}   opts.sendAsset    - asset to pay with\n * @param {string}  opts.sendMax      - maximum amount of sendAsset to send\n * @param {string}  opts.destination  - destination account to send to\n * @param {Asset}   opts.destAsset    - asset the destination will receive\n * @param {string}  opts.destAmount   - amount the destination receives\n * @param {Asset[]} opts.path         - array of Asset objects to use as the path\n *\n * @param {string}  [opts.source]     - The source account for the payment.\n *     Defaults to the transaction's source account.\n *\n * @returns {xdr.PathPaymentStrictReceiveOp} the resulting path payment op\n */\nfunction pathPaymentStrictReceive(opts) {\n  switch (true) {\n    case !opts.sendAsset:\n      throw new Error('Must specify a send asset');\n    case !this.isValidAmount(opts.sendMax):\n      throw new TypeError(this.constructAmountRequirementsError('sendMax'));\n    case !opts.destAsset:\n      throw new Error('Must provide a destAsset for a payment operation');\n    case !this.isValidAmount(opts.destAmount):\n      throw new TypeError(this.constructAmountRequirementsError('destAmount'));\n    default:\n      break;\n  }\n  var attributes = {};\n  attributes.sendAsset = opts.sendAsset.toXDRObject();\n  attributes.sendMax = this._toXDRAmount(opts.sendMax);\n  try {\n    attributes.destination = (0, _decode_encode_muxed_account.decodeAddressToMuxedAccount)(opts.destination);\n  } catch (e) {\n    throw new Error('destination is invalid');\n  }\n  attributes.destAsset = opts.destAsset.toXDRObject();\n  attributes.destAmount = this._toXDRAmount(opts.destAmount);\n  var path = opts.path ? opts.path : [];\n  attributes.path = path.map(function (x) {\n    return x.toXDRObject();\n  });\n  var payment = new _xdr[\"default\"].PathPaymentStrictReceiveOp(attributes);\n  var opAttributes = {};\n  opAttributes.body = _xdr[\"default\"].OperationBody.pathPaymentStrictReceive(payment);\n  this.setSourceAccount(opAttributes, opts);\n  return new _xdr[\"default\"].Operation(opAttributes);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHN0ZWxsYXIvc3RlbGxhci1iYXNlL2xpYi9vcGVyYXRpb25zL3BhdGhfcGF5bWVudF9zdHJpY3RfcmVjZWl2ZS5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYiw4Q0FBNkM7QUFDN0M7QUFDQSxDQUFDLEVBQUM7QUFDRixnQ0FBZ0M7QUFDaEMsa0NBQWtDLG1CQUFPLENBQUMscUVBQVE7QUFDbEQsbUNBQW1DLG1CQUFPLENBQUMsK0hBQXFDO0FBQ2hGLHFDQUFxQyxpQ0FBaUM7QUFDdEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFNBQVM7QUFDcEIsV0FBVyxTQUFTO0FBQ3BCLFdBQVcsU0FBUztBQUNwQixXQUFXLFNBQVM7QUFDcEIsV0FBVyxTQUFTO0FBQ3BCLFdBQVcsU0FBUztBQUNwQixXQUFXLFNBQVM7QUFDcEI7QUFDQSxXQUFXLFNBQVM7QUFDcEI7QUFDQTtBQUNBLGFBQWEsZ0NBQWdDO0FBQzdDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxVU1VBUklPXFxEb2N1bWVudHNcXEdpdGh1YlxcR2FsYXh5S0otd2FsbGV0LS0tSGFja1xcd2ViXFxub2RlX21vZHVsZXNcXEBzdGVsbGFyXFxzdGVsbGFyLWJhc2VcXGxpYlxcb3BlcmF0aW9uc1xccGF0aF9wYXltZW50X3N0cmljdF9yZWNlaXZlLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5wYXRoUGF5bWVudFN0cmljdFJlY2VpdmUgPSBwYXRoUGF5bWVudFN0cmljdFJlY2VpdmU7XG52YXIgX3hkciA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL3hkclwiKSk7XG52YXIgX2RlY29kZV9lbmNvZGVfbXV4ZWRfYWNjb3VudCA9IHJlcXVpcmUoXCIuLi91dGlsL2RlY29kZV9lbmNvZGVfbXV4ZWRfYWNjb3VudFwiKTtcbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoZSkgeyByZXR1cm4gZSAmJiBlLl9fZXNNb2R1bGUgPyBlIDogeyBcImRlZmF1bHRcIjogZSB9OyB9XG4vKipcbiAqIENyZWF0ZXMgYSBQYXRoUGF5bWVudFN0cmljdFJlY2VpdmUgb3BlcmF0aW9uLlxuICpcbiAqIEEgYFBhdGhQYXltZW50U3RyaWN0UmVjZWl2ZWAgb3BlcmF0aW9uIHNlbmRzIHRoZSBzcGVjaWZpZWQgYW1vdW50IHRvIHRoZVxuICogZGVzdGluYXRpb24gYWNjb3VudC4gSXQgY3JlZGl0cyB0aGUgZGVzdGluYXRpb24gd2l0aCBgZGVzdEFtb3VudGAgb2ZcbiAqIGBkZXN0QXNzZXRgLCB3aGlsZSBkZWJpdGluZyBhdCBtb3N0IGBzZW5kTWF4YCBvZiBgc2VuZEFzc2V0YCBmcm9tIHRoZSBzb3VyY2UuXG4gKiBUaGUgdHJhbnNmZXIgb3B0aW9uYWxseSBvY2N1cnMgdGhyb3VnaCBhIHBhdGguIFhMTSBwYXltZW50cyBjcmVhdGUgdGhlXG4gKiBkZXN0aW5hdGlvbiBhY2NvdW50IGlmIGl0IGRvZXMgbm90IGV4aXN0LlxuICpcbiAqIEBmdW5jdGlvblxuICogQGFsaWFzIE9wZXJhdGlvbi5wYXRoUGF5bWVudFN0cmljdFJlY2VpdmVcbiAqIEBzZWUgaHR0cHM6Ly9kZXZlbG9wZXJzLnN0ZWxsYXIub3JnL2RvY3Mvc3RhcnQvbGlzdC1vZi1vcGVyYXRpb25zLyNwYXRoLXBheW1lbnQtc3RyaWN0LXJlY2VpdmVcbiAqXG4gKiBAcGFyYW0ge29iamVjdH0gIG9wdHMgLSBPcHRpb25zIG9iamVjdFxuICogQHBhcmFtIHtBc3NldH0gICBvcHRzLnNlbmRBc3NldCAgICAtIGFzc2V0IHRvIHBheSB3aXRoXG4gKiBAcGFyYW0ge3N0cmluZ30gIG9wdHMuc2VuZE1heCAgICAgIC0gbWF4aW11bSBhbW91bnQgb2Ygc2VuZEFzc2V0IHRvIHNlbmRcbiAqIEBwYXJhbSB7c3RyaW5nfSAgb3B0cy5kZXN0aW5hdGlvbiAgLSBkZXN0aW5hdGlvbiBhY2NvdW50IHRvIHNlbmQgdG9cbiAqIEBwYXJhbSB7QXNzZXR9ICAgb3B0cy5kZXN0QXNzZXQgICAgLSBhc3NldCB0aGUgZGVzdGluYXRpb24gd2lsbCByZWNlaXZlXG4gKiBAcGFyYW0ge3N0cmluZ30gIG9wdHMuZGVzdEFtb3VudCAgIC0gYW1vdW50IHRoZSBkZXN0aW5hdGlvbiByZWNlaXZlc1xuICogQHBhcmFtIHtBc3NldFtdfSBvcHRzLnBhdGggICAgICAgICAtIGFycmF5IG9mIEFzc2V0IG9iamVjdHMgdG8gdXNlIGFzIHRoZSBwYXRoXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9ICBbb3B0cy5zb3VyY2VdICAgICAtIFRoZSBzb3VyY2UgYWNjb3VudCBmb3IgdGhlIHBheW1lbnQuXG4gKiAgICAgRGVmYXVsdHMgdG8gdGhlIHRyYW5zYWN0aW9uJ3Mgc291cmNlIGFjY291bnQuXG4gKlxuICogQHJldHVybnMge3hkci5QYXRoUGF5bWVudFN0cmljdFJlY2VpdmVPcH0gdGhlIHJlc3VsdGluZyBwYXRoIHBheW1lbnQgb3BcbiAqL1xuZnVuY3Rpb24gcGF0aFBheW1lbnRTdHJpY3RSZWNlaXZlKG9wdHMpIHtcbiAgc3dpdGNoICh0cnVlKSB7XG4gICAgY2FzZSAhb3B0cy5zZW5kQXNzZXQ6XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ011c3Qgc3BlY2lmeSBhIHNlbmQgYXNzZXQnKTtcbiAgICBjYXNlICF0aGlzLmlzVmFsaWRBbW91bnQob3B0cy5zZW5kTWF4KTpcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IodGhpcy5jb25zdHJ1Y3RBbW91bnRSZXF1aXJlbWVudHNFcnJvcignc2VuZE1heCcpKTtcbiAgICBjYXNlICFvcHRzLmRlc3RBc3NldDpcbiAgICAgIHRocm93IG5ldyBFcnJvcignTXVzdCBwcm92aWRlIGEgZGVzdEFzc2V0IGZvciBhIHBheW1lbnQgb3BlcmF0aW9uJyk7XG4gICAgY2FzZSAhdGhpcy5pc1ZhbGlkQW1vdW50KG9wdHMuZGVzdEFtb3VudCk6XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKHRoaXMuY29uc3RydWN0QW1vdW50UmVxdWlyZW1lbnRzRXJyb3IoJ2Rlc3RBbW91bnQnKSk7XG4gICAgZGVmYXVsdDpcbiAgICAgIGJyZWFrO1xuICB9XG4gIHZhciBhdHRyaWJ1dGVzID0ge307XG4gIGF0dHJpYnV0ZXMuc2VuZEFzc2V0ID0gb3B0cy5zZW5kQXNzZXQudG9YRFJPYmplY3QoKTtcbiAgYXR0cmlidXRlcy5zZW5kTWF4ID0gdGhpcy5fdG9YRFJBbW91bnQob3B0cy5zZW5kTWF4KTtcbiAgdHJ5IHtcbiAgICBhdHRyaWJ1dGVzLmRlc3RpbmF0aW9uID0gKDAsIF9kZWNvZGVfZW5jb2RlX211eGVkX2FjY291bnQuZGVjb2RlQWRkcmVzc1RvTXV4ZWRBY2NvdW50KShvcHRzLmRlc3RpbmF0aW9uKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHRocm93IG5ldyBFcnJvcignZGVzdGluYXRpb24gaXMgaW52YWxpZCcpO1xuICB9XG4gIGF0dHJpYnV0ZXMuZGVzdEFzc2V0ID0gb3B0cy5kZXN0QXNzZXQudG9YRFJPYmplY3QoKTtcbiAgYXR0cmlidXRlcy5kZXN0QW1vdW50ID0gdGhpcy5fdG9YRFJBbW91bnQob3B0cy5kZXN0QW1vdW50KTtcbiAgdmFyIHBhdGggPSBvcHRzLnBhdGggPyBvcHRzLnBhdGggOiBbXTtcbiAgYXR0cmlidXRlcy5wYXRoID0gcGF0aC5tYXAoZnVuY3Rpb24gKHgpIHtcbiAgICByZXR1cm4geC50b1hEUk9iamVjdCgpO1xuICB9KTtcbiAgdmFyIHBheW1lbnQgPSBuZXcgX3hkcltcImRlZmF1bHRcIl0uUGF0aFBheW1lbnRTdHJpY3RSZWNlaXZlT3AoYXR0cmlidXRlcyk7XG4gIHZhciBvcEF0dHJpYnV0ZXMgPSB7fTtcbiAgb3BBdHRyaWJ1dGVzLmJvZHkgPSBfeGRyW1wiZGVmYXVsdFwiXS5PcGVyYXRpb25Cb2R5LnBhdGhQYXltZW50U3RyaWN0UmVjZWl2ZShwYXltZW50KTtcbiAgdGhpcy5zZXRTb3VyY2VBY2NvdW50KG9wQXR0cmlidXRlcywgb3B0cyk7XG4gIHJldHVybiBuZXcgX3hkcltcImRlZmF1bHRcIl0uT3BlcmF0aW9uKG9wQXR0cmlidXRlcyk7XG59Il0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@stellar/stellar-base/lib/operations/path_payment_strict_receive.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@stellar/stellar-base/lib/operations/path_payment_strict_send.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/@stellar/stellar-base/lib/operations/path_payment_strict_send.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.pathPaymentStrictSend = pathPaymentStrictSend;\nvar _xdr = _interopRequireDefault(__webpack_require__(/*! ../xdr */ \"(ssr)/./node_modules/@stellar/stellar-base/lib/xdr.js\"));\nvar _decode_encode_muxed_account = __webpack_require__(/*! ../util/decode_encode_muxed_account */ \"(ssr)/./node_modules/@stellar/stellar-base/lib/util/decode_encode_muxed_account.js\");\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { \"default\": e }; }\n/**\n * Creates a PathPaymentStrictSend operation.\n *\n * A `PathPaymentStrictSend` operation sends the specified amount to the\n * destination account crediting at least `destMin` of `destAsset`, optionally\n * through a path. XLM payments create the destination account if it does not\n * exist.\n *\n * @function\n * @alias Operation.pathPaymentStrictSend\n * @see https://developers.stellar.org/docs/start/list-of-operations/#path-payment-strict-send\n *\n * @param {object}  opts - Options object\n * @param {Asset}   opts.sendAsset    - asset to pay with\n * @param {string}  opts.sendAmount   - amount of sendAsset to send (excluding fees)\n * @param {string}  opts.destination  - destination account to send to\n * @param {Asset}   opts.destAsset    - asset the destination will receive\n * @param {string}  opts.destMin      - minimum amount of destAsset to be receive\n * @param {Asset[]} opts.path         - array of Asset objects to use as the path\n *\n * @param {string}  [opts.source]     - The source account for the payment.\n *     Defaults to the transaction's source account.\n *\n * @returns {xdr.Operation}   the resulting path payment operation\n *     (xdr.PathPaymentStrictSendOp)\n */\nfunction pathPaymentStrictSend(opts) {\n  switch (true) {\n    case !opts.sendAsset:\n      throw new Error('Must specify a send asset');\n    case !this.isValidAmount(opts.sendAmount):\n      throw new TypeError(this.constructAmountRequirementsError('sendAmount'));\n    case !opts.destAsset:\n      throw new Error('Must provide a destAsset for a payment operation');\n    case !this.isValidAmount(opts.destMin):\n      throw new TypeError(this.constructAmountRequirementsError('destMin'));\n    default:\n      break;\n  }\n  var attributes = {};\n  attributes.sendAsset = opts.sendAsset.toXDRObject();\n  attributes.sendAmount = this._toXDRAmount(opts.sendAmount);\n  try {\n    attributes.destination = (0, _decode_encode_muxed_account.decodeAddressToMuxedAccount)(opts.destination);\n  } catch (e) {\n    throw new Error('destination is invalid');\n  }\n  attributes.destAsset = opts.destAsset.toXDRObject();\n  attributes.destMin = this._toXDRAmount(opts.destMin);\n  var path = opts.path ? opts.path : [];\n  attributes.path = path.map(function (x) {\n    return x.toXDRObject();\n  });\n  var payment = new _xdr[\"default\"].PathPaymentStrictSendOp(attributes);\n  var opAttributes = {};\n  opAttributes.body = _xdr[\"default\"].OperationBody.pathPaymentStrictSend(payment);\n  this.setSourceAccount(opAttributes, opts);\n  return new _xdr[\"default\"].Operation(opAttributes);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHN0ZWxsYXIvc3RlbGxhci1iYXNlL2xpYi9vcGVyYXRpb25zL3BhdGhfcGF5bWVudF9zdHJpY3Rfc2VuZC5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYiw4Q0FBNkM7QUFDN0M7QUFDQSxDQUFDLEVBQUM7QUFDRiw2QkFBNkI7QUFDN0Isa0NBQWtDLG1CQUFPLENBQUMscUVBQVE7QUFDbEQsbUNBQW1DLG1CQUFPLENBQUMsK0hBQXFDO0FBQ2hGLHFDQUFxQyxpQ0FBaUM7QUFDdEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxTQUFTO0FBQ3BCLFdBQVcsU0FBUztBQUNwQixXQUFXLFNBQVM7QUFDcEIsV0FBVyxTQUFTO0FBQ3BCLFdBQVcsU0FBUztBQUNwQixXQUFXLFNBQVM7QUFDcEIsV0FBVyxTQUFTO0FBQ3BCO0FBQ0EsV0FBVyxTQUFTO0FBQ3BCO0FBQ0E7QUFDQSxhQUFhLGlCQUFpQjtBQUM5QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxVU1VBUklPXFxEb2N1bWVudHNcXEdpdGh1YlxcR2FsYXh5S0otd2FsbGV0LS0tSGFja1xcd2ViXFxub2RlX21vZHVsZXNcXEBzdGVsbGFyXFxzdGVsbGFyLWJhc2VcXGxpYlxcb3BlcmF0aW9uc1xccGF0aF9wYXltZW50X3N0cmljdF9zZW5kLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5wYXRoUGF5bWVudFN0cmljdFNlbmQgPSBwYXRoUGF5bWVudFN0cmljdFNlbmQ7XG52YXIgX3hkciA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL3hkclwiKSk7XG52YXIgX2RlY29kZV9lbmNvZGVfbXV4ZWRfYWNjb3VudCA9IHJlcXVpcmUoXCIuLi91dGlsL2RlY29kZV9lbmNvZGVfbXV4ZWRfYWNjb3VudFwiKTtcbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoZSkgeyByZXR1cm4gZSAmJiBlLl9fZXNNb2R1bGUgPyBlIDogeyBcImRlZmF1bHRcIjogZSB9OyB9XG4vKipcbiAqIENyZWF0ZXMgYSBQYXRoUGF5bWVudFN0cmljdFNlbmQgb3BlcmF0aW9uLlxuICpcbiAqIEEgYFBhdGhQYXltZW50U3RyaWN0U2VuZGAgb3BlcmF0aW9uIHNlbmRzIHRoZSBzcGVjaWZpZWQgYW1vdW50IHRvIHRoZVxuICogZGVzdGluYXRpb24gYWNjb3VudCBjcmVkaXRpbmcgYXQgbGVhc3QgYGRlc3RNaW5gIG9mIGBkZXN0QXNzZXRgLCBvcHRpb25hbGx5XG4gKiB0aHJvdWdoIGEgcGF0aC4gWExNIHBheW1lbnRzIGNyZWF0ZSB0aGUgZGVzdGluYXRpb24gYWNjb3VudCBpZiBpdCBkb2VzIG5vdFxuICogZXhpc3QuXG4gKlxuICogQGZ1bmN0aW9uXG4gKiBAYWxpYXMgT3BlcmF0aW9uLnBhdGhQYXltZW50U3RyaWN0U2VuZFxuICogQHNlZSBodHRwczovL2RldmVsb3BlcnMuc3RlbGxhci5vcmcvZG9jcy9zdGFydC9saXN0LW9mLW9wZXJhdGlvbnMvI3BhdGgtcGF5bWVudC1zdHJpY3Qtc2VuZFxuICpcbiAqIEBwYXJhbSB7b2JqZWN0fSAgb3B0cyAtIE9wdGlvbnMgb2JqZWN0XG4gKiBAcGFyYW0ge0Fzc2V0fSAgIG9wdHMuc2VuZEFzc2V0ICAgIC0gYXNzZXQgdG8gcGF5IHdpdGhcbiAqIEBwYXJhbSB7c3RyaW5nfSAgb3B0cy5zZW5kQW1vdW50ICAgLSBhbW91bnQgb2Ygc2VuZEFzc2V0IHRvIHNlbmQgKGV4Y2x1ZGluZyBmZWVzKVxuICogQHBhcmFtIHtzdHJpbmd9ICBvcHRzLmRlc3RpbmF0aW9uICAtIGRlc3RpbmF0aW9uIGFjY291bnQgdG8gc2VuZCB0b1xuICogQHBhcmFtIHtBc3NldH0gICBvcHRzLmRlc3RBc3NldCAgICAtIGFzc2V0IHRoZSBkZXN0aW5hdGlvbiB3aWxsIHJlY2VpdmVcbiAqIEBwYXJhbSB7c3RyaW5nfSAgb3B0cy5kZXN0TWluICAgICAgLSBtaW5pbXVtIGFtb3VudCBvZiBkZXN0QXNzZXQgdG8gYmUgcmVjZWl2ZVxuICogQHBhcmFtIHtBc3NldFtdfSBvcHRzLnBhdGggICAgICAgICAtIGFycmF5IG9mIEFzc2V0IG9iamVjdHMgdG8gdXNlIGFzIHRoZSBwYXRoXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9ICBbb3B0cy5zb3VyY2VdICAgICAtIFRoZSBzb3VyY2UgYWNjb3VudCBmb3IgdGhlIHBheW1lbnQuXG4gKiAgICAgRGVmYXVsdHMgdG8gdGhlIHRyYW5zYWN0aW9uJ3Mgc291cmNlIGFjY291bnQuXG4gKlxuICogQHJldHVybnMge3hkci5PcGVyYXRpb259ICAgdGhlIHJlc3VsdGluZyBwYXRoIHBheW1lbnQgb3BlcmF0aW9uXG4gKiAgICAgKHhkci5QYXRoUGF5bWVudFN0cmljdFNlbmRPcClcbiAqL1xuZnVuY3Rpb24gcGF0aFBheW1lbnRTdHJpY3RTZW5kKG9wdHMpIHtcbiAgc3dpdGNoICh0cnVlKSB7XG4gICAgY2FzZSAhb3B0cy5zZW5kQXNzZXQ6XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ011c3Qgc3BlY2lmeSBhIHNlbmQgYXNzZXQnKTtcbiAgICBjYXNlICF0aGlzLmlzVmFsaWRBbW91bnQob3B0cy5zZW5kQW1vdW50KTpcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IodGhpcy5jb25zdHJ1Y3RBbW91bnRSZXF1aXJlbWVudHNFcnJvcignc2VuZEFtb3VudCcpKTtcbiAgICBjYXNlICFvcHRzLmRlc3RBc3NldDpcbiAgICAgIHRocm93IG5ldyBFcnJvcignTXVzdCBwcm92aWRlIGEgZGVzdEFzc2V0IGZvciBhIHBheW1lbnQgb3BlcmF0aW9uJyk7XG4gICAgY2FzZSAhdGhpcy5pc1ZhbGlkQW1vdW50KG9wdHMuZGVzdE1pbik6XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKHRoaXMuY29uc3RydWN0QW1vdW50UmVxdWlyZW1lbnRzRXJyb3IoJ2Rlc3RNaW4nKSk7XG4gICAgZGVmYXVsdDpcbiAgICAgIGJyZWFrO1xuICB9XG4gIHZhciBhdHRyaWJ1dGVzID0ge307XG4gIGF0dHJpYnV0ZXMuc2VuZEFzc2V0ID0gb3B0cy5zZW5kQXNzZXQudG9YRFJPYmplY3QoKTtcbiAgYXR0cmlidXRlcy5zZW5kQW1vdW50ID0gdGhpcy5fdG9YRFJBbW91bnQob3B0cy5zZW5kQW1vdW50KTtcbiAgdHJ5IHtcbiAgICBhdHRyaWJ1dGVzLmRlc3RpbmF0aW9uID0gKDAsIF9kZWNvZGVfZW5jb2RlX211eGVkX2FjY291bnQuZGVjb2RlQWRkcmVzc1RvTXV4ZWRBY2NvdW50KShvcHRzLmRlc3RpbmF0aW9uKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHRocm93IG5ldyBFcnJvcignZGVzdGluYXRpb24gaXMgaW52YWxpZCcpO1xuICB9XG4gIGF0dHJpYnV0ZXMuZGVzdEFzc2V0ID0gb3B0cy5kZXN0QXNzZXQudG9YRFJPYmplY3QoKTtcbiAgYXR0cmlidXRlcy5kZXN0TWluID0gdGhpcy5fdG9YRFJBbW91bnQob3B0cy5kZXN0TWluKTtcbiAgdmFyIHBhdGggPSBvcHRzLnBhdGggPyBvcHRzLnBhdGggOiBbXTtcbiAgYXR0cmlidXRlcy5wYXRoID0gcGF0aC5tYXAoZnVuY3Rpb24gKHgpIHtcbiAgICByZXR1cm4geC50b1hEUk9iamVjdCgpO1xuICB9KTtcbiAgdmFyIHBheW1lbnQgPSBuZXcgX3hkcltcImRlZmF1bHRcIl0uUGF0aFBheW1lbnRTdHJpY3RTZW5kT3AoYXR0cmlidXRlcyk7XG4gIHZhciBvcEF0dHJpYnV0ZXMgPSB7fTtcbiAgb3BBdHRyaWJ1dGVzLmJvZHkgPSBfeGRyW1wiZGVmYXVsdFwiXS5PcGVyYXRpb25Cb2R5LnBhdGhQYXltZW50U3RyaWN0U2VuZChwYXltZW50KTtcbiAgdGhpcy5zZXRTb3VyY2VBY2NvdW50KG9wQXR0cmlidXRlcywgb3B0cyk7XG4gIHJldHVybiBuZXcgX3hkcltcImRlZmF1bHRcIl0uT3BlcmF0aW9uKG9wQXR0cmlidXRlcyk7XG59Il0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@stellar/stellar-base/lib/operations/path_payment_strict_send.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@stellar/stellar-base/lib/operations/payment.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@stellar/stellar-base/lib/operations/payment.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.payment = payment;\nvar _xdr = _interopRequireDefault(__webpack_require__(/*! ../xdr */ \"(ssr)/./node_modules/@stellar/stellar-base/lib/xdr.js\"));\nvar _decode_encode_muxed_account = __webpack_require__(/*! ../util/decode_encode_muxed_account */ \"(ssr)/./node_modules/@stellar/stellar-base/lib/util/decode_encode_muxed_account.js\");\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { \"default\": e }; }\n/**\n * Create a payment operation.\n *\n * @function\n * @alias Operation.payment\n * @see https://developers.stellar.org/docs/start/list-of-operations/#payment\n *\n * @param {object}  opts - Options object\n * @param {string}  opts.destination  - destination account ID\n * @param {Asset}   opts.asset        - asset to send\n * @param {string}  opts.amount       - amount to send\n *\n * @param {string}  [opts.source]     - The source account for the payment.\n *     Defaults to the transaction's source account.\n *\n * @returns {xdr.Operation}   The resulting payment operation (xdr.PaymentOp)\n */\nfunction payment(opts) {\n  if (!opts.asset) {\n    throw new Error('Must provide an asset for a payment operation');\n  }\n  if (!this.isValidAmount(opts.amount)) {\n    throw new TypeError(this.constructAmountRequirementsError('amount'));\n  }\n  var attributes = {};\n  try {\n    attributes.destination = (0, _decode_encode_muxed_account.decodeAddressToMuxedAccount)(opts.destination);\n  } catch (e) {\n    throw new Error('destination is invalid');\n  }\n  attributes.asset = opts.asset.toXDRObject();\n  attributes.amount = this._toXDRAmount(opts.amount);\n  var paymentOp = new _xdr[\"default\"].PaymentOp(attributes);\n  var opAttributes = {};\n  opAttributes.body = _xdr[\"default\"].OperationBody.payment(paymentOp);\n  this.setSourceAccount(opAttributes, opts);\n  return new _xdr[\"default\"].Operation(opAttributes);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHN0ZWxsYXIvc3RlbGxhci1iYXNlL2xpYi9vcGVyYXRpb25zL3BheW1lbnQuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsOENBQTZDO0FBQzdDO0FBQ0EsQ0FBQyxFQUFDO0FBQ0YsZUFBZTtBQUNmLGtDQUFrQyxtQkFBTyxDQUFDLHFFQUFRO0FBQ2xELG1DQUFtQyxtQkFBTyxDQUFDLCtIQUFxQztBQUNoRixxQ0FBcUMsaUNBQWlDO0FBQ3RFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxTQUFTO0FBQ3BCLFdBQVcsU0FBUztBQUNwQixXQUFXLFNBQVM7QUFDcEIsV0FBVyxTQUFTO0FBQ3BCO0FBQ0EsV0FBVyxTQUFTO0FBQ3BCO0FBQ0E7QUFDQSxhQUFhLGlCQUFpQjtBQUM5QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXFVTVUFSSU9cXERvY3VtZW50c1xcR2l0aHViXFxHYWxheHlLSi13YWxsZXQtLS1IYWNrXFx3ZWJcXG5vZGVfbW9kdWxlc1xcQHN0ZWxsYXJcXHN0ZWxsYXItYmFzZVxcbGliXFxvcGVyYXRpb25zXFxwYXltZW50LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5wYXltZW50ID0gcGF5bWVudDtcbnZhciBfeGRyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4veGRyXCIpKTtcbnZhciBfZGVjb2RlX2VuY29kZV9tdXhlZF9hY2NvdW50ID0gcmVxdWlyZShcIi4uL3V0aWwvZGVjb2RlX2VuY29kZV9tdXhlZF9hY2NvdW50XCIpO1xuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChlKSB7IHJldHVybiBlICYmIGUuX19lc01vZHVsZSA/IGUgOiB7IFwiZGVmYXVsdFwiOiBlIH07IH1cbi8qKlxuICogQ3JlYXRlIGEgcGF5bWVudCBvcGVyYXRpb24uXG4gKlxuICogQGZ1bmN0aW9uXG4gKiBAYWxpYXMgT3BlcmF0aW9uLnBheW1lbnRcbiAqIEBzZWUgaHR0cHM6Ly9kZXZlbG9wZXJzLnN0ZWxsYXIub3JnL2RvY3Mvc3RhcnQvbGlzdC1vZi1vcGVyYXRpb25zLyNwYXltZW50XG4gKlxuICogQHBhcmFtIHtvYmplY3R9ICBvcHRzIC0gT3B0aW9ucyBvYmplY3RcbiAqIEBwYXJhbSB7c3RyaW5nfSAgb3B0cy5kZXN0aW5hdGlvbiAgLSBkZXN0aW5hdGlvbiBhY2NvdW50IElEXG4gKiBAcGFyYW0ge0Fzc2V0fSAgIG9wdHMuYXNzZXQgICAgICAgIC0gYXNzZXQgdG8gc2VuZFxuICogQHBhcmFtIHtzdHJpbmd9ICBvcHRzLmFtb3VudCAgICAgICAtIGFtb3VudCB0byBzZW5kXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9ICBbb3B0cy5zb3VyY2VdICAgICAtIFRoZSBzb3VyY2UgYWNjb3VudCBmb3IgdGhlIHBheW1lbnQuXG4gKiAgICAgRGVmYXVsdHMgdG8gdGhlIHRyYW5zYWN0aW9uJ3Mgc291cmNlIGFjY291bnQuXG4gKlxuICogQHJldHVybnMge3hkci5PcGVyYXRpb259ICAgVGhlIHJlc3VsdGluZyBwYXltZW50IG9wZXJhdGlvbiAoeGRyLlBheW1lbnRPcClcbiAqL1xuZnVuY3Rpb24gcGF5bWVudChvcHRzKSB7XG4gIGlmICghb3B0cy5hc3NldCkge1xuICAgIHRocm93IG5ldyBFcnJvcignTXVzdCBwcm92aWRlIGFuIGFzc2V0IGZvciBhIHBheW1lbnQgb3BlcmF0aW9uJyk7XG4gIH1cbiAgaWYgKCF0aGlzLmlzVmFsaWRBbW91bnQob3B0cy5hbW91bnQpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcih0aGlzLmNvbnN0cnVjdEFtb3VudFJlcXVpcmVtZW50c0Vycm9yKCdhbW91bnQnKSk7XG4gIH1cbiAgdmFyIGF0dHJpYnV0ZXMgPSB7fTtcbiAgdHJ5IHtcbiAgICBhdHRyaWJ1dGVzLmRlc3RpbmF0aW9uID0gKDAsIF9kZWNvZGVfZW5jb2RlX211eGVkX2FjY291bnQuZGVjb2RlQWRkcmVzc1RvTXV4ZWRBY2NvdW50KShvcHRzLmRlc3RpbmF0aW9uKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHRocm93IG5ldyBFcnJvcignZGVzdGluYXRpb24gaXMgaW52YWxpZCcpO1xuICB9XG4gIGF0dHJpYnV0ZXMuYXNzZXQgPSBvcHRzLmFzc2V0LnRvWERST2JqZWN0KCk7XG4gIGF0dHJpYnV0ZXMuYW1vdW50ID0gdGhpcy5fdG9YRFJBbW91bnQob3B0cy5hbW91bnQpO1xuICB2YXIgcGF5bWVudE9wID0gbmV3IF94ZHJbXCJkZWZhdWx0XCJdLlBheW1lbnRPcChhdHRyaWJ1dGVzKTtcbiAgdmFyIG9wQXR0cmlidXRlcyA9IHt9O1xuICBvcEF0dHJpYnV0ZXMuYm9keSA9IF94ZHJbXCJkZWZhdWx0XCJdLk9wZXJhdGlvbkJvZHkucGF5bWVudChwYXltZW50T3ApO1xuICB0aGlzLnNldFNvdXJjZUFjY291bnQob3BBdHRyaWJ1dGVzLCBvcHRzKTtcbiAgcmV0dXJuIG5ldyBfeGRyW1wiZGVmYXVsdFwiXS5PcGVyYXRpb24ob3BBdHRyaWJ1dGVzKTtcbn0iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@stellar/stellar-base/lib/operations/payment.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@stellar/stellar-base/lib/operations/restore_footprint.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@stellar/stellar-base/lib/operations/restore_footprint.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.restoreFootprint = restoreFootprint;\nvar _xdr = _interopRequireDefault(__webpack_require__(/*! ../xdr */ \"(ssr)/./node_modules/@stellar/stellar-base/lib/xdr.js\"));\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { \"default\": e }; }\n/**\n * Builds an operation to restore the archived ledger entries specified\n * by the ledger keys.\n *\n * The ledger keys to restore are specified separately from the operation\n * in read-write footprint of the transaction.\n *\n * It takes no parameters because the relevant footprint is derived from the\n * transaction itself. See {@link TransactionBuilder}'s `opts.sorobanData`\n * parameter (or {@link TransactionBuilder.setSorobanData} /\n * {@link TransactionBuilder.setLedgerKeys}), which is a\n * {@link xdr.SorobanTransactionData} instance that contains fee data & resource\n * usage as part of {@link xdr.SorobanTransactionData}.\n *\n * @function\n * @alias Operation.restoreFootprint\n *\n * @param {object} [opts] - an optional set of parameters\n * @param {string} [opts.source] - an optional source account\n *\n * @returns {xdr.Operation} a Bump Footprint Expiration operation\n *    (xdr.RestoreFootprintOp)\n */\nfunction restoreFootprint() {\n  var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var op = new _xdr[\"default\"].RestoreFootprintOp({\n    ext: new _xdr[\"default\"].ExtensionPoint(0)\n  });\n  var opAttributes = {\n    body: _xdr[\"default\"].OperationBody.restoreFootprint(op)\n  };\n  this.setSourceAccount(opAttributes, opts !== null && opts !== void 0 ? opts : {});\n  return new _xdr[\"default\"].Operation(opAttributes);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHN0ZWxsYXIvc3RlbGxhci1iYXNlL2xpYi9vcGVyYXRpb25zL3Jlc3RvcmVfZm9vdHByaW50LmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLDhDQUE2QztBQUM3QztBQUNBLENBQUMsRUFBQztBQUNGLHdCQUF3QjtBQUN4QixrQ0FBa0MsbUJBQU8sQ0FBQyxxRUFBUTtBQUNsRCxxQ0FBcUMsaUNBQWlDO0FBQ3RFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0QkFBNEIseUJBQXlCO0FBQ3JELGtCQUFrQix5Q0FBeUM7QUFDM0QsSUFBSSx1Q0FBdUM7QUFDM0MsSUFBSSxrQ0FBa0M7QUFDdEMscUJBQXFCLGlDQUFpQztBQUN0RDtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsUUFBUTtBQUNuQixXQUFXLFFBQVE7QUFDbkI7QUFDQSxhQUFhLGVBQWU7QUFDNUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBLGtGQUFrRjtBQUNsRjtBQUNBIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXFVTVUFSSU9cXERvY3VtZW50c1xcR2l0aHViXFxHYWxheHlLSi13YWxsZXQtLS1IYWNrXFx3ZWJcXG5vZGVfbW9kdWxlc1xcQHN0ZWxsYXJcXHN0ZWxsYXItYmFzZVxcbGliXFxvcGVyYXRpb25zXFxyZXN0b3JlX2Zvb3RwcmludC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMucmVzdG9yZUZvb3RwcmludCA9IHJlc3RvcmVGb290cHJpbnQ7XG52YXIgX3hkciA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL3hkclwiKSk7XG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KGUpIHsgcmV0dXJuIGUgJiYgZS5fX2VzTW9kdWxlID8gZSA6IHsgXCJkZWZhdWx0XCI6IGUgfTsgfVxuLyoqXG4gKiBCdWlsZHMgYW4gb3BlcmF0aW9uIHRvIHJlc3RvcmUgdGhlIGFyY2hpdmVkIGxlZGdlciBlbnRyaWVzIHNwZWNpZmllZFxuICogYnkgdGhlIGxlZGdlciBrZXlzLlxuICpcbiAqIFRoZSBsZWRnZXIga2V5cyB0byByZXN0b3JlIGFyZSBzcGVjaWZpZWQgc2VwYXJhdGVseSBmcm9tIHRoZSBvcGVyYXRpb25cbiAqIGluIHJlYWQtd3JpdGUgZm9vdHByaW50IG9mIHRoZSB0cmFuc2FjdGlvbi5cbiAqXG4gKiBJdCB0YWtlcyBubyBwYXJhbWV0ZXJzIGJlY2F1c2UgdGhlIHJlbGV2YW50IGZvb3RwcmludCBpcyBkZXJpdmVkIGZyb20gdGhlXG4gKiB0cmFuc2FjdGlvbiBpdHNlbGYuIFNlZSB7QGxpbmsgVHJhbnNhY3Rpb25CdWlsZGVyfSdzIGBvcHRzLnNvcm9iYW5EYXRhYFxuICogcGFyYW1ldGVyIChvciB7QGxpbmsgVHJhbnNhY3Rpb25CdWlsZGVyLnNldFNvcm9iYW5EYXRhfSAvXG4gKiB7QGxpbmsgVHJhbnNhY3Rpb25CdWlsZGVyLnNldExlZGdlcktleXN9KSwgd2hpY2ggaXMgYVxuICoge0BsaW5rIHhkci5Tb3JvYmFuVHJhbnNhY3Rpb25EYXRhfSBpbnN0YW5jZSB0aGF0IGNvbnRhaW5zIGZlZSBkYXRhICYgcmVzb3VyY2VcbiAqIHVzYWdlIGFzIHBhcnQgb2Yge0BsaW5rIHhkci5Tb3JvYmFuVHJhbnNhY3Rpb25EYXRhfS5cbiAqXG4gKiBAZnVuY3Rpb25cbiAqIEBhbGlhcyBPcGVyYXRpb24ucmVzdG9yZUZvb3RwcmludFxuICpcbiAqIEBwYXJhbSB7b2JqZWN0fSBbb3B0c10gLSBhbiBvcHRpb25hbCBzZXQgb2YgcGFyYW1ldGVyc1xuICogQHBhcmFtIHtzdHJpbmd9IFtvcHRzLnNvdXJjZV0gLSBhbiBvcHRpb25hbCBzb3VyY2UgYWNjb3VudFxuICpcbiAqIEByZXR1cm5zIHt4ZHIuT3BlcmF0aW9ufSBhIEJ1bXAgRm9vdHByaW50IEV4cGlyYXRpb24gb3BlcmF0aW9uXG4gKiAgICAoeGRyLlJlc3RvcmVGb290cHJpbnRPcClcbiAqL1xuZnVuY3Rpb24gcmVzdG9yZUZvb3RwcmludCgpIHtcbiAgdmFyIG9wdHMgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9O1xuICB2YXIgb3AgPSBuZXcgX3hkcltcImRlZmF1bHRcIl0uUmVzdG9yZUZvb3RwcmludE9wKHtcbiAgICBleHQ6IG5ldyBfeGRyW1wiZGVmYXVsdFwiXS5FeHRlbnNpb25Qb2ludCgwKVxuICB9KTtcbiAgdmFyIG9wQXR0cmlidXRlcyA9IHtcbiAgICBib2R5OiBfeGRyW1wiZGVmYXVsdFwiXS5PcGVyYXRpb25Cb2R5LnJlc3RvcmVGb290cHJpbnQob3ApXG4gIH07XG4gIHRoaXMuc2V0U291cmNlQWNjb3VudChvcEF0dHJpYnV0ZXMsIG9wdHMgIT09IG51bGwgJiYgb3B0cyAhPT0gdm9pZCAwID8gb3B0cyA6IHt9KTtcbiAgcmV0dXJuIG5ldyBfeGRyW1wiZGVmYXVsdFwiXS5PcGVyYXRpb24ob3BBdHRyaWJ1dGVzKTtcbn0iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@stellar/stellar-base/lib/operations/restore_footprint.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@stellar/stellar-base/lib/operations/revoke_sponsorship.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@stellar/stellar-base/lib/operations/revoke_sponsorship.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.revokeAccountSponsorship = revokeAccountSponsorship;\nexports.revokeClaimableBalanceSponsorship = revokeClaimableBalanceSponsorship;\nexports.revokeDataSponsorship = revokeDataSponsorship;\nexports.revokeLiquidityPoolSponsorship = revokeLiquidityPoolSponsorship;\nexports.revokeOfferSponsorship = revokeOfferSponsorship;\nexports.revokeSignerSponsorship = revokeSignerSponsorship;\nexports.revokeTrustlineSponsorship = revokeTrustlineSponsorship;\nvar _xdr = _interopRequireDefault(__webpack_require__(/*! ../xdr */ \"(ssr)/./node_modules/@stellar/stellar-base/lib/xdr.js\"));\nvar _strkey = __webpack_require__(/*! ../strkey */ \"(ssr)/./node_modules/@stellar/stellar-base/lib/strkey.js\");\nvar _keypair = __webpack_require__(/*! ../keypair */ \"(ssr)/./node_modules/@stellar/stellar-base/lib/keypair.js\");\nvar _asset = __webpack_require__(/*! ../asset */ \"(ssr)/./node_modules/@stellar/stellar-base/lib/asset.js\");\nvar _liquidity_pool_id = __webpack_require__(/*! ../liquidity_pool_id */ \"(ssr)/./node_modules/@stellar/stellar-base/lib/liquidity_pool_id.js\");\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { \"default\": e }; }\n/**\n * Create a \"revoke sponsorship\" operation for an account.\n *\n * @function\n * @alias Operation.revokeAccountSponsorship\n * @param {object} opts Options object\n * @param {string} opts.account - The sponsored account ID.\n * @param {string} [opts.source] - The source account for the operation. Defaults to the transaction's source account.\n * @returns {xdr.Operation} xdr operation\n *\n * @example\n * const op = Operation.revokeAccountSponsorship({\n *   account: 'GDGU5OAPHNPU5UCLE5RDJHG7PXZFQYWKCFOEXSXNMR6KRQRI5T6XXCD7\n * });\n *\n */\nfunction revokeAccountSponsorship() {\n  var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  if (!_strkey.StrKey.isValidEd25519PublicKey(opts.account)) {\n    throw new Error('account is invalid');\n  }\n  var ledgerKey = _xdr[\"default\"].LedgerKey.account(new _xdr[\"default\"].LedgerKeyAccount({\n    accountId: _keypair.Keypair.fromPublicKey(opts.account).xdrAccountId()\n  }));\n  var op = _xdr[\"default\"].RevokeSponsorshipOp.revokeSponsorshipLedgerEntry(ledgerKey);\n  var opAttributes = {};\n  opAttributes.body = _xdr[\"default\"].OperationBody.revokeSponsorship(op);\n  this.setSourceAccount(opAttributes, opts);\n  return new _xdr[\"default\"].Operation(opAttributes);\n}\n\n/**\n * Create a \"revoke sponsorship\" operation for a trustline.\n *\n * @function\n * @alias Operation.revokeTrustlineSponsorship\n * @param {object} opts Options object\n * @param {string} opts.account - The account ID which owns the trustline.\n * @param {Asset | LiquidityPoolId} opts.asset - The trustline asset.\n * @param {string} [opts.source] - The source account for the operation. Defaults to the transaction's source account.\n * @returns {xdr.Operation} xdr operation\n *\n * @example\n * const op = Operation.revokeTrustlineSponsorship({\n *   account: 'GDGU5OAPHNPU5UCLE5RDJHG7PXZFQYWKCFOEXSXNMR6KRQRI5T6XXCD7\n *   asset: new StellarBase.LiquidityPoolId(\n *     'USDUSD',\n *     'GDGU5OAPHNPU5UCLE5RDJHG7PXZFQYWKCFOEXSXNMR6KRQRI5T6XXCD7'\n *   )\n * });\n *\n */\nfunction revokeTrustlineSponsorship() {\n  var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  if (!_strkey.StrKey.isValidEd25519PublicKey(opts.account)) {\n    throw new Error('account is invalid');\n  }\n  var asset;\n  if (opts.asset instanceof _asset.Asset) {\n    asset = opts.asset.toTrustLineXDRObject();\n  } else if (opts.asset instanceof _liquidity_pool_id.LiquidityPoolId) {\n    asset = opts.asset.toXDRObject();\n  } else {\n    throw new TypeError('asset must be an Asset or LiquidityPoolId');\n  }\n  var ledgerKey = _xdr[\"default\"].LedgerKey.trustline(new _xdr[\"default\"].LedgerKeyTrustLine({\n    accountId: _keypair.Keypair.fromPublicKey(opts.account).xdrAccountId(),\n    asset: asset\n  }));\n  var op = _xdr[\"default\"].RevokeSponsorshipOp.revokeSponsorshipLedgerEntry(ledgerKey);\n  var opAttributes = {};\n  opAttributes.body = _xdr[\"default\"].OperationBody.revokeSponsorship(op);\n  this.setSourceAccount(opAttributes, opts);\n  return new _xdr[\"default\"].Operation(opAttributes);\n}\n\n/**\n * Create a \"revoke sponsorship\" operation for an offer.\n *\n * @function\n * @alias Operation.revokeOfferSponsorship\n * @param {object} opts Options object\n * @param {string} opts.seller - The account ID which created the offer.\n * @param {string} opts.offerId - The offer ID.\n * @param {string} [opts.source] - The source account for the operation. Defaults to the transaction's source account.\n * @returns {xdr.Operation} xdr operation\n *\n * @example\n * const op = Operation.revokeOfferSponsorship({\n *   seller: 'GDGU5OAPHNPU5UCLE5RDJHG7PXZFQYWKCFOEXSXNMR6KRQRI5T6XXCD7\n *   offerId: '1234'\n * });\n *\n */\nfunction revokeOfferSponsorship() {\n  var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  if (!_strkey.StrKey.isValidEd25519PublicKey(opts.seller)) {\n    throw new Error('seller is invalid');\n  }\n  if (typeof opts.offerId !== 'string') {\n    throw new Error('offerId is invalid');\n  }\n  var ledgerKey = _xdr[\"default\"].LedgerKey.offer(new _xdr[\"default\"].LedgerKeyOffer({\n    sellerId: _keypair.Keypair.fromPublicKey(opts.seller).xdrAccountId(),\n    offerId: _xdr[\"default\"].Int64.fromString(opts.offerId)\n  }));\n  var op = _xdr[\"default\"].RevokeSponsorshipOp.revokeSponsorshipLedgerEntry(ledgerKey);\n  var opAttributes = {};\n  opAttributes.body = _xdr[\"default\"].OperationBody.revokeSponsorship(op);\n  this.setSourceAccount(opAttributes, opts);\n  return new _xdr[\"default\"].Operation(opAttributes);\n}\n\n/**\n * Create a \"revoke sponsorship\" operation for a data entry.\n *\n * @function\n * @alias Operation.revokeDataSponsorship\n * @param {object} opts Options object\n * @param {string} opts.account - The account ID which owns the data entry.\n * @param {string} opts.name - The name of the data entry\n * @param {string} [opts.source] - The source account for the operation. Defaults to the transaction's source account.\n * @returns {xdr.Operation} xdr operation\n *\n * @example\n * const op = Operation.revokeDataSponsorship({\n *   account: 'GDGU5OAPHNPU5UCLE5RDJHG7PXZFQYWKCFOEXSXNMR6KRQRI5T6XXCD7\n *   name: 'foo'\n * });\n *\n */\nfunction revokeDataSponsorship() {\n  var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  if (!_strkey.StrKey.isValidEd25519PublicKey(opts.account)) {\n    throw new Error('account is invalid');\n  }\n  if (typeof opts.name !== 'string' || opts.name.length > 64) {\n    throw new Error('name must be a string, up to 64 characters');\n  }\n  var ledgerKey = _xdr[\"default\"].LedgerKey.data(new _xdr[\"default\"].LedgerKeyData({\n    accountId: _keypair.Keypair.fromPublicKey(opts.account).xdrAccountId(),\n    dataName: opts.name\n  }));\n  var op = _xdr[\"default\"].RevokeSponsorshipOp.revokeSponsorshipLedgerEntry(ledgerKey);\n  var opAttributes = {};\n  opAttributes.body = _xdr[\"default\"].OperationBody.revokeSponsorship(op);\n  this.setSourceAccount(opAttributes, opts);\n  return new _xdr[\"default\"].Operation(opAttributes);\n}\n\n/**\n * Create a \"revoke sponsorship\" operation for a claimable balance.\n *\n * @function\n * @alias Operation.revokeClaimableBalanceSponsorship\n * @param {object} opts Options object\n * @param {string} opts.balanceId - The sponsored claimable balance ID.\n * @param {string} [opts.source] - The source account for the operation. Defaults to the transaction's source account.\n * @returns {xdr.Operation} xdr operation\n *\n * @example\n * const op = Operation.revokeClaimableBalanceSponsorship({\n *   balanceId: '00000000da0d57da7d4850e7fc10d2a9d0ebc731f7afb40574c03395b17d49149b91f5be',\n * });\n *\n */\nfunction revokeClaimableBalanceSponsorship() {\n  var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  if (typeof opts.balanceId !== 'string') {\n    throw new Error('balanceId is invalid');\n  }\n  var ledgerKey = _xdr[\"default\"].LedgerKey.claimableBalance(new _xdr[\"default\"].LedgerKeyClaimableBalance({\n    balanceId: _xdr[\"default\"].ClaimableBalanceId.fromXDR(opts.balanceId, 'hex')\n  }));\n  var op = _xdr[\"default\"].RevokeSponsorshipOp.revokeSponsorshipLedgerEntry(ledgerKey);\n  var opAttributes = {};\n  opAttributes.body = _xdr[\"default\"].OperationBody.revokeSponsorship(op);\n  this.setSourceAccount(opAttributes, opts);\n  return new _xdr[\"default\"].Operation(opAttributes);\n}\n\n/**\n * Creates a \"revoke sponsorship\" operation for a liquidity pool.\n *\n * @function\n * @alias Operation.revokeLiquidityPoolSponsorship\n * @param {object} opts – Options object.\n * @param {string} opts.liquidityPoolId - The sponsored liquidity pool ID in 'hex' string.\n * @param {string} [opts.source] - The source account for the operation. Defaults to the transaction's source account.\n * @returns {xdr.Operation} xdr Operation.\n *\n * @example\n * const op = Operation.revokeLiquidityPoolSponsorship({\n *   liquidityPoolId: 'dd7b1ab831c273310ddbec6f97870aa83c2fbd78ce22aded37ecbf4f3380fac7',\n * });\n *\n */\nfunction revokeLiquidityPoolSponsorship() {\n  var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  if (typeof opts.liquidityPoolId !== 'string') {\n    throw new Error('liquidityPoolId is invalid');\n  }\n  var ledgerKey = _xdr[\"default\"].LedgerKey.liquidityPool(new _xdr[\"default\"].LedgerKeyLiquidityPool({\n    liquidityPoolId: _xdr[\"default\"].PoolId.fromXDR(opts.liquidityPoolId, 'hex')\n  }));\n  var op = _xdr[\"default\"].RevokeSponsorshipOp.revokeSponsorshipLedgerEntry(ledgerKey);\n  var opAttributes = {\n    body: _xdr[\"default\"].OperationBody.revokeSponsorship(op)\n  };\n  this.setSourceAccount(opAttributes, opts);\n  return new _xdr[\"default\"].Operation(opAttributes);\n}\n\n/**\n * Create a \"revoke sponsorship\" operation for a signer.\n *\n * @function\n * @alias Operation.revokeSignerSponsorship\n * @param {object} opts Options object\n * @param {string} opts.account - The account ID where the signer sponsorship is being removed from.\n * @param {object} opts.signer - The signer whose sponsorship is being removed.\n * @param {string} [opts.signer.ed25519PublicKey] - The ed25519 public key of the signer.\n * @param {Buffer|string} [opts.signer.sha256Hash] - sha256 hash (Buffer or hex string).\n * @param {Buffer|string} [opts.signer.preAuthTx] - Hash (Buffer or hex string) of transaction.\n * @param {string} [opts.source] - The source account for the operation. Defaults to the transaction's source account.\n * @returns {xdr.Operation} xdr operation\n *\n * @example\n * const op = Operation.revokeSignerSponsorship({\n *   account: 'GDGU5OAPHNPU5UCLE5RDJHG7PXZFQYWKCFOEXSXNMR6KRQRI5T6XXCD7\n *   signer: {\n *     ed25519PublicKey: 'GCEZWKCA5VLDNRLN3RPRJMRZOX3Z6G5CHCGSNFHEYVXM3XOJMDS674JZ'\n *   }\n * })\n *\n */\nfunction revokeSignerSponsorship() {\n  var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  if (!_strkey.StrKey.isValidEd25519PublicKey(opts.account)) {\n    throw new Error('account is invalid');\n  }\n  var key;\n  if (opts.signer.ed25519PublicKey) {\n    if (!_strkey.StrKey.isValidEd25519PublicKey(opts.signer.ed25519PublicKey)) {\n      throw new Error('signer.ed25519PublicKey is invalid.');\n    }\n    var rawKey = _strkey.StrKey.decodeEd25519PublicKey(opts.signer.ed25519PublicKey);\n    key = new _xdr[\"default\"].SignerKey.signerKeyTypeEd25519(rawKey);\n  } else if (opts.signer.preAuthTx) {\n    var buffer;\n    if (typeof opts.signer.preAuthTx === 'string') {\n      buffer = Buffer.from(opts.signer.preAuthTx, 'hex');\n    } else {\n      buffer = opts.signer.preAuthTx;\n    }\n    if (!(Buffer.isBuffer(buffer) && buffer.length === 32)) {\n      throw new Error('signer.preAuthTx must be 32 bytes Buffer.');\n    }\n    key = new _xdr[\"default\"].SignerKey.signerKeyTypePreAuthTx(buffer);\n  } else if (opts.signer.sha256Hash) {\n    var _buffer;\n    if (typeof opts.signer.sha256Hash === 'string') {\n      _buffer = Buffer.from(opts.signer.sha256Hash, 'hex');\n    } else {\n      _buffer = opts.signer.sha256Hash;\n    }\n    if (!(Buffer.isBuffer(_buffer) && _buffer.length === 32)) {\n      throw new Error('signer.sha256Hash must be 32 bytes Buffer.');\n    }\n    key = new _xdr[\"default\"].SignerKey.signerKeyTypeHashX(_buffer);\n  } else {\n    throw new Error('signer is invalid');\n  }\n  var signer = new _xdr[\"default\"].RevokeSponsorshipOpSigner({\n    accountId: _keypair.Keypair.fromPublicKey(opts.account).xdrAccountId(),\n    signerKey: key\n  });\n  var op = _xdr[\"default\"].RevokeSponsorshipOp.revokeSponsorshipSigner(signer);\n  var opAttributes = {};\n  opAttributes.body = _xdr[\"default\"].OperationBody.revokeSponsorship(op);\n  this.setSourceAccount(opAttributes, opts);\n  return new _xdr[\"default\"].Operation(opAttributes);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@stellar/stellar-base/lib/operations/revoke_sponsorship.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@stellar/stellar-base/lib/operations/set_options.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@stellar/stellar-base/lib/operations/set_options.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.setOptions = setOptions;\nvar _xdr = _interopRequireDefault(__webpack_require__(/*! ../xdr */ \"(ssr)/./node_modules/@stellar/stellar-base/lib/xdr.js\"));\nvar _keypair = __webpack_require__(/*! ../keypair */ \"(ssr)/./node_modules/@stellar/stellar-base/lib/keypair.js\");\nvar _strkey = __webpack_require__(/*! ../strkey */ \"(ssr)/./node_modules/@stellar/stellar-base/lib/strkey.js\");\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { \"default\": e }; }\n/* eslint-disable no-param-reassign */\n\nfunction weightCheckFunction(value, name) {\n  if (value >= 0 && value <= 255) {\n    return true;\n  }\n  throw new Error(\"\".concat(name, \" value must be between 0 and 255\"));\n}\n\n/**\n * Returns an XDR SetOptionsOp. A \"set options\" operations set or clear account flags,\n * set the account's inflation destination, and/or add new signers to the account.\n * The flags used in `opts.clearFlags` and `opts.setFlags` can be the following:\n *   - `{@link AuthRequiredFlag}`\n *   - `{@link AuthRevocableFlag}`\n *   - `{@link AuthImmutableFlag}`\n *   - `{@link AuthClawbackEnabledFlag}`\n *\n * It's possible to set/clear multiple flags at once using logical or.\n *\n * @function\n * @alias Operation.setOptions\n *\n * @param {object} opts Options object\n * @param {string} [opts.inflationDest] - Set this account ID as the account's inflation destination.\n * @param {(number|string)} [opts.clearFlags] - Bitmap integer for which account flags to clear.\n * @param {(number|string)} [opts.setFlags] - Bitmap integer for which account flags to set.\n * @param {number|string} [opts.masterWeight] - The master key weight.\n * @param {number|string} [opts.lowThreshold] - The sum weight for the low threshold.\n * @param {number|string} [opts.medThreshold] - The sum weight for the medium threshold.\n * @param {number|string} [opts.highThreshold] - The sum weight for the high threshold.\n * @param {object} [opts.signer] - Add or remove a signer from the account. The signer is\n *                                 deleted if the weight is 0. Only one of `ed25519PublicKey`, `sha256Hash`, `preAuthTx` should be defined.\n * @param {string} [opts.signer.ed25519PublicKey] - The ed25519 public key of the signer.\n * @param {Buffer|string} [opts.signer.sha256Hash] - sha256 hash (Buffer or hex string) of preimage that will unlock funds. Preimage should be used as signature of future transaction.\n * @param {Buffer|string} [opts.signer.preAuthTx] - Hash (Buffer or hex string) of transaction that will unlock funds.\n * @param {string} [opts.signer.ed25519SignedPayload] - Signed payload signer (ed25519 public key + raw payload) for atomic transaction signature disclosure.\n * @param {number|string} [opts.signer.weight] - The weight of the new signer (0 to delete or 1-255)\n * @param {string} [opts.homeDomain] - sets the home domain used for reverse federation lookup.\n * @param {string} [opts.source] - The source account (defaults to transaction source).\n *\n * @returns {xdr.SetOptionsOp}  XDR operation\n * @see [Account flags](https://developers.stellar.org/docs/glossary/accounts/#flags)\n */\nfunction setOptions(opts) {\n  var attributes = {};\n  if (opts.inflationDest) {\n    if (!_strkey.StrKey.isValidEd25519PublicKey(opts.inflationDest)) {\n      throw new Error('inflationDest is invalid');\n    }\n    attributes.inflationDest = _keypair.Keypair.fromPublicKey(opts.inflationDest).xdrAccountId();\n  }\n  attributes.clearFlags = this._checkUnsignedIntValue('clearFlags', opts.clearFlags);\n  attributes.setFlags = this._checkUnsignedIntValue('setFlags', opts.setFlags);\n  attributes.masterWeight = this._checkUnsignedIntValue('masterWeight', opts.masterWeight, weightCheckFunction);\n  attributes.lowThreshold = this._checkUnsignedIntValue('lowThreshold', opts.lowThreshold, weightCheckFunction);\n  attributes.medThreshold = this._checkUnsignedIntValue('medThreshold', opts.medThreshold, weightCheckFunction);\n  attributes.highThreshold = this._checkUnsignedIntValue('highThreshold', opts.highThreshold, weightCheckFunction);\n  if (opts.homeDomain !== undefined && typeof opts.homeDomain !== 'string') {\n    throw new TypeError('homeDomain argument must be of type String');\n  }\n  attributes.homeDomain = opts.homeDomain;\n  if (opts.signer) {\n    var weight = this._checkUnsignedIntValue('signer.weight', opts.signer.weight, weightCheckFunction);\n    var key;\n    var setValues = 0;\n    if (opts.signer.ed25519PublicKey) {\n      if (!_strkey.StrKey.isValidEd25519PublicKey(opts.signer.ed25519PublicKey)) {\n        throw new Error('signer.ed25519PublicKey is invalid.');\n      }\n      var rawKey = _strkey.StrKey.decodeEd25519PublicKey(opts.signer.ed25519PublicKey);\n\n      // eslint-disable-next-line new-cap\n      key = new _xdr[\"default\"].SignerKey.signerKeyTypeEd25519(rawKey);\n      setValues += 1;\n    }\n    if (opts.signer.preAuthTx) {\n      if (typeof opts.signer.preAuthTx === 'string') {\n        opts.signer.preAuthTx = Buffer.from(opts.signer.preAuthTx, 'hex');\n      }\n      if (!(Buffer.isBuffer(opts.signer.preAuthTx) && opts.signer.preAuthTx.length === 32)) {\n        throw new Error('signer.preAuthTx must be 32 bytes Buffer.');\n      }\n\n      // eslint-disable-next-line new-cap\n      key = new _xdr[\"default\"].SignerKey.signerKeyTypePreAuthTx(opts.signer.preAuthTx);\n      setValues += 1;\n    }\n    if (opts.signer.sha256Hash) {\n      if (typeof opts.signer.sha256Hash === 'string') {\n        opts.signer.sha256Hash = Buffer.from(opts.signer.sha256Hash, 'hex');\n      }\n      if (!(Buffer.isBuffer(opts.signer.sha256Hash) && opts.signer.sha256Hash.length === 32)) {\n        throw new Error('signer.sha256Hash must be 32 bytes Buffer.');\n      }\n\n      // eslint-disable-next-line new-cap\n      key = new _xdr[\"default\"].SignerKey.signerKeyTypeHashX(opts.signer.sha256Hash);\n      setValues += 1;\n    }\n    if (opts.signer.ed25519SignedPayload) {\n      if (!_strkey.StrKey.isValidSignedPayload(opts.signer.ed25519SignedPayload)) {\n        throw new Error('signer.ed25519SignedPayload is invalid.');\n      }\n      var _rawKey = _strkey.StrKey.decodeSignedPayload(opts.signer.ed25519SignedPayload);\n      var signedPayloadXdr = _xdr[\"default\"].SignerKeyEd25519SignedPayload.fromXDR(_rawKey);\n\n      // eslint-disable-next-line new-cap\n      key = _xdr[\"default\"].SignerKey.signerKeyTypeEd25519SignedPayload(signedPayloadXdr);\n      setValues += 1;\n    }\n    if (setValues !== 1) {\n      throw new Error('Signer object must contain exactly one of signer.ed25519PublicKey, signer.sha256Hash, signer.preAuthTx.');\n    }\n    attributes.signer = new _xdr[\"default\"].Signer({\n      key: key,\n      weight: weight\n    });\n  }\n  var setOptionsOp = new _xdr[\"default\"].SetOptionsOp(attributes);\n  var opAttributes = {};\n  opAttributes.body = _xdr[\"default\"].OperationBody.setOptions(setOptionsOp);\n  this.setSourceAccount(opAttributes, opts);\n  return new _xdr[\"default\"].Operation(opAttributes);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@stellar/stellar-base/lib/operations/set_options.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@stellar/stellar-base/lib/operations/set_trustline_flags.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@stellar/stellar-base/lib/operations/set_trustline_flags.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.setTrustLineFlags = setTrustLineFlags;\nvar _xdr = _interopRequireDefault(__webpack_require__(/*! ../xdr */ \"(ssr)/./node_modules/@stellar/stellar-base/lib/xdr.js\"));\nvar _keypair = __webpack_require__(/*! ../keypair */ \"(ssr)/./node_modules/@stellar/stellar-base/lib/keypair.js\");\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { \"default\": e }; }\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\n/**\n * Creates a trustline flag configuring operation.\n *\n * For the flags, set them to true to enable them and false to disable them. Any\n * unmodified operations will be marked `undefined` in the result.\n *\n * Note that you can only **clear** the clawbackEnabled flag set; it must be set\n * account-wide via operations.SetOptions (setting\n * xdr.AccountFlags.clawbackEnabled).\n *\n * @function\n * @alias Operation.setTrustLineFlags\n *\n * @param {object} opts - Options object\n * @param {string} opts.trustor     - the account whose trustline this is\n * @param {Asset}  opts.asset       - the asset on the trustline\n * @param {object} opts.flags       - the set of flags to modify\n *\n * @param {bool}   [opts.flags.authorized]  - authorize account to perform\n *     transactions with its credit\n * @param {bool}   [opts.flags.authorizedToMaintainLiabilities] - authorize\n *     account to maintain and reduce liabilities for its credit\n * @param {bool}   [opts.flags.clawbackEnabled] - stop claimable balances on\n *     this trustlines from having clawbacks enabled (this flag can only be set\n *     to false!)\n * @param {string} [opts.source] - The source account for the operation.\n *                                 Defaults to the transaction's source account.\n *\n * @note You must include at least one flag.\n *\n * @return {xdr.SetTrustLineFlagsOp}\n *\n * @link xdr.AccountFlags\n * @link xdr.TrustLineFlags\n * @see https://github.com/stellar/stellar-protocol/blob/master/core/cap-0035.md#set-trustline-flags-operation\n * @see https://developers.stellar.org/docs/start/list-of-operations/#set-options\n */\nfunction setTrustLineFlags() {\n  var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var attributes = {};\n  if (_typeof(opts.flags) !== 'object' || Object.keys(opts.flags).length === 0) {\n    throw new Error('opts.flags must be a map of boolean flags to modify');\n  }\n  var mapping = {\n    authorized: _xdr[\"default\"].TrustLineFlags.authorizedFlag(),\n    authorizedToMaintainLiabilities: _xdr[\"default\"].TrustLineFlags.authorizedToMaintainLiabilitiesFlag(),\n    clawbackEnabled: _xdr[\"default\"].TrustLineFlags.trustlineClawbackEnabledFlag()\n  };\n\n  /* eslint no-bitwise: \"off\" */\n  var clearFlag = 0;\n  var setFlag = 0;\n  Object.keys(opts.flags).forEach(function (flagName) {\n    if (!Object.prototype.hasOwnProperty.call(mapping, flagName)) {\n      throw new Error(\"unsupported flag name specified: \".concat(flagName));\n    }\n    var flagValue = opts.flags[flagName];\n    var bit = mapping[flagName].value;\n    if (flagValue === true) {\n      setFlag |= bit;\n    } else if (flagValue === false) {\n      clearFlag |= bit;\n    }\n  });\n  attributes.trustor = _keypair.Keypair.fromPublicKey(opts.trustor).xdrAccountId();\n  attributes.asset = opts.asset.toXDRObject();\n  attributes.clearFlags = clearFlag;\n  attributes.setFlags = setFlag;\n  var opAttributes = {\n    body: _xdr[\"default\"].OperationBody.setTrustLineFlags(new _xdr[\"default\"].SetTrustLineFlagsOp(attributes))\n  };\n  this.setSourceAccount(opAttributes, opts);\n  return new _xdr[\"default\"].Operation(opAttributes);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHN0ZWxsYXIvc3RlbGxhci1iYXNlL2xpYi9vcGVyYXRpb25zL3NldF90cnVzdGxpbmVfZmxhZ3MuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsOENBQTZDO0FBQzdDO0FBQ0EsQ0FBQyxFQUFDO0FBQ0YseUJBQXlCO0FBQ3pCLGtDQUFrQyxtQkFBTyxDQUFDLHFFQUFRO0FBQ2xELGVBQWUsbUJBQU8sQ0FBQyw2RUFBWTtBQUNuQyxxQ0FBcUMsaUNBQWlDO0FBQ3RFLHNCQUFzQiwyQkFBMkIsb0dBQW9HLG1CQUFtQixpQkFBaUIsc0hBQXNIO0FBQy9TO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtFQUFrRTtBQUNsRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFFBQVE7QUFDbkIsV0FBVyxRQUFRO0FBQ25CLFdBQVcsUUFBUTtBQUNuQixXQUFXLFFBQVE7QUFDbkI7QUFDQSxXQUFXLFFBQVE7QUFDbkI7QUFDQSxXQUFXLFFBQVE7QUFDbkI7QUFDQSxXQUFXLFFBQVE7QUFDbkI7QUFDQTtBQUNBLFdBQVcsUUFBUTtBQUNuQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxVU1VBUklPXFxEb2N1bWVudHNcXEdpdGh1YlxcR2FsYXh5S0otd2FsbGV0LS0tSGFja1xcd2ViXFxub2RlX21vZHVsZXNcXEBzdGVsbGFyXFxzdGVsbGFyLWJhc2VcXGxpYlxcb3BlcmF0aW9uc1xcc2V0X3RydXN0bGluZV9mbGFncy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuc2V0VHJ1c3RMaW5lRmxhZ3MgPSBzZXRUcnVzdExpbmVGbGFncztcbnZhciBfeGRyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4veGRyXCIpKTtcbnZhciBfa2V5cGFpciA9IHJlcXVpcmUoXCIuLi9rZXlwYWlyXCIpO1xuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChlKSB7IHJldHVybiBlICYmIGUuX19lc01vZHVsZSA/IGUgOiB7IFwiZGVmYXVsdFwiOiBlIH07IH1cbmZ1bmN0aW9uIF90eXBlb2YobykgeyBcIkBiYWJlbC9oZWxwZXJzIC0gdHlwZW9mXCI7IHJldHVybiBfdHlwZW9mID0gXCJmdW5jdGlvblwiID09IHR5cGVvZiBTeW1ib2wgJiYgXCJzeW1ib2xcIiA9PSB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID8gZnVuY3Rpb24gKG8pIHsgcmV0dXJuIHR5cGVvZiBvOyB9IDogZnVuY3Rpb24gKG8pIHsgcmV0dXJuIG8gJiYgXCJmdW5jdGlvblwiID09IHR5cGVvZiBTeW1ib2wgJiYgby5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG8gIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG87IH0sIF90eXBlb2Yobyk7IH1cbi8qKlxuICogQ3JlYXRlcyBhIHRydXN0bGluZSBmbGFnIGNvbmZpZ3VyaW5nIG9wZXJhdGlvbi5cbiAqXG4gKiBGb3IgdGhlIGZsYWdzLCBzZXQgdGhlbSB0byB0cnVlIHRvIGVuYWJsZSB0aGVtIGFuZCBmYWxzZSB0byBkaXNhYmxlIHRoZW0uIEFueVxuICogdW5tb2RpZmllZCBvcGVyYXRpb25zIHdpbGwgYmUgbWFya2VkIGB1bmRlZmluZWRgIGluIHRoZSByZXN1bHQuXG4gKlxuICogTm90ZSB0aGF0IHlvdSBjYW4gb25seSAqKmNsZWFyKiogdGhlIGNsYXdiYWNrRW5hYmxlZCBmbGFnIHNldDsgaXQgbXVzdCBiZSBzZXRcbiAqIGFjY291bnQtd2lkZSB2aWEgb3BlcmF0aW9ucy5TZXRPcHRpb25zIChzZXR0aW5nXG4gKiB4ZHIuQWNjb3VudEZsYWdzLmNsYXdiYWNrRW5hYmxlZCkuXG4gKlxuICogQGZ1bmN0aW9uXG4gKiBAYWxpYXMgT3BlcmF0aW9uLnNldFRydXN0TGluZUZsYWdzXG4gKlxuICogQHBhcmFtIHtvYmplY3R9IG9wdHMgLSBPcHRpb25zIG9iamVjdFxuICogQHBhcmFtIHtzdHJpbmd9IG9wdHMudHJ1c3RvciAgICAgLSB0aGUgYWNjb3VudCB3aG9zZSB0cnVzdGxpbmUgdGhpcyBpc1xuICogQHBhcmFtIHtBc3NldH0gIG9wdHMuYXNzZXQgICAgICAgLSB0aGUgYXNzZXQgb24gdGhlIHRydXN0bGluZVxuICogQHBhcmFtIHtvYmplY3R9IG9wdHMuZmxhZ3MgICAgICAgLSB0aGUgc2V0IG9mIGZsYWdzIHRvIG1vZGlmeVxuICpcbiAqIEBwYXJhbSB7Ym9vbH0gICBbb3B0cy5mbGFncy5hdXRob3JpemVkXSAgLSBhdXRob3JpemUgYWNjb3VudCB0byBwZXJmb3JtXG4gKiAgICAgdHJhbnNhY3Rpb25zIHdpdGggaXRzIGNyZWRpdFxuICogQHBhcmFtIHtib29sfSAgIFtvcHRzLmZsYWdzLmF1dGhvcml6ZWRUb01haW50YWluTGlhYmlsaXRpZXNdIC0gYXV0aG9yaXplXG4gKiAgICAgYWNjb3VudCB0byBtYWludGFpbiBhbmQgcmVkdWNlIGxpYWJpbGl0aWVzIGZvciBpdHMgY3JlZGl0XG4gKiBAcGFyYW0ge2Jvb2x9ICAgW29wdHMuZmxhZ3MuY2xhd2JhY2tFbmFibGVkXSAtIHN0b3AgY2xhaW1hYmxlIGJhbGFuY2VzIG9uXG4gKiAgICAgdGhpcyB0cnVzdGxpbmVzIGZyb20gaGF2aW5nIGNsYXdiYWNrcyBlbmFibGVkICh0aGlzIGZsYWcgY2FuIG9ubHkgYmUgc2V0XG4gKiAgICAgdG8gZmFsc2UhKVxuICogQHBhcmFtIHtzdHJpbmd9IFtvcHRzLnNvdXJjZV0gLSBUaGUgc291cmNlIGFjY291bnQgZm9yIHRoZSBvcGVyYXRpb24uXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIERlZmF1bHRzIHRvIHRoZSB0cmFuc2FjdGlvbidzIHNvdXJjZSBhY2NvdW50LlxuICpcbiAqIEBub3RlIFlvdSBtdXN0IGluY2x1ZGUgYXQgbGVhc3Qgb25lIGZsYWcuXG4gKlxuICogQHJldHVybiB7eGRyLlNldFRydXN0TGluZUZsYWdzT3B9XG4gKlxuICogQGxpbmsgeGRyLkFjY291bnRGbGFnc1xuICogQGxpbmsgeGRyLlRydXN0TGluZUZsYWdzXG4gKiBAc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9zdGVsbGFyL3N0ZWxsYXItcHJvdG9jb2wvYmxvYi9tYXN0ZXIvY29yZS9jYXAtMDAzNS5tZCNzZXQtdHJ1c3RsaW5lLWZsYWdzLW9wZXJhdGlvblxuICogQHNlZSBodHRwczovL2RldmVsb3BlcnMuc3RlbGxhci5vcmcvZG9jcy9zdGFydC9saXN0LW9mLW9wZXJhdGlvbnMvI3NldC1vcHRpb25zXG4gKi9cbmZ1bmN0aW9uIHNldFRydXN0TGluZUZsYWdzKCkge1xuICB2YXIgb3B0cyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge307XG4gIHZhciBhdHRyaWJ1dGVzID0ge307XG4gIGlmIChfdHlwZW9mKG9wdHMuZmxhZ3MpICE9PSAnb2JqZWN0JyB8fCBPYmplY3Qua2V5cyhvcHRzLmZsYWdzKS5sZW5ndGggPT09IDApIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ29wdHMuZmxhZ3MgbXVzdCBiZSBhIG1hcCBvZiBib29sZWFuIGZsYWdzIHRvIG1vZGlmeScpO1xuICB9XG4gIHZhciBtYXBwaW5nID0ge1xuICAgIGF1dGhvcml6ZWQ6IF94ZHJbXCJkZWZhdWx0XCJdLlRydXN0TGluZUZsYWdzLmF1dGhvcml6ZWRGbGFnKCksXG4gICAgYXV0aG9yaXplZFRvTWFpbnRhaW5MaWFiaWxpdGllczogX3hkcltcImRlZmF1bHRcIl0uVHJ1c3RMaW5lRmxhZ3MuYXV0aG9yaXplZFRvTWFpbnRhaW5MaWFiaWxpdGllc0ZsYWcoKSxcbiAgICBjbGF3YmFja0VuYWJsZWQ6IF94ZHJbXCJkZWZhdWx0XCJdLlRydXN0TGluZUZsYWdzLnRydXN0bGluZUNsYXdiYWNrRW5hYmxlZEZsYWcoKVxuICB9O1xuXG4gIC8qIGVzbGludCBuby1iaXR3aXNlOiBcIm9mZlwiICovXG4gIHZhciBjbGVhckZsYWcgPSAwO1xuICB2YXIgc2V0RmxhZyA9IDA7XG4gIE9iamVjdC5rZXlzKG9wdHMuZmxhZ3MpLmZvckVhY2goZnVuY3Rpb24gKGZsYWdOYW1lKSB7XG4gICAgaWYgKCFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwobWFwcGluZywgZmxhZ05hbWUpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJ1bnN1cHBvcnRlZCBmbGFnIG5hbWUgc3BlY2lmaWVkOiBcIi5jb25jYXQoZmxhZ05hbWUpKTtcbiAgICB9XG4gICAgdmFyIGZsYWdWYWx1ZSA9IG9wdHMuZmxhZ3NbZmxhZ05hbWVdO1xuICAgIHZhciBiaXQgPSBtYXBwaW5nW2ZsYWdOYW1lXS52YWx1ZTtcbiAgICBpZiAoZmxhZ1ZhbHVlID09PSB0cnVlKSB7XG4gICAgICBzZXRGbGFnIHw9IGJpdDtcbiAgICB9IGVsc2UgaWYgKGZsYWdWYWx1ZSA9PT0gZmFsc2UpIHtcbiAgICAgIGNsZWFyRmxhZyB8PSBiaXQ7XG4gICAgfVxuICB9KTtcbiAgYXR0cmlidXRlcy50cnVzdG9yID0gX2tleXBhaXIuS2V5cGFpci5mcm9tUHVibGljS2V5KG9wdHMudHJ1c3RvcikueGRyQWNjb3VudElkKCk7XG4gIGF0dHJpYnV0ZXMuYXNzZXQgPSBvcHRzLmFzc2V0LnRvWERST2JqZWN0KCk7XG4gIGF0dHJpYnV0ZXMuY2xlYXJGbGFncyA9IGNsZWFyRmxhZztcbiAgYXR0cmlidXRlcy5zZXRGbGFncyA9IHNldEZsYWc7XG4gIHZhciBvcEF0dHJpYnV0ZXMgPSB7XG4gICAgYm9keTogX3hkcltcImRlZmF1bHRcIl0uT3BlcmF0aW9uQm9keS5zZXRUcnVzdExpbmVGbGFncyhuZXcgX3hkcltcImRlZmF1bHRcIl0uU2V0VHJ1c3RMaW5lRmxhZ3NPcChhdHRyaWJ1dGVzKSlcbiAgfTtcbiAgdGhpcy5zZXRTb3VyY2VBY2NvdW50KG9wQXR0cmlidXRlcywgb3B0cyk7XG4gIHJldHVybiBuZXcgX3hkcltcImRlZmF1bHRcIl0uT3BlcmF0aW9uKG9wQXR0cmlidXRlcyk7XG59Il0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@stellar/stellar-base/lib/operations/set_trustline_flags.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@stellar/stellar-base/lib/scval.js":
/*!*********************************************************!*\
  !*** ./node_modules/@stellar/stellar-base/lib/scval.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.nativeToScVal = nativeToScVal;\nexports.scValToNative = scValToNative;\nvar _xdr = _interopRequireDefault(__webpack_require__(/*! ./xdr */ \"(ssr)/./node_modules/@stellar/stellar-base/lib/xdr.js\"));\nvar _keypair = __webpack_require__(/*! ./keypair */ \"(ssr)/./node_modules/@stellar/stellar-base/lib/keypair.js\");\nvar _address = __webpack_require__(/*! ./address */ \"(ssr)/./node_modules/@stellar/stellar-base/lib/address.js\");\nvar _contract = __webpack_require__(/*! ./contract */ \"(ssr)/./node_modules/@stellar/stellar-base/lib/contract.js\");\nvar _index = __webpack_require__(/*! ./numbers/index */ \"(ssr)/./node_modules/@stellar/stellar-base/lib/numbers/index.js\");\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { \"default\": e }; }\nfunction _slicedToArray(r, e) { return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest(); }\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _unsupportedIterableToArray(r, a) { if (r) { if (\"string\" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return \"Object\" === t && r.constructor && (t = r.constructor.name), \"Map\" === t || \"Set\" === t ? Array.from(r) : \"Arguments\" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }\nfunction _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }\nfunction _iterableToArrayLimit(r, l) { var t = null == r ? null : \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t[\"return\"] && (u = t[\"return\"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }\nfunction _arrayWithHoles(r) { if (Array.isArray(r)) return r; }\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\n/**\n * Attempts to convert native types into smart contract values\n * ({@link xdr.ScVal}).\n *\n * Provides conversions from smart contract XDR values ({@link xdr.ScVal}) to\n * native JavaScript types.\n *\n * The conversions are as follows:\n *\n *  - xdr.ScVal -> passthrough\n *  - null/undefined -> scvVoid\n *  - string -> scvString (a copy is made)\n *  - UintArray8 -> scvBytes (a copy is made)\n *  - boolean -> scvBool\n *\n *  - number/bigint -> the smallest possible XDR integer type that will fit the\n *    input value (if you want a specific type, use {@link ScInt})\n *\n *  - {@link Address} or {@link Contract} -> scvAddress (for contracts and\n *    public keys)\n *\n *  - Array<T> -> scvVec after attempting to convert each item of type `T` to an\n *    xdr.ScVal (recursively). note that all values must be the same type!\n *\n *  - object -> scvMap after attempting to convert each key and value to an\n *    xdr.ScVal (recursively). note that there is no restriction on types\n *    matching anywhere (unlike arrays)\n *\n * When passing an integer-like native value, you can also optionally specify a\n * type which will force a particular interpretation of that value.\n *\n * Note that not all type specifications are compatible with all `ScVal`s, e.g.\n * `toScVal(\"a string\", {type: \"i256\"})` will throw.\n *\n * @param {any} val -       a native (or convertible) input value to wrap\n * @param {object} [opts] - an optional set of hints around the type of\n *    conversion you'd like to see\n * @param {string} [opts.type] - there is different behavior for different input\n *    types for `val`:\n *\n *     - when `val` is an integer-like type (i.e. number|bigint), this will be\n *       forwarded to {@link ScInt} or forced to be u32/i32.\n *\n *     - when `val` is an array type, this is forwarded to the recursion\n *\n *     - when `val` is an object type (key-value entries), this should be an\n *       object in which each key has a pair of types (to represent forced types\n *       for the key and the value), where `null` (or a missing entry) indicates\n *       the default interpretation(s) (refer to the examples, below)\n *\n *     - when `val` is a string type, this can be 'string' or 'symbol' to force\n *       a particular interpretation of `val`.\n *\n *     - when `val` is a bytes-like type, this can be 'string', 'symbol', or\n *       'bytes' to force a particular interpretation\n *\n *    As a simple example, `nativeToScVal(\"hello\", {type: 'symbol'})` will\n *    return an `scvSymbol`, whereas without the type it would have been an\n *    `scvString`.\n *\n * @returns {xdr.ScVal} a wrapped, smart, XDR version of the input value\n * @throws {TypeError} if...\n *  - there are arrays with more than one type in them\n *  - there are values that do not have a sensible conversion (e.g. random XDR\n *    types, custom classes)\n *  - the type of the input object (or some inner value of said object) cannot\n *    be determined (via `typeof`)\n *  - the type you specified (via `opts.type`) is incompatible with the value\n *    you passed in (`val`), e.g. `nativeToScVal(\"a string\", { type: 'i128' })`,\n *    though this does not apply for types that ignore `opts` (e.g. addresses).\n * @see scValToNative\n *\n * @example\n * nativeToScVal(1000);                   // gives ScValType === scvU64\n * nativeToScVal(1000n);                  // gives ScValType === scvU64\n * nativeToScVal(1n << 100n);             // gives ScValType === scvU128\n * nativeToScVal(1000, { type: 'u32' });  // gives ScValType === scvU32\n * nativeToScVal(1000, { type: 'i125' }); // gives ScValType === scvI256\n * nativeToScVal(\"a string\");                     // gives ScValType === scvString\n * nativeToScVal(\"a string\", { type: 'symbol' }); // gives scvSymbol\n * nativeToScVal(new Uint8Array(5));                      // scvBytes\n * nativeToScVal(new Uint8Array(5), { type: 'symbol' });  // scvSymbol\n * nativeToScVal(null); // scvVoid\n * nativeToScVal(true); // scvBool\n * nativeToScVal([1, 2, 3]);                    // gives scvVec with each element as scvU64\n * nativeToScVal([1, 2, 3], { type: 'i128' });  // scvVec<scvI128>\n * nativeToScVal({ 'hello': 1, 'world': [ true, false ] }, {\n *   type: {\n *     'hello': [ 'symbol', 'i128' ],\n *   }\n * })\n * // gives scvMap with entries: [\n * //     [ scvSymbol, scvI128 ],\n * //     [ scvString, scvArray<scvBool> ]\n * // ]\n *\n * @example\n * import {\n *   nativeToScVal,\n *   scValToNative,\n *   ScInt,\n *   xdr\n * } from '@stellar/stellar-base';\n *\n * let gigaMap = {\n *   bool: true,\n *   void: null,\n *   u32: xdr.ScVal.scvU32(1),\n *   i32: xdr.ScVal.scvI32(1),\n *   u64: 1n,\n *   i64: -1n,\n *   u128: new ScInt(1).toU128(),\n *   i128: new ScInt(1).toI128(),\n *   u256: new ScInt(1).toU256(),\n *   i256: new ScInt(1).toI256(),\n *   map: {\n *     arbitrary: 1n,\n *     nested: 'values',\n *     etc: false\n *   },\n *   vec: ['same', 'type', 'list'],\n * };\n *\n * // then, simply:\n * let scv = nativeToScVal(gigaMap);    // scv.switch() == xdr.ScValType.scvMap()\n *\n * // then...\n * someContract.call(\"method\", scv);\n *\n * // Similarly, the inverse should work:\n * scValToNative(scv) == gigaMap;       // true\n */\nfunction nativeToScVal(val) {\n  var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  switch (_typeof(val)) {\n    case 'object':\n      {\n        var _val$constructor$name, _val$constructor;\n        if (val === null) {\n          return _xdr[\"default\"].ScVal.scvVoid();\n        }\n        if (val instanceof _xdr[\"default\"].ScVal) {\n          return val; // should we copy?\n        }\n        if (val instanceof _address.Address) {\n          return val.toScVal();\n        }\n        if (val instanceof _keypair.Keypair) {\n          return nativeToScVal(val.publicKey(), {\n            type: 'address'\n          });\n        }\n        if (val instanceof _contract.Contract) {\n          return val.address().toScVal();\n        }\n        if (val instanceof Uint8Array || Buffer.isBuffer(val)) {\n          var _opts$type;\n          var copy = Uint8Array.from(val);\n          switch ((_opts$type = opts === null || opts === void 0 ? void 0 : opts.type) !== null && _opts$type !== void 0 ? _opts$type : 'bytes') {\n            case 'bytes':\n              return _xdr[\"default\"].ScVal.scvBytes(copy);\n            case 'symbol':\n              return _xdr[\"default\"].ScVal.scvSymbol(copy);\n            case 'string':\n              return _xdr[\"default\"].ScVal.scvString(copy);\n            default:\n              throw new TypeError(\"invalid type (\".concat(opts.type, \") specified for bytes-like value\"));\n          }\n        }\n        if (Array.isArray(val)) {\n          return _xdr[\"default\"].ScVal.scvVec(val.map(function (v) {\n            return nativeToScVal(v, opts);\n          }));\n        }\n        if (((_val$constructor$name = (_val$constructor = val.constructor) === null || _val$constructor === void 0 ? void 0 : _val$constructor.name) !== null && _val$constructor$name !== void 0 ? _val$constructor$name : '') !== 'Object') {\n          var _val$constructor2;\n          throw new TypeError(\"cannot interpret \".concat((_val$constructor2 = val.constructor) === null || _val$constructor2 === void 0 ? void 0 : _val$constructor2.name, \" value as ScVal (\").concat(JSON.stringify(val), \")\"));\n        }\n        return _xdr[\"default\"].ScVal.scvMap(Object.entries(val)\n        // The Soroban runtime expects maps to have their keys in sorted\n        // order, so let's do that here as part of the conversion to prevent\n        // confusing error messages on execution.\n        .sort(function (_ref, _ref2) {\n          var _ref3 = _slicedToArray(_ref, 1),\n            key1 = _ref3[0];\n          var _ref4 = _slicedToArray(_ref2, 1),\n            key2 = _ref4[0];\n          return key1.localeCompare(key2);\n        }).map(function (_ref5) {\n          var _k, _opts$type2;\n          var _ref6 = _slicedToArray(_ref5, 2),\n            k = _ref6[0],\n            v = _ref6[1];\n          // the type can be specified with an entry for the key and the value,\n          // e.g. val = { 'hello': 1 } and opts.type = { hello: [ 'symbol',\n          // 'u128' ]} or you can use `null` for the default interpretation\n          var _ref7 = (_k = ((_opts$type2 = opts === null || opts === void 0 ? void 0 : opts.type) !== null && _opts$type2 !== void 0 ? _opts$type2 : {})[k]) !== null && _k !== void 0 ? _k : [null, null],\n            _ref8 = _slicedToArray(_ref7, 2),\n            keyType = _ref8[0],\n            valType = _ref8[1];\n          var keyOpts = keyType ? {\n            type: keyType\n          } : {};\n          var valOpts = valType ? {\n            type: valType\n          } : {};\n          return new _xdr[\"default\"].ScMapEntry({\n            key: nativeToScVal(k, keyOpts),\n            val: nativeToScVal(v, valOpts)\n          });\n        }));\n      }\n    case 'number':\n    case 'bigint':\n      switch (opts === null || opts === void 0 ? void 0 : opts.type) {\n        case 'u32':\n          return _xdr[\"default\"].ScVal.scvU32(val);\n        case 'i32':\n          return _xdr[\"default\"].ScVal.scvI32(val);\n        default:\n          break;\n      }\n      return new _index.ScInt(val, {\n        type: opts === null || opts === void 0 ? void 0 : opts.type\n      }).toScVal();\n    case 'string':\n      {\n        var _opts$type3;\n        var optType = (_opts$type3 = opts === null || opts === void 0 ? void 0 : opts.type) !== null && _opts$type3 !== void 0 ? _opts$type3 : 'string';\n        switch (optType) {\n          case 'string':\n            return _xdr[\"default\"].ScVal.scvString(val);\n          case 'symbol':\n            return _xdr[\"default\"].ScVal.scvSymbol(val);\n          case 'address':\n            return new _address.Address(val).toScVal();\n          case 'u32':\n            return _xdr[\"default\"].ScVal.scvU32(parseInt(val, 10));\n          case 'i32':\n            return _xdr[\"default\"].ScVal.scvI32(parseInt(val, 10));\n          default:\n            if (_index.XdrLargeInt.isType(optType)) {\n              return new _index.XdrLargeInt(optType, val).toScVal();\n            }\n            throw new TypeError(\"invalid type (\".concat(opts.type, \") specified for string value\"));\n        }\n      }\n    case 'boolean':\n      return _xdr[\"default\"].ScVal.scvBool(val);\n    case 'undefined':\n      return _xdr[\"default\"].ScVal.scvVoid();\n    case 'function':\n      // FIXME: Is this too helpful?\n      return nativeToScVal(val());\n    default:\n      throw new TypeError(\"failed to convert typeof \".concat(_typeof(val), \" (\").concat(val, \")\"));\n  }\n}\n\n/**\n * Given a smart contract value, attempt to convert it to a native type.\n * Possible conversions include:\n *\n *  - void -> `null`\n *  - u32, i32 -> `number`\n *  - u64, i64, u128, i128, u256, i256 -> `bigint`\n *  - vec -> `Array` of any of the above (via recursion)\n *  - map -> key-value object of any of the above (via recursion)\n *  - bool -> `boolean`\n *  - bytes -> `Uint8Array`\n *  - symbol -> `string`\n *  - string -> `string` IF the underlying buffer can be decoded as ascii/utf8,\n *              `Uint8Array` of the raw contents in any error case\n *\n * If no viable conversion can be determined, this just \"unwraps\" the smart\n * value to return its underlying XDR value.\n *\n * @param {xdr.ScVal} scv - the input smart contract value\n *\n * @returns {any}\n * @see nativeToScVal\n */\nfunction scValToNative(scv) {\n  var _scv$vec, _scv$map;\n  // we use the verbose xdr.ScValType.<type>.value form here because it's faster\n  // than string comparisons and the underlying constants never need to be\n  // updated\n  switch (scv[\"switch\"]().value) {\n    case _xdr[\"default\"].ScValType.scvVoid().value:\n      return null;\n\n    // these can be converted to bigints directly\n    case _xdr[\"default\"].ScValType.scvU64().value:\n    case _xdr[\"default\"].ScValType.scvI64().value:\n      return scv.value().toBigInt();\n\n    // these can be parsed by internal abstractions note that this can also\n    // handle the above two cases, but it's not as efficient (another\n    // type-check, parsing, etc.)\n    case _xdr[\"default\"].ScValType.scvU128().value:\n    case _xdr[\"default\"].ScValType.scvI128().value:\n    case _xdr[\"default\"].ScValType.scvU256().value:\n    case _xdr[\"default\"].ScValType.scvI256().value:\n      return (0, _index.scValToBigInt)(scv);\n    case _xdr[\"default\"].ScValType.scvVec().value:\n      return ((_scv$vec = scv.vec()) !== null && _scv$vec !== void 0 ? _scv$vec : []).map(scValToNative);\n    case _xdr[\"default\"].ScValType.scvAddress().value:\n      return _address.Address.fromScVal(scv).toString();\n    case _xdr[\"default\"].ScValType.scvMap().value:\n      return Object.fromEntries(((_scv$map = scv.map()) !== null && _scv$map !== void 0 ? _scv$map : []).map(function (entry) {\n        return [scValToNative(entry.key()), scValToNative(entry.val())];\n      }));\n\n    // these return the primitive type directly\n    case _xdr[\"default\"].ScValType.scvBool().value:\n    case _xdr[\"default\"].ScValType.scvU32().value:\n    case _xdr[\"default\"].ScValType.scvI32().value:\n    case _xdr[\"default\"].ScValType.scvBytes().value:\n      return scv.value();\n\n    // Symbols are limited to [a-zA-Z0-9_]+, so we can safely make ascii strings\n    //\n    // Strings, however, are \"presented\" as strings and we treat them as such\n    // (in other words, string = bytes with a hint that it's text). If the user\n    // encoded non-printable bytes in their string value, that's on them.\n    //\n    // Note that we assume a utf8 encoding (ascii-compatible). For other\n    // encodings, you should probably use bytes anyway. If it cannot be decoded,\n    // the raw bytes are returned.\n    case _xdr[\"default\"].ScValType.scvSymbol().value:\n    case _xdr[\"default\"].ScValType.scvString().value:\n      {\n        var v = scv.value(); // string|Buffer\n        if (Buffer.isBuffer(v) || ArrayBuffer.isView(v)) {\n          try {\n            return new TextDecoder().decode(v);\n          } catch (e) {\n            return new Uint8Array(v.buffer); // copy of bytes\n          }\n        }\n        return v; // string already\n      }\n\n    // these can be converted to bigint\n    case _xdr[\"default\"].ScValType.scvTimepoint().value:\n    case _xdr[\"default\"].ScValType.scvDuration().value:\n      return new _xdr[\"default\"].Uint64(scv.value()).toBigInt();\n    case _xdr[\"default\"].ScValType.scvError().value:\n      switch (scv.error()[\"switch\"]().value) {\n        // Distinguish errors from the user contract.\n        case _xdr[\"default\"].ScErrorType.sceContract().value:\n          return {\n            type: 'contract',\n            code: scv.error().contractCode()\n          };\n        default:\n          {\n            var err = scv.error();\n            return {\n              type: 'system',\n              code: err.code().value,\n              value: err.code().name\n            };\n          }\n      }\n\n    // in the fallthrough case, just return the underlying value directly\n    default:\n      return scv.value();\n  }\n}\n\n/// Inject a sortable map builder into the xdr module.\n_xdr[\"default\"].scvSortedMap = function (items) {\n  var sorted = Array.from(items).sort(function (a, b) {\n    // Both a and b are `ScMapEntry`s, so we need to sort by underlying key.\n    //\n    // We couldn't possibly handle every combination of keys since Soroban\n    // maps don't enforce consistent types, so we do a best-effort and try\n    // sorting by \"number-like\" or \"string-like.\"\n    var nativeA = scValToNative(a.key());\n    var nativeB = scValToNative(b.key());\n    switch (_typeof(nativeA)) {\n      case 'number':\n      case 'bigint':\n        return nativeA < nativeB ? -1 : 1;\n      default:\n        return nativeA.toString().localeCompare(nativeB.toString());\n    }\n  });\n  return _xdr[\"default\"].ScVal.scvMap(sorted);\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@stellar/stellar-base/lib/scval.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@stellar/stellar-base/lib/signerkey.js":
/*!*************************************************************!*\
  !*** ./node_modules/@stellar/stellar-base/lib/signerkey.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.SignerKey = void 0;\nvar _xdr = _interopRequireDefault(__webpack_require__(/*! ./xdr */ \"(ssr)/./node_modules/@stellar/stellar-base/lib/xdr.js\"));\nvar _strkey = __webpack_require__(/*! ./strkey */ \"(ssr)/./node_modules/@stellar/stellar-base/lib/strkey.js\");\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { \"default\": e }; }\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\nfunction _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }\nfunction _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\n/**\n * A container class with helpers to convert between signer keys\n * (`xdr.SignerKey`) and {@link StrKey}s.\n *\n * It's primarly used for manipulating the `extraSigners` precondition on a\n * {@link Transaction}.\n *\n * @see {@link TransactionBuilder.setExtraSigners}\n */\nvar SignerKey = exports.SignerKey = /*#__PURE__*/function () {\n  function SignerKey() {\n    _classCallCheck(this, SignerKey);\n  }\n  return _createClass(SignerKey, null, [{\n    key: \"decodeAddress\",\n    value:\n    /**\n     * Decodes a StrKey address into an xdr.SignerKey instance.\n     *\n     * Only ED25519 public keys (G...), pre-auth transactions (T...), hashes\n     * (H...), and signed payloads (P...) can be signer keys.\n     *\n     * @param   {string} address  a StrKey-encoded signer address\n     * @returns {xdr.SignerKey}\n     */\n    function decodeAddress(address) {\n      var signerKeyMap = {\n        ed25519PublicKey: _xdr[\"default\"].SignerKey.signerKeyTypeEd25519,\n        preAuthTx: _xdr[\"default\"].SignerKey.signerKeyTypePreAuthTx,\n        sha256Hash: _xdr[\"default\"].SignerKey.signerKeyTypeHashX,\n        signedPayload: _xdr[\"default\"].SignerKey.signerKeyTypeEd25519SignedPayload\n      };\n      var vb = _strkey.StrKey.getVersionByteForPrefix(address);\n      var encoder = signerKeyMap[vb];\n      if (!encoder) {\n        throw new Error(\"invalid signer key type (\".concat(vb, \")\"));\n      }\n      var raw = (0, _strkey.decodeCheck)(vb, address);\n      switch (vb) {\n        case 'signedPayload':\n          return encoder(new _xdr[\"default\"].SignerKeyEd25519SignedPayload({\n            ed25519: raw.slice(0, 32),\n            payload: raw.slice(32 + 4)\n          }));\n        case 'ed25519PublicKey': // falls through\n        case 'preAuthTx': // falls through\n        case 'sha256Hash': // falls through\n        default:\n          return encoder(raw);\n      }\n    }\n\n    /**\n     * Encodes a signer key into its StrKey equivalent.\n     *\n     * @param   {xdr.SignerKey} signerKey   the signer\n     * @returns {string} the StrKey representation of the signer\n     */\n  }, {\n    key: \"encodeSignerKey\",\n    value: function encodeSignerKey(signerKey) {\n      var strkeyType;\n      var raw;\n      switch (signerKey[\"switch\"]()) {\n        case _xdr[\"default\"].SignerKeyType.signerKeyTypeEd25519():\n          strkeyType = 'ed25519PublicKey';\n          raw = signerKey.value();\n          break;\n        case _xdr[\"default\"].SignerKeyType.signerKeyTypePreAuthTx():\n          strkeyType = 'preAuthTx';\n          raw = signerKey.value();\n          break;\n        case _xdr[\"default\"].SignerKeyType.signerKeyTypeHashX():\n          strkeyType = 'sha256Hash';\n          raw = signerKey.value();\n          break;\n        case _xdr[\"default\"].SignerKeyType.signerKeyTypeEd25519SignedPayload():\n          strkeyType = 'signedPayload';\n          raw = signerKey.ed25519SignedPayload().toXDR('raw');\n          break;\n        default:\n          throw new Error(\"invalid SignerKey (type: \".concat(signerKey[\"switch\"](), \")\"));\n      }\n      return (0, _strkey.encodeCheck)(strkeyType, raw);\n    }\n  }]);\n}();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHN0ZWxsYXIvc3RlbGxhci1iYXNlL2xpYi9zaWduZXJrZXkuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsOENBQTZDO0FBQzdDO0FBQ0EsQ0FBQyxFQUFDO0FBQ0YsaUJBQWlCO0FBQ2pCLGtDQUFrQyxtQkFBTyxDQUFDLG9FQUFPO0FBQ2pELGNBQWMsbUJBQU8sQ0FBQywwRUFBVTtBQUNoQyxxQ0FBcUMsaUNBQWlDO0FBQ3RFLHNCQUFzQiwyQkFBMkIsb0dBQW9HLG1CQUFtQixpQkFBaUIsc0hBQXNIO0FBQy9TLGlDQUFpQztBQUNqQyxtQ0FBbUMsZ0JBQWdCLGNBQWMsT0FBTyxjQUFjO0FBQ3RGLGlDQUFpQyxxSEFBcUgsY0FBYztBQUNwSyw2QkFBNkIsbUNBQW1DO0FBQ2hFLDhCQUE4Qiw0Q0FBNEMsK0JBQStCLG9CQUFvQixtQ0FBbUMsc0NBQXNDLHVFQUF1RTtBQUM3UTtBQUNBO0FBQ0EsMEJBQTBCLGFBQWE7QUFDdkM7QUFDQTtBQUNBLElBQUksa0JBQWtCO0FBQ3RCO0FBQ0EsU0FBUztBQUNUO0FBQ0EsZ0JBQWdCLGlCQUFpQjtBQUNqQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUIsUUFBUTtBQUN6QixpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCLGVBQWU7QUFDaEMsaUJBQWlCLFFBQVE7QUFDekI7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSCxDQUFDIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXFVTVUFSSU9cXERvY3VtZW50c1xcR2l0aHViXFxHYWxheHlLSi13YWxsZXQtLS1IYWNrXFx3ZWJcXG5vZGVfbW9kdWxlc1xcQHN0ZWxsYXJcXHN0ZWxsYXItYmFzZVxcbGliXFxzaWduZXJrZXkuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLlNpZ25lcktleSA9IHZvaWQgMDtcbnZhciBfeGRyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi94ZHJcIikpO1xudmFyIF9zdHJrZXkgPSByZXF1aXJlKFwiLi9zdHJrZXlcIik7XG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KGUpIHsgcmV0dXJuIGUgJiYgZS5fX2VzTW9kdWxlID8gZSA6IHsgXCJkZWZhdWx0XCI6IGUgfTsgfVxuZnVuY3Rpb24gX3R5cGVvZihvKSB7IFwiQGJhYmVsL2hlbHBlcnMgLSB0eXBlb2ZcIjsgcmV0dXJuIF90eXBlb2YgPSBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIFN5bWJvbCAmJiBcInN5bWJvbFwiID09IHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPyBmdW5jdGlvbiAobykgeyByZXR1cm4gdHlwZW9mIG87IH0gOiBmdW5jdGlvbiAobykgeyByZXR1cm4gbyAmJiBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIFN5bWJvbCAmJiBvLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgbyAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2YgbzsgfSwgX3R5cGVvZihvKTsgfVxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGEsIG4pIHsgaWYgKCEoYSBpbnN0YW5jZW9mIG4pKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9XG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyhlLCByKSB7IGZvciAodmFyIHQgPSAwOyB0IDwgci5sZW5ndGg7IHQrKykgeyB2YXIgbyA9IHJbdF07IG8uZW51bWVyYWJsZSA9IG8uZW51bWVyYWJsZSB8fCAhMSwgby5jb25maWd1cmFibGUgPSAhMCwgXCJ2YWx1ZVwiIGluIG8gJiYgKG8ud3JpdGFibGUgPSAhMCksIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLCBfdG9Qcm9wZXJ0eUtleShvLmtleSksIG8pOyB9IH1cbmZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhlLCByLCB0KSB7IHJldHVybiByICYmIF9kZWZpbmVQcm9wZXJ0aWVzKGUucHJvdG90eXBlLCByKSwgdCAmJiBfZGVmaW5lUHJvcGVydGllcyhlLCB0KSwgT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsIFwicHJvdG90eXBlXCIsIHsgd3JpdGFibGU6ICExIH0pLCBlOyB9XG5mdW5jdGlvbiBfdG9Qcm9wZXJ0eUtleSh0KSB7IHZhciBpID0gX3RvUHJpbWl0aXZlKHQsIFwic3RyaW5nXCIpOyByZXR1cm4gXCJzeW1ib2xcIiA9PSBfdHlwZW9mKGkpID8gaSA6IGkgKyBcIlwiOyB9XG5mdW5jdGlvbiBfdG9QcmltaXRpdmUodCwgcikgeyBpZiAoXCJvYmplY3RcIiAhPSBfdHlwZW9mKHQpIHx8ICF0KSByZXR1cm4gdDsgdmFyIGUgPSB0W1N5bWJvbC50b1ByaW1pdGl2ZV07IGlmICh2b2lkIDAgIT09IGUpIHsgdmFyIGkgPSBlLmNhbGwodCwgciB8fCBcImRlZmF1bHRcIik7IGlmIChcIm9iamVjdFwiICE9IF90eXBlb2YoaSkpIHJldHVybiBpOyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQEB0b1ByaW1pdGl2ZSBtdXN0IHJldHVybiBhIHByaW1pdGl2ZSB2YWx1ZS5cIik7IH0gcmV0dXJuIChcInN0cmluZ1wiID09PSByID8gU3RyaW5nIDogTnVtYmVyKSh0KTsgfVxuLyoqXG4gKiBBIGNvbnRhaW5lciBjbGFzcyB3aXRoIGhlbHBlcnMgdG8gY29udmVydCBiZXR3ZWVuIHNpZ25lciBrZXlzXG4gKiAoYHhkci5TaWduZXJLZXlgKSBhbmQge0BsaW5rIFN0cktleX1zLlxuICpcbiAqIEl0J3MgcHJpbWFybHkgdXNlZCBmb3IgbWFuaXB1bGF0aW5nIHRoZSBgZXh0cmFTaWduZXJzYCBwcmVjb25kaXRpb24gb24gYVxuICoge0BsaW5rIFRyYW5zYWN0aW9ufS5cbiAqXG4gKiBAc2VlIHtAbGluayBUcmFuc2FjdGlvbkJ1aWxkZXIuc2V0RXh0cmFTaWduZXJzfVxuICovXG52YXIgU2lnbmVyS2V5ID0gZXhwb3J0cy5TaWduZXJLZXkgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBTaWduZXJLZXkoKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFNpZ25lcktleSk7XG4gIH1cbiAgcmV0dXJuIF9jcmVhdGVDbGFzcyhTaWduZXJLZXksIG51bGwsIFt7XG4gICAga2V5OiBcImRlY29kZUFkZHJlc3NcIixcbiAgICB2YWx1ZTpcbiAgICAvKipcbiAgICAgKiBEZWNvZGVzIGEgU3RyS2V5IGFkZHJlc3MgaW50byBhbiB4ZHIuU2lnbmVyS2V5IGluc3RhbmNlLlxuICAgICAqXG4gICAgICogT25seSBFRDI1NTE5IHB1YmxpYyBrZXlzIChHLi4uKSwgcHJlLWF1dGggdHJhbnNhY3Rpb25zIChULi4uKSwgaGFzaGVzXG4gICAgICogKEguLi4pLCBhbmQgc2lnbmVkIHBheWxvYWRzIChQLi4uKSBjYW4gYmUgc2lnbmVyIGtleXMuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gICB7c3RyaW5nfSBhZGRyZXNzICBhIFN0cktleS1lbmNvZGVkIHNpZ25lciBhZGRyZXNzXG4gICAgICogQHJldHVybnMge3hkci5TaWduZXJLZXl9XG4gICAgICovXG4gICAgZnVuY3Rpb24gZGVjb2RlQWRkcmVzcyhhZGRyZXNzKSB7XG4gICAgICB2YXIgc2lnbmVyS2V5TWFwID0ge1xuICAgICAgICBlZDI1NTE5UHVibGljS2V5OiBfeGRyW1wiZGVmYXVsdFwiXS5TaWduZXJLZXkuc2lnbmVyS2V5VHlwZUVkMjU1MTksXG4gICAgICAgIHByZUF1dGhUeDogX3hkcltcImRlZmF1bHRcIl0uU2lnbmVyS2V5LnNpZ25lcktleVR5cGVQcmVBdXRoVHgsXG4gICAgICAgIHNoYTI1Nkhhc2g6IF94ZHJbXCJkZWZhdWx0XCJdLlNpZ25lcktleS5zaWduZXJLZXlUeXBlSGFzaFgsXG4gICAgICAgIHNpZ25lZFBheWxvYWQ6IF94ZHJbXCJkZWZhdWx0XCJdLlNpZ25lcktleS5zaWduZXJLZXlUeXBlRWQyNTUxOVNpZ25lZFBheWxvYWRcbiAgICAgIH07XG4gICAgICB2YXIgdmIgPSBfc3Rya2V5LlN0cktleS5nZXRWZXJzaW9uQnl0ZUZvclByZWZpeChhZGRyZXNzKTtcbiAgICAgIHZhciBlbmNvZGVyID0gc2lnbmVyS2V5TWFwW3ZiXTtcbiAgICAgIGlmICghZW5jb2Rlcikge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJpbnZhbGlkIHNpZ25lciBrZXkgdHlwZSAoXCIuY29uY2F0KHZiLCBcIilcIikpO1xuICAgICAgfVxuICAgICAgdmFyIHJhdyA9ICgwLCBfc3Rya2V5LmRlY29kZUNoZWNrKSh2YiwgYWRkcmVzcyk7XG4gICAgICBzd2l0Y2ggKHZiKSB7XG4gICAgICAgIGNhc2UgJ3NpZ25lZFBheWxvYWQnOlxuICAgICAgICAgIHJldHVybiBlbmNvZGVyKG5ldyBfeGRyW1wiZGVmYXVsdFwiXS5TaWduZXJLZXlFZDI1NTE5U2lnbmVkUGF5bG9hZCh7XG4gICAgICAgICAgICBlZDI1NTE5OiByYXcuc2xpY2UoMCwgMzIpLFxuICAgICAgICAgICAgcGF5bG9hZDogcmF3LnNsaWNlKDMyICsgNClcbiAgICAgICAgICB9KSk7XG4gICAgICAgIGNhc2UgJ2VkMjU1MTlQdWJsaWNLZXknOiAvLyBmYWxscyB0aHJvdWdoXG4gICAgICAgIGNhc2UgJ3ByZUF1dGhUeCc6IC8vIGZhbGxzIHRocm91Z2hcbiAgICAgICAgY2FzZSAnc2hhMjU2SGFzaCc6IC8vIGZhbGxzIHRocm91Z2hcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICByZXR1cm4gZW5jb2RlcihyYXcpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEVuY29kZXMgYSBzaWduZXIga2V5IGludG8gaXRzIFN0cktleSBlcXVpdmFsZW50LlxuICAgICAqXG4gICAgICogQHBhcmFtICAge3hkci5TaWduZXJLZXl9IHNpZ25lcktleSAgIHRoZSBzaWduZXJcbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSB0aGUgU3RyS2V5IHJlcHJlc2VudGF0aW9uIG9mIHRoZSBzaWduZXJcbiAgICAgKi9cbiAgfSwge1xuICAgIGtleTogXCJlbmNvZGVTaWduZXJLZXlcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZW5jb2RlU2lnbmVyS2V5KHNpZ25lcktleSkge1xuICAgICAgdmFyIHN0cmtleVR5cGU7XG4gICAgICB2YXIgcmF3O1xuICAgICAgc3dpdGNoIChzaWduZXJLZXlbXCJzd2l0Y2hcIl0oKSkge1xuICAgICAgICBjYXNlIF94ZHJbXCJkZWZhdWx0XCJdLlNpZ25lcktleVR5cGUuc2lnbmVyS2V5VHlwZUVkMjU1MTkoKTpcbiAgICAgICAgICBzdHJrZXlUeXBlID0gJ2VkMjU1MTlQdWJsaWNLZXknO1xuICAgICAgICAgIHJhdyA9IHNpZ25lcktleS52YWx1ZSgpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIF94ZHJbXCJkZWZhdWx0XCJdLlNpZ25lcktleVR5cGUuc2lnbmVyS2V5VHlwZVByZUF1dGhUeCgpOlxuICAgICAgICAgIHN0cmtleVR5cGUgPSAncHJlQXV0aFR4JztcbiAgICAgICAgICByYXcgPSBzaWduZXJLZXkudmFsdWUoKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBfeGRyW1wiZGVmYXVsdFwiXS5TaWduZXJLZXlUeXBlLnNpZ25lcktleVR5cGVIYXNoWCgpOlxuICAgICAgICAgIHN0cmtleVR5cGUgPSAnc2hhMjU2SGFzaCc7XG4gICAgICAgICAgcmF3ID0gc2lnbmVyS2V5LnZhbHVlKCk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgX3hkcltcImRlZmF1bHRcIl0uU2lnbmVyS2V5VHlwZS5zaWduZXJLZXlUeXBlRWQyNTUxOVNpZ25lZFBheWxvYWQoKTpcbiAgICAgICAgICBzdHJrZXlUeXBlID0gJ3NpZ25lZFBheWxvYWQnO1xuICAgICAgICAgIHJhdyA9IHNpZ25lcktleS5lZDI1NTE5U2lnbmVkUGF5bG9hZCgpLnRvWERSKCdyYXcnKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJpbnZhbGlkIFNpZ25lcktleSAodHlwZTogXCIuY29uY2F0KHNpZ25lcktleVtcInN3aXRjaFwiXSgpLCBcIilcIikpO1xuICAgICAgfVxuICAgICAgcmV0dXJuICgwLCBfc3Rya2V5LmVuY29kZUNoZWNrKShzdHJrZXlUeXBlLCByYXcpO1xuICAgIH1cbiAgfV0pO1xufSgpOyJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@stellar/stellar-base/lib/signerkey.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@stellar/stellar-base/lib/signing.js":
/*!***********************************************************!*\
  !*** ./node_modules/@stellar/stellar-base/lib/signing.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.FastSigning = void 0;\nexports.generate = generate;\nexports.sign = sign;\nexports.verify = verify;\n//  This module provides the signing functionality used by the stellar network\n//  The code below may look a little strange... this is because we try to provide\n//  the most efficient signing method possible.  First, we try to load the\n//  native `sodium-native` package for node.js environments, and if that fails we\n//  fallback to `tweetnacl`\n\nvar actualMethods = {};\n\n/**\n * Use this flag to check if fast signing (provided by `sodium-native` package) is available.\n * If your app is signing a large number of transaction or verifying a large number\n * of signatures make sure `sodium-native` package is installed.\n */\nvar FastSigning = exports.FastSigning = checkFastSigning();\nfunction sign(data, secretKey) {\n  return actualMethods.sign(data, secretKey);\n}\nfunction verify(data, signature, publicKey) {\n  return actualMethods.verify(data, signature, publicKey);\n}\nfunction generate(secretKey) {\n  return actualMethods.generate(secretKey);\n}\nfunction checkFastSigning() {\n  return typeof window === 'undefined' ? checkFastSigningNode() : checkFastSigningBrowser();\n}\nfunction checkFastSigningNode() {\n  // NOTE: we use commonjs style require here because es6 imports\n  // can only occur at the top level.  thanks, obama.\n  var sodium;\n  try {\n    // eslint-disable-next-line\n    sodium = __webpack_require__(/*! sodium-native */ \"(ssr)/./node_modules/sodium-native/index.js\");\n  } catch (err) {\n    return checkFastSigningBrowser();\n  }\n  if (!Object.keys(sodium).length) {\n    return checkFastSigningBrowser();\n  }\n  actualMethods.generate = function (secretKey) {\n    var pk = Buffer.alloc(sodium.crypto_sign_PUBLICKEYBYTES);\n    var sk = Buffer.alloc(sodium.crypto_sign_SECRETKEYBYTES);\n    sodium.crypto_sign_seed_keypair(pk, sk, secretKey);\n    return pk;\n  };\n  actualMethods.sign = function (data, secretKey) {\n    data = Buffer.from(data);\n    var signature = Buffer.alloc(sodium.crypto_sign_BYTES);\n    sodium.crypto_sign_detached(signature, data, secretKey);\n    return signature;\n  };\n  actualMethods.verify = function (data, signature, publicKey) {\n    data = Buffer.from(data);\n    try {\n      return sodium.crypto_sign_verify_detached(signature, data, publicKey);\n    } catch (e) {\n      return false;\n    }\n  };\n  return true;\n}\nfunction checkFastSigningBrowser() {\n  // fallback to `tweetnacl` if we're in the browser or\n  // if there was a failure installing `sodium-native`\n  // eslint-disable-next-line\n  var nacl = __webpack_require__(/*! tweetnacl */ \"(ssr)/./node_modules/tweetnacl/nacl-fast.js\");\n  actualMethods.generate = function (secretKey) {\n    var secretKeyUint8 = new Uint8Array(secretKey);\n    var naclKeys = nacl.sign.keyPair.fromSeed(secretKeyUint8);\n    return Buffer.from(naclKeys.publicKey);\n  };\n  actualMethods.sign = function (data, secretKey) {\n    data = Buffer.from(data);\n    data = new Uint8Array(data.toJSON().data);\n    secretKey = new Uint8Array(secretKey.toJSON().data);\n    var signature = nacl.sign.detached(data, secretKey);\n    return Buffer.from(signature);\n  };\n  actualMethods.verify = function (data, signature, publicKey) {\n    data = Buffer.from(data);\n    data = new Uint8Array(data.toJSON().data);\n    signature = new Uint8Array(signature.toJSON().data);\n    publicKey = new Uint8Array(publicKey.toJSON().data);\n    return nacl.sign.detached.verify(data, signature, publicKey);\n  };\n  return false;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHN0ZWxsYXIvc3RlbGxhci1iYXNlL2xpYi9zaWduaW5nLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLDhDQUE2QztBQUM3QztBQUNBLENBQUMsRUFBQztBQUNGLG1CQUFtQjtBQUNuQixnQkFBZ0I7QUFDaEIsWUFBWTtBQUNaLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0IsbUJBQW1CO0FBQ3JDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsbUJBQU8sQ0FBQyxrRUFBZTtBQUNwQyxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsbUJBQU8sQ0FBQyw4REFBVztBQUNoQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcVVNVQVJJT1xcRG9jdW1lbnRzXFxHaXRodWJcXEdhbGF4eUtKLXdhbGxldC0tLUhhY2tcXHdlYlxcbm9kZV9tb2R1bGVzXFxAc3RlbGxhclxcc3RlbGxhci1iYXNlXFxsaWJcXHNpZ25pbmcuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLkZhc3RTaWduaW5nID0gdm9pZCAwO1xuZXhwb3J0cy5nZW5lcmF0ZSA9IGdlbmVyYXRlO1xuZXhwb3J0cy5zaWduID0gc2lnbjtcbmV4cG9ydHMudmVyaWZ5ID0gdmVyaWZ5O1xuLy8gIFRoaXMgbW9kdWxlIHByb3ZpZGVzIHRoZSBzaWduaW5nIGZ1bmN0aW9uYWxpdHkgdXNlZCBieSB0aGUgc3RlbGxhciBuZXR3b3JrXG4vLyAgVGhlIGNvZGUgYmVsb3cgbWF5IGxvb2sgYSBsaXR0bGUgc3RyYW5nZS4uLiB0aGlzIGlzIGJlY2F1c2Ugd2UgdHJ5IHRvIHByb3ZpZGVcbi8vICB0aGUgbW9zdCBlZmZpY2llbnQgc2lnbmluZyBtZXRob2QgcG9zc2libGUuICBGaXJzdCwgd2UgdHJ5IHRvIGxvYWQgdGhlXG4vLyAgbmF0aXZlIGBzb2RpdW0tbmF0aXZlYCBwYWNrYWdlIGZvciBub2RlLmpzIGVudmlyb25tZW50cywgYW5kIGlmIHRoYXQgZmFpbHMgd2Vcbi8vICBmYWxsYmFjayB0byBgdHdlZXRuYWNsYFxuXG52YXIgYWN0dWFsTWV0aG9kcyA9IHt9O1xuXG4vKipcbiAqIFVzZSB0aGlzIGZsYWcgdG8gY2hlY2sgaWYgZmFzdCBzaWduaW5nIChwcm92aWRlZCBieSBgc29kaXVtLW5hdGl2ZWAgcGFja2FnZSkgaXMgYXZhaWxhYmxlLlxuICogSWYgeW91ciBhcHAgaXMgc2lnbmluZyBhIGxhcmdlIG51bWJlciBvZiB0cmFuc2FjdGlvbiBvciB2ZXJpZnlpbmcgYSBsYXJnZSBudW1iZXJcbiAqIG9mIHNpZ25hdHVyZXMgbWFrZSBzdXJlIGBzb2RpdW0tbmF0aXZlYCBwYWNrYWdlIGlzIGluc3RhbGxlZC5cbiAqL1xudmFyIEZhc3RTaWduaW5nID0gZXhwb3J0cy5GYXN0U2lnbmluZyA9IGNoZWNrRmFzdFNpZ25pbmcoKTtcbmZ1bmN0aW9uIHNpZ24oZGF0YSwgc2VjcmV0S2V5KSB7XG4gIHJldHVybiBhY3R1YWxNZXRob2RzLnNpZ24oZGF0YSwgc2VjcmV0S2V5KTtcbn1cbmZ1bmN0aW9uIHZlcmlmeShkYXRhLCBzaWduYXR1cmUsIHB1YmxpY0tleSkge1xuICByZXR1cm4gYWN0dWFsTWV0aG9kcy52ZXJpZnkoZGF0YSwgc2lnbmF0dXJlLCBwdWJsaWNLZXkpO1xufVxuZnVuY3Rpb24gZ2VuZXJhdGUoc2VjcmV0S2V5KSB7XG4gIHJldHVybiBhY3R1YWxNZXRob2RzLmdlbmVyYXRlKHNlY3JldEtleSk7XG59XG5mdW5jdGlvbiBjaGVja0Zhc3RTaWduaW5nKCkge1xuICByZXR1cm4gdHlwZW9mIHdpbmRvdyA9PT0gJ3VuZGVmaW5lZCcgPyBjaGVja0Zhc3RTaWduaW5nTm9kZSgpIDogY2hlY2tGYXN0U2lnbmluZ0Jyb3dzZXIoKTtcbn1cbmZ1bmN0aW9uIGNoZWNrRmFzdFNpZ25pbmdOb2RlKCkge1xuICAvLyBOT1RFOiB3ZSB1c2UgY29tbW9uanMgc3R5bGUgcmVxdWlyZSBoZXJlIGJlY2F1c2UgZXM2IGltcG9ydHNcbiAgLy8gY2FuIG9ubHkgb2NjdXIgYXQgdGhlIHRvcCBsZXZlbC4gIHRoYW5rcywgb2JhbWEuXG4gIHZhciBzb2RpdW07XG4gIHRyeSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG4gICAgc29kaXVtID0gcmVxdWlyZSgnc29kaXVtLW5hdGl2ZScpO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICByZXR1cm4gY2hlY2tGYXN0U2lnbmluZ0Jyb3dzZXIoKTtcbiAgfVxuICBpZiAoIU9iamVjdC5rZXlzKHNvZGl1bSkubGVuZ3RoKSB7XG4gICAgcmV0dXJuIGNoZWNrRmFzdFNpZ25pbmdCcm93c2VyKCk7XG4gIH1cbiAgYWN0dWFsTWV0aG9kcy5nZW5lcmF0ZSA9IGZ1bmN0aW9uIChzZWNyZXRLZXkpIHtcbiAgICB2YXIgcGsgPSBCdWZmZXIuYWxsb2Moc29kaXVtLmNyeXB0b19zaWduX1BVQkxJQ0tFWUJZVEVTKTtcbiAgICB2YXIgc2sgPSBCdWZmZXIuYWxsb2Moc29kaXVtLmNyeXB0b19zaWduX1NFQ1JFVEtFWUJZVEVTKTtcbiAgICBzb2RpdW0uY3J5cHRvX3NpZ25fc2VlZF9rZXlwYWlyKHBrLCBzaywgc2VjcmV0S2V5KTtcbiAgICByZXR1cm4gcGs7XG4gIH07XG4gIGFjdHVhbE1ldGhvZHMuc2lnbiA9IGZ1bmN0aW9uIChkYXRhLCBzZWNyZXRLZXkpIHtcbiAgICBkYXRhID0gQnVmZmVyLmZyb20oZGF0YSk7XG4gICAgdmFyIHNpZ25hdHVyZSA9IEJ1ZmZlci5hbGxvYyhzb2RpdW0uY3J5cHRvX3NpZ25fQllURVMpO1xuICAgIHNvZGl1bS5jcnlwdG9fc2lnbl9kZXRhY2hlZChzaWduYXR1cmUsIGRhdGEsIHNlY3JldEtleSk7XG4gICAgcmV0dXJuIHNpZ25hdHVyZTtcbiAgfTtcbiAgYWN0dWFsTWV0aG9kcy52ZXJpZnkgPSBmdW5jdGlvbiAoZGF0YSwgc2lnbmF0dXJlLCBwdWJsaWNLZXkpIHtcbiAgICBkYXRhID0gQnVmZmVyLmZyb20oZGF0YSk7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiBzb2RpdW0uY3J5cHRvX3NpZ25fdmVyaWZ5X2RldGFjaGVkKHNpZ25hdHVyZSwgZGF0YSwgcHVibGljS2V5KTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9O1xuICByZXR1cm4gdHJ1ZTtcbn1cbmZ1bmN0aW9uIGNoZWNrRmFzdFNpZ25pbmdCcm93c2VyKCkge1xuICAvLyBmYWxsYmFjayB0byBgdHdlZXRuYWNsYCBpZiB3ZSdyZSBpbiB0aGUgYnJvd3NlciBvclxuICAvLyBpZiB0aGVyZSB3YXMgYSBmYWlsdXJlIGluc3RhbGxpbmcgYHNvZGl1bS1uYXRpdmVgXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuICB2YXIgbmFjbCA9IHJlcXVpcmUoJ3R3ZWV0bmFjbCcpO1xuICBhY3R1YWxNZXRob2RzLmdlbmVyYXRlID0gZnVuY3Rpb24gKHNlY3JldEtleSkge1xuICAgIHZhciBzZWNyZXRLZXlVaW50OCA9IG5ldyBVaW50OEFycmF5KHNlY3JldEtleSk7XG4gICAgdmFyIG5hY2xLZXlzID0gbmFjbC5zaWduLmtleVBhaXIuZnJvbVNlZWQoc2VjcmV0S2V5VWludDgpO1xuICAgIHJldHVybiBCdWZmZXIuZnJvbShuYWNsS2V5cy5wdWJsaWNLZXkpO1xuICB9O1xuICBhY3R1YWxNZXRob2RzLnNpZ24gPSBmdW5jdGlvbiAoZGF0YSwgc2VjcmV0S2V5KSB7XG4gICAgZGF0YSA9IEJ1ZmZlci5mcm9tKGRhdGEpO1xuICAgIGRhdGEgPSBuZXcgVWludDhBcnJheShkYXRhLnRvSlNPTigpLmRhdGEpO1xuICAgIHNlY3JldEtleSA9IG5ldyBVaW50OEFycmF5KHNlY3JldEtleS50b0pTT04oKS5kYXRhKTtcbiAgICB2YXIgc2lnbmF0dXJlID0gbmFjbC5zaWduLmRldGFjaGVkKGRhdGEsIHNlY3JldEtleSk7XG4gICAgcmV0dXJuIEJ1ZmZlci5mcm9tKHNpZ25hdHVyZSk7XG4gIH07XG4gIGFjdHVhbE1ldGhvZHMudmVyaWZ5ID0gZnVuY3Rpb24gKGRhdGEsIHNpZ25hdHVyZSwgcHVibGljS2V5KSB7XG4gICAgZGF0YSA9IEJ1ZmZlci5mcm9tKGRhdGEpO1xuICAgIGRhdGEgPSBuZXcgVWludDhBcnJheShkYXRhLnRvSlNPTigpLmRhdGEpO1xuICAgIHNpZ25hdHVyZSA9IG5ldyBVaW50OEFycmF5KHNpZ25hdHVyZS50b0pTT04oKS5kYXRhKTtcbiAgICBwdWJsaWNLZXkgPSBuZXcgVWludDhBcnJheShwdWJsaWNLZXkudG9KU09OKCkuZGF0YSk7XG4gICAgcmV0dXJuIG5hY2wuc2lnbi5kZXRhY2hlZC52ZXJpZnkoZGF0YSwgc2lnbmF0dXJlLCBwdWJsaWNLZXkpO1xuICB9O1xuICByZXR1cm4gZmFsc2U7XG59Il0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@stellar/stellar-base/lib/signing.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@stellar/stellar-base/lib/soroban.js":
/*!***********************************************************!*\
  !*** ./node_modules/@stellar/stellar-base/lib/soroban.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.Soroban = void 0;\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _toArray(r) { return _arrayWithHoles(r) || _iterableToArray(r) || _unsupportedIterableToArray(r) || _nonIterableRest(); }\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _unsupportedIterableToArray(r, a) { if (r) { if (\"string\" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return \"Object\" === t && r.constructor && (t = r.constructor.name), \"Map\" === t || \"Set\" === t ? Array.from(r) : \"Arguments\" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }\nfunction _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }\nfunction _iterableToArray(r) { if (\"undefined\" != typeof Symbol && null != r[Symbol.iterator] || null != r[\"@@iterator\"]) return Array.from(r); }\nfunction _arrayWithHoles(r) { if (Array.isArray(r)) return r; }\nfunction _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\nfunction _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }\nfunction _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\n/* Helper class to assist with formatting and parsing token amounts. */\nvar Soroban = exports.Soroban = /*#__PURE__*/function () {\n  function Soroban() {\n    _classCallCheck(this, Soroban);\n  }\n  return _createClass(Soroban, null, [{\n    key: \"formatTokenAmount\",\n    value:\n    /**\n     * Given a whole number smart contract amount of a token and an amount of\n     * decimal places (if the token has any), it returns a \"display\" value.\n     *\n     * All arithmetic inside the contract is performed on integers to avoid\n     * potential precision and consistency issues of floating-point.\n     *\n     * @param {string} amount   the token amount you want to display\n     * @param {number} decimals specify how many decimal places a token has\n     *\n     * @returns {string} the display value\n     * @throws {TypeError} if the given amount has a decimal point already\n     * @example\n     * formatTokenAmount(\"123000\", 4) === \"12.3\";\n     */\n    function formatTokenAmount(amount, decimals) {\n      if (amount.includes('.')) {\n        throw new TypeError('No decimals are allowed');\n      }\n      var formatted = amount;\n      if (decimals > 0) {\n        if (decimals > formatted.length) {\n          formatted = ['0', formatted.toString().padStart(decimals, '0')].join('.');\n        } else {\n          formatted = [formatted.slice(0, -decimals), formatted.slice(-decimals)].join('.');\n        }\n      }\n\n      // remove trailing zero if any\n      return formatted.replace(/(\\.\\d*?)0+$/, '$1');\n    }\n\n    /**\n     * Parse a token amount to use it on smart contract\n     *\n     * This function takes the display value and its decimals (if the token has\n     * any) and returns a string that'll be used within the smart contract.\n     *\n     * @param {string} value      the token amount you want to use it on smart\n     *    contract which you've been displaying in a UI\n     * @param {number} decimals   the number of decimal places expected in the\n     *    display value (different than the \"actual\" number, because suffix zeroes\n     *    might not be present)\n     *\n     * @returns {string}  the whole number token amount represented by the display\n     *    value with the decimal places shifted over\n     *\n     * @example\n     * const displayValueAmount = \"123.4560\"\n     * const parsedAmtForSmartContract = parseTokenAmount(displayValueAmount, 5);\n     * parsedAmtForSmartContract === \"12345600\"\n     */\n  }, {\n    key: \"parseTokenAmount\",\n    value: function parseTokenAmount(value, decimals) {\n      var _fraction$padEnd;\n      var _value$split$slice = value.split('.').slice(),\n        _value$split$slice2 = _toArray(_value$split$slice),\n        whole = _value$split$slice2[0],\n        fraction = _value$split$slice2[1],\n        rest = _value$split$slice2.slice(2);\n      if (rest.length) {\n        throw new Error(\"Invalid decimal value: \".concat(value));\n      }\n      var shifted = BigInt(whole + ((_fraction$padEnd = fraction === null || fraction === void 0 ? void 0 : fraction.padEnd(decimals, '0')) !== null && _fraction$padEnd !== void 0 ? _fraction$padEnd : '0'.repeat(decimals)));\n      return shifted.toString();\n    }\n  }]);\n}();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@stellar/stellar-base/lib/soroban.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@stellar/stellar-base/lib/sorobandata_builder.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@stellar/stellar-base/lib/sorobandata_builder.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.SorobanDataBuilder = void 0;\nvar _xdr = _interopRequireDefault(__webpack_require__(/*! ./xdr */ \"(ssr)/./node_modules/@stellar/stellar-base/lib/xdr.js\"));\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { \"default\": e }; }\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\nfunction _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }\nfunction _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\nfunction _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\n/**\n * Supports building {@link xdr.SorobanTransactionData} structures with various\n * items set to specific values.\n *\n * This is recommended for when you are building\n * {@link Operation.extendFootprintTtl} / {@link Operation.restoreFootprint}\n * operations and need to {@link TransactionBuilder.setSorobanData} to avoid\n * (re)building the entire data structure from scratch.\n *\n * @constructor\n *\n * @param {string | xdr.SorobanTransactionData} [sorobanData]  either a\n *      base64-encoded string that represents an\n *      {@link xdr.SorobanTransactionData} instance or an XDR instance itself\n *      (it will be copied); if omitted or \"falsy\" (e.g. an empty string), it\n *      starts with an empty instance\n *\n * @example\n * // You want to use an existing data blob but override specific parts.\n * const newData = new SorobanDataBuilder(existing)\n *   .setReadOnly(someLedgerKeys)\n *   .setRefundableFee(\"1000\")\n *   .build();\n *\n * // You want an instance from scratch\n * const newData = new SorobanDataBuilder()\n *   .setFootprint([someLedgerKey], [])\n *   .setRefundableFee(\"1000\")\n *   .build();\n */\nvar SorobanDataBuilder = exports.SorobanDataBuilder = /*#__PURE__*/function () {\n  function SorobanDataBuilder(sorobanData) {\n    _classCallCheck(this, SorobanDataBuilder);\n    _defineProperty(this, \"_data\", void 0);\n    var data;\n    if (!sorobanData) {\n      data = new _xdr[\"default\"].SorobanTransactionData({\n        resources: new _xdr[\"default\"].SorobanResources({\n          footprint: new _xdr[\"default\"].LedgerFootprint({\n            readOnly: [],\n            readWrite: []\n          }),\n          instructions: 0,\n          readBytes: 0,\n          writeBytes: 0\n        }),\n        ext: new _xdr[\"default\"].ExtensionPoint(0),\n        resourceFee: new _xdr[\"default\"].Int64(0)\n      });\n    } else if (typeof sorobanData === 'string' || ArrayBuffer.isView(sorobanData)) {\n      data = SorobanDataBuilder.fromXDR(sorobanData);\n    } else {\n      data = SorobanDataBuilder.fromXDR(sorobanData.toXDR()); // copy\n    }\n    this._data = data;\n  }\n\n  /**\n   * Decodes and builds a {@link xdr.SorobanTransactionData} instance.\n   * @param {Uint8Array|Buffer|string} data   raw input to decode\n   * @returns {xdr.SorobanTransactionData}\n   */\n  return _createClass(SorobanDataBuilder, [{\n    key: \"setResourceFee\",\n    value:\n    /**\n     * Sets the resource fee portion of the Soroban data.\n     * @param {number | bigint | string} fee  the resource fee to set (int64)\n     * @returns {SorobanDataBuilder}\n     */\n    function setResourceFee(fee) {\n      this._data.resourceFee(new _xdr[\"default\"].Int64(fee));\n      return this;\n    }\n\n    /**\n     * Sets up the resource metrics.\n     *\n     * You should almost NEVER need this, as its often generated / provided to you\n     * by transaction simulation/preflight from a Soroban RPC server.\n     *\n     * @param {number} cpuInstrs      number of CPU instructions\n     * @param {number} readBytes      number of bytes being read\n     * @param {number} writeBytes     number of bytes being written\n     *\n     * @returns {SorobanDataBuilder}\n     */\n  }, {\n    key: \"setResources\",\n    value: function setResources(cpuInstrs, readBytes, writeBytes) {\n      this._data.resources().instructions(cpuInstrs);\n      this._data.resources().readBytes(readBytes);\n      this._data.resources().writeBytes(writeBytes);\n      return this;\n    }\n\n    /**\n     * Appends the given ledger keys to the existing storage access footprint.\n     * @param {xdr.LedgerKey[]} readOnly   read-only keys to add\n     * @param {xdr.LedgerKey[]} readWrite  read-write keys to add\n     * @returns {SorobanDataBuilder} this builder instance\n     */\n  }, {\n    key: \"appendFootprint\",\n    value: function appendFootprint(readOnly, readWrite) {\n      return this.setFootprint(this.getReadOnly().concat(readOnly), this.getReadWrite().concat(readWrite));\n    }\n\n    /**\n     * Sets the storage access footprint to be a certain set of ledger keys.\n     *\n     * You can also set each field explicitly via\n     * {@link SorobanDataBuilder.setReadOnly} and\n     * {@link SorobanDataBuilder.setReadWrite} or add to the existing footprint\n     * via {@link SorobanDataBuilder.appendFootprint}.\n     *\n     * Passing `null|undefined` to either parameter will IGNORE the existing\n     * values. If you want to clear them, pass `[]`, instead.\n     *\n     * @param {xdr.LedgerKey[]|null} [readOnly]   the set of ledger keys to set in\n     *    the read-only portion of the transaction's `sorobanData`, or `null |\n     *    undefined` to keep the existing keys\n     * @param {xdr.LedgerKey[]|null} [readWrite]  the set of ledger keys to set in\n     *    the read-write portion of the transaction's `sorobanData`, or `null |\n     *    undefined` to keep the existing keys\n     * @returns {SorobanDataBuilder} this builder instance\n     */\n  }, {\n    key: \"setFootprint\",\n    value: function setFootprint(readOnly, readWrite) {\n      if (readOnly !== null) {\n        // null means \"leave me alone\"\n        this.setReadOnly(readOnly);\n      }\n      if (readWrite !== null) {\n        this.setReadWrite(readWrite);\n      }\n      return this;\n    }\n\n    /**\n     * @param {xdr.LedgerKey[]} readOnly  read-only keys in the access footprint\n     * @returns {SorobanDataBuilder}\n     */\n  }, {\n    key: \"setReadOnly\",\n    value: function setReadOnly(readOnly) {\n      this._data.resources().footprint().readOnly(readOnly !== null && readOnly !== void 0 ? readOnly : []);\n      return this;\n    }\n\n    /**\n     * @param {xdr.LedgerKey[]} readWrite  read-write keys in the access footprint\n     * @returns {SorobanDataBuilder}\n     */\n  }, {\n    key: \"setReadWrite\",\n    value: function setReadWrite(readWrite) {\n      this._data.resources().footprint().readWrite(readWrite !== null && readWrite !== void 0 ? readWrite : []);\n      return this;\n    }\n\n    /**\n     * @returns {xdr.SorobanTransactionData} a copy of the final data structure\n     */\n  }, {\n    key: \"build\",\n    value: function build() {\n      return _xdr[\"default\"].SorobanTransactionData.fromXDR(this._data.toXDR()); // clone\n    }\n\n    //\n    // getters follow\n    //\n\n    /** @returns {xdr.LedgerKey[]} the read-only storage access pattern */\n  }, {\n    key: \"getReadOnly\",\n    value: function getReadOnly() {\n      return this.getFootprint().readOnly();\n    }\n\n    /** @returns {xdr.LedgerKey[]} the read-write storage access pattern */\n  }, {\n    key: \"getReadWrite\",\n    value: function getReadWrite() {\n      return this.getFootprint().readWrite();\n    }\n\n    /** @returns {xdr.LedgerFootprint} the storage access pattern */\n  }, {\n    key: \"getFootprint\",\n    value: function getFootprint() {\n      return this._data.resources().footprint();\n    }\n  }], [{\n    key: \"fromXDR\",\n    value: function fromXDR(data) {\n      return _xdr[\"default\"].SorobanTransactionData.fromXDR(data, typeof data === 'string' ? 'base64' : 'raw');\n    }\n  }]);\n}();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@stellar/stellar-base/lib/sorobandata_builder.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@stellar/stellar-base/lib/strkey.js":
/*!**********************************************************!*\
  !*** ./node_modules/@stellar/stellar-base/lib/strkey.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.StrKey = void 0;\nexports.decodeCheck = decodeCheck;\nexports.encodeCheck = encodeCheck;\nvar _base = _interopRequireDefault(__webpack_require__(/*! base32.js */ \"(ssr)/./node_modules/base32.js/index.js\"));\nvar _checksum = __webpack_require__(/*! ./util/checksum */ \"(ssr)/./node_modules/@stellar/stellar-base/lib/util/checksum.js\");\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { \"default\": e }; }\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\nfunction _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }\nfunction _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); } /* eslint no-bitwise: [\"error\", {\"allow\": [\"<<\", \">>\", \"^\", \"&\", \"&=\"]}] */\nvar versionBytes = {\n  ed25519PublicKey: 6 << 3,\n  // G (when encoded in base32)\n  ed25519SecretSeed: 18 << 3,\n  // S\n  med25519PublicKey: 12 << 3,\n  // M\n  preAuthTx: 19 << 3,\n  // T\n  sha256Hash: 23 << 3,\n  // X\n  signedPayload: 15 << 3,\n  // P\n  contract: 2 << 3 // C\n};\nvar strkeyTypes = {\n  G: 'ed25519PublicKey',\n  S: 'ed25519SecretSeed',\n  M: 'med25519PublicKey',\n  T: 'preAuthTx',\n  X: 'sha256Hash',\n  P: 'signedPayload',\n  C: 'contract'\n};\n\n/**\n * StrKey is a helper class that allows encoding and decoding Stellar keys\n * to/from strings, i.e. between their binary (Buffer, xdr.PublicKey, etc.) and\n * string (i.e. \"GABCD...\", etc.) representations.\n */\nvar StrKey = exports.StrKey = /*#__PURE__*/function () {\n  function StrKey() {\n    _classCallCheck(this, StrKey);\n  }\n  return _createClass(StrKey, null, [{\n    key: \"encodeEd25519PublicKey\",\n    value:\n    /**\n     * Encodes `data` to strkey ed25519 public key.\n     *\n     * @param   {Buffer} data   raw data to encode\n     * @returns {string}        \"G...\" representation of the key\n     */\n    function encodeEd25519PublicKey(data) {\n      return encodeCheck('ed25519PublicKey', data);\n    }\n\n    /**\n     * Decodes strkey ed25519 public key to raw data.\n     *\n     * If the parameter is a muxed account key (\"M...\"), this will only encode it\n     * as a basic Ed25519 key (as if in \"G...\" format).\n     *\n     * @param   {string} data   \"G...\" (or \"M...\") key representation to decode\n     * @returns {Buffer}        raw key\n     */\n  }, {\n    key: \"decodeEd25519PublicKey\",\n    value: function decodeEd25519PublicKey(data) {\n      return decodeCheck('ed25519PublicKey', data);\n    }\n\n    /**\n     * Returns true if the given Stellar public key is a valid ed25519 public key.\n     * @param {string} publicKey public key to check\n     * @returns {boolean}\n     */\n  }, {\n    key: \"isValidEd25519PublicKey\",\n    value: function isValidEd25519PublicKey(publicKey) {\n      return isValid('ed25519PublicKey', publicKey);\n    }\n\n    /**\n     * Encodes data to strkey ed25519 seed.\n     * @param {Buffer} data data to encode\n     * @returns {string}\n     */\n  }, {\n    key: \"encodeEd25519SecretSeed\",\n    value: function encodeEd25519SecretSeed(data) {\n      return encodeCheck('ed25519SecretSeed', data);\n    }\n\n    /**\n     * Decodes strkey ed25519 seed to raw data.\n     * @param {string} address data to decode\n     * @returns {Buffer}\n     */\n  }, {\n    key: \"decodeEd25519SecretSeed\",\n    value: function decodeEd25519SecretSeed(address) {\n      return decodeCheck('ed25519SecretSeed', address);\n    }\n\n    /**\n     * Returns true if the given Stellar secret key is a valid ed25519 secret seed.\n     * @param {string} seed seed to check\n     * @returns {boolean}\n     */\n  }, {\n    key: \"isValidEd25519SecretSeed\",\n    value: function isValidEd25519SecretSeed(seed) {\n      return isValid('ed25519SecretSeed', seed);\n    }\n\n    /**\n     * Encodes data to strkey med25519 public key.\n     * @param {Buffer} data data to encode\n     * @returns {string}\n     */\n  }, {\n    key: \"encodeMed25519PublicKey\",\n    value: function encodeMed25519PublicKey(data) {\n      return encodeCheck('med25519PublicKey', data);\n    }\n\n    /**\n     * Decodes strkey med25519 public key to raw data.\n     * @param {string} address data to decode\n     * @returns {Buffer}\n     */\n  }, {\n    key: \"decodeMed25519PublicKey\",\n    value: function decodeMed25519PublicKey(address) {\n      return decodeCheck('med25519PublicKey', address);\n    }\n\n    /**\n     * Returns true if the given Stellar public key is a valid med25519 public key.\n     * @param {string} publicKey public key to check\n     * @returns {boolean}\n     */\n  }, {\n    key: \"isValidMed25519PublicKey\",\n    value: function isValidMed25519PublicKey(publicKey) {\n      return isValid('med25519PublicKey', publicKey);\n    }\n\n    /**\n     * Encodes data to strkey preAuthTx.\n     * @param {Buffer} data data to encode\n     * @returns {string}\n     */\n  }, {\n    key: \"encodePreAuthTx\",\n    value: function encodePreAuthTx(data) {\n      return encodeCheck('preAuthTx', data);\n    }\n\n    /**\n     * Decodes strkey PreAuthTx to raw data.\n     * @param {string} address data to decode\n     * @returns {Buffer}\n     */\n  }, {\n    key: \"decodePreAuthTx\",\n    value: function decodePreAuthTx(address) {\n      return decodeCheck('preAuthTx', address);\n    }\n\n    /**\n     * Encodes data to strkey sha256 hash.\n     * @param {Buffer} data data to encode\n     * @returns {string}\n     */\n  }, {\n    key: \"encodeSha256Hash\",\n    value: function encodeSha256Hash(data) {\n      return encodeCheck('sha256Hash', data);\n    }\n\n    /**\n     * Decodes strkey sha256 hash to raw data.\n     * @param {string} address data to decode\n     * @returns {Buffer}\n     */\n  }, {\n    key: \"decodeSha256Hash\",\n    value: function decodeSha256Hash(address) {\n      return decodeCheck('sha256Hash', address);\n    }\n\n    /**\n     * Encodes raw data to strkey signed payload (P...).\n     * @param   {Buffer} data  data to encode\n     * @returns {string}\n     */\n  }, {\n    key: \"encodeSignedPayload\",\n    value: function encodeSignedPayload(data) {\n      return encodeCheck('signedPayload', data);\n    }\n\n    /**\n     * Decodes strkey signed payload (P...) to raw data.\n     * @param   {string} address  address to decode\n     * @returns {Buffer}\n     */\n  }, {\n    key: \"decodeSignedPayload\",\n    value: function decodeSignedPayload(address) {\n      return decodeCheck('signedPayload', address);\n    }\n\n    /**\n     * Checks validity of alleged signed payload (P...) strkey address.\n     * @param   {string} address  signer key to check\n     * @returns {boolean}\n     */\n  }, {\n    key: \"isValidSignedPayload\",\n    value: function isValidSignedPayload(address) {\n      return isValid('signedPayload', address);\n    }\n\n    /**\n     * Encodes raw data to strkey contract (C...).\n     * @param   {Buffer} data  data to encode\n     * @returns {string}\n     */\n  }, {\n    key: \"encodeContract\",\n    value: function encodeContract(data) {\n      return encodeCheck('contract', data);\n    }\n\n    /**\n     * Decodes strkey contract (C...) to raw data.\n     * @param   {string} address  address to decode\n     * @returns {Buffer}\n     */\n  }, {\n    key: \"decodeContract\",\n    value: function decodeContract(address) {\n      return decodeCheck('contract', address);\n    }\n\n    /**\n     * Checks validity of alleged contract (C...) strkey address.\n     * @param   {string} address  signer key to check\n     * @returns {boolean}\n     */\n  }, {\n    key: \"isValidContract\",\n    value: function isValidContract(address) {\n      return isValid('contract', address);\n    }\n  }, {\n    key: \"getVersionByteForPrefix\",\n    value: function getVersionByteForPrefix(address) {\n      return strkeyTypes[address[0]];\n    }\n  }]);\n}();\n/**\n * Sanity-checks whether or not a strkey *appears* valid.\n *\n * @param  {string}  versionByteName the type of strkey to expect in `encoded`\n * @param  {string}  encoded         the strkey to validate\n *\n * @return {Boolean} whether or not the `encoded` strkey appears valid for the\n *     `versionByteName` strkey type (see `versionBytes`, above).\n *\n * @note This isn't a *definitive* check of validity, but rather a best-effort\n *     check based on (a) input length, (b) whether or not it can be decoded,\n *     and (c) output length.\n */\nfunction isValid(versionByteName, encoded) {\n  if (typeof encoded !== 'string') {\n    return false;\n  }\n\n  // basic length checks on the strkey lengths\n  switch (versionByteName) {\n    case 'ed25519PublicKey': // falls through\n    case 'ed25519SecretSeed': // falls through\n    case 'preAuthTx': // falls through\n    case 'sha256Hash': // falls through\n    case 'contract':\n      if (encoded.length !== 56) {\n        return false;\n      }\n      break;\n    case 'med25519PublicKey':\n      if (encoded.length !== 69) {\n        return false;\n      }\n      break;\n    case 'signedPayload':\n      if (encoded.length < 56 || encoded.length > 165) {\n        return false;\n      }\n      break;\n    default:\n      return false;\n  }\n  var decoded = '';\n  try {\n    decoded = decodeCheck(versionByteName, encoded);\n  } catch (err) {\n    return false;\n  }\n\n  // basic length checks on the resulting buffer sizes\n  switch (versionByteName) {\n    case 'ed25519PublicKey': // falls through\n    case 'ed25519SecretSeed': // falls through\n    case 'preAuthTx': // falls through\n    case 'sha256Hash': // falls through\n    case 'contract':\n      return decoded.length === 32;\n    case 'med25519PublicKey':\n      return decoded.length === 40;\n    // +8 bytes for the ID\n\n    case 'signedPayload':\n      return (\n        // 32 for the signer, +4 for the payload size, then either +4 for the\n        // min or +64 for the max payload\n        decoded.length >= 32 + 4 + 4 && decoded.length <= 32 + 4 + 64\n      );\n    default:\n      return false;\n  }\n}\nfunction decodeCheck(versionByteName, encoded) {\n  if (typeof encoded !== 'string') {\n    throw new TypeError('encoded argument must be of type String');\n  }\n  var decoded = _base[\"default\"].decode(encoded);\n  var versionByte = decoded[0];\n  var payload = decoded.slice(0, -2);\n  var data = payload.slice(1);\n  var checksum = decoded.slice(-2);\n  if (encoded !== _base[\"default\"].encode(decoded)) {\n    throw new Error('invalid encoded string');\n  }\n  var expectedVersion = versionBytes[versionByteName];\n  if (expectedVersion === undefined) {\n    throw new Error(\"\".concat(versionByteName, \" is not a valid version byte name. \") + \"Expected one of \".concat(Object.keys(versionBytes).join(', ')));\n  }\n  if (versionByte !== expectedVersion) {\n    throw new Error(\"invalid version byte. expected \".concat(expectedVersion, \", got \").concat(versionByte));\n  }\n  var expectedChecksum = calculateChecksum(payload);\n  if (!(0, _checksum.verifyChecksum)(expectedChecksum, checksum)) {\n    throw new Error(\"invalid checksum\");\n  }\n  return Buffer.from(data);\n}\nfunction encodeCheck(versionByteName, data) {\n  if (data === null || data === undefined) {\n    throw new Error('cannot encode null data');\n  }\n  var versionByte = versionBytes[versionByteName];\n  if (versionByte === undefined) {\n    throw new Error(\"\".concat(versionByteName, \" is not a valid version byte name. \") + \"Expected one of \".concat(Object.keys(versionBytes).join(', ')));\n  }\n  data = Buffer.from(data);\n  var versionBuffer = Buffer.from([versionByte]);\n  var payload = Buffer.concat([versionBuffer, data]);\n  var checksum = Buffer.from(calculateChecksum(payload));\n  var unencoded = Buffer.concat([payload, checksum]);\n  return _base[\"default\"].encode(unencoded);\n}\n\n// Computes the CRC16-XModem checksum of `payload` in little-endian order\nfunction calculateChecksum(payload) {\n  var crcTable = [0x0000, 0x1021, 0x2042, 0x3063, 0x4084, 0x50a5, 0x60c6, 0x70e7, 0x8108, 0x9129, 0xa14a, 0xb16b, 0xc18c, 0xd1ad, 0xe1ce, 0xf1ef, 0x1231, 0x0210, 0x3273, 0x2252, 0x52b5, 0x4294, 0x72f7, 0x62d6, 0x9339, 0x8318, 0xb37b, 0xa35a, 0xd3bd, 0xc39c, 0xf3ff, 0xe3de, 0x2462, 0x3443, 0x0420, 0x1401, 0x64e6, 0x74c7, 0x44a4, 0x5485, 0xa56a, 0xb54b, 0x8528, 0x9509, 0xe5ee, 0xf5cf, 0xc5ac, 0xd58d, 0x3653, 0x2672, 0x1611, 0x0630, 0x76d7, 0x66f6, 0x5695, 0x46b4, 0xb75b, 0xa77a, 0x9719, 0x8738, 0xf7df, 0xe7fe, 0xd79d, 0xc7bc, 0x48c4, 0x58e5, 0x6886, 0x78a7, 0x0840, 0x1861, 0x2802, 0x3823, 0xc9cc, 0xd9ed, 0xe98e, 0xf9af, 0x8948, 0x9969, 0xa90a, 0xb92b, 0x5af5, 0x4ad4, 0x7ab7, 0x6a96, 0x1a71, 0x0a50, 0x3a33, 0x2a12, 0xdbfd, 0xcbdc, 0xfbbf, 0xeb9e, 0x9b79, 0x8b58, 0xbb3b, 0xab1a, 0x6ca6, 0x7c87, 0x4ce4, 0x5cc5, 0x2c22, 0x3c03, 0x0c60, 0x1c41, 0xedae, 0xfd8f, 0xcdec, 0xddcd, 0xad2a, 0xbd0b, 0x8d68, 0x9d49, 0x7e97, 0x6eb6, 0x5ed5, 0x4ef4, 0x3e13, 0x2e32, 0x1e51, 0x0e70, 0xff9f, 0xefbe, 0xdfdd, 0xcffc, 0xbf1b, 0xaf3a, 0x9f59, 0x8f78, 0x9188, 0x81a9, 0xb1ca, 0xa1eb, 0xd10c, 0xc12d, 0xf14e, 0xe16f, 0x1080, 0x00a1, 0x30c2, 0x20e3, 0x5004, 0x4025, 0x7046, 0x6067, 0x83b9, 0x9398, 0xa3fb, 0xb3da, 0xc33d, 0xd31c, 0xe37f, 0xf35e, 0x02b1, 0x1290, 0x22f3, 0x32d2, 0x4235, 0x5214, 0x6277, 0x7256, 0xb5ea, 0xa5cb, 0x95a8, 0x8589, 0xf56e, 0xe54f, 0xd52c, 0xc50d, 0x34e2, 0x24c3, 0x14a0, 0x0481, 0x7466, 0x6447, 0x5424, 0x4405, 0xa7db, 0xb7fa, 0x8799, 0x97b8, 0xe75f, 0xf77e, 0xc71d, 0xd73c, 0x26d3, 0x36f2, 0x0691, 0x16b0, 0x6657, 0x7676, 0x4615, 0x5634, 0xd94c, 0xc96d, 0xf90e, 0xe92f, 0x99c8, 0x89e9, 0xb98a, 0xa9ab, 0x5844, 0x4865, 0x7806, 0x6827, 0x18c0, 0x08e1, 0x3882, 0x28a3, 0xcb7d, 0xdb5c, 0xeb3f, 0xfb1e, 0x8bf9, 0x9bd8, 0xabbb, 0xbb9a, 0x4a75, 0x5a54, 0x6a37, 0x7a16, 0x0af1, 0x1ad0, 0x2ab3, 0x3a92, 0xfd2e, 0xed0f, 0xdd6c, 0xcd4d, 0xbdaa, 0xad8b, 0x9de8, 0x8dc9, 0x7c26, 0x6c07, 0x5c64, 0x4c45, 0x3ca2, 0x2c83, 0x1ce0, 0x0cc1, 0xef1f, 0xff3e, 0xcf5d, 0xdf7c, 0xaf9b, 0xbfba, 0x8fd9, 0x9ff8, 0x6e17, 0x7e36, 0x4e55, 0x5e74, 0x2e93, 0x3eb2, 0x0ed1, 0x1ef0];\n  var crc16 = 0x0;\n  for (var i = 0; i < payload.length; i += 1) {\n    var _byte = payload[i];\n    var lookupIndex = crc16 >> 8 ^ _byte;\n    crc16 = crc16 << 8 ^ crcTable[lookupIndex];\n    crc16 &= 0xffff;\n  }\n  var checksum = new Uint8Array(2);\n  checksum[0] = crc16 & 0xff;\n  checksum[1] = crc16 >> 8 & 0xff;\n  return checksum;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@stellar/stellar-base/lib/strkey.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@stellar/stellar-base/lib/transaction.js":
/*!***************************************************************!*\
  !*** ./node_modules/@stellar/stellar-base/lib/transaction.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.Transaction = void 0;\nvar _xdr = _interopRequireDefault(__webpack_require__(/*! ./xdr */ \"(ssr)/./node_modules/@stellar/stellar-base/lib/xdr.js\"));\nvar _hashing = __webpack_require__(/*! ./hashing */ \"(ssr)/./node_modules/@stellar/stellar-base/lib/hashing.js\");\nvar _strkey = __webpack_require__(/*! ./strkey */ \"(ssr)/./node_modules/@stellar/stellar-base/lib/strkey.js\");\nvar _operation = __webpack_require__(/*! ./operation */ \"(ssr)/./node_modules/@stellar/stellar-base/lib/operation.js\");\nvar _memo = __webpack_require__(/*! ./memo */ \"(ssr)/./node_modules/@stellar/stellar-base/lib/memo.js\");\nvar _transaction_base = __webpack_require__(/*! ./transaction_base */ \"(ssr)/./node_modules/@stellar/stellar-base/lib/transaction_base.js\");\nvar _decode_encode_muxed_account = __webpack_require__(/*! ./util/decode_encode_muxed_account */ \"(ssr)/./node_modules/@stellar/stellar-base/lib/util/decode_encode_muxed_account.js\");\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { \"default\": e }; }\nfunction _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\nfunction _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }\nfunction _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nfunction _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }\nfunction _possibleConstructorReturn(t, e) { if (e && (\"object\" == _typeof(e) || \"function\" == typeof e)) return e; if (void 0 !== e) throw new TypeError(\"Derived constructors may only return object or undefined\"); return _assertThisInitialized(t); }\nfunction _assertThisInitialized(e) { if (void 0 === e) throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); return e; }\nfunction _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }\nfunction _getPrototypeOf(t) { return _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function (t) { return t.__proto__ || Object.getPrototypeOf(t); }, _getPrototypeOf(t); }\nfunction _inherits(t, e) { if (\"function\" != typeof e && null !== e) throw new TypeError(\"Super expression must either be null or a function\"); t.prototype = Object.create(e && e.prototype, { constructor: { value: t, writable: !0, configurable: !0 } }), Object.defineProperty(t, \"prototype\", { writable: !1 }), e && _setPrototypeOf(t, e); }\nfunction _setPrototypeOf(t, e) { return _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function (t, e) { return t.__proto__ = e, t; }, _setPrototypeOf(t, e); }\n/**\n * Use {@link TransactionBuilder} to build a transaction object. If you have an\n * object or base64-encoded string of the transaction envelope XDR, use {@link\n * TransactionBuilder.fromXDR}.\n *\n * Once a Transaction has been created, its attributes and operations should not\n * be changed. You should only add signatures (using {@link Transaction#sign})\n * to a Transaction object before submitting to the network or forwarding on to\n * additional signers.\n *\n * @constructor\n *\n * @param {string|xdr.TransactionEnvelope} envelope - transaction envelope\n *     object or base64 encoded string\n * @param {string}  [networkPassphrase] - passphrase of the target stellar\n *     network (e.g. \"Public Global Stellar Network ; September 2015\")\n *\n * @extends TransactionBase\n */\nvar Transaction = exports.Transaction = /*#__PURE__*/function (_TransactionBase) {\n  function Transaction(envelope, networkPassphrase) {\n    var _this;\n    _classCallCheck(this, Transaction);\n    if (typeof envelope === 'string') {\n      var buffer = Buffer.from(envelope, 'base64');\n      envelope = _xdr[\"default\"].TransactionEnvelope.fromXDR(buffer);\n    }\n    var envelopeType = envelope[\"switch\"]();\n    if (!(envelopeType === _xdr[\"default\"].EnvelopeType.envelopeTypeTxV0() || envelopeType === _xdr[\"default\"].EnvelopeType.envelopeTypeTx())) {\n      throw new Error(\"Invalid TransactionEnvelope: expected an envelopeTypeTxV0 or envelopeTypeTx but received an \".concat(envelopeType.name, \".\"));\n    }\n    var txEnvelope = envelope.value();\n    var tx = txEnvelope.tx();\n    var fee = tx.fee().toString();\n    var signatures = (txEnvelope.signatures() || []).slice();\n    _this = _callSuper(this, Transaction, [tx, signatures, fee, networkPassphrase]);\n    _this._envelopeType = envelopeType;\n    _this._memo = tx.memo();\n    _this._sequence = tx.seqNum().toString();\n    switch (_this._envelopeType) {\n      case _xdr[\"default\"].EnvelopeType.envelopeTypeTxV0():\n        _this._source = _strkey.StrKey.encodeEd25519PublicKey(_this.tx.sourceAccountEd25519());\n        break;\n      default:\n        _this._source = (0, _decode_encode_muxed_account.encodeMuxedAccountToAddress)(_this.tx.sourceAccount());\n        break;\n    }\n    var cond = null;\n    var timeBounds = null;\n    switch (_this._envelopeType) {\n      case _xdr[\"default\"].EnvelopeType.envelopeTypeTxV0():\n        timeBounds = tx.timeBounds();\n        break;\n      case _xdr[\"default\"].EnvelopeType.envelopeTypeTx():\n        switch (tx.cond()[\"switch\"]()) {\n          case _xdr[\"default\"].PreconditionType.precondTime():\n            timeBounds = tx.cond().timeBounds();\n            break;\n          case _xdr[\"default\"].PreconditionType.precondV2():\n            cond = tx.cond().v2();\n            timeBounds = cond.timeBounds();\n            break;\n          default:\n            break;\n        }\n        break;\n      default:\n        break;\n    }\n    if (timeBounds) {\n      _this._timeBounds = {\n        minTime: timeBounds.minTime().toString(),\n        maxTime: timeBounds.maxTime().toString()\n      };\n    }\n    if (cond) {\n      var ledgerBounds = cond.ledgerBounds();\n      if (ledgerBounds) {\n        _this._ledgerBounds = {\n          minLedger: ledgerBounds.minLedger(),\n          maxLedger: ledgerBounds.maxLedger()\n        };\n      }\n      var minSeq = cond.minSeqNum();\n      if (minSeq) {\n        _this._minAccountSequence = minSeq.toString();\n      }\n      _this._minAccountSequenceAge = cond.minSeqAge();\n      _this._minAccountSequenceLedgerGap = cond.minSeqLedgerGap();\n      _this._extraSigners = cond.extraSigners();\n    }\n    var operations = tx.operations() || [];\n    _this._operations = operations.map(function (op) {\n      return _operation.Operation.fromXDRObject(op);\n    });\n    return _this;\n  }\n\n  /**\n   * @type {object}\n   * @property {string} 64 bit unix timestamp\n   * @property {string} 64 bit unix timestamp\n   * @readonly\n   */\n  _inherits(Transaction, _TransactionBase);\n  return _createClass(Transaction, [{\n    key: \"timeBounds\",\n    get: function get() {\n      return this._timeBounds;\n    },\n    set: function set(value) {\n      throw new Error('Transaction is immutable');\n    }\n\n    /**\n     * @type {object}\n     * @property {number} minLedger - smallest ledger bound (uint32)\n     * @property {number} maxLedger - largest ledger bound (or 0 for inf)\n     * @readonly\n     */\n  }, {\n    key: \"ledgerBounds\",\n    get: function get() {\n      return this._ledgerBounds;\n    },\n    set: function set(value) {\n      throw new Error('Transaction is immutable');\n    }\n\n    /**\n     * 64 bit account sequence\n     * @readonly\n     * @type {string}\n     */\n  }, {\n    key: \"minAccountSequence\",\n    get: function get() {\n      return this._minAccountSequence;\n    },\n    set: function set(value) {\n      throw new Error('Transaction is immutable');\n    }\n\n    /**\n     * 64 bit number of seconds\n     * @type {number}\n     * @readonly\n     */\n  }, {\n    key: \"minAccountSequenceAge\",\n    get: function get() {\n      return this._minAccountSequenceAge;\n    },\n    set: function set(value) {\n      throw new Error('Transaction is immutable');\n    }\n\n    /**\n     * 32 bit number of ledgers\n     * @type {number}\n     * @readonly\n     */\n  }, {\n    key: \"minAccountSequenceLedgerGap\",\n    get: function get() {\n      return this._minAccountSequenceLedgerGap;\n    },\n    set: function set(value) {\n      throw new Error('Transaction is immutable');\n    }\n\n    /**\n     * array of extra signers ({@link StrKey}s)\n     * @type {string[]}\n     * @readonly\n     */\n  }, {\n    key: \"extraSigners\",\n    get: function get() {\n      return this._extraSigners;\n    },\n    set: function set(value) {\n      throw new Error('Transaction is immutable');\n    }\n\n    /**\n     * @type {string}\n     * @readonly\n     */\n  }, {\n    key: \"sequence\",\n    get: function get() {\n      return this._sequence;\n    },\n    set: function set(value) {\n      throw new Error('Transaction is immutable');\n    }\n\n    /**\n     * @type {string}\n     * @readonly\n     */\n  }, {\n    key: \"source\",\n    get: function get() {\n      return this._source;\n    },\n    set: function set(value) {\n      throw new Error('Transaction is immutable');\n    }\n\n    /**\n     * @type {Array.<xdr.Operation>}\n     * @readonly\n     */\n  }, {\n    key: \"operations\",\n    get: function get() {\n      return this._operations;\n    },\n    set: function set(value) {\n      throw new Error('Transaction is immutable');\n    }\n\n    /**\n     * @type {string}\n     * @readonly\n     */\n  }, {\n    key: \"memo\",\n    get: function get() {\n      return _memo.Memo.fromXDRObject(this._memo);\n    },\n    set: function set(value) {\n      throw new Error('Transaction is immutable');\n    }\n\n    /**\n     * Returns the \"signature base\" of this transaction, which is the value\n     * that, when hashed, should be signed to create a signature that\n     * validators on the Stellar Network will accept.\n     *\n     * It is composed of a 4 prefix bytes followed by the xdr-encoded form\n     * of this transaction.\n     * @returns {Buffer}\n     */\n  }, {\n    key: \"signatureBase\",\n    value: function signatureBase() {\n      var tx = this.tx;\n\n      // Backwards Compatibility: Use ENVELOPE_TYPE_TX to sign ENVELOPE_TYPE_TX_V0\n      // we need a Transaction to generate the signature base\n      if (this._envelopeType === _xdr[\"default\"].EnvelopeType.envelopeTypeTxV0()) {\n        tx = _xdr[\"default\"].Transaction.fromXDR(Buffer.concat([\n        // TransactionV0 is a transaction with the AccountID discriminant\n        // stripped off, we need to put it back to build a valid transaction\n        // which we can use to build a TransactionSignaturePayloadTaggedTransaction\n        _xdr[\"default\"].PublicKeyType.publicKeyTypeEd25519().toXDR(), tx.toXDR()]));\n      }\n      var taggedTransaction = new _xdr[\"default\"].TransactionSignaturePayloadTaggedTransaction.envelopeTypeTx(tx);\n      var txSignature = new _xdr[\"default\"].TransactionSignaturePayload({\n        networkId: _xdr[\"default\"].Hash.fromXDR((0, _hashing.hash)(this.networkPassphrase)),\n        taggedTransaction: taggedTransaction\n      });\n      return txSignature.toXDR();\n    }\n\n    /**\n     * To envelope returns a xdr.TransactionEnvelope which can be submitted to the network.\n     * @returns {xdr.TransactionEnvelope}\n     */\n  }, {\n    key: \"toEnvelope\",\n    value: function toEnvelope() {\n      var rawTx = this.tx.toXDR();\n      var signatures = this.signatures.slice(); // make a copy of the signatures\n\n      var envelope;\n      switch (this._envelopeType) {\n        case _xdr[\"default\"].EnvelopeType.envelopeTypeTxV0():\n          envelope = new _xdr[\"default\"].TransactionEnvelope.envelopeTypeTxV0(new _xdr[\"default\"].TransactionV0Envelope({\n            tx: _xdr[\"default\"].TransactionV0.fromXDR(rawTx),\n            // make a copy of tx\n            signatures: signatures\n          }));\n          break;\n        case _xdr[\"default\"].EnvelopeType.envelopeTypeTx():\n          envelope = new _xdr[\"default\"].TransactionEnvelope.envelopeTypeTx(new _xdr[\"default\"].TransactionV1Envelope({\n            tx: _xdr[\"default\"].Transaction.fromXDR(rawTx),\n            // make a copy of tx\n            signatures: signatures\n          }));\n          break;\n        default:\n          throw new Error(\"Invalid TransactionEnvelope: expected an envelopeTypeTxV0 or envelopeTypeTx but received an \".concat(this._envelopeType.name, \".\"));\n      }\n      return envelope;\n    }\n\n    /**\n     * Calculate the claimable balance ID for an operation within the transaction.\n     *\n     * @param   {integer}  opIndex   the index of the CreateClaimableBalance op\n     * @returns {string}   a hex string representing the claimable balance ID\n     *\n     * @throws {RangeError}   for invalid `opIndex` value\n     * @throws {TypeError}    if op at `opIndex` is not `CreateClaimableBalance`\n     * @throws for general XDR un/marshalling failures\n     *\n     * @see https://github.com/stellar/go/blob/d712346e61e288d450b0c08038c158f8848cc3e4/txnbuild/transaction.go#L392-L435\n     *\n     */\n  }, {\n    key: \"getClaimableBalanceId\",\n    value: function getClaimableBalanceId(opIndex) {\n      // Validate and then extract the operation from the transaction.\n      if (!Number.isInteger(opIndex) || opIndex < 0 || opIndex >= this.operations.length) {\n        throw new RangeError('invalid operation index');\n      }\n      var op = this.operations[opIndex];\n      try {\n        op = _operation.Operation.createClaimableBalance(op);\n      } catch (err) {\n        throw new TypeError(\"expected createClaimableBalance, got \".concat(op.type, \": \").concat(err));\n      }\n\n      // Always use the transaction's *unmuxed* source.\n      var account = _strkey.StrKey.decodeEd25519PublicKey((0, _decode_encode_muxed_account.extractBaseAddress)(this.source));\n      var operationId = _xdr[\"default\"].HashIdPreimage.envelopeTypeOpId(new _xdr[\"default\"].HashIdPreimageOperationId({\n        sourceAccount: _xdr[\"default\"].AccountId.publicKeyTypeEd25519(account),\n        seqNum: _xdr[\"default\"].SequenceNumber.fromString(this.sequence),\n        opNum: opIndex\n      }));\n      var opIdHash = (0, _hashing.hash)(operationId.toXDR('raw'));\n      var balanceId = _xdr[\"default\"].ClaimableBalanceId.claimableBalanceIdTypeV0(opIdHash);\n      return balanceId.toXDR('hex');\n    }\n  }]);\n}(_transaction_base.TransactionBase);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@stellar/stellar-base/lib/transaction.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@stellar/stellar-base/lib/transaction_base.js":
/*!********************************************************************!*\
  !*** ./node_modules/@stellar/stellar-base/lib/transaction_base.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.TransactionBase = void 0;\nvar _xdr = _interopRequireDefault(__webpack_require__(/*! ./xdr */ \"(ssr)/./node_modules/@stellar/stellar-base/lib/xdr.js\"));\nvar _hashing = __webpack_require__(/*! ./hashing */ \"(ssr)/./node_modules/@stellar/stellar-base/lib/hashing.js\");\nvar _keypair = __webpack_require__(/*! ./keypair */ \"(ssr)/./node_modules/@stellar/stellar-base/lib/keypair.js\");\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { \"default\": e }; }\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\nfunction _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }\nfunction _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\n/**\n * @ignore\n */\nvar TransactionBase = exports.TransactionBase = /*#__PURE__*/function () {\n  function TransactionBase(tx, signatures, fee, networkPassphrase) {\n    _classCallCheck(this, TransactionBase);\n    if (typeof networkPassphrase !== 'string') {\n      throw new Error(\"Invalid passphrase provided to Transaction: expected a string but got a \".concat(_typeof(networkPassphrase)));\n    }\n    this._networkPassphrase = networkPassphrase;\n    this._tx = tx;\n    this._signatures = signatures;\n    this._fee = fee;\n  }\n\n  /**\n   * @type {Array.<xdr.DecoratedSignature>}\n   * @readonly\n   */\n  return _createClass(TransactionBase, [{\n    key: \"signatures\",\n    get: function get() {\n      return this._signatures;\n    },\n    set: function set(value) {\n      throw new Error('Transaction is immutable');\n    }\n  }, {\n    key: \"tx\",\n    get: function get() {\n      return this._tx;\n    },\n    set: function set(value) {\n      throw new Error('Transaction is immutable');\n    }\n\n    /**\n     * @type {string}\n     * @readonly\n     */\n  }, {\n    key: \"fee\",\n    get: function get() {\n      return this._fee;\n    },\n    set: function set(value) {\n      throw new Error('Transaction is immutable');\n    }\n\n    /**\n     * @type {string}\n     * @readonly\n     */\n  }, {\n    key: \"networkPassphrase\",\n    get: function get() {\n      return this._networkPassphrase;\n    },\n    set: function set(networkPassphrase) {\n      this._networkPassphrase = networkPassphrase;\n    }\n\n    /**\n     * Signs the transaction with the given {@link Keypair}.\n     * @param {...Keypair} keypairs Keypairs of signers\n     * @returns {void}\n     */\n  }, {\n    key: \"sign\",\n    value: function sign() {\n      var _this = this;\n      var txHash = this.hash();\n      for (var _len = arguments.length, keypairs = new Array(_len), _key = 0; _key < _len; _key++) {\n        keypairs[_key] = arguments[_key];\n      }\n      keypairs.forEach(function (kp) {\n        var sig = kp.signDecorated(txHash);\n        _this.signatures.push(sig);\n      });\n    }\n\n    /**\n     * Signs a transaction with the given {@link Keypair}. Useful if someone sends\n     * you a transaction XDR for you to sign and return (see\n     * [addSignature](#addSignature) for more information).\n     *\n     * When you get a transaction XDR to sign....\n     * - Instantiate a `Transaction` object with the XDR\n     * - Use {@link Keypair} to generate a keypair object for your Stellar seed.\n     * - Run `getKeypairSignature` with that keypair\n     * - Send back the signature along with your publicKey (not your secret seed!)\n     *\n     * Example:\n     * ```javascript\n     * // `transactionXDR` is a string from the person generating the transaction\n     * const transaction = new Transaction(transactionXDR, networkPassphrase);\n     * const keypair = Keypair.fromSecret(myStellarSeed);\n     * return transaction.getKeypairSignature(keypair);\n     * ```\n     *\n     * @param {Keypair} keypair Keypair of signer\n     * @returns {string} Signature string\n     */\n  }, {\n    key: \"getKeypairSignature\",\n    value: function getKeypairSignature(keypair) {\n      return keypair.sign(this.hash()).toString('base64');\n    }\n\n    /**\n     * Add a signature to the transaction. Useful when a party wants to pre-sign\n     * a transaction but doesn't want to give access to their secret keys.\n     * This will also verify whether the signature is valid.\n     *\n     * Here's how you would use this feature to solicit multiple signatures.\n     * - Use `TransactionBuilder` to build a new transaction.\n     * - Make sure to set a long enough timeout on that transaction to give your\n     * signers enough time to sign!\n     * - Once you build the transaction, use `transaction.toXDR()` to get the\n     * base64-encoded XDR string.\n     * - _Warning!_ Once you've built this transaction, don't submit any other\n     * transactions onto your account! Doing so will invalidate this pre-compiled\n     * transaction!\n     * - Send this XDR string to your other parties. They can use the instructions\n     * for [getKeypairSignature](#getKeypairSignature) to sign the transaction.\n     * - They should send you back their `publicKey` and the `signature` string\n     * from [getKeypairSignature](#getKeypairSignature), both of which you pass to\n     * this function.\n     *\n     * @param {string} publicKey The public key of the signer\n     * @param {string} signature The base64 value of the signature XDR\n     * @returns {void}\n     */\n  }, {\n    key: \"addSignature\",\n    value: function addSignature() {\n      var publicKey = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n      var signature = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n      if (!signature || typeof signature !== 'string') {\n        throw new Error('Invalid signature');\n      }\n      if (!publicKey || typeof publicKey !== 'string') {\n        throw new Error('Invalid publicKey');\n      }\n      var keypair;\n      var hint;\n      var signatureBuffer = Buffer.from(signature, 'base64');\n      try {\n        keypair = _keypair.Keypair.fromPublicKey(publicKey);\n        hint = keypair.signatureHint();\n      } catch (e) {\n        throw new Error('Invalid publicKey');\n      }\n      if (!keypair.verify(this.hash(), signatureBuffer)) {\n        throw new Error('Invalid signature');\n      }\n      this.signatures.push(new _xdr[\"default\"].DecoratedSignature({\n        hint: hint,\n        signature: signatureBuffer\n      }));\n    }\n\n    /**\n     * Add a decorated signature directly to the transaction envelope.\n     *\n     * @param {xdr.DecoratedSignature} signature    raw signature to add\n     * @returns {void}\n     *\n     * @see Keypair.signDecorated\n     * @see Keypair.signPayloadDecorated\n     */\n  }, {\n    key: \"addDecoratedSignature\",\n    value: function addDecoratedSignature(signature) {\n      this.signatures.push(signature);\n    }\n\n    /**\n     * Add `hashX` signer preimage as signature.\n     * @param {Buffer|String} preimage Preimage of hash used as signer\n     * @returns {void}\n     */\n  }, {\n    key: \"signHashX\",\n    value: function signHashX(preimage) {\n      if (typeof preimage === 'string') {\n        preimage = Buffer.from(preimage, 'hex');\n      }\n      if (preimage.length > 64) {\n        throw new Error('preimage cannnot be longer than 64 bytes');\n      }\n      var signature = preimage;\n      var hashX = (0, _hashing.hash)(preimage);\n      var hint = hashX.slice(hashX.length - 4);\n      this.signatures.push(new _xdr[\"default\"].DecoratedSignature({\n        hint: hint,\n        signature: signature\n      }));\n    }\n\n    /**\n     * Returns a hash for this transaction, suitable for signing.\n     * @returns {Buffer}\n     */\n  }, {\n    key: \"hash\",\n    value: function hash() {\n      return (0, _hashing.hash)(this.signatureBase());\n    }\n  }, {\n    key: \"signatureBase\",\n    value: function signatureBase() {\n      throw new Error('Implement in subclass');\n    }\n  }, {\n    key: \"toEnvelope\",\n    value: function toEnvelope() {\n      throw new Error('Implement in subclass');\n    }\n\n    /**\n     * Get the transaction envelope as a base64-encoded string\n     * @returns {string} XDR string\n     */\n  }, {\n    key: \"toXDR\",\n    value: function toXDR() {\n      return this.toEnvelope().toXDR().toString('base64');\n    }\n  }]);\n}();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@stellar/stellar-base/lib/transaction_base.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@stellar/stellar-base/lib/transaction_builder.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@stellar/stellar-base/lib/transaction_builder.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.TransactionBuilder = exports.TimeoutInfinite = exports.BASE_FEE = void 0;\nexports.isValidDate = isValidDate;\nvar _jsXdr = __webpack_require__(/*! @stellar/js-xdr */ \"(ssr)/./node_modules/@stellar/js-xdr/src/index.js\");\nvar _bignumber = _interopRequireDefault(__webpack_require__(/*! ./util/bignumber */ \"(ssr)/./node_modules/@stellar/stellar-base/lib/util/bignumber.js\"));\nvar _xdr = _interopRequireDefault(__webpack_require__(/*! ./xdr */ \"(ssr)/./node_modules/@stellar/stellar-base/lib/xdr.js\"));\nvar _account = __webpack_require__(/*! ./account */ \"(ssr)/./node_modules/@stellar/stellar-base/lib/account.js\");\nvar _muxed_account = __webpack_require__(/*! ./muxed_account */ \"(ssr)/./node_modules/@stellar/stellar-base/lib/muxed_account.js\");\nvar _decode_encode_muxed_account = __webpack_require__(/*! ./util/decode_encode_muxed_account */ \"(ssr)/./node_modules/@stellar/stellar-base/lib/util/decode_encode_muxed_account.js\");\nvar _transaction = __webpack_require__(/*! ./transaction */ \"(ssr)/./node_modules/@stellar/stellar-base/lib/transaction.js\");\nvar _fee_bump_transaction = __webpack_require__(/*! ./fee_bump_transaction */ \"(ssr)/./node_modules/@stellar/stellar-base/lib/fee_bump_transaction.js\");\nvar _sorobandata_builder = __webpack_require__(/*! ./sorobandata_builder */ \"(ssr)/./node_modules/@stellar/stellar-base/lib/sorobandata_builder.js\");\nvar _strkey = __webpack_require__(/*! ./strkey */ \"(ssr)/./node_modules/@stellar/stellar-base/lib/strkey.js\");\nvar _signerkey = __webpack_require__(/*! ./signerkey */ \"(ssr)/./node_modules/@stellar/stellar-base/lib/signerkey.js\");\nvar _memo = __webpack_require__(/*! ./memo */ \"(ssr)/./node_modules/@stellar/stellar-base/lib/memo.js\");\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { \"default\": e }; }\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _toConsumableArray(r) { return _arrayWithoutHoles(r) || _iterableToArray(r) || _unsupportedIterableToArray(r) || _nonIterableSpread(); }\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _unsupportedIterableToArray(r, a) { if (r) { if (\"string\" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return \"Object\" === t && r.constructor && (t = r.constructor.name), \"Map\" === t || \"Set\" === t ? Array.from(r) : \"Arguments\" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }\nfunction _iterableToArray(r) { if (\"undefined\" != typeof Symbol && null != r[Symbol.iterator] || null != r[\"@@iterator\"]) return Array.from(r); }\nfunction _arrayWithoutHoles(r) { if (Array.isArray(r)) return _arrayLikeToArray(r); }\nfunction _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }\nfunction _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\nfunction _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }\nfunction _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\n/**\n * Minimum base fee for transactions. If this fee is below the network\n * minimum, the transaction will fail. The more operations in the\n * transaction, the greater the required fee. Use {@link\n * Server#fetchBaseFee} to get an accurate value of minimum transaction\n * fee on the network.\n *\n * @constant\n * @see [Fees](https://developers.stellar.org/docs/glossary/fees/)\n */\nvar BASE_FEE = exports.BASE_FEE = '100'; // Stroops\n\n/**\n * @constant\n * @see {@link TransactionBuilder#setTimeout}\n * @see [Timeout](https://developers.stellar.org/api/resources/transactions/post/)\n */\nvar TimeoutInfinite = exports.TimeoutInfinite = 0;\n\n/**\n * <p>Transaction builder helps constructs a new `{@link Transaction}` using the\n * given {@link Account} as the transaction's \"source account\". The transaction\n * will use the current sequence number of the given account as its sequence\n * number and increment the given account's sequence number by one. The given\n * source account must include a private key for signing the transaction or an\n * error will be thrown.</p>\n *\n * <p>Operations can be added to the transaction via their corresponding builder\n * methods, and each returns the TransactionBuilder object so they can be\n * chained together. After adding the desired operations, call the `build()`\n * method on the `TransactionBuilder` to return a fully constructed `{@link\n * Transaction}` that can be signed. The returned transaction will contain the\n * sequence number of the source account and include the signature from the\n * source account.</p>\n *\n * <p><strong>Be careful about unsubmitted transactions!</strong> When you build\n * a transaction, `stellar-sdk` automatically increments the source account's\n * sequence number. If you end up not submitting this transaction and submitting\n * another one instead, it'll fail due to the sequence number being wrong. So if\n * you decide not to use a built transaction, make sure to update the source\n * account's sequence number with\n * [Server.loadAccount](https://stellar.github.io/js-stellar-sdk/Server.html#loadAccount)\n * before creating another transaction.</p>\n *\n * <p>The following code example creates a new transaction with {@link\n * Operation.createAccount} and {@link Operation.payment} operations. The\n * Transaction's source account first funds `destinationA`, then sends a payment\n * to `destinationB`. The built transaction is then signed by\n * `sourceKeypair`.</p>\n *\n * ```\n * var transaction = new TransactionBuilder(source, { fee, networkPassphrase: Networks.TESTNET })\n * .addOperation(Operation.createAccount({\n *     destination: destinationA,\n *     startingBalance: \"20\"\n * })) // <- funds and creates destinationA\n * .addOperation(Operation.payment({\n *     destination: destinationB,\n *     amount: \"100\",\n *     asset: Asset.native()\n * })) // <- sends 100 XLM to destinationB\n * .setTimeout(30)\n * .build();\n *\n * transaction.sign(sourceKeypair);\n * ```\n *\n * @constructor\n *\n * @param {Account} sourceAccount - source account for this transaction\n * @param {object}  opts          - Options object\n * @param {string}  opts.fee      - max fee you're willing to pay per\n *     operation in this transaction (**in stroops**)\n *\n * @param {object}              [opts.timebounds] - timebounds for the\n *     validity of this transaction\n * @param {number|string|Date}  [opts.timebounds.minTime] - 64-bit UNIX\n *     timestamp or Date object\n * @param {number|string|Date}  [opts.timebounds.maxTime] - 64-bit UNIX\n *     timestamp or Date object\n * @param {object}              [opts.ledgerbounds] - ledger bounds for the\n *     validity of this transaction\n * @param {number}              [opts.ledgerbounds.minLedger] - number of the minimum\n *     ledger sequence\n * @param {number}              [opts.ledgerbounds.maxLedger] - number of the maximum\n *     ledger sequence\n * @param {string}              [opts.minAccountSequence] - number for\n *     the minimum account sequence\n * @param {number}              [opts.minAccountSequenceAge] - number of\n *     seconds for the minimum account sequence age\n * @param {number}              [opts.minAccountSequenceLedgerGap] - number of\n *     ledgers for the minimum account sequence ledger gap\n * @param {string[]}            [opts.extraSigners] - list of the extra signers\n *     required for this transaction\n * @param {Memo}                [opts.memo] - memo for the transaction\n * @param {string}              [opts.networkPassphrase] passphrase of the\n *     target Stellar network (e.g. \"Public Global Stellar Network ; September\n *     2015\" for the pubnet)\n * @param {xdr.SorobanTransactionData | string}  [opts.sorobanData] - an\n *     optional instance of {@link xdr.SorobanTransactionData} to be set as the\n *     internal `Transaction.Ext.SorobanData` field (either the xdr object or a\n *     base64 string). In the case of Soroban transactions, this can be obtained\n *     from a prior simulation of the transaction with a contract invocation and\n *     provides necessary resource estimations. You can also use\n *     {@link SorobanDataBuilder} to construct complicated combinations of\n *     parameters without mucking with XDR directly. **Note:** For\n *     non-contract(non-Soroban) transactions, this has no effect.\n */\nvar TransactionBuilder = exports.TransactionBuilder = /*#__PURE__*/function () {\n  function TransactionBuilder(sourceAccount) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    _classCallCheck(this, TransactionBuilder);\n    if (!sourceAccount) {\n      throw new Error('must specify source account for the transaction');\n    }\n    if (opts.fee === undefined) {\n      throw new Error('must specify fee for the transaction (in stroops)');\n    }\n    this.source = sourceAccount;\n    this.operations = [];\n    this.baseFee = opts.fee;\n    this.timebounds = opts.timebounds ? _objectSpread({}, opts.timebounds) : null;\n    this.ledgerbounds = opts.ledgerbounds ? _objectSpread({}, opts.ledgerbounds) : null;\n    this.minAccountSequence = opts.minAccountSequence || null;\n    this.minAccountSequenceAge = opts.minAccountSequenceAge || null;\n    this.minAccountSequenceLedgerGap = opts.minAccountSequenceLedgerGap || null;\n    this.extraSigners = opts.extraSigners ? _toConsumableArray(opts.extraSigners) : null;\n    this.memo = opts.memo || _memo.Memo.none();\n    this.networkPassphrase = opts.networkPassphrase || null;\n    this.sorobanData = opts.sorobanData ? new _sorobandata_builder.SorobanDataBuilder(opts.sorobanData).build() : null;\n  }\n\n  /**\n   * Creates a builder instance using an existing {@link Transaction} as a\n   * template, ignoring any existing envelope signatures.\n   *\n   * Note that the sequence number WILL be cloned, so EITHER this transaction or\n   * the one it was cloned from will be valid. This is useful in situations\n   * where you are constructing a transaction in pieces and need to make\n   * adjustments as you go (for example, when filling out Soroban resource\n   * information).\n   *\n   * @param {Transaction} tx  a \"template\" transaction to clone exactly\n   * @param {object} [opts]   additional options to override the clone, e.g.\n   *    {fee: '1000'} will override the existing base fee derived from `tx` (see\n   *    the {@link TransactionBuilder} constructor for detailed options)\n   *\n   * @returns {TransactionBuilder} a \"prepared\" builder instance with the same\n   *    configuration and operations as the given transaction\n   *\n   * @warning This does not clone the transaction's\n   *    {@link xdr.SorobanTransactionData} (if applicable), use\n   *    {@link SorobanDataBuilder} and {@link TransactionBuilder.setSorobanData}\n   *    as needed, instead..\n   *\n   * @todo This cannot clone {@link FeeBumpTransaction}s, yet.\n   */\n  return _createClass(TransactionBuilder, [{\n    key: \"addOperation\",\n    value:\n    /**\n     * Adds an operation to the transaction.\n     *\n     * @param {xdr.Operation} operation   The xdr operation object, use {@link\n     *     Operation} static methods.\n     *\n     * @returns {TransactionBuilder}\n     */\n    function addOperation(operation) {\n      this.operations.push(operation);\n      return this;\n    }\n\n    /**\n     * Adds an operation to the transaction at a specific index.\n     *\n     * @param {xdr.Operation} operation - The xdr operation object to add, use {@link Operation} static methods.\n     * @param {number} index - The index at which to insert the operation.\n     *\n     * @returns {TransactionBuilder} - The TransactionBuilder instance for method chaining.\n     */\n  }, {\n    key: \"addOperationAt\",\n    value: function addOperationAt(operation, index) {\n      this.operations.splice(index, 0, operation);\n      return this;\n    }\n\n    /**\n     * Removes the operations from the builder (useful when cloning).\n     * @returns {TransactionBuilder} this builder instance\n     */\n  }, {\n    key: \"clearOperations\",\n    value: function clearOperations() {\n      this.operations = [];\n      return this;\n    }\n\n    /**\n     * Removes the operation at the specified index from the transaction.\n     *\n     * @param {number} index - The index of the operation to remove.\n     *\n     * @returns {TransactionBuilder} The TransactionBuilder instance for method chaining.\n     */\n  }, {\n    key: \"clearOperationAt\",\n    value: function clearOperationAt(index) {\n      this.operations.splice(index, 1);\n      return this;\n    }\n\n    /**\n     * Adds a memo to the transaction.\n     * @param {Memo} memo {@link Memo} object\n     * @returns {TransactionBuilder}\n     */\n  }, {\n    key: \"addMemo\",\n    value: function addMemo(memo) {\n      this.memo = memo;\n      return this;\n    }\n\n    /**\n     * Sets a timeout precondition on the transaction.\n     *\n     *  Because of the distributed nature of the Stellar network it is possible\n     *  that the status of your transaction will be determined after a long time\n     *  if the network is highly congested. If you want to be sure to receive the\n     *  status of the transaction within a given period you should set the {@link\n     *  TimeBounds} with `maxTime` on the transaction (this is what `setTimeout`\n     *  does internally; if there's `minTime` set but no `maxTime` it will be\n     *  added).\n     *\n     *  A call to `TransactionBuilder.setTimeout` is **required** if Transaction\n     *  does not have `max_time` set. If you don't want to set timeout, use\n     *  `{@link TimeoutInfinite}`. In general you should set `{@link\n     *  TimeoutInfinite}` only in smart contracts.\n     *\n     *  Please note that Horizon may still return <code>504 Gateway Timeout</code>\n     *  error, even for short timeouts. In such case you need to resubmit the same\n     *  transaction again without making any changes to receive a status. This\n     *  method is using the machine system time (UTC), make sure it is set\n     *  correctly.\n     *\n     * @param {number} timeoutSeconds   Number of seconds the transaction is good.\n     *     Can't be negative. If the value is {@link TimeoutInfinite}, the\n     *     transaction is good indefinitely.\n     *\n     * @returns {TransactionBuilder}\n     *\n     * @see {@link TimeoutInfinite}\n     * @see https://developers.stellar.org/docs/tutorials/handling-errors/\n     */\n  }, {\n    key: \"setTimeout\",\n    value: function setTimeout(timeoutSeconds) {\n      if (this.timebounds !== null && this.timebounds.maxTime > 0) {\n        throw new Error('TimeBounds.max_time has been already set - setting timeout would overwrite it.');\n      }\n      if (timeoutSeconds < 0) {\n        throw new Error('timeout cannot be negative');\n      }\n      if (timeoutSeconds > 0) {\n        var timeoutTimestamp = Math.floor(Date.now() / 1000) + timeoutSeconds;\n        if (this.timebounds === null) {\n          this.timebounds = {\n            minTime: 0,\n            maxTime: timeoutTimestamp\n          };\n        } else {\n          this.timebounds = {\n            minTime: this.timebounds.minTime,\n            maxTime: timeoutTimestamp\n          };\n        }\n      } else {\n        this.timebounds = {\n          minTime: 0,\n          maxTime: 0\n        };\n      }\n      return this;\n    }\n\n    /**\n     * If you want to prepare a transaction which will become valid at some point\n     * in the future, or be invalid after some time, you can set a timebounds\n     * precondition. Internally this will set the `minTime`, and `maxTime`\n     * preconditions. Conflicts with `setTimeout`, so use one or the other.\n     *\n     * @param {Date|number} minEpochOrDate  Either a JS Date object, or a number\n     *     of UNIX epoch seconds. The transaction is valid after this timestamp.\n     *     Can't be negative. If the value is `0`, the transaction is valid\n     *     immediately.\n     * @param {Date|number} maxEpochOrDate  Either a JS Date object, or a number\n     *     of UNIX epoch seconds. The transaction is valid until this timestamp.\n     *     Can't be negative. If the value is `0`, the transaction is valid\n     *     indefinitely.\n     *\n     * @returns {TransactionBuilder}\n     */\n  }, {\n    key: \"setTimebounds\",\n    value: function setTimebounds(minEpochOrDate, maxEpochOrDate) {\n      // Force it to a date type\n      if (typeof minEpochOrDate === 'number') {\n        minEpochOrDate = new Date(minEpochOrDate * 1000);\n      }\n      if (typeof maxEpochOrDate === 'number') {\n        maxEpochOrDate = new Date(maxEpochOrDate * 1000);\n      }\n      if (this.timebounds !== null) {\n        throw new Error('TimeBounds has been already set - setting timebounds would overwrite it.');\n      }\n\n      // Convert that date to the epoch seconds\n      var minTime = Math.floor(minEpochOrDate.valueOf() / 1000);\n      var maxTime = Math.floor(maxEpochOrDate.valueOf() / 1000);\n      if (minTime < 0) {\n        throw new Error('min_time cannot be negative');\n      }\n      if (maxTime < 0) {\n        throw new Error('max_time cannot be negative');\n      }\n      if (maxTime > 0 && minTime > maxTime) {\n        throw new Error('min_time cannot be greater than max_time');\n      }\n      this.timebounds = {\n        minTime: minTime,\n        maxTime: maxTime\n      };\n      return this;\n    }\n\n    /**\n     * If you want to prepare a transaction which will only be valid within some\n     * range of ledgers, you can set a ledgerbounds precondition.\n     * Internally this will set the `minLedger` and `maxLedger` preconditions.\n     *\n     * @param {number} minLedger  The minimum ledger this transaction is valid at\n     *     or after. Cannot be negative. If the value is `0` (the default), the\n     *     transaction is valid immediately.\n     *\n     * @param {number} maxLedger  The maximum ledger this transaction is valid\n     *     before. Cannot be negative. If the value is `0`, the transaction is\n     *     valid indefinitely.\n     *\n     * @returns {TransactionBuilder}\n     */\n  }, {\n    key: \"setLedgerbounds\",\n    value: function setLedgerbounds(minLedger, maxLedger) {\n      if (this.ledgerbounds !== null) {\n        throw new Error('LedgerBounds has been already set - setting ledgerbounds would overwrite it.');\n      }\n      if (minLedger < 0) {\n        throw new Error('min_ledger cannot be negative');\n      }\n      if (maxLedger < 0) {\n        throw new Error('max_ledger cannot be negative');\n      }\n      if (maxLedger > 0 && minLedger > maxLedger) {\n        throw new Error('min_ledger cannot be greater than max_ledger');\n      }\n      this.ledgerbounds = {\n        minLedger: minLedger,\n        maxLedger: maxLedger\n      };\n      return this;\n    }\n\n    /**\n     * If you want to prepare a transaction which will be valid only while the\n     * account sequence number is\n     *\n     *     minAccountSequence <= sourceAccountSequence < tx.seqNum\n     *\n     * Note that after execution the account's sequence number is always raised to\n     * `tx.seqNum`. Internally this will set the `minAccountSequence`\n     * precondition.\n     *\n     * @param {string} minAccountSequence   The minimum source account sequence\n     *     number this transaction is valid for. If the value is `0` (the\n     *     default), the transaction is valid when `sourceAccount's sequence\n     *     number == tx.seqNum- 1`.\n     *\n     * @returns {TransactionBuilder}\n     */\n  }, {\n    key: \"setMinAccountSequence\",\n    value: function setMinAccountSequence(minAccountSequence) {\n      if (this.minAccountSequence !== null) {\n        throw new Error('min_account_sequence has been already set - setting min_account_sequence would overwrite it.');\n      }\n      this.minAccountSequence = minAccountSequence;\n      return this;\n    }\n\n    /**\n     * For the transaction to be valid, the current ledger time must be at least\n     * `minAccountSequenceAge` greater than sourceAccount's `sequenceTime`.\n     * Internally this will set the `minAccountSequenceAge` precondition.\n     *\n     * @param {number} durationInSeconds  The minimum amount of time between\n     *     source account sequence time and the ledger time when this transaction\n     *     will become valid. If the value is `0`, the transaction is unrestricted\n     *     by the account sequence age. Cannot be negative.\n     *\n     * @returns {TransactionBuilder}\n     */\n  }, {\n    key: \"setMinAccountSequenceAge\",\n    value: function setMinAccountSequenceAge(durationInSeconds) {\n      if (typeof durationInSeconds !== 'number') {\n        throw new Error('min_account_sequence_age must be a number');\n      }\n      if (this.minAccountSequenceAge !== null) {\n        throw new Error('min_account_sequence_age has been already set - setting min_account_sequence_age would overwrite it.');\n      }\n      if (durationInSeconds < 0) {\n        throw new Error('min_account_sequence_age cannot be negative');\n      }\n      this.minAccountSequenceAge = durationInSeconds;\n      return this;\n    }\n\n    /**\n     * For the transaction to be valid, the current ledger number must be at least\n     * `minAccountSequenceLedgerGap` greater than sourceAccount's ledger sequence.\n     * Internally this will set the `minAccountSequenceLedgerGap` precondition.\n     *\n     * @param {number} gap  The minimum number of ledgers between source account\n     *     sequence and the ledger number when this transaction will become valid.\n     *     If the value is `0`, the transaction is unrestricted by the account\n     *     sequence ledger. Cannot be negative.\n     *\n     * @returns {TransactionBuilder}\n     */\n  }, {\n    key: \"setMinAccountSequenceLedgerGap\",\n    value: function setMinAccountSequenceLedgerGap(gap) {\n      if (this.minAccountSequenceLedgerGap !== null) {\n        throw new Error('min_account_sequence_ledger_gap has been already set - setting min_account_sequence_ledger_gap would overwrite it.');\n      }\n      if (gap < 0) {\n        throw new Error('min_account_sequence_ledger_gap cannot be negative');\n      }\n      this.minAccountSequenceLedgerGap = gap;\n      return this;\n    }\n\n    /**\n     * For the transaction to be valid, there must be a signature corresponding to\n     * every Signer in this array, even if the signature is not otherwise required\n     * by the sourceAccount or operations. Internally this will set the\n     * `extraSigners` precondition.\n     *\n     * @param {string[]} extraSigners   required extra signers (as {@link StrKey}s)\n     *\n     * @returns {TransactionBuilder}\n     */\n  }, {\n    key: \"setExtraSigners\",\n    value: function setExtraSigners(extraSigners) {\n      if (!Array.isArray(extraSigners)) {\n        throw new Error('extra_signers must be an array of strings.');\n      }\n      if (this.extraSigners !== null) {\n        throw new Error('extra_signers has been already set - setting extra_signers would overwrite it.');\n      }\n      if (extraSigners.length > 2) {\n        throw new Error('extra_signers cannot be longer than 2 elements.');\n      }\n      this.extraSigners = _toConsumableArray(extraSigners);\n      return this;\n    }\n\n    /**\n     * Set network nassphrase for the Transaction that will be built.\n     *\n     * @param {string} networkPassphrase    passphrase of the target Stellar\n     *     network (e.g. \"Public Global Stellar Network ; September 2015\").\n     *\n     * @returns {TransactionBuilder}\n     */\n  }, {\n    key: \"setNetworkPassphrase\",\n    value: function setNetworkPassphrase(networkPassphrase) {\n      this.networkPassphrase = networkPassphrase;\n      return this;\n    }\n\n    /**\n     * Sets the transaction's internal Soroban transaction data (resources,\n     * footprint, etc.).\n     *\n     * For non-contract(non-Soroban) transactions, this setting has no effect. In\n     * the case of Soroban transactions, this is either an instance of\n     * {@link xdr.SorobanTransactionData} or a base64-encoded string of said\n     * structure. This is usually obtained from the simulation response based on a\n     * transaction with a Soroban operation (e.g.\n     * {@link Operation.invokeHostFunction}, providing necessary resource\n     * and storage footprint estimations for contract invocation.\n     *\n     * @param {xdr.SorobanTransactionData | string} sorobanData    the\n     *    {@link xdr.SorobanTransactionData} as a raw xdr object or a base64\n     *    string to be decoded\n     *\n     * @returns {TransactionBuilder}\n     * @see {SorobanDataBuilder}\n     */\n  }, {\n    key: \"setSorobanData\",\n    value: function setSorobanData(sorobanData) {\n      this.sorobanData = new _sorobandata_builder.SorobanDataBuilder(sorobanData).build();\n      return this;\n    }\n\n    /**\n     * This will build the transaction.\n     * It will also increment the source account's sequence number by 1.\n     * @returns {Transaction} This method will return the built {@link Transaction}.\n     */\n  }, {\n    key: \"build\",\n    value: function build() {\n      var sequenceNumber = new _bignumber[\"default\"](this.source.sequenceNumber()).plus(1);\n      var fee = new _bignumber[\"default\"](this.baseFee).times(this.operations.length).toNumber();\n      var attrs = {\n        fee: fee,\n        seqNum: _xdr[\"default\"].SequenceNumber.fromString(sequenceNumber.toString()),\n        memo: this.memo ? this.memo.toXDRObject() : null\n      };\n      if (this.timebounds === null || typeof this.timebounds.minTime === 'undefined' || typeof this.timebounds.maxTime === 'undefined') {\n        throw new Error('TimeBounds has to be set or you must call setTimeout(TimeoutInfinite).');\n      }\n      if (isValidDate(this.timebounds.minTime)) {\n        this.timebounds.minTime = this.timebounds.minTime.getTime() / 1000;\n      }\n      if (isValidDate(this.timebounds.maxTime)) {\n        this.timebounds.maxTime = this.timebounds.maxTime.getTime() / 1000;\n      }\n      this.timebounds.minTime = _jsXdr.UnsignedHyper.fromString(this.timebounds.minTime.toString());\n      this.timebounds.maxTime = _jsXdr.UnsignedHyper.fromString(this.timebounds.maxTime.toString());\n      var timeBounds = new _xdr[\"default\"].TimeBounds(this.timebounds);\n      if (this.hasV2Preconditions()) {\n        var ledgerBounds = null;\n        if (this.ledgerbounds !== null) {\n          ledgerBounds = new _xdr[\"default\"].LedgerBounds(this.ledgerbounds);\n        }\n        var minSeqNum = this.minAccountSequence || '0';\n        minSeqNum = _xdr[\"default\"].SequenceNumber.fromString(minSeqNum);\n        var minSeqAge = _jsXdr.UnsignedHyper.fromString(this.minAccountSequenceAge !== null ? this.minAccountSequenceAge.toString() : '0');\n        var minSeqLedgerGap = this.minAccountSequenceLedgerGap || 0;\n        var extraSigners = this.extraSigners !== null ? this.extraSigners.map(_signerkey.SignerKey.decodeAddress) : [];\n        attrs.cond = _xdr[\"default\"].Preconditions.precondV2(new _xdr[\"default\"].PreconditionsV2({\n          timeBounds: timeBounds,\n          ledgerBounds: ledgerBounds,\n          minSeqNum: minSeqNum,\n          minSeqAge: minSeqAge,\n          minSeqLedgerGap: minSeqLedgerGap,\n          extraSigners: extraSigners\n        }));\n      } else {\n        attrs.cond = _xdr[\"default\"].Preconditions.precondTime(timeBounds);\n      }\n      attrs.sourceAccount = (0, _decode_encode_muxed_account.decodeAddressToMuxedAccount)(this.source.accountId());\n\n      // TODO - remove this workaround for TransactionExt ts constructor\n      //       and use the typescript generated static factory method once fixed\n      //       https://github.com/stellar/dts-xdr/issues/5\n      if (this.sorobanData) {\n        // @ts-ignore\n        attrs.ext = new _xdr[\"default\"].TransactionExt(1, this.sorobanData);\n      } else {\n        // @ts-ignore\n        attrs.ext = new _xdr[\"default\"].TransactionExt(0, _xdr[\"default\"].Void);\n      }\n      var xtx = new _xdr[\"default\"].Transaction(attrs);\n      xtx.operations(this.operations);\n      var txEnvelope = new _xdr[\"default\"].TransactionEnvelope.envelopeTypeTx(new _xdr[\"default\"].TransactionV1Envelope({\n        tx: xtx\n      }));\n      var tx = new _transaction.Transaction(txEnvelope, this.networkPassphrase);\n      this.source.incrementSequenceNumber();\n      return tx;\n    }\n  }, {\n    key: \"hasV2Preconditions\",\n    value: function hasV2Preconditions() {\n      return this.ledgerbounds !== null || this.minAccountSequence !== null || this.minAccountSequenceAge !== null || this.minAccountSequenceLedgerGap !== null || this.extraSigners !== null && this.extraSigners.length > 0;\n    }\n\n    /**\n     * Builds a {@link FeeBumpTransaction}, enabling you to resubmit an existing\n     * transaction with a higher fee.\n     *\n     * @param {Keypair|string}  feeSource - account paying for the transaction,\n     *     in the form of either a Keypair (only the public key is used) or\n     *     an account ID (in G... or M... form, but refer to `withMuxing`)\n     * @param {string}          baseFee   - max fee willing to pay per operation\n     *     in inner transaction (**in stroops**)\n     * @param {Transaction}     innerTx   - {@link Transaction} to be bumped by\n     *     the fee bump transaction\n     * @param {string}          networkPassphrase - passphrase of the target\n     *     Stellar network (e.g. \"Public Global Stellar Network ; September 2015\",\n     *     see {@link Networks})\n     *\n     * @todo Alongside the next major version bump, this type signature can be\n     *       changed to be less awkward: accept a MuxedAccount as the `feeSource`\n     *       rather than a keypair or string.\n     *\n     * @note Your fee-bump amount should be >= 10x the original fee.\n     * @see  https://developers.stellar.org/docs/glossary/fee-bumps/#replace-by-fee\n     *\n     * @returns {FeeBumpTransaction}\n     */\n  }], [{\n    key: \"cloneFrom\",\n    value: function cloneFrom(tx) {\n      var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      if (!(tx instanceof _transaction.Transaction)) {\n        throw new TypeError(\"expected a 'Transaction', got: \".concat(tx));\n      }\n      var sequenceNum = (BigInt(tx.sequence) - 1n).toString();\n      var source;\n      // rebuild the source account based on the strkey\n      if (_strkey.StrKey.isValidMed25519PublicKey(tx.source)) {\n        source = _muxed_account.MuxedAccount.fromAddress(tx.source, sequenceNum);\n      } else if (_strkey.StrKey.isValidEd25519PublicKey(tx.source)) {\n        source = new _account.Account(tx.source, sequenceNum);\n      } else {\n        throw new TypeError(\"unsupported tx source account: \".concat(tx.source));\n      }\n\n      // the initial fee passed to the builder gets scaled up based on the number\n      // of operations at the end, so we have to down-scale first\n      var unscaledFee = parseInt(tx.fee, 10) / tx.operations.length;\n      var builder = new TransactionBuilder(source, _objectSpread({\n        fee: (unscaledFee || BASE_FEE).toString(),\n        memo: tx.memo,\n        networkPassphrase: tx.networkPassphrase,\n        timebounds: tx.timeBounds,\n        ledgerbounds: tx.ledgerBounds,\n        minAccountSequence: tx.minAccountSequence,\n        minAccountSequenceAge: tx.minAccountSequenceAge,\n        minAccountSequenceLedgerGap: tx.minAccountSequenceLedgerGap,\n        extraSigners: tx.extraSigners\n      }, opts));\n      tx._tx.operations().forEach(function (op) {\n        return builder.addOperation(op);\n      });\n      return builder;\n    }\n  }, {\n    key: \"buildFeeBumpTransaction\",\n    value: function buildFeeBumpTransaction(feeSource, baseFee, innerTx, networkPassphrase) {\n      var innerOps = innerTx.operations.length;\n      var innerBaseFeeRate = new _bignumber[\"default\"](innerTx.fee).div(innerOps);\n      var base = new _bignumber[\"default\"](baseFee);\n\n      // The fee rate for fee bump is at least the fee rate of the inner transaction\n      if (base.lt(innerBaseFeeRate)) {\n        throw new Error(\"Invalid baseFee, it should be at least \".concat(innerBaseFeeRate, \" stroops.\"));\n      }\n      var minBaseFee = new _bignumber[\"default\"](BASE_FEE);\n\n      // The fee rate is at least the minimum fee\n      if (base.lt(minBaseFee)) {\n        throw new Error(\"Invalid baseFee, it should be at least \".concat(minBaseFee, \" stroops.\"));\n      }\n      var innerTxEnvelope = innerTx.toEnvelope();\n      if (innerTxEnvelope[\"switch\"]() === _xdr[\"default\"].EnvelopeType.envelopeTypeTxV0()) {\n        var v0Tx = innerTxEnvelope.v0().tx();\n        var v1Tx = new _xdr[\"default\"].Transaction({\n          sourceAccount: new _xdr[\"default\"].MuxedAccount.keyTypeEd25519(v0Tx.sourceAccountEd25519()),\n          fee: v0Tx.fee(),\n          seqNum: v0Tx.seqNum(),\n          cond: _xdr[\"default\"].Preconditions.precondTime(v0Tx.timeBounds()),\n          memo: v0Tx.memo(),\n          operations: v0Tx.operations(),\n          ext: new _xdr[\"default\"].TransactionExt(0)\n        });\n        innerTxEnvelope = new _xdr[\"default\"].TransactionEnvelope.envelopeTypeTx(new _xdr[\"default\"].TransactionV1Envelope({\n          tx: v1Tx,\n          signatures: innerTxEnvelope.v0().signatures()\n        }));\n      }\n      var feeSourceAccount;\n      if (typeof feeSource === 'string') {\n        feeSourceAccount = (0, _decode_encode_muxed_account.decodeAddressToMuxedAccount)(feeSource);\n      } else {\n        feeSourceAccount = feeSource.xdrMuxedAccount();\n      }\n      var tx = new _xdr[\"default\"].FeeBumpTransaction({\n        feeSource: feeSourceAccount,\n        fee: _xdr[\"default\"].Int64.fromString(base.times(innerOps + 1).toString()),\n        innerTx: _xdr[\"default\"].FeeBumpTransactionInnerTx.envelopeTypeTx(innerTxEnvelope.v1()),\n        ext: new _xdr[\"default\"].FeeBumpTransactionExt(0)\n      });\n      var feeBumpTxEnvelope = new _xdr[\"default\"].FeeBumpTransactionEnvelope({\n        tx: tx,\n        signatures: []\n      });\n      var envelope = new _xdr[\"default\"].TransactionEnvelope.envelopeTypeTxFeeBump(feeBumpTxEnvelope);\n      return new _fee_bump_transaction.FeeBumpTransaction(envelope, networkPassphrase);\n    }\n\n    /**\n     * Build a {@link Transaction} or {@link FeeBumpTransaction} from an\n     * xdr.TransactionEnvelope.\n     *\n     * @param {string|xdr.TransactionEnvelope} envelope - The transaction envelope\n     *     object or base64 encoded string.\n     * @param {string} networkPassphrase - The network passphrase of the target\n     *     Stellar network (e.g. \"Public Global Stellar Network ; September\n     *     2015\"), see {@link Networks}.\n     *\n     * @returns {Transaction|FeeBumpTransaction}\n     */\n  }, {\n    key: \"fromXDR\",\n    value: function fromXDR(envelope, networkPassphrase) {\n      if (typeof envelope === 'string') {\n        envelope = _xdr[\"default\"].TransactionEnvelope.fromXDR(envelope, 'base64');\n      }\n      if (envelope[\"switch\"]() === _xdr[\"default\"].EnvelopeType.envelopeTypeTxFeeBump()) {\n        return new _fee_bump_transaction.FeeBumpTransaction(envelope, networkPassphrase);\n      }\n      return new _transaction.Transaction(envelope, networkPassphrase);\n    }\n  }]);\n}();\n/**\n * Checks whether a provided object is a valid Date.\n * @argument {Date} d date object\n * @returns {boolean}\n */\nfunction isValidDate(d) {\n  // isnan is okay here because it correctly checks for invalid date objects\n  // eslint-disable-next-line no-restricted-globals\n  return d instanceof Date && !isNaN(d);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@stellar/stellar-base/lib/transaction_builder.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@stellar/stellar-base/lib/util/bignumber.js":
/*!******************************************************************!*\
  !*** ./node_modules/@stellar/stellar-base/lib/util/bignumber.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports[\"default\"] = void 0;\nvar _bignumber = _interopRequireDefault(__webpack_require__(/*! bignumber.js */ \"(ssr)/./node_modules/bignumber.js/bignumber.js\"));\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { \"default\": e }; }\nvar BigNumber = _bignumber[\"default\"].clone();\nBigNumber.DEBUG = true; // gives us exceptions on bad constructor values\nvar _default = exports[\"default\"] = BigNumber;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHN0ZWxsYXIvc3RlbGxhci1iYXNlL2xpYi91dGlsL2JpZ251bWJlci5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYiw4Q0FBNkM7QUFDN0M7QUFDQSxDQUFDLEVBQUM7QUFDRixrQkFBa0I7QUFDbEIsd0NBQXdDLG1CQUFPLENBQUMsb0VBQWM7QUFDOUQscUNBQXFDLGlDQUFpQztBQUN0RTtBQUNBLHdCQUF3QjtBQUN4QixlQUFlLGtCQUFrQiIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxVU1VBUklPXFxEb2N1bWVudHNcXEdpdGh1YlxcR2FsYXh5S0otd2FsbGV0LS0tSGFja1xcd2ViXFxub2RlX21vZHVsZXNcXEBzdGVsbGFyXFxzdGVsbGFyLWJhc2VcXGxpYlxcdXRpbFxcYmlnbnVtYmVyLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSB2b2lkIDA7XG52YXIgX2JpZ251bWJlciA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcImJpZ251bWJlci5qc1wiKSk7XG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KGUpIHsgcmV0dXJuIGUgJiYgZS5fX2VzTW9kdWxlID8gZSA6IHsgXCJkZWZhdWx0XCI6IGUgfTsgfVxudmFyIEJpZ051bWJlciA9IF9iaWdudW1iZXJbXCJkZWZhdWx0XCJdLmNsb25lKCk7XG5CaWdOdW1iZXIuREVCVUcgPSB0cnVlOyAvLyBnaXZlcyB1cyBleGNlcHRpb25zIG9uIGJhZCBjb25zdHJ1Y3RvciB2YWx1ZXNcbnZhciBfZGVmYXVsdCA9IGV4cG9ydHNbXCJkZWZhdWx0XCJdID0gQmlnTnVtYmVyOyJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@stellar/stellar-base/lib/util/bignumber.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@stellar/stellar-base/lib/util/checksum.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@stellar/stellar-base/lib/util/checksum.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.verifyChecksum = verifyChecksum;\nfunction verifyChecksum(expected, actual) {\n  if (expected.length !== actual.length) {\n    return false;\n  }\n  if (expected.length === 0) {\n    return true;\n  }\n  for (var i = 0; i < expected.length; i += 1) {\n    if (expected[i] !== actual[i]) {\n      return false;\n    }\n  }\n  return true;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHN0ZWxsYXIvc3RlbGxhci1iYXNlL2xpYi91dGlsL2NoZWNrc3VtLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLDhDQUE2QztBQUM3QztBQUNBLENBQUMsRUFBQztBQUNGLHNCQUFzQjtBQUN0QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQixxQkFBcUI7QUFDdkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXFVTVUFSSU9cXERvY3VtZW50c1xcR2l0aHViXFxHYWxheHlLSi13YWxsZXQtLS1IYWNrXFx3ZWJcXG5vZGVfbW9kdWxlc1xcQHN0ZWxsYXJcXHN0ZWxsYXItYmFzZVxcbGliXFx1dGlsXFxjaGVja3N1bS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMudmVyaWZ5Q2hlY2tzdW0gPSB2ZXJpZnlDaGVja3N1bTtcbmZ1bmN0aW9uIHZlcmlmeUNoZWNrc3VtKGV4cGVjdGVkLCBhY3R1YWwpIHtcbiAgaWYgKGV4cGVjdGVkLmxlbmd0aCAhPT0gYWN0dWFsLmxlbmd0aCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBpZiAoZXhwZWN0ZWQubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBleHBlY3RlZC5sZW5ndGg7IGkgKz0gMSkge1xuICAgIGlmIChleHBlY3RlZFtpXSAhPT0gYWN0dWFsW2ldKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG4gIHJldHVybiB0cnVlO1xufSJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@stellar/stellar-base/lib/util/checksum.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@stellar/stellar-base/lib/util/continued_fraction.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@stellar/stellar-base/lib/util/continued_fraction.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.best_r = best_r;\nvar _bignumber = _interopRequireDefault(__webpack_require__(/*! ./bignumber */ \"(ssr)/./node_modules/@stellar/stellar-base/lib/util/bignumber.js\"));\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { \"default\": e }; }\nfunction _slicedToArray(r, e) { return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest(); }\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _unsupportedIterableToArray(r, a) { if (r) { if (\"string\" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return \"Object\" === t && r.constructor && (t = r.constructor.name), \"Map\" === t || \"Set\" === t ? Array.from(r) : \"Arguments\" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }\nfunction _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }\nfunction _iterableToArrayLimit(r, l) { var t = null == r ? null : \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t[\"return\"] && (u = t[\"return\"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }\nfunction _arrayWithHoles(r) { if (Array.isArray(r)) return r; }\n// eslint-disable-next-line no-bitwise\nvar MAX_INT = (1 << 31 >>> 0) - 1;\n\n/**\n * Calculates and returns the best rational approximation of the given real number.\n * @private\n * @param {string|number|BigNumber} rawNumber Real number\n * @throws Error Throws `Error` when the best rational approximation cannot be found.\n * @returns {array} first element is n (numerator), second element is d (denominator)\n */\nfunction best_r(rawNumber) {\n  var number = new _bignumber[\"default\"](rawNumber);\n  var a;\n  var f;\n  var fractions = [[new _bignumber[\"default\"](0), new _bignumber[\"default\"](1)], [new _bignumber[\"default\"](1), new _bignumber[\"default\"](0)]];\n  var i = 2;\n\n  // eslint-disable-next-line no-constant-condition\n  while (true) {\n    if (number.gt(MAX_INT)) {\n      break;\n    }\n    a = number.integerValue(_bignumber[\"default\"].ROUND_FLOOR);\n    f = number.minus(a);\n    var h = a.times(fractions[i - 1][0]).plus(fractions[i - 2][0]);\n    var k = a.times(fractions[i - 1][1]).plus(fractions[i - 2][1]);\n    if (h.gt(MAX_INT) || k.gt(MAX_INT)) {\n      break;\n    }\n    fractions.push([h, k]);\n    if (f.eq(0)) {\n      break;\n    }\n    number = new _bignumber[\"default\"](1).div(f);\n    i += 1;\n  }\n  var _fractions = _slicedToArray(fractions[fractions.length - 1], 2),\n    n = _fractions[0],\n    d = _fractions[1];\n  if (n.isZero() || d.isZero()) {\n    throw new Error(\"Couldn't find approximation\");\n  }\n  return [n.toNumber(), d.toNumber()];\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHN0ZWxsYXIvc3RlbGxhci1iYXNlL2xpYi91dGlsL2NvbnRpbnVlZF9mcmFjdGlvbi5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYiw4Q0FBNkM7QUFDN0M7QUFDQSxDQUFDLEVBQUM7QUFDRixjQUFjO0FBQ2Qsd0NBQXdDLG1CQUFPLENBQUMscUZBQWE7QUFDN0QscUNBQXFDLGlDQUFpQztBQUN0RSxnQ0FBZ0M7QUFDaEMsOEJBQThCO0FBQzlCLDZDQUE2QyxTQUFTLDBEQUEwRCxVQUFVLGdDQUFnQztBQUMxSixtQ0FBbUMsK0NBQStDLDhCQUE4QixPQUFPLGtCQUFrQjtBQUN6SSx1Q0FBdUMsa0dBQWtHLGlCQUFpQix3Q0FBd0MsTUFBTSx5Q0FBeUMsNkJBQTZCLFVBQVUsWUFBWSxrRUFBa0UsV0FBVyxZQUFZLGlCQUFpQixVQUFVLE1BQU0saUZBQWlGLFVBQVUsb0JBQW9CO0FBQzdnQiw4QkFBOEI7QUFDOUI7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLHlCQUF5QjtBQUNwQztBQUNBLGFBQWEsT0FBTztBQUNwQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcVVNVQVJJT1xcRG9jdW1lbnRzXFxHaXRodWJcXEdhbGF4eUtKLXdhbGxldC0tLUhhY2tcXHdlYlxcbm9kZV9tb2R1bGVzXFxAc3RlbGxhclxcc3RlbGxhci1iYXNlXFxsaWJcXHV0aWxcXGNvbnRpbnVlZF9mcmFjdGlvbi5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuYmVzdF9yID0gYmVzdF9yO1xudmFyIF9iaWdudW1iZXIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL2JpZ251bWJlclwiKSk7XG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KGUpIHsgcmV0dXJuIGUgJiYgZS5fX2VzTW9kdWxlID8gZSA6IHsgXCJkZWZhdWx0XCI6IGUgfTsgfVxuZnVuY3Rpb24gX3NsaWNlZFRvQXJyYXkociwgZSkgeyByZXR1cm4gX2FycmF5V2l0aEhvbGVzKHIpIHx8IF9pdGVyYWJsZVRvQXJyYXlMaW1pdChyLCBlKSB8fCBfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkociwgZSkgfHwgX25vbkl0ZXJhYmxlUmVzdCgpOyB9XG5mdW5jdGlvbiBfbm9uSXRlcmFibGVSZXN0KCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiSW52YWxpZCBhdHRlbXB0IHRvIGRlc3RydWN0dXJlIG5vbi1pdGVyYWJsZSBpbnN0YW5jZS5cXG5JbiBvcmRlciB0byBiZSBpdGVyYWJsZSwgbm9uLWFycmF5IG9iamVjdHMgbXVzdCBoYXZlIGEgW1N5bWJvbC5pdGVyYXRvcl0oKSBtZXRob2QuXCIpOyB9XG5mdW5jdGlvbiBfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkociwgYSkgeyBpZiAocikgeyBpZiAoXCJzdHJpbmdcIiA9PSB0eXBlb2YgcikgcmV0dXJuIF9hcnJheUxpa2VUb0FycmF5KHIsIGEpOyB2YXIgdCA9IHt9LnRvU3RyaW5nLmNhbGwocikuc2xpY2UoOCwgLTEpOyByZXR1cm4gXCJPYmplY3RcIiA9PT0gdCAmJiByLmNvbnN0cnVjdG9yICYmICh0ID0gci5jb25zdHJ1Y3Rvci5uYW1lKSwgXCJNYXBcIiA9PT0gdCB8fCBcIlNldFwiID09PSB0ID8gQXJyYXkuZnJvbShyKSA6IFwiQXJndW1lbnRzXCIgPT09IHQgfHwgL14oPzpVaXxJKW50KD86OHwxNnwzMikoPzpDbGFtcGVkKT9BcnJheSQvLnRlc3QodCkgPyBfYXJyYXlMaWtlVG9BcnJheShyLCBhKSA6IHZvaWQgMDsgfSB9XG5mdW5jdGlvbiBfYXJyYXlMaWtlVG9BcnJheShyLCBhKSB7IChudWxsID09IGEgfHwgYSA+IHIubGVuZ3RoKSAmJiAoYSA9IHIubGVuZ3RoKTsgZm9yICh2YXIgZSA9IDAsIG4gPSBBcnJheShhKTsgZSA8IGE7IGUrKykgbltlXSA9IHJbZV07IHJldHVybiBuOyB9XG5mdW5jdGlvbiBfaXRlcmFibGVUb0FycmF5TGltaXQociwgbCkgeyB2YXIgdCA9IG51bGwgPT0gciA/IG51bGwgOiBcInVuZGVmaW5lZFwiICE9IHR5cGVvZiBTeW1ib2wgJiYgcltTeW1ib2wuaXRlcmF0b3JdIHx8IHJbXCJAQGl0ZXJhdG9yXCJdOyBpZiAobnVsbCAhPSB0KSB7IHZhciBlLCBuLCBpLCB1LCBhID0gW10sIGYgPSAhMCwgbyA9ICExOyB0cnkgeyBpZiAoaSA9ICh0ID0gdC5jYWxsKHIpKS5uZXh0LCAwID09PSBsKSB7IGlmIChPYmplY3QodCkgIT09IHQpIHJldHVybjsgZiA9ICExOyB9IGVsc2UgZm9yICg7ICEoZiA9IChlID0gaS5jYWxsKHQpKS5kb25lKSAmJiAoYS5wdXNoKGUudmFsdWUpLCBhLmxlbmd0aCAhPT0gbCk7IGYgPSAhMCk7IH0gY2F0Y2ggKHIpIHsgbyA9ICEwLCBuID0gcjsgfSBmaW5hbGx5IHsgdHJ5IHsgaWYgKCFmICYmIG51bGwgIT0gdFtcInJldHVyblwiXSAmJiAodSA9IHRbXCJyZXR1cm5cIl0oKSwgT2JqZWN0KHUpICE9PSB1KSkgcmV0dXJuOyB9IGZpbmFsbHkgeyBpZiAobykgdGhyb3cgbjsgfSB9IHJldHVybiBhOyB9IH1cbmZ1bmN0aW9uIF9hcnJheVdpdGhIb2xlcyhyKSB7IGlmIChBcnJheS5pc0FycmF5KHIpKSByZXR1cm4gcjsgfVxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWJpdHdpc2VcbnZhciBNQVhfSU5UID0gKDEgPDwgMzEgPj4+IDApIC0gMTtcblxuLyoqXG4gKiBDYWxjdWxhdGVzIGFuZCByZXR1cm5zIHRoZSBiZXN0IHJhdGlvbmFsIGFwcHJveGltYXRpb24gb2YgdGhlIGdpdmVuIHJlYWwgbnVtYmVyLlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7c3RyaW5nfG51bWJlcnxCaWdOdW1iZXJ9IHJhd051bWJlciBSZWFsIG51bWJlclxuICogQHRocm93cyBFcnJvciBUaHJvd3MgYEVycm9yYCB3aGVuIHRoZSBiZXN0IHJhdGlvbmFsIGFwcHJveGltYXRpb24gY2Fubm90IGJlIGZvdW5kLlxuICogQHJldHVybnMge2FycmF5fSBmaXJzdCBlbGVtZW50IGlzIG4gKG51bWVyYXRvciksIHNlY29uZCBlbGVtZW50IGlzIGQgKGRlbm9taW5hdG9yKVxuICovXG5mdW5jdGlvbiBiZXN0X3IocmF3TnVtYmVyKSB7XG4gIHZhciBudW1iZXIgPSBuZXcgX2JpZ251bWJlcltcImRlZmF1bHRcIl0ocmF3TnVtYmVyKTtcbiAgdmFyIGE7XG4gIHZhciBmO1xuICB2YXIgZnJhY3Rpb25zID0gW1tuZXcgX2JpZ251bWJlcltcImRlZmF1bHRcIl0oMCksIG5ldyBfYmlnbnVtYmVyW1wiZGVmYXVsdFwiXSgxKV0sIFtuZXcgX2JpZ251bWJlcltcImRlZmF1bHRcIl0oMSksIG5ldyBfYmlnbnVtYmVyW1wiZGVmYXVsdFwiXSgwKV1dO1xuICB2YXIgaSA9IDI7XG5cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnN0YW50LWNvbmRpdGlvblxuICB3aGlsZSAodHJ1ZSkge1xuICAgIGlmIChudW1iZXIuZ3QoTUFYX0lOVCkpIHtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICBhID0gbnVtYmVyLmludGVnZXJWYWx1ZShfYmlnbnVtYmVyW1wiZGVmYXVsdFwiXS5ST1VORF9GTE9PUik7XG4gICAgZiA9IG51bWJlci5taW51cyhhKTtcbiAgICB2YXIgaCA9IGEudGltZXMoZnJhY3Rpb25zW2kgLSAxXVswXSkucGx1cyhmcmFjdGlvbnNbaSAtIDJdWzBdKTtcbiAgICB2YXIgayA9IGEudGltZXMoZnJhY3Rpb25zW2kgLSAxXVsxXSkucGx1cyhmcmFjdGlvbnNbaSAtIDJdWzFdKTtcbiAgICBpZiAoaC5ndChNQVhfSU5UKSB8fCBrLmd0KE1BWF9JTlQpKSB7XG4gICAgICBicmVhaztcbiAgICB9XG4gICAgZnJhY3Rpb25zLnB1c2goW2gsIGtdKTtcbiAgICBpZiAoZi5lcSgwKSkge1xuICAgICAgYnJlYWs7XG4gICAgfVxuICAgIG51bWJlciA9IG5ldyBfYmlnbnVtYmVyW1wiZGVmYXVsdFwiXSgxKS5kaXYoZik7XG4gICAgaSArPSAxO1xuICB9XG4gIHZhciBfZnJhY3Rpb25zID0gX3NsaWNlZFRvQXJyYXkoZnJhY3Rpb25zW2ZyYWN0aW9ucy5sZW5ndGggLSAxXSwgMiksXG4gICAgbiA9IF9mcmFjdGlvbnNbMF0sXG4gICAgZCA9IF9mcmFjdGlvbnNbMV07XG4gIGlmIChuLmlzWmVybygpIHx8IGQuaXNaZXJvKCkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJDb3VsZG4ndCBmaW5kIGFwcHJveGltYXRpb25cIik7XG4gIH1cbiAgcmV0dXJuIFtuLnRvTnVtYmVyKCksIGQudG9OdW1iZXIoKV07XG59Il0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@stellar/stellar-base/lib/util/continued_fraction.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@stellar/stellar-base/lib/util/decode_encode_muxed_account.js":
/*!************************************************************************************!*\
  !*** ./node_modules/@stellar/stellar-base/lib/util/decode_encode_muxed_account.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.decodeAddressToMuxedAccount = decodeAddressToMuxedAccount;\nexports.encodeMuxedAccount = encodeMuxedAccount;\nexports.encodeMuxedAccountToAddress = encodeMuxedAccountToAddress;\nexports.extractBaseAddress = extractBaseAddress;\nvar _xdr = _interopRequireDefault(__webpack_require__(/*! ../xdr */ \"(ssr)/./node_modules/@stellar/stellar-base/lib/xdr.js\"));\nvar _strkey = __webpack_require__(/*! ../strkey */ \"(ssr)/./node_modules/@stellar/stellar-base/lib/strkey.js\");\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { \"default\": e }; }\n/**\n * Converts a Stellar address (in G... or M... form) to an `xdr.MuxedAccount`\n * structure, using the ed25519 representation when possible.\n *\n * This supports full muxed accounts, where an `M...` address will resolve to\n * both its underlying `G...` address and an integer ID.\n *\n * @param   {string}  address   G... or M... address to encode into XDR\n * @returns {xdr.MuxedAccount}  a muxed account object for this address string\n */\nfunction decodeAddressToMuxedAccount(address) {\n  if (_strkey.StrKey.isValidMed25519PublicKey(address)) {\n    return _decodeAddressFullyToMuxedAccount(address);\n  }\n  return _xdr[\"default\"].MuxedAccount.keyTypeEd25519(_strkey.StrKey.decodeEd25519PublicKey(address));\n}\n\n/**\n * Converts an xdr.MuxedAccount to its StrKey representation.\n *\n * This returns its \"M...\" string representation if there is a muxing ID within\n * the object and returns the \"G...\" representation otherwise.\n *\n * @param   {xdr.MuxedAccount} muxedAccount   Raw account to stringify\n * @returns {string} Stringified G... (corresponding to the underlying pubkey)\n *     or M... address (corresponding to both the key and the muxed ID)\n *\n * @see https://stellar.org/protocol/sep-23\n */\nfunction encodeMuxedAccountToAddress(muxedAccount) {\n  if (muxedAccount[\"switch\"]().value === _xdr[\"default\"].CryptoKeyType.keyTypeMuxedEd25519().value) {\n    return _encodeMuxedAccountFullyToAddress(muxedAccount);\n  }\n  return _strkey.StrKey.encodeEd25519PublicKey(muxedAccount.ed25519());\n}\n\n/**\n * Transform a Stellar address (G...) and an ID into its XDR representation.\n *\n * @param  {string} address   - a Stellar G... address\n * @param  {string} id        - a Uint64 ID represented as a string\n *\n * @return {xdr.MuxedAccount} - XDR representation of the above muxed account\n */\nfunction encodeMuxedAccount(address, id) {\n  if (!_strkey.StrKey.isValidEd25519PublicKey(address)) {\n    throw new Error('address should be a Stellar account ID (G...)');\n  }\n  if (typeof id !== 'string') {\n    throw new Error('id should be a string representing a number (uint64)');\n  }\n  return _xdr[\"default\"].MuxedAccount.keyTypeMuxedEd25519(new _xdr[\"default\"].MuxedAccountMed25519({\n    id: _xdr[\"default\"].Uint64.fromString(id),\n    ed25519: _strkey.StrKey.decodeEd25519PublicKey(address)\n  }));\n}\n\n/**\n * Extracts the underlying base (G...) address from an M-address.\n * @param  {string} address   an account address (either M... or G...)\n * @return {string} a Stellar public key address (G...)\n */\nfunction extractBaseAddress(address) {\n  if (_strkey.StrKey.isValidEd25519PublicKey(address)) {\n    return address;\n  }\n  if (!_strkey.StrKey.isValidMed25519PublicKey(address)) {\n    throw new TypeError(\"expected muxed account (M...), got \".concat(address));\n  }\n  var muxedAccount = decodeAddressToMuxedAccount(address);\n  return _strkey.StrKey.encodeEd25519PublicKey(muxedAccount.med25519().ed25519());\n}\n\n// Decodes an \"M...\" account ID into its MuxedAccount object representation.\nfunction _decodeAddressFullyToMuxedAccount(address) {\n  var rawBytes = _strkey.StrKey.decodeMed25519PublicKey(address);\n\n  // Decoding M... addresses cannot be done through a simple\n  // MuxedAccountMed25519.fromXDR() call, because the definition is:\n  //\n  //    constructor(attributes: { id: Uint64; ed25519: Buffer });\n  //\n  // Note the ID is the first attribute. However, the ID comes *last* in the\n  // stringified (base32-encoded) address itself (it's the last 8-byte suffix).\n  // The `fromXDR()` method interprets bytes in order, so we need to parse out\n  // the raw binary into its requisite parts, i.e. use the MuxedAccountMed25519\n  // constructor directly.\n  //\n  // Refer to https://github.com/stellar/go/blob/master/xdr/muxed_account.go#L26\n  // for the Golang implementation of the M... parsing.\n  return _xdr[\"default\"].MuxedAccount.keyTypeMuxedEd25519(new _xdr[\"default\"].MuxedAccountMed25519({\n    id: _xdr[\"default\"].Uint64.fromXDR(rawBytes.subarray(-8)),\n    ed25519: rawBytes.subarray(0, -8)\n  }));\n}\n\n// Converts an xdr.MuxedAccount into its *true* \"M...\" string representation.\nfunction _encodeMuxedAccountFullyToAddress(muxedAccount) {\n  if (muxedAccount[\"switch\"]() === _xdr[\"default\"].CryptoKeyType.keyTypeEd25519()) {\n    return encodeMuxedAccountToAddress(muxedAccount);\n  }\n  var muxed = muxedAccount.med25519();\n  return _strkey.StrKey.encodeMed25519PublicKey(Buffer.concat([muxed.ed25519(), muxed.id().toXDR('raw')]));\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@stellar/stellar-base/lib/util/decode_encode_muxed_account.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@stellar/stellar-base/lib/util/util.js":
/*!*************************************************************!*\
  !*** ./node_modules/@stellar/stellar-base/lib/util/util.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.trimEnd = void 0;\nvar trimEnd = exports.trimEnd = function trimEnd(input, _char) {\n  var isNumber = typeof input === 'number';\n  var str = String(input);\n  while (str.endsWith(_char)) {\n    str = str.slice(0, -1);\n  }\n  return isNumber ? Number(str) : str;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHN0ZWxsYXIvc3RlbGxhci1iYXNlL2xpYi91dGlsL3V0aWwuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsOENBQTZDO0FBQzdDO0FBQ0EsQ0FBQyxFQUFDO0FBQ0YsZUFBZTtBQUNmLGNBQWMsZUFBZTtBQUM3QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxVU1VBUklPXFxEb2N1bWVudHNcXEdpdGh1YlxcR2FsYXh5S0otd2FsbGV0LS0tSGFja1xcd2ViXFxub2RlX21vZHVsZXNcXEBzdGVsbGFyXFxzdGVsbGFyLWJhc2VcXGxpYlxcdXRpbFxcdXRpbC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMudHJpbUVuZCA9IHZvaWQgMDtcbnZhciB0cmltRW5kID0gZXhwb3J0cy50cmltRW5kID0gZnVuY3Rpb24gdHJpbUVuZChpbnB1dCwgX2NoYXIpIHtcbiAgdmFyIGlzTnVtYmVyID0gdHlwZW9mIGlucHV0ID09PSAnbnVtYmVyJztcbiAgdmFyIHN0ciA9IFN0cmluZyhpbnB1dCk7XG4gIHdoaWxlIChzdHIuZW5kc1dpdGgoX2NoYXIpKSB7XG4gICAgc3RyID0gc3RyLnNsaWNlKDAsIC0xKTtcbiAgfVxuICByZXR1cm4gaXNOdW1iZXIgPyBOdW1iZXIoc3RyKSA6IHN0cjtcbn07Il0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@stellar/stellar-base/lib/util/util.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@stellar/stellar-base/lib/xdr.js":
/*!*******************************************************!*\
  !*** ./node_modules/@stellar/stellar-base/lib/xdr.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports[\"default\"] = void 0;\nvar _curr_generated = _interopRequireDefault(__webpack_require__(/*! ./generated/curr_generated */ \"(ssr)/./node_modules/@stellar/stellar-base/lib/generated/curr_generated.js\"));\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { \"default\": e }; }\nvar _default = exports[\"default\"] = _curr_generated[\"default\"];//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHN0ZWxsYXIvc3RlbGxhci1iYXNlL2xpYi94ZHIuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsOENBQTZDO0FBQzdDO0FBQ0EsQ0FBQyxFQUFDO0FBQ0Ysa0JBQWtCO0FBQ2xCLDZDQUE2QyxtQkFBTyxDQUFDLDhHQUE0QjtBQUNqRixxQ0FBcUMsaUNBQWlDO0FBQ3RFLGVBQWUsa0JBQWtCIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXFVTVUFSSU9cXERvY3VtZW50c1xcR2l0aHViXFxHYWxheHlLSi13YWxsZXQtLS1IYWNrXFx3ZWJcXG5vZGVfbW9kdWxlc1xcQHN0ZWxsYXJcXHN0ZWxsYXItYmFzZVxcbGliXFx4ZHIuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IHZvaWQgMDtcbnZhciBfY3Vycl9nZW5lcmF0ZWQgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL2dlbmVyYXRlZC9jdXJyX2dlbmVyYXRlZFwiKSk7XG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KGUpIHsgcmV0dXJuIGUgJiYgZS5fX2VzTW9kdWxlID8gZSA6IHsgXCJkZWZhdWx0XCI6IGUgfTsgfVxudmFyIF9kZWZhdWx0ID0gZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBfY3Vycl9nZW5lcmF0ZWRbXCJkZWZhdWx0XCJdOyJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@stellar/stellar-base/lib/xdr.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@stellar/stellar-sdk/lib/config.js":
/*!*********************************************************!*\
  !*** ./node_modules/@stellar/stellar-sdk/lib/config.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.Config = void 0;\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\nfunction _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }\nfunction _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nvar defaultConfig = {\n  allowHttp: false,\n  timeout: 0\n};\nvar config = _objectSpread({}, defaultConfig);\nvar Config = exports.Config = function () {\n  function Config() {\n    _classCallCheck(this, Config);\n  }\n  return _createClass(Config, null, [{\n    key: \"setAllowHttp\",\n    value: function setAllowHttp(value) {\n      config.allowHttp = value;\n    }\n  }, {\n    key: \"setTimeout\",\n    value: function setTimeout(value) {\n      config.timeout = value;\n    }\n  }, {\n    key: \"isAllowHttp\",\n    value: function isAllowHttp() {\n      return config.allowHttp;\n    }\n  }, {\n    key: \"getTimeout\",\n    value: function getTimeout() {\n      return config.timeout;\n    }\n  }, {\n    key: \"setDefault\",\n    value: function setDefault() {\n      config = _objectSpread({}, defaultConfig);\n    }\n  }]);\n}();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHN0ZWxsYXIvc3RlbGxhci1zZGsvbGliL2NvbmZpZy5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYiw4Q0FBNkM7QUFDN0M7QUFDQSxDQUFDLEVBQUM7QUFDRixjQUFjO0FBQ2Qsc0JBQXNCLDJCQUEyQixvR0FBb0csbUJBQW1CLGlCQUFpQixzSEFBc0g7QUFDL1MsaUNBQWlDO0FBQ2pDLG1DQUFtQyxnQkFBZ0IsY0FBYyxPQUFPLGNBQWM7QUFDdEYsaUNBQWlDLHFIQUFxSCxjQUFjO0FBQ3BLLHlCQUF5Qix3QkFBd0Isb0NBQW9DLHlDQUF5QyxrQ0FBa0MsMERBQTBELDBCQUEwQjtBQUNwUCw0QkFBNEIsZ0JBQWdCLHNCQUFzQixPQUFPLGtEQUFrRCxzREFBc0QsOEJBQThCLG1KQUFtSixxRUFBcUUsS0FBSztBQUM1YSxvQ0FBb0Msb0VBQW9FLDBEQUEwRDtBQUNsSyw2QkFBNkIsbUNBQW1DO0FBQ2hFLDhCQUE4Qiw0Q0FBNEMsK0JBQStCLG9CQUFvQixtQ0FBbUMsc0NBQXNDLHVFQUF1RTtBQUM3UTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZCQUE2QjtBQUM3QixhQUFhLGNBQWM7QUFDM0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0EsK0JBQStCO0FBQy9CO0FBQ0EsR0FBRztBQUNILENBQUMiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcVVNVQVJJT1xcRG9jdW1lbnRzXFxHaXRodWJcXEdhbGF4eUtKLXdhbGxldC0tLUhhY2tcXHdlYlxcbm9kZV9tb2R1bGVzXFxAc3RlbGxhclxcc3RlbGxhci1zZGtcXGxpYlxcY29uZmlnLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5Db25maWcgPSB2b2lkIDA7XG5mdW5jdGlvbiBfdHlwZW9mKG8pIHsgXCJAYmFiZWwvaGVscGVycyAtIHR5cGVvZlwiOyByZXR1cm4gX3R5cGVvZiA9IFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgU3ltYm9sICYmIFwic3ltYm9sXCIgPT0gdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA/IGZ1bmN0aW9uIChvKSB7IHJldHVybiB0eXBlb2YgbzsgfSA6IGZ1bmN0aW9uIChvKSB7IHJldHVybiBvICYmIFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgU3ltYm9sICYmIG8uY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvOyB9LCBfdHlwZW9mKG8pOyB9XG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soYSwgbikgeyBpZiAoIShhIGluc3RhbmNlb2YgbikpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH1cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKGUsIHIpIHsgZm9yICh2YXIgdCA9IDA7IHQgPCByLmxlbmd0aDsgdCsrKSB7IHZhciBvID0gclt0XTsgby5lbnVtZXJhYmxlID0gby5lbnVtZXJhYmxlIHx8ICExLCBvLmNvbmZpZ3VyYWJsZSA9ICEwLCBcInZhbHVlXCIgaW4gbyAmJiAoby53cml0YWJsZSA9ICEwKSwgT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsIF90b1Byb3BlcnR5S2V5KG8ua2V5KSwgbyk7IH0gfVxuZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKGUsIHIsIHQpIHsgcmV0dXJuIHIgJiYgX2RlZmluZVByb3BlcnRpZXMoZS5wcm90b3R5cGUsIHIpLCB0ICYmIF9kZWZpbmVQcm9wZXJ0aWVzKGUsIHQpLCBPYmplY3QuZGVmaW5lUHJvcGVydHkoZSwgXCJwcm90b3R5cGVcIiwgeyB3cml0YWJsZTogITEgfSksIGU7IH1cbmZ1bmN0aW9uIG93bktleXMoZSwgcikgeyB2YXIgdCA9IE9iamVjdC5rZXlzKGUpOyBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scykgeyB2YXIgbyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMoZSk7IHIgJiYgKG8gPSBvLmZpbHRlcihmdW5jdGlvbiAocikgeyByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihlLCByKS5lbnVtZXJhYmxlOyB9KSksIHQucHVzaC5hcHBseSh0LCBvKTsgfSByZXR1cm4gdDsgfVxuZnVuY3Rpb24gX29iamVjdFNwcmVhZChlKSB7IGZvciAodmFyIHIgPSAxOyByIDwgYXJndW1lbnRzLmxlbmd0aDsgcisrKSB7IHZhciB0ID0gbnVsbCAhPSBhcmd1bWVudHNbcl0gPyBhcmd1bWVudHNbcl0gOiB7fTsgciAlIDIgPyBvd25LZXlzKE9iamVjdCh0KSwgITApLmZvckVhY2goZnVuY3Rpb24gKHIpIHsgX2RlZmluZVByb3BlcnR5KGUsIHIsIHRbcl0pOyB9KSA6IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzID8gT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoZSwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnModCkpIDogb3duS2V5cyhPYmplY3QodCkpLmZvckVhY2goZnVuY3Rpb24gKHIpIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsIHIsIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodCwgcikpOyB9KTsgfSByZXR1cm4gZTsgfVxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KGUsIHIsIHQpIHsgcmV0dXJuIChyID0gX3RvUHJvcGVydHlLZXkocikpIGluIGUgPyBPYmplY3QuZGVmaW5lUHJvcGVydHkoZSwgciwgeyB2YWx1ZTogdCwgZW51bWVyYWJsZTogITAsIGNvbmZpZ3VyYWJsZTogITAsIHdyaXRhYmxlOiAhMCB9KSA6IGVbcl0gPSB0LCBlOyB9XG5mdW5jdGlvbiBfdG9Qcm9wZXJ0eUtleSh0KSB7IHZhciBpID0gX3RvUHJpbWl0aXZlKHQsIFwic3RyaW5nXCIpOyByZXR1cm4gXCJzeW1ib2xcIiA9PSBfdHlwZW9mKGkpID8gaSA6IGkgKyBcIlwiOyB9XG5mdW5jdGlvbiBfdG9QcmltaXRpdmUodCwgcikgeyBpZiAoXCJvYmplY3RcIiAhPSBfdHlwZW9mKHQpIHx8ICF0KSByZXR1cm4gdDsgdmFyIGUgPSB0W1N5bWJvbC50b1ByaW1pdGl2ZV07IGlmICh2b2lkIDAgIT09IGUpIHsgdmFyIGkgPSBlLmNhbGwodCwgciB8fCBcImRlZmF1bHRcIik7IGlmIChcIm9iamVjdFwiICE9IF90eXBlb2YoaSkpIHJldHVybiBpOyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQEB0b1ByaW1pdGl2ZSBtdXN0IHJldHVybiBhIHByaW1pdGl2ZSB2YWx1ZS5cIik7IH0gcmV0dXJuIChcInN0cmluZ1wiID09PSByID8gU3RyaW5nIDogTnVtYmVyKSh0KTsgfVxudmFyIGRlZmF1bHRDb25maWcgPSB7XG4gIGFsbG93SHR0cDogZmFsc2UsXG4gIHRpbWVvdXQ6IDBcbn07XG52YXIgY29uZmlnID0gX29iamVjdFNwcmVhZCh7fSwgZGVmYXVsdENvbmZpZyk7XG52YXIgQ29uZmlnID0gZXhwb3J0cy5Db25maWcgPSBmdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIENvbmZpZygpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgQ29uZmlnKTtcbiAgfVxuICByZXR1cm4gX2NyZWF0ZUNsYXNzKENvbmZpZywgbnVsbCwgW3tcbiAgICBrZXk6IFwic2V0QWxsb3dIdHRwXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHNldEFsbG93SHR0cCh2YWx1ZSkge1xuICAgICAgY29uZmlnLmFsbG93SHR0cCA9IHZhbHVlO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJzZXRUaW1lb3V0XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHNldFRpbWVvdXQodmFsdWUpIHtcbiAgICAgIGNvbmZpZy50aW1lb3V0ID0gdmFsdWU7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImlzQWxsb3dIdHRwXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGlzQWxsb3dIdHRwKCkge1xuICAgICAgcmV0dXJuIGNvbmZpZy5hbGxvd0h0dHA7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImdldFRpbWVvdXRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0VGltZW91dCgpIHtcbiAgICAgIHJldHVybiBjb25maWcudGltZW91dDtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwic2V0RGVmYXVsdFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzZXREZWZhdWx0KCkge1xuICAgICAgY29uZmlnID0gX29iamVjdFNwcmVhZCh7fSwgZGVmYXVsdENvbmZpZyk7XG4gICAgfVxuICB9XSk7XG59KCk7Il0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@stellar/stellar-sdk/lib/config.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@stellar/stellar-sdk/lib/contract/assembled_transaction.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@stellar/stellar-sdk/lib/contract/assembled_transaction.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.AssembledTransaction = void 0;\nvar _stellarBase = __webpack_require__(/*! @stellar/stellar-base */ \"(ssr)/./node_modules/@stellar/stellar-base/lib/index.js\");\nvar _rpc = __webpack_require__(/*! ../rpc */ \"(ssr)/./node_modules/@stellar/stellar-sdk/lib/rpc/index.js\");\nvar _api = __webpack_require__(/*! ../rpc/api */ \"(ssr)/./node_modules/@stellar/stellar-sdk/lib/rpc/api.js\");\nvar _transaction = __webpack_require__(/*! ../rpc/transaction */ \"(ssr)/./node_modules/@stellar/stellar-sdk/lib/rpc/transaction.js\");\nvar _rust_result = __webpack_require__(/*! ./rust_result */ \"(ssr)/./node_modules/@stellar/stellar-sdk/lib/contract/rust_result.js\");\nvar _utils = __webpack_require__(/*! ./utils */ \"(ssr)/./node_modules/@stellar/stellar-sdk/lib/contract/utils.js\");\nvar _types = __webpack_require__(/*! ./types */ \"(ssr)/./node_modules/@stellar/stellar-sdk/lib/contract/types.js\");\nvar _sent_transaction = __webpack_require__(/*! ./sent_transaction */ \"(ssr)/./node_modules/@stellar/stellar-sdk/lib/contract/sent_transaction.js\");\nfunction _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }\nfunction _possibleConstructorReturn(t, e) { if (e && (\"object\" == _typeof(e) || \"function\" == typeof e)) return e; if (void 0 !== e) throw new TypeError(\"Derived constructors may only return object or undefined\"); return _assertThisInitialized(t); }\nfunction _assertThisInitialized(e) { if (void 0 === e) throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); return e; }\nfunction _inherits(t, e) { if (\"function\" != typeof e && null !== e) throw new TypeError(\"Super expression must either be null or a function\"); t.prototype = Object.create(e && e.prototype, { constructor: { value: t, writable: !0, configurable: !0 } }), Object.defineProperty(t, \"prototype\", { writable: !1 }), e && _setPrototypeOf(t, e); }\nfunction _wrapNativeSuper(t) { var r = \"function\" == typeof Map ? new Map() : void 0; return _wrapNativeSuper = function _wrapNativeSuper(t) { if (null === t || !_isNativeFunction(t)) return t; if (\"function\" != typeof t) throw new TypeError(\"Super expression must either be null or a function\"); if (void 0 !== r) { if (r.has(t)) return r.get(t); r.set(t, Wrapper); } function Wrapper() { return _construct(t, arguments, _getPrototypeOf(this).constructor); } return Wrapper.prototype = Object.create(t.prototype, { constructor: { value: Wrapper, enumerable: !1, writable: !0, configurable: !0 } }), _setPrototypeOf(Wrapper, t); }, _wrapNativeSuper(t); }\nfunction _construct(t, e, r) { if (_isNativeReflectConstruct()) return Reflect.construct.apply(null, arguments); var o = [null]; o.push.apply(o, e); var p = new (t.bind.apply(t, o))(); return r && _setPrototypeOf(p, r.prototype), p; }\nfunction _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }\nfunction _isNativeFunction(t) { try { return -1 !== Function.toString.call(t).indexOf(\"[native code]\"); } catch (n) { return \"function\" == typeof t; } }\nfunction _setPrototypeOf(t, e) { return _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function (t, e) { return t.__proto__ = e, t; }, _setPrototypeOf(t, e); }\nfunction _getPrototypeOf(t) { return _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function (t) { return t.__proto__ || Object.getPrototypeOf(t); }, _getPrototypeOf(t); }\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _slicedToArray(r, e) { return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest(); }\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _iterableToArrayLimit(r, l) { var t = null == r ? null : \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t.return && (u = t.return(), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }\nfunction _arrayWithHoles(r) { if (Array.isArray(r)) return r; }\nfunction _createForOfIteratorHelper(r, e) { var t = \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"]; if (!t) { if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && \"number\" == typeof r.length) { t && (r = t); var _n = 0, F = function F() {}; return { s: F, n: function n() { return _n >= r.length ? { done: !0 } : { done: !1, value: r[_n++] }; }, e: function e(r) { throw r; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var o, a = !0, u = !1; return { s: function s() { t = t.call(r); }, n: function n() { var r = t.next(); return a = r.done, r; }, e: function e(r) { u = !0, o = r; }, f: function f() { try { a || null == t.return || t.return(); } finally { if (u) throw o; } } }; }\nfunction _regeneratorRuntime() { \"use strict\"; _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = \"function\" == typeof Symbol ? Symbol : {}, a = i.iterator || \"@@iterator\", c = i.asyncIterator || \"@@asyncIterator\", u = i.toStringTag || \"@@toStringTag\"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, \"\"); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, \"_invoke\", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: \"normal\", arg: t.call(e, r) }; } catch (t) { return { type: \"throw\", arg: t }; } } e.wrap = wrap; var h = \"suspendedStart\", l = \"suspendedYield\", f = \"executing\", s = \"completed\", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { [\"next\", \"throw\", \"return\"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if (\"throw\" !== c.type) { var u = c.arg, h = u.value; return h && \"object\" == _typeof(h) && n.call(h, \"__await\") ? e.resolve(h.__await).then(function (t) { invoke(\"next\", t, i, a); }, function (t) { invoke(\"throw\", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke(\"throw\", t, i, a); }); } a(c.arg); } var r; o(this, \"_invoke\", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw Error(\"Generator is already running\"); if (o === s) { if (\"throw\" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if (\"next\" === n.method) n.sent = n._sent = n.arg;else if (\"throw\" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else \"return\" === n.method && n.abrupt(\"return\", n.arg); o = f; var p = tryCatch(e, r, n); if (\"normal\" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } \"throw\" === p.type && (o = s, n.method = \"throw\", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, \"throw\" === n && e.iterator.return && (r.method = \"return\", r.arg = t, maybeInvokeDelegate(e, r), \"throw\" === r.method) || \"return\" !== n && (r.method = \"throw\", r.arg = new TypeError(\"The iterator does not provide a '\" + n + \"' method\")), y; var i = tryCatch(o, e.iterator, r.arg); if (\"throw\" === i.type) return r.method = \"throw\", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, \"return\" !== r.method && (r.method = \"next\", r.arg = t), r.delegate = null, y) : a : (r.method = \"throw\", r.arg = new TypeError(\"iterator result is not an object\"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = \"normal\", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: \"root\" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || \"\" === e) { var r = e[a]; if (r) return r.call(e); if (\"function\" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(_typeof(e) + \" is not iterable\"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, \"constructor\", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, \"constructor\", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, \"GeneratorFunction\"), e.isGeneratorFunction = function (t) { var e = \"function\" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || \"GeneratorFunction\" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, \"GeneratorFunction\")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, \"Generator\"), define(g, a, function () { return this; }), define(g, \"toString\", function () { return \"[object Generator]\"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) \"t\" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if (\"throw\" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = \"throw\", a.arg = e, r.next = n, o && (r.method = \"next\", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if (\"root\" === i.tryLoc) return handle(\"end\"); if (i.tryLoc <= this.prev) { var c = n.call(i, \"catchLoc\"), u = n.call(i, \"finallyLoc\"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw Error(\"try statement without catch or finally\"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, \"finallyLoc\") && this.prev < o.finallyLoc) { var i = o; break; } } i && (\"break\" === t || \"continue\" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = \"next\", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if (\"throw\" === t.type) throw t.arg; return \"break\" === t.type || \"continue\" === t.type ? this.next = t.arg : \"return\" === t.type ? (this.rval = this.arg = t.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, catch: function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if (\"throw\" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, \"next\" === this.method && (this.arg = t), y; } }, e; }\nfunction _toConsumableArray(r) { return _arrayWithoutHoles(r) || _iterableToArray(r) || _unsupportedIterableToArray(r) || _nonIterableSpread(); }\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _unsupportedIterableToArray(r, a) { if (r) { if (\"string\" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return \"Object\" === t && r.constructor && (t = r.constructor.name), \"Map\" === t || \"Set\" === t ? Array.from(r) : \"Arguments\" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }\nfunction _iterableToArray(r) { if (\"undefined\" != typeof Symbol && null != r[Symbol.iterator] || null != r[\"@@iterator\"]) return Array.from(r); }\nfunction _arrayWithoutHoles(r) { if (Array.isArray(r)) return _arrayLikeToArray(r); }\nfunction _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }\nfunction asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }\nfunction _asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, \"next\", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, \"throw\", n); } _next(void 0); }); }; }\nfunction _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\nfunction _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }\nfunction _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\nfunction _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nvar AssembledTransaction = exports.AssembledTransaction = function () {\n  function AssembledTransaction(options) {\n    var _this = this,\n      _this$options$simulat,\n      _this$options$allowHt;\n    _classCallCheck(this, AssembledTransaction);\n    _defineProperty(this, \"simulate\", _asyncToGenerator(_regeneratorRuntime().mark(function _callee() {\n      var _ref2,\n        restore,\n        account,\n        result,\n        _this$options$fee,\n        _this$options$args,\n        _this$options$timeout,\n        contract,\n        _args = arguments;\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) switch (_context.prev = _context.next) {\n          case 0:\n            _ref2 = _args.length > 0 && _args[0] !== undefined ? _args[0] : {}, restore = _ref2.restore;\n            if (_this.built) {\n              _context.next = 5;\n              break;\n            }\n            if (_this.raw) {\n              _context.next = 4;\n              break;\n            }\n            throw new Error(\"Transaction has not yet been assembled; \" + \"call `AssembledTransaction.build` first.\");\n          case 4:\n            _this.built = _this.raw.build();\n          case 5:\n            restore = restore !== null && restore !== void 0 ? restore : _this.options.restore;\n            delete _this.simulationResult;\n            delete _this.simulationTransactionData;\n            _context.next = 10;\n            return _this.server.simulateTransaction(_this.built);\n          case 10:\n            _this.simulation = _context.sent;\n            if (!(restore && _api.Api.isSimulationRestore(_this.simulation))) {\n              _context.next = 25;\n              break;\n            }\n            _context.next = 14;\n            return (0, _utils.getAccount)(_this.options, _this.server);\n          case 14:\n            account = _context.sent;\n            _context.next = 17;\n            return _this.restoreFootprint(_this.simulation.restorePreamble, account);\n          case 17:\n            result = _context.sent;\n            if (!(result.status === _api.Api.GetTransactionStatus.SUCCESS)) {\n              _context.next = 24;\n              break;\n            }\n            contract = new _stellarBase.Contract(_this.options.contractId);\n            _this.raw = new _stellarBase.TransactionBuilder(account, {\n              fee: (_this$options$fee = _this.options.fee) !== null && _this$options$fee !== void 0 ? _this$options$fee : _stellarBase.BASE_FEE,\n              networkPassphrase: _this.options.networkPassphrase\n            }).addOperation(contract.call.apply(contract, [_this.options.method].concat(_toConsumableArray((_this$options$args = _this.options.args) !== null && _this$options$args !== void 0 ? _this$options$args : [])))).setTimeout((_this$options$timeout = _this.options.timeoutInSeconds) !== null && _this$options$timeout !== void 0 ? _this$options$timeout : _types.DEFAULT_TIMEOUT);\n            _context.next = 23;\n            return _this.simulate();\n          case 23:\n            return _context.abrupt(\"return\", _this);\n          case 24:\n            throw new AssembledTransaction.Errors.RestorationFailure(\"Automatic restore failed! You set 'restore: true' but the attempted restore did not work. Result:\\n\".concat(JSON.stringify(result)));\n          case 25:\n            if (_api.Api.isSimulationSuccess(_this.simulation)) {\n              _this.built = (0, _transaction.assembleTransaction)(_this.built, _this.simulation).build();\n            }\n            return _context.abrupt(\"return\", _this);\n          case 27:\n          case \"end\":\n            return _context.stop();\n        }\n      }, _callee);\n    })));\n    _defineProperty(this, \"sign\", _asyncToGenerator(_regeneratorRuntime().mark(function _callee2() {\n      var _this$options$timeout2;\n      var _ref4,\n        _ref4$force,\n        force,\n        _ref4$signTransaction,\n        signTransaction,\n        sigsNeeded,\n        timeoutInSeconds,\n        signOpts,\n        _yield$signTransactio,\n        signature,\n        error,\n        _args2 = arguments;\n      return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n        while (1) switch (_context2.prev = _context2.next) {\n          case 0:\n            _ref4 = _args2.length > 0 && _args2[0] !== undefined ? _args2[0] : {}, _ref4$force = _ref4.force, force = _ref4$force === void 0 ? false : _ref4$force, _ref4$signTransaction = _ref4.signTransaction, signTransaction = _ref4$signTransaction === void 0 ? _this.options.signTransaction : _ref4$signTransaction;\n            if (_this.built) {\n              _context2.next = 3;\n              break;\n            }\n            throw new Error(\"Transaction has not yet been simulated\");\n          case 3:\n            if (!(!force && _this.isReadCall)) {\n              _context2.next = 5;\n              break;\n            }\n            throw new AssembledTransaction.Errors.NoSignatureNeeded(\"This is a read call. It requires no signature or sending. \" + \"Use `force: true` to sign and send anyway.\");\n          case 5:\n            if (signTransaction) {\n              _context2.next = 7;\n              break;\n            }\n            throw new AssembledTransaction.Errors.NoSigner(\"You must provide a signTransaction function, either when calling \" + \"`signAndSend` or when initializing your Client\");\n          case 7:\n            sigsNeeded = _this.needsNonInvokerSigningBy().filter(function (id) {\n              return !id.startsWith('C');\n            });\n            if (!sigsNeeded.length) {\n              _context2.next = 10;\n              break;\n            }\n            throw new AssembledTransaction.Errors.NeedsMoreSignatures(\"Transaction requires signatures from \".concat(sigsNeeded, \". \") + \"See `needsNonInvokerSigningBy` for details.\");\n          case 10:\n            timeoutInSeconds = (_this$options$timeout2 = _this.options.timeoutInSeconds) !== null && _this$options$timeout2 !== void 0 ? _this$options$timeout2 : _types.DEFAULT_TIMEOUT;\n            _this.built = _stellarBase.TransactionBuilder.cloneFrom(_this.built, {\n              fee: _this.built.fee,\n              timebounds: undefined,\n              sorobanData: _this.simulationData.transactionData\n            }).setTimeout(timeoutInSeconds).build();\n            signOpts = {\n              networkPassphrase: _this.options.networkPassphrase\n            };\n            if (_this.options.address) signOpts.address = _this.options.address;\n            if (_this.options.submit !== undefined) signOpts.submit = _this.options.submit;\n            if (_this.options.submitUrl) signOpts.submitUrl = _this.options.submitUrl;\n            _context2.next = 18;\n            return signTransaction(_this.built.toXDR(), signOpts);\n          case 18:\n            _yield$signTransactio = _context2.sent;\n            signature = _yield$signTransactio.signedTxXdr;\n            error = _yield$signTransactio.error;\n            _this.handleWalletError(error);\n            _this.signed = _stellarBase.TransactionBuilder.fromXDR(signature, _this.options.networkPassphrase);\n          case 23:\n          case \"end\":\n            return _context2.stop();\n        }\n      }, _callee2);\n    })));\n    _defineProperty(this, \"signAndSend\", _asyncToGenerator(_regeneratorRuntime().mark(function _callee3() {\n      var _ref6,\n        _ref6$force,\n        force,\n        _ref6$signTransaction,\n        signTransaction,\n        originalSubmit,\n        _args3 = arguments;\n      return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n        while (1) switch (_context3.prev = _context3.next) {\n          case 0:\n            _ref6 = _args3.length > 0 && _args3[0] !== undefined ? _args3[0] : {}, _ref6$force = _ref6.force, force = _ref6$force === void 0 ? false : _ref6$force, _ref6$signTransaction = _ref6.signTransaction, signTransaction = _ref6$signTransaction === void 0 ? _this.options.signTransaction : _ref6$signTransaction;\n            if (_this.signed) {\n              _context3.next = 10;\n              break;\n            }\n            originalSubmit = _this.options.submit;\n            if (_this.options.submit) {\n              _this.options.submit = false;\n            }\n            _context3.prev = 4;\n            _context3.next = 7;\n            return _this.sign({\n              force: force,\n              signTransaction: signTransaction\n            });\n          case 7:\n            _context3.prev = 7;\n            _this.options.submit = originalSubmit;\n            return _context3.finish(7);\n          case 10:\n            return _context3.abrupt(\"return\", _this.send());\n          case 11:\n          case \"end\":\n            return _context3.stop();\n        }\n      }, _callee3, null, [[4,, 7, 10]]);\n    })));\n    _defineProperty(this, \"needsNonInvokerSigningBy\", function () {\n      var _rawInvokeHostFunctio;\n      var _ref7 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n        _ref7$includeAlreadyS = _ref7.includeAlreadySigned,\n        includeAlreadySigned = _ref7$includeAlreadyS === void 0 ? false : _ref7$includeAlreadyS;\n      if (!_this.built) {\n        throw new Error(\"Transaction has not yet been simulated\");\n      }\n      if (!(\"operations\" in _this.built)) {\n        throw new Error(\"Unexpected Transaction type; no operations: \".concat(JSON.stringify(_this.built)));\n      }\n      var rawInvokeHostFunctionOp = _this.built.operations[0];\n      return _toConsumableArray(new Set(((_rawInvokeHostFunctio = rawInvokeHostFunctionOp.auth) !== null && _rawInvokeHostFunctio !== void 0 ? _rawInvokeHostFunctio : []).filter(function (entry) {\n        return entry.credentials().switch() === _stellarBase.xdr.SorobanCredentialsType.sorobanCredentialsAddress() && (includeAlreadySigned || entry.credentials().address().signature().switch().name === \"scvVoid\");\n      }).map(function (entry) {\n        return _stellarBase.Address.fromScAddress(entry.credentials().address().address()).toString();\n      })));\n    });\n    _defineProperty(this, \"signAuthEntries\", _asyncToGenerator(_regeneratorRuntime().mark(function _callee6() {\n      var _rawInvokeHostFunctio2;\n      var _ref9,\n        _ref9$expiration,\n        expiration,\n        _ref9$signAuthEntry,\n        signAuthEntry,\n        _ref9$address,\n        address,\n        _ref9$authorizeEntry,\n        authorizeEntry,\n        needsNonInvokerSigningBy,\n        rawInvokeHostFunctionOp,\n        authEntries,\n        _iterator,\n        _step,\n        _loop,\n        _ret,\n        _args7 = arguments;\n      return _regeneratorRuntime().wrap(function _callee6$(_context7) {\n        while (1) switch (_context7.prev = _context7.next) {\n          case 0:\n            _ref9 = _args7.length > 0 && _args7[0] !== undefined ? _args7[0] : {}, _ref9$expiration = _ref9.expiration, expiration = _ref9$expiration === void 0 ? _asyncToGenerator(_regeneratorRuntime().mark(function _callee4() {\n              return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n                while (1) switch (_context4.prev = _context4.next) {\n                  case 0:\n                    _context4.next = 2;\n                    return _this.server.getLatestLedger();\n                  case 2:\n                    _context4.t0 = _context4.sent.sequence;\n                    return _context4.abrupt(\"return\", _context4.t0 + 100);\n                  case 4:\n                  case \"end\":\n                    return _context4.stop();\n                }\n              }, _callee4);\n            }))() : _ref9$expiration, _ref9$signAuthEntry = _ref9.signAuthEntry, signAuthEntry = _ref9$signAuthEntry === void 0 ? _this.options.signAuthEntry : _ref9$signAuthEntry, _ref9$address = _ref9.address, address = _ref9$address === void 0 ? _this.options.publicKey : _ref9$address, _ref9$authorizeEntry = _ref9.authorizeEntry, authorizeEntry = _ref9$authorizeEntry === void 0 ? _stellarBase.authorizeEntry : _ref9$authorizeEntry;\n            if (_this.built) {\n              _context7.next = 3;\n              break;\n            }\n            throw new Error(\"Transaction has not yet been assembled or simulated\");\n          case 3:\n            if (!(authorizeEntry === _stellarBase.authorizeEntry)) {\n              _context7.next = 11;\n              break;\n            }\n            needsNonInvokerSigningBy = _this.needsNonInvokerSigningBy();\n            if (!(needsNonInvokerSigningBy.length === 0)) {\n              _context7.next = 7;\n              break;\n            }\n            throw new AssembledTransaction.Errors.NoUnsignedNonInvokerAuthEntries(\"No unsigned non-invoker auth entries; maybe you already signed?\");\n          case 7:\n            if (!(needsNonInvokerSigningBy.indexOf(address !== null && address !== void 0 ? address : \"\") === -1)) {\n              _context7.next = 9;\n              break;\n            }\n            throw new AssembledTransaction.Errors.NoSignatureNeeded(\"No auth entries for public key \\\"\".concat(address, \"\\\"\"));\n          case 9:\n            if (signAuthEntry) {\n              _context7.next = 11;\n              break;\n            }\n            throw new AssembledTransaction.Errors.NoSigner(\"You must provide `signAuthEntry` or a custom `authorizeEntry`\");\n          case 11:\n            rawInvokeHostFunctionOp = _this.built.operations[0];\n            authEntries = (_rawInvokeHostFunctio2 = rawInvokeHostFunctionOp.auth) !== null && _rawInvokeHostFunctio2 !== void 0 ? _rawInvokeHostFunctio2 : [];\n            _iterator = _createForOfIteratorHelper(authEntries.entries());\n            _context7.prev = 14;\n            _loop = _regeneratorRuntime().mark(function _loop() {\n              var _step$value, i, entry, credentials, authEntryAddress, sign;\n              return _regeneratorRuntime().wrap(function _loop$(_context6) {\n                while (1) switch (_context6.prev = _context6.next) {\n                  case 0:\n                    _step$value = _slicedToArray(_step.value, 2), i = _step$value[0], entry = _step$value[1];\n                    credentials = _stellarBase.xdr.SorobanCredentials.fromXDR(entry.credentials().toXDR());\n                    if (!(credentials.switch() !== _stellarBase.xdr.SorobanCredentialsType.sorobanCredentialsAddress())) {\n                      _context6.next = 4;\n                      break;\n                    }\n                    return _context6.abrupt(\"return\", 0);\n                  case 4:\n                    authEntryAddress = _stellarBase.Address.fromScAddress(credentials.address().address()).toString();\n                    if (!(authEntryAddress !== address)) {\n                      _context6.next = 7;\n                      break;\n                    }\n                    return _context6.abrupt(\"return\", 0);\n                  case 7:\n                    sign = signAuthEntry !== null && signAuthEntry !== void 0 ? signAuthEntry : Promise.resolve;\n                    _context6.t0 = authorizeEntry;\n                    _context6.t1 = entry;\n                    _context6.t2 = function () {\n                      var _ref11 = _asyncToGenerator(_regeneratorRuntime().mark(function _callee5(preimage) {\n                        var _yield$sign, signedAuthEntry, error;\n                        return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n                          while (1) switch (_context5.prev = _context5.next) {\n                            case 0:\n                              _context5.next = 2;\n                              return sign(preimage.toXDR(\"base64\"), {\n                                address: address\n                              });\n                            case 2:\n                              _yield$sign = _context5.sent;\n                              signedAuthEntry = _yield$sign.signedAuthEntry;\n                              error = _yield$sign.error;\n                              _this.handleWalletError(error);\n                              return _context5.abrupt(\"return\", Buffer.from(signedAuthEntry, \"base64\"));\n                            case 7:\n                            case \"end\":\n                              return _context5.stop();\n                          }\n                        }, _callee5);\n                      }));\n                      return function (_x) {\n                        return _ref11.apply(this, arguments);\n                      };\n                    }();\n                    _context6.next = 13;\n                    return expiration;\n                  case 13:\n                    _context6.t3 = _context6.sent;\n                    _context6.t4 = _this.options.networkPassphrase;\n                    _context6.next = 17;\n                    return (0, _context6.t0)(_context6.t1, _context6.t2, _context6.t3, _context6.t4);\n                  case 17:\n                    authEntries[i] = _context6.sent;\n                  case 18:\n                  case \"end\":\n                    return _context6.stop();\n                }\n              }, _loop);\n            });\n            _iterator.s();\n          case 17:\n            if ((_step = _iterator.n()).done) {\n              _context7.next = 24;\n              break;\n            }\n            return _context7.delegateYield(_loop(), \"t0\", 19);\n          case 19:\n            _ret = _context7.t0;\n            if (!(_ret === 0)) {\n              _context7.next = 22;\n              break;\n            }\n            return _context7.abrupt(\"continue\", 22);\n          case 22:\n            _context7.next = 17;\n            break;\n          case 24:\n            _context7.next = 29;\n            break;\n          case 26:\n            _context7.prev = 26;\n            _context7.t1 = _context7[\"catch\"](14);\n            _iterator.e(_context7.t1);\n          case 29:\n            _context7.prev = 29;\n            _iterator.f();\n            return _context7.finish(29);\n          case 32:\n          case \"end\":\n            return _context7.stop();\n        }\n      }, _callee6, null, [[14, 26, 29, 32]]);\n    })));\n    this.options = options;\n    this.options.simulate = (_this$options$simulat = this.options.simulate) !== null && _this$options$simulat !== void 0 ? _this$options$simulat : true;\n    this.server = new _rpc.Server(this.options.rpcUrl, {\n      allowHttp: (_this$options$allowHt = this.options.allowHttp) !== null && _this$options$allowHt !== void 0 ? _this$options$allowHt : false\n    });\n  }\n  return _createClass(AssembledTransaction, [{\n    key: \"toJSON\",\n    value: function toJSON() {\n      var _this$built;\n      return JSON.stringify({\n        method: this.options.method,\n        tx: (_this$built = this.built) === null || _this$built === void 0 ? void 0 : _this$built.toXDR(),\n        simulationResult: {\n          auth: this.simulationData.result.auth.map(function (a) {\n            return a.toXDR(\"base64\");\n          }),\n          retval: this.simulationData.result.retval.toXDR(\"base64\")\n        },\n        simulationTransactionData: this.simulationData.transactionData.toXDR(\"base64\")\n      });\n    }\n  }, {\n    key: \"toXDR\",\n    value: function toXDR() {\n      var _this$built2;\n      if (!this.built) throw new Error(\"Transaction has not yet been simulated; \" + \"call `AssembledTransaction.simulate` first.\");\n      return (_this$built2 = this.built) === null || _this$built2 === void 0 ? void 0 : _this$built2.toEnvelope().toXDR('base64');\n    }\n  }, {\n    key: \"handleWalletError\",\n    value: function handleWalletError(error) {\n      if (!error) return;\n      var message = error.message,\n        code = error.code;\n      var fullMessage = \"\".concat(message).concat(error.ext ? \" (\".concat(error.ext.join(', '), \")\") : '');\n      switch (code) {\n        case -1:\n          throw new AssembledTransaction.Errors.InternalWalletError(fullMessage);\n        case -2:\n          throw new AssembledTransaction.Errors.ExternalServiceError(fullMessage);\n        case -3:\n          throw new AssembledTransaction.Errors.InvalidClientRequest(fullMessage);\n        case -4:\n          throw new AssembledTransaction.Errors.UserRejected(fullMessage);\n        default:\n          throw new Error(\"Unhandled error: \".concat(fullMessage));\n      }\n    }\n  }, {\n    key: \"simulationData\",\n    get: function get() {\n      var _simulation$result;\n      if (this.simulationResult && this.simulationTransactionData) {\n        return {\n          result: this.simulationResult,\n          transactionData: this.simulationTransactionData\n        };\n      }\n      var simulation = this.simulation;\n      if (!simulation) {\n        throw new AssembledTransaction.Errors.NotYetSimulated(\"Transaction has not yet been simulated\");\n      }\n      if (_api.Api.isSimulationError(simulation)) {\n        throw new AssembledTransaction.Errors.SimulationFailed(\"Transaction simulation failed: \\\"\".concat(simulation.error, \"\\\"\"));\n      }\n      if (_api.Api.isSimulationRestore(simulation)) {\n        throw new AssembledTransaction.Errors.ExpiredState(\"You need to restore some contract state before you can invoke this method.\\n\" + 'You can set `restore` to true in the method options in order to ' + 'automatically restore the contract state when needed.');\n      }\n      this.simulationResult = (_simulation$result = simulation.result) !== null && _simulation$result !== void 0 ? _simulation$result : {\n        auth: [],\n        retval: _stellarBase.xdr.ScVal.scvVoid()\n      };\n      this.simulationTransactionData = simulation.transactionData.build();\n      return {\n        result: this.simulationResult,\n        transactionData: this.simulationTransactionData\n      };\n    }\n  }, {\n    key: \"result\",\n    get: function get() {\n      try {\n        if (!this.simulationData.result) {\n          throw new Error(\"No simulation result!\");\n        }\n        return this.options.parseResultXdr(this.simulationData.result.retval);\n      } catch (e) {\n        if (!(0, _utils.implementsToString)(e)) throw e;\n        var err = this.parseError(e.toString());\n        if (err) return err;\n        throw e;\n      }\n    }\n  }, {\n    key: \"parseError\",\n    value: function parseError(errorMessage) {\n      if (!this.options.errorTypes) return undefined;\n      var match = errorMessage.match(_utils.contractErrorPattern);\n      if (!match) return undefined;\n      var i = parseInt(match[1], 10);\n      var err = this.options.errorTypes[i];\n      if (!err) return undefined;\n      return new _rust_result.Err(err);\n    }\n  }, {\n    key: \"send\",\n    value: (function () {\n      var _send = _asyncToGenerator(_regeneratorRuntime().mark(function _callee7() {\n        var sent;\n        return _regeneratorRuntime().wrap(function _callee7$(_context8) {\n          while (1) switch (_context8.prev = _context8.next) {\n            case 0:\n              if (this.signed) {\n                _context8.next = 2;\n                break;\n              }\n              throw new Error(\"The transaction has not yet been signed. Run `sign` first, or use `signAndSend` instead.\");\n            case 2:\n              _context8.next = 4;\n              return _sent_transaction.SentTransaction.init(this);\n            case 4:\n              sent = _context8.sent;\n              return _context8.abrupt(\"return\", sent);\n            case 6:\n            case \"end\":\n              return _context8.stop();\n          }\n        }, _callee7, this);\n      }));\n      function send() {\n        return _send.apply(this, arguments);\n      }\n      return send;\n    }())\n  }, {\n    key: \"isReadCall\",\n    get: function get() {\n      var authsCount = this.simulationData.result.auth.length;\n      var writeLength = this.simulationData.transactionData.resources().footprint().readWrite().length;\n      return authsCount === 0 && writeLength === 0;\n    }\n  }, {\n    key: \"restoreFootprint\",\n    value: (function () {\n      var _restoreFootprint = _asyncToGenerator(_regeneratorRuntime().mark(function _callee8(restorePreamble, account) {\n        var restoreTx, sentTransaction;\n        return _regeneratorRuntime().wrap(function _callee8$(_context9) {\n          while (1) switch (_context9.prev = _context9.next) {\n            case 0:\n              if (this.options.signTransaction) {\n                _context9.next = 2;\n                break;\n              }\n              throw new Error(\"For automatic restore to work you must provide a signTransaction function when initializing your Client\");\n            case 2:\n              if (!(account !== null && account !== void 0)) {\n                _context9.next = 6;\n                break;\n              }\n              _context9.t0 = account;\n              _context9.next = 9;\n              break;\n            case 6:\n              _context9.next = 8;\n              return (0, _utils.getAccount)(this.options, this.server);\n            case 8:\n              _context9.t0 = _context9.sent;\n            case 9:\n              account = _context9.t0;\n              _context9.next = 12;\n              return AssembledTransaction.buildFootprintRestoreTransaction(_objectSpread({}, this.options), restorePreamble.transactionData, account, restorePreamble.minResourceFee);\n            case 12:\n              restoreTx = _context9.sent;\n              _context9.next = 15;\n              return restoreTx.signAndSend();\n            case 15:\n              sentTransaction = _context9.sent;\n              if (sentTransaction.getTransactionResponse) {\n                _context9.next = 18;\n                break;\n              }\n              throw new AssembledTransaction.Errors.RestorationFailure(\"The attempt at automatic restore failed. \\n\".concat(JSON.stringify(sentTransaction)));\n            case 18:\n              return _context9.abrupt(\"return\", sentTransaction.getTransactionResponse);\n            case 19:\n            case \"end\":\n              return _context9.stop();\n          }\n        }, _callee8, this);\n      }));\n      function restoreFootprint(_x2, _x3) {\n        return _restoreFootprint.apply(this, arguments);\n      }\n      return restoreFootprint;\n    }())\n  }], [{\n    key: \"fromJSON\",\n    value: function fromJSON(options, _ref12) {\n      var tx = _ref12.tx,\n        simulationResult = _ref12.simulationResult,\n        simulationTransactionData = _ref12.simulationTransactionData;\n      var txn = new AssembledTransaction(options);\n      txn.built = _stellarBase.TransactionBuilder.fromXDR(tx, options.networkPassphrase);\n      txn.simulationResult = {\n        auth: simulationResult.auth.map(function (a) {\n          return _stellarBase.xdr.SorobanAuthorizationEntry.fromXDR(a, \"base64\");\n        }),\n        retval: _stellarBase.xdr.ScVal.fromXDR(simulationResult.retval, \"base64\")\n      };\n      txn.simulationTransactionData = _stellarBase.xdr.SorobanTransactionData.fromXDR(simulationTransactionData, \"base64\");\n      return txn;\n    }\n  }, {\n    key: \"fromXDR\",\n    value: function fromXDR(options, encodedXDR, spec) {\n      var _operation$func;\n      var envelope = _stellarBase.xdr.TransactionEnvelope.fromXDR(encodedXDR, \"base64\");\n      var built = _stellarBase.TransactionBuilder.fromXDR(envelope, options.networkPassphrase);\n      var operation = built.operations[0];\n      if (!(operation !== null && operation !== void 0 && (_operation$func = operation.func) !== null && _operation$func !== void 0 && _operation$func.value) || typeof operation.func.value !== 'function') {\n        throw new Error(\"Could not extract the method from the transaction envelope.\");\n      }\n      var invokeContractArgs = operation.func.value();\n      if (!(invokeContractArgs !== null && invokeContractArgs !== void 0 && invokeContractArgs.functionName)) {\n        throw new Error(\"Could not extract the method name from the transaction envelope.\");\n      }\n      var method = invokeContractArgs.functionName().toString('utf-8');\n      var txn = new AssembledTransaction(_objectSpread(_objectSpread({}, options), {}, {\n        method: method,\n        parseResultXdr: function parseResultXdr(result) {\n          return spec.funcResToNative(method, result);\n        }\n      }));\n      txn.built = built;\n      return txn;\n    }\n  }, {\n    key: \"build\",\n    value: function build(options) {\n      var _options$args;\n      var contract = new _stellarBase.Contract(options.contractId);\n      return AssembledTransaction.buildWithOp(contract.call.apply(contract, [options.method].concat(_toConsumableArray((_options$args = options.args) !== null && _options$args !== void 0 ? _options$args : []))), options);\n    }\n  }, {\n    key: \"buildWithOp\",\n    value: (function () {\n      var _buildWithOp = _asyncToGenerator(_regeneratorRuntime().mark(function _callee9(operation, options) {\n        var _options$fee, _options$timeoutInSec;\n        var tx, account;\n        return _regeneratorRuntime().wrap(function _callee9$(_context10) {\n          while (1) switch (_context10.prev = _context10.next) {\n            case 0:\n              tx = new AssembledTransaction(options);\n              _context10.next = 3;\n              return (0, _utils.getAccount)(options, tx.server);\n            case 3:\n              account = _context10.sent;\n              tx.raw = new _stellarBase.TransactionBuilder(account, {\n                fee: (_options$fee = options.fee) !== null && _options$fee !== void 0 ? _options$fee : _stellarBase.BASE_FEE,\n                networkPassphrase: options.networkPassphrase\n              }).setTimeout((_options$timeoutInSec = options.timeoutInSeconds) !== null && _options$timeoutInSec !== void 0 ? _options$timeoutInSec : _types.DEFAULT_TIMEOUT).addOperation(operation);\n              if (!options.simulate) {\n                _context10.next = 8;\n                break;\n              }\n              _context10.next = 8;\n              return tx.simulate();\n            case 8:\n              return _context10.abrupt(\"return\", tx);\n            case 9:\n            case \"end\":\n              return _context10.stop();\n          }\n        }, _callee9);\n      }));\n      function buildWithOp(_x4, _x5) {\n        return _buildWithOp.apply(this, arguments);\n      }\n      return buildWithOp;\n    }())\n  }, {\n    key: \"buildFootprintRestoreTransaction\",\n    value: function () {\n      var _buildFootprintRestoreTransaction = _asyncToGenerator(_regeneratorRuntime().mark(function _callee10(options, sorobanData, account, fee) {\n        var _options$timeoutInSec2;\n        var tx;\n        return _regeneratorRuntime().wrap(function _callee10$(_context11) {\n          while (1) switch (_context11.prev = _context11.next) {\n            case 0:\n              tx = new AssembledTransaction(options);\n              tx.raw = new _stellarBase.TransactionBuilder(account, {\n                fee: fee,\n                networkPassphrase: options.networkPassphrase\n              }).setSorobanData(sorobanData instanceof _stellarBase.SorobanDataBuilder ? sorobanData.build() : sorobanData).addOperation(_stellarBase.Operation.restoreFootprint({})).setTimeout((_options$timeoutInSec2 = options.timeoutInSeconds) !== null && _options$timeoutInSec2 !== void 0 ? _options$timeoutInSec2 : _types.DEFAULT_TIMEOUT);\n              _context11.next = 4;\n              return tx.simulate({\n                restore: false\n              });\n            case 4:\n              return _context11.abrupt(\"return\", tx);\n            case 5:\n            case \"end\":\n              return _context11.stop();\n          }\n        }, _callee10);\n      }));\n      function buildFootprintRestoreTransaction(_x6, _x7, _x8, _x9) {\n        return _buildFootprintRestoreTransaction.apply(this, arguments);\n      }\n      return buildFootprintRestoreTransaction;\n    }()\n  }]);\n}();\n_defineProperty(AssembledTransaction, \"Errors\", {\n  ExpiredState: function (_Error) {\n    function ExpiredStateError() {\n      _classCallCheck(this, ExpiredStateError);\n      return _callSuper(this, ExpiredStateError, arguments);\n    }\n    _inherits(ExpiredStateError, _Error);\n    return _createClass(ExpiredStateError);\n  }(_wrapNativeSuper(Error)),\n  RestorationFailure: function (_Error2) {\n    function RestoreFailureError() {\n      _classCallCheck(this, RestoreFailureError);\n      return _callSuper(this, RestoreFailureError, arguments);\n    }\n    _inherits(RestoreFailureError, _Error2);\n    return _createClass(RestoreFailureError);\n  }(_wrapNativeSuper(Error)),\n  NeedsMoreSignatures: function (_Error3) {\n    function NeedsMoreSignaturesError() {\n      _classCallCheck(this, NeedsMoreSignaturesError);\n      return _callSuper(this, NeedsMoreSignaturesError, arguments);\n    }\n    _inherits(NeedsMoreSignaturesError, _Error3);\n    return _createClass(NeedsMoreSignaturesError);\n  }(_wrapNativeSuper(Error)),\n  NoSignatureNeeded: function (_Error4) {\n    function NoSignatureNeededError() {\n      _classCallCheck(this, NoSignatureNeededError);\n      return _callSuper(this, NoSignatureNeededError, arguments);\n    }\n    _inherits(NoSignatureNeededError, _Error4);\n    return _createClass(NoSignatureNeededError);\n  }(_wrapNativeSuper(Error)),\n  NoUnsignedNonInvokerAuthEntries: function (_Error5) {\n    function NoUnsignedNonInvokerAuthEntriesError() {\n      _classCallCheck(this, NoUnsignedNonInvokerAuthEntriesError);\n      return _callSuper(this, NoUnsignedNonInvokerAuthEntriesError, arguments);\n    }\n    _inherits(NoUnsignedNonInvokerAuthEntriesError, _Error5);\n    return _createClass(NoUnsignedNonInvokerAuthEntriesError);\n  }(_wrapNativeSuper(Error)),\n  NoSigner: function (_Error6) {\n    function NoSignerError() {\n      _classCallCheck(this, NoSignerError);\n      return _callSuper(this, NoSignerError, arguments);\n    }\n    _inherits(NoSignerError, _Error6);\n    return _createClass(NoSignerError);\n  }(_wrapNativeSuper(Error)),\n  NotYetSimulated: function (_Error7) {\n    function NotYetSimulatedError() {\n      _classCallCheck(this, NotYetSimulatedError);\n      return _callSuper(this, NotYetSimulatedError, arguments);\n    }\n    _inherits(NotYetSimulatedError, _Error7);\n    return _createClass(NotYetSimulatedError);\n  }(_wrapNativeSuper(Error)),\n  FakeAccount: function (_Error8) {\n    function FakeAccountError() {\n      _classCallCheck(this, FakeAccountError);\n      return _callSuper(this, FakeAccountError, arguments);\n    }\n    _inherits(FakeAccountError, _Error8);\n    return _createClass(FakeAccountError);\n  }(_wrapNativeSuper(Error)),\n  SimulationFailed: function (_Error9) {\n    function SimulationFailedError() {\n      _classCallCheck(this, SimulationFailedError);\n      return _callSuper(this, SimulationFailedError, arguments);\n    }\n    _inherits(SimulationFailedError, _Error9);\n    return _createClass(SimulationFailedError);\n  }(_wrapNativeSuper(Error)),\n  InternalWalletError: function (_Error10) {\n    function InternalWalletError() {\n      _classCallCheck(this, InternalWalletError);\n      return _callSuper(this, InternalWalletError, arguments);\n    }\n    _inherits(InternalWalletError, _Error10);\n    return _createClass(InternalWalletError);\n  }(_wrapNativeSuper(Error)),\n  ExternalServiceError: function (_Error11) {\n    function ExternalServiceError() {\n      _classCallCheck(this, ExternalServiceError);\n      return _callSuper(this, ExternalServiceError, arguments);\n    }\n    _inherits(ExternalServiceError, _Error11);\n    return _createClass(ExternalServiceError);\n  }(_wrapNativeSuper(Error)),\n  InvalidClientRequest: function (_Error12) {\n    function InvalidClientRequestError() {\n      _classCallCheck(this, InvalidClientRequestError);\n      return _callSuper(this, InvalidClientRequestError, arguments);\n    }\n    _inherits(InvalidClientRequestError, _Error12);\n    return _createClass(InvalidClientRequestError);\n  }(_wrapNativeSuper(Error)),\n  UserRejected: function (_Error13) {\n    function UserRejectedError() {\n      _classCallCheck(this, UserRejectedError);\n      return _callSuper(this, UserRejectedError, arguments);\n    }\n    _inherits(UserRejectedError, _Error13);\n    return _createClass(UserRejectedError);\n  }(_wrapNativeSuper(Error))\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHN0ZWxsYXIvc3RlbGxhci1zZGsvbGliL2NvbnRyYWN0L2Fzc2VtYmxlZF90cmFuc2FjdGlvbi5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYiw4Q0FBNkM7QUFDN0M7QUFDQSxDQUFDLEVBQUM7QUFDRiw0QkFBNEI7QUFDNUIsbUJBQW1CLG1CQUFPLENBQUMsc0ZBQXVCO0FBQ2xELFdBQVcsbUJBQU8sQ0FBQywwRUFBUTtBQUMzQixXQUFXLG1CQUFPLENBQUMsNEVBQVk7QUFDL0IsbUJBQW1CLG1CQUFPLENBQUMsNEZBQW9CO0FBQy9DLG1CQUFtQixtQkFBTyxDQUFDLDRGQUFlO0FBQzFDLGFBQWEsbUJBQU8sQ0FBQyxnRkFBUztBQUM5QixhQUFhLG1CQUFPLENBQUMsZ0ZBQVM7QUFDOUIsd0JBQXdCLG1CQUFPLENBQUMsc0dBQW9CO0FBQ3BELCtCQUErQjtBQUMvQiw0Q0FBNEMsdUVBQXVFLG1HQUFtRztBQUN0TixxQ0FBcUMseUdBQXlHO0FBQzlJLDJCQUEyQixxSEFBcUgsZ0RBQWdELGVBQWUsNENBQTRDLDJDQUEyQyxjQUFjO0FBQ3BULCtCQUErQix1REFBdUQseURBQXlELG1EQUFtRCx1R0FBdUcsb0JBQW9CLCtCQUErQixxQkFBcUIscUJBQXFCLHNFQUFzRSx3REFBd0QsZUFBZSxrRUFBa0UsaUNBQWlDO0FBQ3RuQiwrQkFBK0Isa0ZBQWtGLGdCQUFnQixvQkFBb0Isb0NBQW9DO0FBQ3pMLHVDQUF1QyxNQUFNLHFGQUFxRixNQUFNLGFBQWEsMkVBQTJFLGFBQWE7QUFDN08sZ0NBQWdDLE1BQU0sb0VBQW9FLFlBQVk7QUFDdEgsaUNBQWlDLGtHQUFrRyw0QkFBNEI7QUFDL0osOEJBQThCLCtGQUErRixpREFBaUQ7QUFDOUssc0JBQXNCLDJCQUEyQixvR0FBb0csbUJBQW1CLGlCQUFpQixzSEFBc0g7QUFDL1MseUJBQXlCLHdCQUF3QixvQ0FBb0MseUNBQXlDLGtDQUFrQywwREFBMEQsMEJBQTBCO0FBQ3BQLDRCQUE0QixnQkFBZ0Isc0JBQXNCLE9BQU8sa0RBQWtELHNEQUFzRCw4QkFBOEIsbUpBQW1KLHFFQUFxRSxLQUFLO0FBQzVhLGdDQUFnQztBQUNoQyw4QkFBOEI7QUFDOUIsdUNBQXVDLGtHQUFrRyxpQkFBaUIsd0NBQXdDLE1BQU0seUNBQXlDLDZCQUE2QixVQUFVLFlBQVksa0VBQWtFLFdBQVcsWUFBWSxpQkFBaUIsVUFBVSxNQUFNLDJFQUEyRSxVQUFVLG9CQUFvQjtBQUN2Z0IsOEJBQThCO0FBQzlCLDRDQUE0QywrRUFBK0UsVUFBVSx5R0FBeUcsY0FBYyxpQ0FBaUMsU0FBUyx3QkFBd0IsMEJBQTBCLFdBQVcsSUFBSSw2QkFBNkIscUJBQXFCLFVBQVUsWUFBWSxnS0FBZ0ssdUJBQXVCLFNBQVMsa0JBQWtCLGdCQUFnQixvQkFBb0Isa0JBQWtCLHVCQUF1QixxQkFBcUIsZ0JBQWdCLG9CQUFvQixNQUFNLHVDQUF1QyxVQUFVO0FBQzl6QixpQ0FBaUMsY0FBYyx1REFBdUQsYUFBYSxhQUFhLGdHQUFnRyxpQkFBaUIsK0NBQStDLGtIQUFrSCwyQkFBMkIscUNBQXFDLDBEQUEwRCxXQUFXLE1BQU0sU0FBUyxTQUFTLFlBQVksb0NBQW9DLHNCQUFzQiw0QkFBNEIseUhBQXlILHlCQUF5QixrQ0FBa0MsUUFBUSw2QkFBNkIsTUFBTSxTQUFTLHVDQUF1QyxZQUFZLFNBQVMsNkJBQTZCLGVBQWUsMEZBQTBGLHdCQUF3QixnQ0FBZ0MseUNBQXlDLFlBQVksMkJBQTJCLGNBQWMsR0FBRywwREFBMEQseUNBQXlDLHVGQUF1RixvQ0FBb0MsbURBQW1ELDRCQUE0Qiw0QkFBNEIsSUFBSSxLQUFLLCtCQUErQiw4QkFBOEIsOEJBQThCLDBCQUEwQiw0QkFBNEIsc0dBQXNHLDBCQUEwQixpQkFBaUIsMkJBQTJCLHFDQUFxQyxvQkFBb0IsaUJBQWlCLGtDQUFrQyxLQUFLLFlBQVksT0FBTyxxQkFBcUIsOEJBQThCLHdDQUF3QywrQkFBK0IscUJBQXFCLEtBQUssaUhBQWlILEtBQUsscUNBQXFDLFdBQVcseUJBQXlCLDBEQUEwRCxlQUFlLDRCQUE0QixTQUFTLHdCQUF3Qiw4QkFBOEIsSUFBSSxvQkFBb0IsU0FBUyxtQ0FBbUMsU0FBUyx1QkFBdUIsY0FBYyxrREFBa0QsaUNBQWlDLGlDQUFpQyw4QkFBOEIseURBQXlELE9BQU8sMkJBQTJCLDJCQUEyQiwrQ0FBK0MsU0FBUyxnQ0FBZ0MseUVBQXlFLHFDQUFxQyxxQ0FBcUMsMFJBQTBSLHdDQUF3Qyx3RkFBd0YsZUFBZSxrUUFBa1EsMkJBQTJCLFVBQVUsZ0JBQWdCLDhHQUE4Ryw0QkFBNEIsNEJBQTRCLHFEQUFxRCxzQkFBc0IscUJBQXFCLGdCQUFnQixvREFBb0QscUJBQXFCLHFCQUFxQixjQUFjLHlCQUF5QiwyQ0FBMkMsd0JBQXdCLGtDQUFrQyxPQUFPLGVBQWUsb0VBQW9FLGdEQUFnRCx1QkFBdUIsd0RBQXdELHVGQUF1RixxREFBcUQsa0RBQWtELDRDQUE0QyxzSUFBc0ksaURBQWlELCtGQUErRiwwQkFBMEIseU1BQXlNLDJCQUEyQixTQUFTLGVBQWUsbUdBQW1HLGNBQWMseUVBQXlFLCtCQUErQixnREFBZ0QsbUVBQW1FLHFDQUFxQyxJQUFJLGtGQUFrRixjQUFjLHVDQUF1Qyw4QkFBOEIsMkJBQTJCLDJCQUEyQiw0QkFBNEIsc0NBQXNDLE9BQU8sU0FBUyxJQUFJLGlCQUFpQiwyREFBMkQsaUNBQWlDLDJDQUEyQyxpREFBaUQseVJBQXlSLDBCQUEwQixnQkFBZ0IsdUNBQXVDLHFDQUFxQyxtQkFBbUIscURBQXFELHdCQUF3QixjQUFjLHdCQUF3Qiw0RkFBNEYseUNBQXlDLFFBQVEsT0FBTyw4Q0FBOEMsK0NBQStDLDZCQUE2Qiw0REFBNEQsY0FBYywyREFBMkQsNkRBQTZELGNBQWMsNkRBQTZELE9BQU8sK0RBQStELGtFQUFrRSxrQ0FBa0MseUNBQXlDLFFBQVEsT0FBTyw0QkFBNEIsb0ZBQW9GLFdBQVcsV0FBVyw4RkFBOEYsK0JBQStCLDJHQUEyRyxzQ0FBc0MscUNBQXFDLDROQUE0TiwrQkFBK0IseUNBQXlDLFFBQVEsT0FBTyw0QkFBNEIsZ0dBQWdHLDhCQUE4Qix5Q0FBeUMsUUFBUSxPQUFPLDRCQUE0QixzQkFBc0Isc0JBQXNCLDBCQUEwQixlQUFlLG9CQUFvQixjQUFjLHVDQUF1QyxtREFBbUQseUJBQXlCLGdEQUFnRCxrREFBa0Q7QUFDenJSLGlDQUFpQztBQUNqQyxnQ0FBZ0M7QUFDaEMsNkNBQTZDLFNBQVMsMERBQTBELFVBQVUsZ0NBQWdDO0FBQzFKLCtCQUErQjtBQUMvQixpQ0FBaUM7QUFDakMsbUNBQW1DLCtDQUErQyw4QkFBOEIsT0FBTyxrQkFBa0I7QUFDekksbURBQW1ELE1BQU0sZ0NBQWdDLFlBQVksb0JBQW9CO0FBQ3pILGdDQUFnQyxxQkFBcUIsNkJBQTZCLHFDQUFxQyx1QkFBdUIsb0JBQW9CLHlEQUF5RCxxQkFBcUIsMERBQTBELGdCQUFnQjtBQUMxVCxpQ0FBaUM7QUFDakMsbUNBQW1DLGdCQUFnQixjQUFjLE9BQU8sY0FBYztBQUN0RixpQ0FBaUMscUhBQXFILGNBQWM7QUFDcEssb0NBQW9DLG9FQUFvRSwwREFBMEQ7QUFDbEssNkJBQTZCLG1DQUFtQztBQUNoRSw4QkFBOEIsNENBQTRDLCtCQUErQixvQkFBb0IsbUNBQW1DLHNDQUFzQyx1RUFBdUU7QUFDN1EsMkJBQTJCLDRCQUE0QjtBQUN2RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4RUFBOEU7QUFDOUU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFFQUFxRTtBQUNyRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUZBQWlGO0FBQ2pGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1AsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpRkFBaUY7QUFDakY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1AsS0FBSztBQUNMO0FBQ0E7QUFDQSx3RkFBd0Y7QUFDeEY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0RBQXNEO0FBQ3REO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0EsT0FBTztBQUNQLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlGQUFpRjtBQUNqRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlO0FBQ2YsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlIQUF5SDtBQUN6SDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtCQUErQjtBQUMvQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlCQUF5QjtBQUN6Qix1QkFBdUI7QUFDdkI7QUFDQTtBQUNBO0FBQ0EscUJBQXFCO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZTtBQUNmLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0EsU0FBUztBQUNUO0FBQ0EsT0FBTztBQUNQO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBLGdGQUFnRjtBQUNoRjtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNULE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkZBQTJGO0FBQzNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1QsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1RUFBdUUsY0FBYztBQUNyRjtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZTtBQUNmO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVCxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsb0tBQW9LO0FBQ25MO0FBQ0E7QUFDQTtBQUNBLGVBQWU7QUFDZjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1QsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLEdBQUc7QUFDSCxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSCxDQUFDIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXFVTVUFSSU9cXERvY3VtZW50c1xcR2l0aHViXFxHYWxheHlLSi13YWxsZXQtLS1IYWNrXFx3ZWJcXG5vZGVfbW9kdWxlc1xcQHN0ZWxsYXJcXHN0ZWxsYXItc2RrXFxsaWJcXGNvbnRyYWN0XFxhc3NlbWJsZWRfdHJhbnNhY3Rpb24uanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLkFzc2VtYmxlZFRyYW5zYWN0aW9uID0gdm9pZCAwO1xudmFyIF9zdGVsbGFyQmFzZSA9IHJlcXVpcmUoXCJAc3RlbGxhci9zdGVsbGFyLWJhc2VcIik7XG52YXIgX3JwYyA9IHJlcXVpcmUoXCIuLi9ycGNcIik7XG52YXIgX2FwaSA9IHJlcXVpcmUoXCIuLi9ycGMvYXBpXCIpO1xudmFyIF90cmFuc2FjdGlvbiA9IHJlcXVpcmUoXCIuLi9ycGMvdHJhbnNhY3Rpb25cIik7XG52YXIgX3J1c3RfcmVzdWx0ID0gcmVxdWlyZShcIi4vcnVzdF9yZXN1bHRcIik7XG52YXIgX3V0aWxzID0gcmVxdWlyZShcIi4vdXRpbHNcIik7XG52YXIgX3R5cGVzID0gcmVxdWlyZShcIi4vdHlwZXNcIik7XG52YXIgX3NlbnRfdHJhbnNhY3Rpb24gPSByZXF1aXJlKFwiLi9zZW50X3RyYW5zYWN0aW9uXCIpO1xuZnVuY3Rpb24gX2NhbGxTdXBlcih0LCBvLCBlKSB7IHJldHVybiBvID0gX2dldFByb3RvdHlwZU9mKG8pLCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0LCBfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KCkgPyBSZWZsZWN0LmNvbnN0cnVjdChvLCBlIHx8IFtdLCBfZ2V0UHJvdG90eXBlT2YodCkuY29uc3RydWN0b3IpIDogby5hcHBseSh0LCBlKSk7IH1cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHQsIGUpIHsgaWYgKGUgJiYgKFwib2JqZWN0XCIgPT0gX3R5cGVvZihlKSB8fCBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIGUpKSByZXR1cm4gZTsgaWYgKHZvaWQgMCAhPT0gZSkgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkRlcml2ZWQgY29uc3RydWN0b3JzIG1heSBvbmx5IHJldHVybiBvYmplY3Qgb3IgdW5kZWZpbmVkXCIpOyByZXR1cm4gX2Fzc2VydFRoaXNJbml0aWFsaXplZCh0KTsgfVxuZnVuY3Rpb24gX2Fzc2VydFRoaXNJbml0aWFsaXplZChlKSB7IGlmICh2b2lkIDAgPT09IGUpIHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgcmV0dXJuIGU7IH1cbmZ1bmN0aW9uIF9pbmhlcml0cyh0LCBlKSB7IGlmIChcImZ1bmN0aW9uXCIgIT0gdHlwZW9mIGUgJiYgbnVsbCAhPT0gZSkgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uXCIpOyB0LnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoZSAmJiBlLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogdCwgd3JpdGFibGU6ICEwLCBjb25maWd1cmFibGU6ICEwIH0gfSksIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LCBcInByb3RvdHlwZVwiLCB7IHdyaXRhYmxlOiAhMSB9KSwgZSAmJiBfc2V0UHJvdG90eXBlT2YodCwgZSk7IH1cbmZ1bmN0aW9uIF93cmFwTmF0aXZlU3VwZXIodCkgeyB2YXIgciA9IFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgTWFwID8gbmV3IE1hcCgpIDogdm9pZCAwOyByZXR1cm4gX3dyYXBOYXRpdmVTdXBlciA9IGZ1bmN0aW9uIF93cmFwTmF0aXZlU3VwZXIodCkgeyBpZiAobnVsbCA9PT0gdCB8fCAhX2lzTmF0aXZlRnVuY3Rpb24odCkpIHJldHVybiB0OyBpZiAoXCJmdW5jdGlvblwiICE9IHR5cGVvZiB0KSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb25cIik7IGlmICh2b2lkIDAgIT09IHIpIHsgaWYgKHIuaGFzKHQpKSByZXR1cm4gci5nZXQodCk7IHIuc2V0KHQsIFdyYXBwZXIpOyB9IGZ1bmN0aW9uIFdyYXBwZXIoKSB7IHJldHVybiBfY29uc3RydWN0KHQsIGFyZ3VtZW50cywgX2dldFByb3RvdHlwZU9mKHRoaXMpLmNvbnN0cnVjdG9yKTsgfSByZXR1cm4gV3JhcHBlci5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHQucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBXcmFwcGVyLCBlbnVtZXJhYmxlOiAhMSwgd3JpdGFibGU6ICEwLCBjb25maWd1cmFibGU6ICEwIH0gfSksIF9zZXRQcm90b3R5cGVPZihXcmFwcGVyLCB0KTsgfSwgX3dyYXBOYXRpdmVTdXBlcih0KTsgfVxuZnVuY3Rpb24gX2NvbnN0cnVjdCh0LCBlLCByKSB7IGlmIChfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KCkpIHJldHVybiBSZWZsZWN0LmNvbnN0cnVjdC5hcHBseShudWxsLCBhcmd1bWVudHMpOyB2YXIgbyA9IFtudWxsXTsgby5wdXNoLmFwcGx5KG8sIGUpOyB2YXIgcCA9IG5ldyAodC5iaW5kLmFwcGx5KHQsIG8pKSgpOyByZXR1cm4gciAmJiBfc2V0UHJvdG90eXBlT2YocCwgci5wcm90b3R5cGUpLCBwOyB9XG5mdW5jdGlvbiBfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KCkgeyB0cnkgeyB2YXIgdCA9ICFCb29sZWFuLnByb3RvdHlwZS52YWx1ZU9mLmNhbGwoUmVmbGVjdC5jb25zdHJ1Y3QoQm9vbGVhbiwgW10sIGZ1bmN0aW9uICgpIHt9KSk7IH0gY2F0Y2ggKHQpIHt9IHJldHVybiAoX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCA9IGZ1bmN0aW9uIF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKSB7IHJldHVybiAhIXQ7IH0pKCk7IH1cbmZ1bmN0aW9uIF9pc05hdGl2ZUZ1bmN0aW9uKHQpIHsgdHJ5IHsgcmV0dXJuIC0xICE9PSBGdW5jdGlvbi50b1N0cmluZy5jYWxsKHQpLmluZGV4T2YoXCJbbmF0aXZlIGNvZGVdXCIpOyB9IGNhdGNoIChuKSB7IHJldHVybiBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIHQ7IH0gfVxuZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKHQsIGUpIHsgcmV0dXJuIF9zZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZi5iaW5kKCkgOiBmdW5jdGlvbiAodCwgZSkgeyByZXR1cm4gdC5fX3Byb3RvX18gPSBlLCB0OyB9LCBfc2V0UHJvdG90eXBlT2YodCwgZSk7IH1cbmZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZih0KSB7IHJldHVybiBfZ2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3QuZ2V0UHJvdG90eXBlT2YuYmluZCgpIDogZnVuY3Rpb24gKHQpIHsgcmV0dXJuIHQuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZih0KTsgfSwgX2dldFByb3RvdHlwZU9mKHQpOyB9XG5mdW5jdGlvbiBfdHlwZW9mKG8pIHsgXCJAYmFiZWwvaGVscGVycyAtIHR5cGVvZlwiOyByZXR1cm4gX3R5cGVvZiA9IFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgU3ltYm9sICYmIFwic3ltYm9sXCIgPT0gdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA/IGZ1bmN0aW9uIChvKSB7IHJldHVybiB0eXBlb2YgbzsgfSA6IGZ1bmN0aW9uIChvKSB7IHJldHVybiBvICYmIFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgU3ltYm9sICYmIG8uY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvOyB9LCBfdHlwZW9mKG8pOyB9XG5mdW5jdGlvbiBvd25LZXlzKGUsIHIpIHsgdmFyIHQgPSBPYmplY3Qua2V5cyhlKTsgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHsgdmFyIG8gPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKGUpOyByICYmIChvID0gby5maWx0ZXIoZnVuY3Rpb24gKHIpIHsgcmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoZSwgcikuZW51bWVyYWJsZTsgfSkpLCB0LnB1c2guYXBwbHkodCwgbyk7IH0gcmV0dXJuIHQ7IH1cbmZ1bmN0aW9uIF9vYmplY3RTcHJlYWQoZSkgeyBmb3IgKHZhciByID0gMTsgciA8IGFyZ3VtZW50cy5sZW5ndGg7IHIrKykgeyB2YXIgdCA9IG51bGwgIT0gYXJndW1lbnRzW3JdID8gYXJndW1lbnRzW3JdIDoge307IHIgJSAyID8gb3duS2V5cyhPYmplY3QodCksICEwKS5mb3JFYWNoKGZ1bmN0aW9uIChyKSB7IF9kZWZpbmVQcm9wZXJ0eShlLCByLCB0W3JdKTsgfSkgOiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyA/IE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKGUsIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKHQpKSA6IG93bktleXMoT2JqZWN0KHQpKS5mb3JFYWNoKGZ1bmN0aW9uIChyKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLCByLCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHQsIHIpKTsgfSk7IH0gcmV0dXJuIGU7IH1cbmZ1bmN0aW9uIF9zbGljZWRUb0FycmF5KHIsIGUpIHsgcmV0dXJuIF9hcnJheVdpdGhIb2xlcyhyKSB8fCBfaXRlcmFibGVUb0FycmF5TGltaXQociwgZSkgfHwgX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5KHIsIGUpIHx8IF9ub25JdGVyYWJsZVJlc3QoKTsgfVxuZnVuY3Rpb24gX25vbkl0ZXJhYmxlUmVzdCgpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkludmFsaWQgYXR0ZW1wdCB0byBkZXN0cnVjdHVyZSBub24taXRlcmFibGUgaW5zdGFuY2UuXFxuSW4gb3JkZXIgdG8gYmUgaXRlcmFibGUsIG5vbi1hcnJheSBvYmplY3RzIG11c3QgaGF2ZSBhIFtTeW1ib2wuaXRlcmF0b3JdKCkgbWV0aG9kLlwiKTsgfVxuZnVuY3Rpb24gX2l0ZXJhYmxlVG9BcnJheUxpbWl0KHIsIGwpIHsgdmFyIHQgPSBudWxsID09IHIgPyBudWxsIDogXCJ1bmRlZmluZWRcIiAhPSB0eXBlb2YgU3ltYm9sICYmIHJbU3ltYm9sLml0ZXJhdG9yXSB8fCByW1wiQEBpdGVyYXRvclwiXTsgaWYgKG51bGwgIT0gdCkgeyB2YXIgZSwgbiwgaSwgdSwgYSA9IFtdLCBmID0gITAsIG8gPSAhMTsgdHJ5IHsgaWYgKGkgPSAodCA9IHQuY2FsbChyKSkubmV4dCwgMCA9PT0gbCkgeyBpZiAoT2JqZWN0KHQpICE9PSB0KSByZXR1cm47IGYgPSAhMTsgfSBlbHNlIGZvciAoOyAhKGYgPSAoZSA9IGkuY2FsbCh0KSkuZG9uZSkgJiYgKGEucHVzaChlLnZhbHVlKSwgYS5sZW5ndGggIT09IGwpOyBmID0gITApOyB9IGNhdGNoIChyKSB7IG8gPSAhMCwgbiA9IHI7IH0gZmluYWxseSB7IHRyeSB7IGlmICghZiAmJiBudWxsICE9IHQucmV0dXJuICYmICh1ID0gdC5yZXR1cm4oKSwgT2JqZWN0KHUpICE9PSB1KSkgcmV0dXJuOyB9IGZpbmFsbHkgeyBpZiAobykgdGhyb3cgbjsgfSB9IHJldHVybiBhOyB9IH1cbmZ1bmN0aW9uIF9hcnJheVdpdGhIb2xlcyhyKSB7IGlmIChBcnJheS5pc0FycmF5KHIpKSByZXR1cm4gcjsgfVxuZnVuY3Rpb24gX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIociwgZSkgeyB2YXIgdCA9IFwidW5kZWZpbmVkXCIgIT0gdHlwZW9mIFN5bWJvbCAmJiByW1N5bWJvbC5pdGVyYXRvcl0gfHwgcltcIkBAaXRlcmF0b3JcIl07IGlmICghdCkgeyBpZiAoQXJyYXkuaXNBcnJheShyKSB8fCAodCA9IF91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShyKSkgfHwgZSAmJiByICYmIFwibnVtYmVyXCIgPT0gdHlwZW9mIHIubGVuZ3RoKSB7IHQgJiYgKHIgPSB0KTsgdmFyIF9uID0gMCwgRiA9IGZ1bmN0aW9uIEYoKSB7fTsgcmV0dXJuIHsgczogRiwgbjogZnVuY3Rpb24gbigpIHsgcmV0dXJuIF9uID49IHIubGVuZ3RoID8geyBkb25lOiAhMCB9IDogeyBkb25lOiAhMSwgdmFsdWU6IHJbX24rK10gfTsgfSwgZTogZnVuY3Rpb24gZShyKSB7IHRocm93IHI7IH0sIGY6IEYgfTsgfSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiSW52YWxpZCBhdHRlbXB0IHRvIGl0ZXJhdGUgbm9uLWl0ZXJhYmxlIGluc3RhbmNlLlxcbkluIG9yZGVyIHRvIGJlIGl0ZXJhYmxlLCBub24tYXJyYXkgb2JqZWN0cyBtdXN0IGhhdmUgYSBbU3ltYm9sLml0ZXJhdG9yXSgpIG1ldGhvZC5cIik7IH0gdmFyIG8sIGEgPSAhMCwgdSA9ICExOyByZXR1cm4geyBzOiBmdW5jdGlvbiBzKCkgeyB0ID0gdC5jYWxsKHIpOyB9LCBuOiBmdW5jdGlvbiBuKCkgeyB2YXIgciA9IHQubmV4dCgpOyByZXR1cm4gYSA9IHIuZG9uZSwgcjsgfSwgZTogZnVuY3Rpb24gZShyKSB7IHUgPSAhMCwgbyA9IHI7IH0sIGY6IGZ1bmN0aW9uIGYoKSB7IHRyeSB7IGEgfHwgbnVsbCA9PSB0LnJldHVybiB8fCB0LnJldHVybigpOyB9IGZpbmFsbHkgeyBpZiAodSkgdGhyb3cgbzsgfSB9IH07IH1cbmZ1bmN0aW9uIF9yZWdlbmVyYXRvclJ1bnRpbWUoKSB7IFwidXNlIHN0cmljdFwiOyBfcmVnZW5lcmF0b3JSdW50aW1lID0gZnVuY3Rpb24gX3JlZ2VuZXJhdG9yUnVudGltZSgpIHsgcmV0dXJuIGU7IH07IHZhciB0LCBlID0ge30sIHIgPSBPYmplY3QucHJvdG90eXBlLCBuID0gci5oYXNPd25Qcm9wZXJ0eSwgbyA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSB8fCBmdW5jdGlvbiAodCwgZSwgcikgeyB0W2VdID0gci52YWx1ZTsgfSwgaSA9IFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgU3ltYm9sID8gU3ltYm9sIDoge30sIGEgPSBpLml0ZXJhdG9yIHx8IFwiQEBpdGVyYXRvclwiLCBjID0gaS5hc3luY0l0ZXJhdG9yIHx8IFwiQEBhc3luY0l0ZXJhdG9yXCIsIHUgPSBpLnRvU3RyaW5nVGFnIHx8IFwiQEB0b1N0cmluZ1RhZ1wiOyBmdW5jdGlvbiBkZWZpbmUodCwgZSwgcikgeyByZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KHQsIGUsIHsgdmFsdWU6IHIsIGVudW1lcmFibGU6ICEwLCBjb25maWd1cmFibGU6ICEwLCB3cml0YWJsZTogITAgfSksIHRbZV07IH0gdHJ5IHsgZGVmaW5lKHt9LCBcIlwiKTsgfSBjYXRjaCAodCkgeyBkZWZpbmUgPSBmdW5jdGlvbiBkZWZpbmUodCwgZSwgcikgeyByZXR1cm4gdFtlXSA9IHI7IH07IH0gZnVuY3Rpb24gd3JhcCh0LCBlLCByLCBuKSB7IHZhciBpID0gZSAmJiBlLnByb3RvdHlwZSBpbnN0YW5jZW9mIEdlbmVyYXRvciA/IGUgOiBHZW5lcmF0b3IsIGEgPSBPYmplY3QuY3JlYXRlKGkucHJvdG90eXBlKSwgYyA9IG5ldyBDb250ZXh0KG4gfHwgW10pOyByZXR1cm4gbyhhLCBcIl9pbnZva2VcIiwgeyB2YWx1ZTogbWFrZUludm9rZU1ldGhvZCh0LCByLCBjKSB9KSwgYTsgfSBmdW5jdGlvbiB0cnlDYXRjaCh0LCBlLCByKSB7IHRyeSB7IHJldHVybiB7IHR5cGU6IFwibm9ybWFsXCIsIGFyZzogdC5jYWxsKGUsIHIpIH07IH0gY2F0Y2ggKHQpIHsgcmV0dXJuIHsgdHlwZTogXCJ0aHJvd1wiLCBhcmc6IHQgfTsgfSB9IGUud3JhcCA9IHdyYXA7IHZhciBoID0gXCJzdXNwZW5kZWRTdGFydFwiLCBsID0gXCJzdXNwZW5kZWRZaWVsZFwiLCBmID0gXCJleGVjdXRpbmdcIiwgcyA9IFwiY29tcGxldGVkXCIsIHkgPSB7fTsgZnVuY3Rpb24gR2VuZXJhdG9yKCkge30gZnVuY3Rpb24gR2VuZXJhdG9yRnVuY3Rpb24oKSB7fSBmdW5jdGlvbiBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZSgpIHt9IHZhciBwID0ge307IGRlZmluZShwLCBhLCBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9KTsgdmFyIGQgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YsIHYgPSBkICYmIGQoZCh2YWx1ZXMoW10pKSk7IHYgJiYgdiAhPT0gciAmJiBuLmNhbGwodiwgYSkgJiYgKHAgPSB2KTsgdmFyIGcgPSBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZS5wcm90b3R5cGUgPSBHZW5lcmF0b3IucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShwKTsgZnVuY3Rpb24gZGVmaW5lSXRlcmF0b3JNZXRob2RzKHQpIHsgW1wibmV4dFwiLCBcInRocm93XCIsIFwicmV0dXJuXCJdLmZvckVhY2goZnVuY3Rpb24gKGUpIHsgZGVmaW5lKHQsIGUsIGZ1bmN0aW9uICh0KSB7IHJldHVybiB0aGlzLl9pbnZva2UoZSwgdCk7IH0pOyB9KTsgfSBmdW5jdGlvbiBBc3luY0l0ZXJhdG9yKHQsIGUpIHsgZnVuY3Rpb24gaW52b2tlKHIsIG8sIGksIGEpIHsgdmFyIGMgPSB0cnlDYXRjaCh0W3JdLCB0LCBvKTsgaWYgKFwidGhyb3dcIiAhPT0gYy50eXBlKSB7IHZhciB1ID0gYy5hcmcsIGggPSB1LnZhbHVlOyByZXR1cm4gaCAmJiBcIm9iamVjdFwiID09IF90eXBlb2YoaCkgJiYgbi5jYWxsKGgsIFwiX19hd2FpdFwiKSA/IGUucmVzb2x2ZShoLl9fYXdhaXQpLnRoZW4oZnVuY3Rpb24gKHQpIHsgaW52b2tlKFwibmV4dFwiLCB0LCBpLCBhKTsgfSwgZnVuY3Rpb24gKHQpIHsgaW52b2tlKFwidGhyb3dcIiwgdCwgaSwgYSk7IH0pIDogZS5yZXNvbHZlKGgpLnRoZW4oZnVuY3Rpb24gKHQpIHsgdS52YWx1ZSA9IHQsIGkodSk7IH0sIGZ1bmN0aW9uICh0KSB7IHJldHVybiBpbnZva2UoXCJ0aHJvd1wiLCB0LCBpLCBhKTsgfSk7IH0gYShjLmFyZyk7IH0gdmFyIHI7IG8odGhpcywgXCJfaW52b2tlXCIsIHsgdmFsdWU6IGZ1bmN0aW9uIHZhbHVlKHQsIG4pIHsgZnVuY3Rpb24gY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmcoKSB7IHJldHVybiBuZXcgZShmdW5jdGlvbiAoZSwgcikgeyBpbnZva2UodCwgbiwgZSwgcik7IH0pOyB9IHJldHVybiByID0gciA/IHIudGhlbihjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZywgY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmcpIDogY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmcoKTsgfSB9KTsgfSBmdW5jdGlvbiBtYWtlSW52b2tlTWV0aG9kKGUsIHIsIG4pIHsgdmFyIG8gPSBoOyByZXR1cm4gZnVuY3Rpb24gKGksIGEpIHsgaWYgKG8gPT09IGYpIHRocm93IEVycm9yKFwiR2VuZXJhdG9yIGlzIGFscmVhZHkgcnVubmluZ1wiKTsgaWYgKG8gPT09IHMpIHsgaWYgKFwidGhyb3dcIiA9PT0gaSkgdGhyb3cgYTsgcmV0dXJuIHsgdmFsdWU6IHQsIGRvbmU6ICEwIH07IH0gZm9yIChuLm1ldGhvZCA9IGksIG4uYXJnID0gYTs7KSB7IHZhciBjID0gbi5kZWxlZ2F0ZTsgaWYgKGMpIHsgdmFyIHUgPSBtYXliZUludm9rZURlbGVnYXRlKGMsIG4pOyBpZiAodSkgeyBpZiAodSA9PT0geSkgY29udGludWU7IHJldHVybiB1OyB9IH0gaWYgKFwibmV4dFwiID09PSBuLm1ldGhvZCkgbi5zZW50ID0gbi5fc2VudCA9IG4uYXJnO2Vsc2UgaWYgKFwidGhyb3dcIiA9PT0gbi5tZXRob2QpIHsgaWYgKG8gPT09IGgpIHRocm93IG8gPSBzLCBuLmFyZzsgbi5kaXNwYXRjaEV4Y2VwdGlvbihuLmFyZyk7IH0gZWxzZSBcInJldHVyblwiID09PSBuLm1ldGhvZCAmJiBuLmFicnVwdChcInJldHVyblwiLCBuLmFyZyk7IG8gPSBmOyB2YXIgcCA9IHRyeUNhdGNoKGUsIHIsIG4pOyBpZiAoXCJub3JtYWxcIiA9PT0gcC50eXBlKSB7IGlmIChvID0gbi5kb25lID8gcyA6IGwsIHAuYXJnID09PSB5KSBjb250aW51ZTsgcmV0dXJuIHsgdmFsdWU6IHAuYXJnLCBkb25lOiBuLmRvbmUgfTsgfSBcInRocm93XCIgPT09IHAudHlwZSAmJiAobyA9IHMsIG4ubWV0aG9kID0gXCJ0aHJvd1wiLCBuLmFyZyA9IHAuYXJnKTsgfSB9OyB9IGZ1bmN0aW9uIG1heWJlSW52b2tlRGVsZWdhdGUoZSwgcikgeyB2YXIgbiA9IHIubWV0aG9kLCBvID0gZS5pdGVyYXRvcltuXTsgaWYgKG8gPT09IHQpIHJldHVybiByLmRlbGVnYXRlID0gbnVsbCwgXCJ0aHJvd1wiID09PSBuICYmIGUuaXRlcmF0b3IucmV0dXJuICYmIChyLm1ldGhvZCA9IFwicmV0dXJuXCIsIHIuYXJnID0gdCwgbWF5YmVJbnZva2VEZWxlZ2F0ZShlLCByKSwgXCJ0aHJvd1wiID09PSByLm1ldGhvZCkgfHwgXCJyZXR1cm5cIiAhPT0gbiAmJiAoci5tZXRob2QgPSBcInRocm93XCIsIHIuYXJnID0gbmV3IFR5cGVFcnJvcihcIlRoZSBpdGVyYXRvciBkb2VzIG5vdCBwcm92aWRlIGEgJ1wiICsgbiArIFwiJyBtZXRob2RcIikpLCB5OyB2YXIgaSA9IHRyeUNhdGNoKG8sIGUuaXRlcmF0b3IsIHIuYXJnKTsgaWYgKFwidGhyb3dcIiA9PT0gaS50eXBlKSByZXR1cm4gci5tZXRob2QgPSBcInRocm93XCIsIHIuYXJnID0gaS5hcmcsIHIuZGVsZWdhdGUgPSBudWxsLCB5OyB2YXIgYSA9IGkuYXJnOyByZXR1cm4gYSA/IGEuZG9uZSA/IChyW2UucmVzdWx0TmFtZV0gPSBhLnZhbHVlLCByLm5leHQgPSBlLm5leHRMb2MsIFwicmV0dXJuXCIgIT09IHIubWV0aG9kICYmIChyLm1ldGhvZCA9IFwibmV4dFwiLCByLmFyZyA9IHQpLCByLmRlbGVnYXRlID0gbnVsbCwgeSkgOiBhIDogKHIubWV0aG9kID0gXCJ0aHJvd1wiLCByLmFyZyA9IG5ldyBUeXBlRXJyb3IoXCJpdGVyYXRvciByZXN1bHQgaXMgbm90IGFuIG9iamVjdFwiKSwgci5kZWxlZ2F0ZSA9IG51bGwsIHkpOyB9IGZ1bmN0aW9uIHB1c2hUcnlFbnRyeSh0KSB7IHZhciBlID0geyB0cnlMb2M6IHRbMF0gfTsgMSBpbiB0ICYmIChlLmNhdGNoTG9jID0gdFsxXSksIDIgaW4gdCAmJiAoZS5maW5hbGx5TG9jID0gdFsyXSwgZS5hZnRlckxvYyA9IHRbM10pLCB0aGlzLnRyeUVudHJpZXMucHVzaChlKTsgfSBmdW5jdGlvbiByZXNldFRyeUVudHJ5KHQpIHsgdmFyIGUgPSB0LmNvbXBsZXRpb24gfHwge307IGUudHlwZSA9IFwibm9ybWFsXCIsIGRlbGV0ZSBlLmFyZywgdC5jb21wbGV0aW9uID0gZTsgfSBmdW5jdGlvbiBDb250ZXh0KHQpIHsgdGhpcy50cnlFbnRyaWVzID0gW3sgdHJ5TG9jOiBcInJvb3RcIiB9XSwgdC5mb3JFYWNoKHB1c2hUcnlFbnRyeSwgdGhpcyksIHRoaXMucmVzZXQoITApOyB9IGZ1bmN0aW9uIHZhbHVlcyhlKSB7IGlmIChlIHx8IFwiXCIgPT09IGUpIHsgdmFyIHIgPSBlW2FdOyBpZiAocikgcmV0dXJuIHIuY2FsbChlKTsgaWYgKFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgZS5uZXh0KSByZXR1cm4gZTsgaWYgKCFpc05hTihlLmxlbmd0aCkpIHsgdmFyIG8gPSAtMSwgaSA9IGZ1bmN0aW9uIG5leHQoKSB7IGZvciAoOyArK28gPCBlLmxlbmd0aDspIGlmIChuLmNhbGwoZSwgbykpIHJldHVybiBuZXh0LnZhbHVlID0gZVtvXSwgbmV4dC5kb25lID0gITEsIG5leHQ7IHJldHVybiBuZXh0LnZhbHVlID0gdCwgbmV4dC5kb25lID0gITAsIG5leHQ7IH07IHJldHVybiBpLm5leHQgPSBpOyB9IH0gdGhyb3cgbmV3IFR5cGVFcnJvcihfdHlwZW9mKGUpICsgXCIgaXMgbm90IGl0ZXJhYmxlXCIpOyB9IHJldHVybiBHZW5lcmF0b3JGdW5jdGlvbi5wcm90b3R5cGUgPSBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZSwgbyhnLCBcImNvbnN0cnVjdG9yXCIsIHsgdmFsdWU6IEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlLCBjb25maWd1cmFibGU6ICEwIH0pLCBvKEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlLCBcImNvbnN0cnVjdG9yXCIsIHsgdmFsdWU6IEdlbmVyYXRvckZ1bmN0aW9uLCBjb25maWd1cmFibGU6ICEwIH0pLCBHZW5lcmF0b3JGdW5jdGlvbi5kaXNwbGF5TmFtZSA9IGRlZmluZShHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZSwgdSwgXCJHZW5lcmF0b3JGdW5jdGlvblwiKSwgZS5pc0dlbmVyYXRvckZ1bmN0aW9uID0gZnVuY3Rpb24gKHQpIHsgdmFyIGUgPSBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIHQgJiYgdC5jb25zdHJ1Y3RvcjsgcmV0dXJuICEhZSAmJiAoZSA9PT0gR2VuZXJhdG9yRnVuY3Rpb24gfHwgXCJHZW5lcmF0b3JGdW5jdGlvblwiID09PSAoZS5kaXNwbGF5TmFtZSB8fCBlLm5hbWUpKTsgfSwgZS5tYXJrID0gZnVuY3Rpb24gKHQpIHsgcmV0dXJuIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZih0LCBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZSkgOiAodC5fX3Byb3RvX18gPSBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZSwgZGVmaW5lKHQsIHUsIFwiR2VuZXJhdG9yRnVuY3Rpb25cIikpLCB0LnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoZyksIHQ7IH0sIGUuYXdyYXAgPSBmdW5jdGlvbiAodCkgeyByZXR1cm4geyBfX2F3YWl0OiB0IH07IH0sIGRlZmluZUl0ZXJhdG9yTWV0aG9kcyhBc3luY0l0ZXJhdG9yLnByb3RvdHlwZSksIGRlZmluZShBc3luY0l0ZXJhdG9yLnByb3RvdHlwZSwgYywgZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfSksIGUuQXN5bmNJdGVyYXRvciA9IEFzeW5jSXRlcmF0b3IsIGUuYXN5bmMgPSBmdW5jdGlvbiAodCwgciwgbiwgbywgaSkgeyB2b2lkIDAgPT09IGkgJiYgKGkgPSBQcm9taXNlKTsgdmFyIGEgPSBuZXcgQXN5bmNJdGVyYXRvcih3cmFwKHQsIHIsIG4sIG8pLCBpKTsgcmV0dXJuIGUuaXNHZW5lcmF0b3JGdW5jdGlvbihyKSA/IGEgOiBhLm5leHQoKS50aGVuKGZ1bmN0aW9uICh0KSB7IHJldHVybiB0LmRvbmUgPyB0LnZhbHVlIDogYS5uZXh0KCk7IH0pOyB9LCBkZWZpbmVJdGVyYXRvck1ldGhvZHMoZyksIGRlZmluZShnLCB1LCBcIkdlbmVyYXRvclwiKSwgZGVmaW5lKGcsIGEsIGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH0pLCBkZWZpbmUoZywgXCJ0b1N0cmluZ1wiLCBmdW5jdGlvbiAoKSB7IHJldHVybiBcIltvYmplY3QgR2VuZXJhdG9yXVwiOyB9KSwgZS5rZXlzID0gZnVuY3Rpb24gKHQpIHsgdmFyIGUgPSBPYmplY3QodCksIHIgPSBbXTsgZm9yICh2YXIgbiBpbiBlKSByLnB1c2gobik7IHJldHVybiByLnJldmVyc2UoKSwgZnVuY3Rpb24gbmV4dCgpIHsgZm9yICg7IHIubGVuZ3RoOykgeyB2YXIgdCA9IHIucG9wKCk7IGlmICh0IGluIGUpIHJldHVybiBuZXh0LnZhbHVlID0gdCwgbmV4dC5kb25lID0gITEsIG5leHQ7IH0gcmV0dXJuIG5leHQuZG9uZSA9ICEwLCBuZXh0OyB9OyB9LCBlLnZhbHVlcyA9IHZhbHVlcywgQ29udGV4dC5wcm90b3R5cGUgPSB7IGNvbnN0cnVjdG9yOiBDb250ZXh0LCByZXNldDogZnVuY3Rpb24gcmVzZXQoZSkgeyBpZiAodGhpcy5wcmV2ID0gMCwgdGhpcy5uZXh0ID0gMCwgdGhpcy5zZW50ID0gdGhpcy5fc2VudCA9IHQsIHRoaXMuZG9uZSA9ICExLCB0aGlzLmRlbGVnYXRlID0gbnVsbCwgdGhpcy5tZXRob2QgPSBcIm5leHRcIiwgdGhpcy5hcmcgPSB0LCB0aGlzLnRyeUVudHJpZXMuZm9yRWFjaChyZXNldFRyeUVudHJ5KSwgIWUpIGZvciAodmFyIHIgaW4gdGhpcykgXCJ0XCIgPT09IHIuY2hhckF0KDApICYmIG4uY2FsbCh0aGlzLCByKSAmJiAhaXNOYU4oK3Iuc2xpY2UoMSkpICYmICh0aGlzW3JdID0gdCk7IH0sIHN0b3A6IGZ1bmN0aW9uIHN0b3AoKSB7IHRoaXMuZG9uZSA9ICEwOyB2YXIgdCA9IHRoaXMudHJ5RW50cmllc1swXS5jb21wbGV0aW9uOyBpZiAoXCJ0aHJvd1wiID09PSB0LnR5cGUpIHRocm93IHQuYXJnOyByZXR1cm4gdGhpcy5ydmFsOyB9LCBkaXNwYXRjaEV4Y2VwdGlvbjogZnVuY3Rpb24gZGlzcGF0Y2hFeGNlcHRpb24oZSkgeyBpZiAodGhpcy5kb25lKSB0aHJvdyBlOyB2YXIgciA9IHRoaXM7IGZ1bmN0aW9uIGhhbmRsZShuLCBvKSB7IHJldHVybiBhLnR5cGUgPSBcInRocm93XCIsIGEuYXJnID0gZSwgci5uZXh0ID0gbiwgbyAmJiAoci5tZXRob2QgPSBcIm5leHRcIiwgci5hcmcgPSB0KSwgISFvOyB9IGZvciAodmFyIG8gPSB0aGlzLnRyeUVudHJpZXMubGVuZ3RoIC0gMTsgbyA+PSAwOyAtLW8pIHsgdmFyIGkgPSB0aGlzLnRyeUVudHJpZXNbb10sIGEgPSBpLmNvbXBsZXRpb247IGlmIChcInJvb3RcIiA9PT0gaS50cnlMb2MpIHJldHVybiBoYW5kbGUoXCJlbmRcIik7IGlmIChpLnRyeUxvYyA8PSB0aGlzLnByZXYpIHsgdmFyIGMgPSBuLmNhbGwoaSwgXCJjYXRjaExvY1wiKSwgdSA9IG4uY2FsbChpLCBcImZpbmFsbHlMb2NcIik7IGlmIChjICYmIHUpIHsgaWYgKHRoaXMucHJldiA8IGkuY2F0Y2hMb2MpIHJldHVybiBoYW5kbGUoaS5jYXRjaExvYywgITApOyBpZiAodGhpcy5wcmV2IDwgaS5maW5hbGx5TG9jKSByZXR1cm4gaGFuZGxlKGkuZmluYWxseUxvYyk7IH0gZWxzZSBpZiAoYykgeyBpZiAodGhpcy5wcmV2IDwgaS5jYXRjaExvYykgcmV0dXJuIGhhbmRsZShpLmNhdGNoTG9jLCAhMCk7IH0gZWxzZSB7IGlmICghdSkgdGhyb3cgRXJyb3IoXCJ0cnkgc3RhdGVtZW50IHdpdGhvdXQgY2F0Y2ggb3IgZmluYWxseVwiKTsgaWYgKHRoaXMucHJldiA8IGkuZmluYWxseUxvYykgcmV0dXJuIGhhbmRsZShpLmZpbmFsbHlMb2MpOyB9IH0gfSB9LCBhYnJ1cHQ6IGZ1bmN0aW9uIGFicnVwdCh0LCBlKSB7IGZvciAodmFyIHIgPSB0aGlzLnRyeUVudHJpZXMubGVuZ3RoIC0gMTsgciA+PSAwOyAtLXIpIHsgdmFyIG8gPSB0aGlzLnRyeUVudHJpZXNbcl07IGlmIChvLnRyeUxvYyA8PSB0aGlzLnByZXYgJiYgbi5jYWxsKG8sIFwiZmluYWxseUxvY1wiKSAmJiB0aGlzLnByZXYgPCBvLmZpbmFsbHlMb2MpIHsgdmFyIGkgPSBvOyBicmVhazsgfSB9IGkgJiYgKFwiYnJlYWtcIiA9PT0gdCB8fCBcImNvbnRpbnVlXCIgPT09IHQpICYmIGkudHJ5TG9jIDw9IGUgJiYgZSA8PSBpLmZpbmFsbHlMb2MgJiYgKGkgPSBudWxsKTsgdmFyIGEgPSBpID8gaS5jb21wbGV0aW9uIDoge307IHJldHVybiBhLnR5cGUgPSB0LCBhLmFyZyA9IGUsIGkgPyAodGhpcy5tZXRob2QgPSBcIm5leHRcIiwgdGhpcy5uZXh0ID0gaS5maW5hbGx5TG9jLCB5KSA6IHRoaXMuY29tcGxldGUoYSk7IH0sIGNvbXBsZXRlOiBmdW5jdGlvbiBjb21wbGV0ZSh0LCBlKSB7IGlmIChcInRocm93XCIgPT09IHQudHlwZSkgdGhyb3cgdC5hcmc7IHJldHVybiBcImJyZWFrXCIgPT09IHQudHlwZSB8fCBcImNvbnRpbnVlXCIgPT09IHQudHlwZSA/IHRoaXMubmV4dCA9IHQuYXJnIDogXCJyZXR1cm5cIiA9PT0gdC50eXBlID8gKHRoaXMucnZhbCA9IHRoaXMuYXJnID0gdC5hcmcsIHRoaXMubWV0aG9kID0gXCJyZXR1cm5cIiwgdGhpcy5uZXh0ID0gXCJlbmRcIikgOiBcIm5vcm1hbFwiID09PSB0LnR5cGUgJiYgZSAmJiAodGhpcy5uZXh0ID0gZSksIHk7IH0sIGZpbmlzaDogZnVuY3Rpb24gZmluaXNoKHQpIHsgZm9yICh2YXIgZSA9IHRoaXMudHJ5RW50cmllcy5sZW5ndGggLSAxOyBlID49IDA7IC0tZSkgeyB2YXIgciA9IHRoaXMudHJ5RW50cmllc1tlXTsgaWYgKHIuZmluYWxseUxvYyA9PT0gdCkgcmV0dXJuIHRoaXMuY29tcGxldGUoci5jb21wbGV0aW9uLCByLmFmdGVyTG9jKSwgcmVzZXRUcnlFbnRyeShyKSwgeTsgfSB9LCBjYXRjaDogZnVuY3Rpb24gX2NhdGNoKHQpIHsgZm9yICh2YXIgZSA9IHRoaXMudHJ5RW50cmllcy5sZW5ndGggLSAxOyBlID49IDA7IC0tZSkgeyB2YXIgciA9IHRoaXMudHJ5RW50cmllc1tlXTsgaWYgKHIudHJ5TG9jID09PSB0KSB7IHZhciBuID0gci5jb21wbGV0aW9uOyBpZiAoXCJ0aHJvd1wiID09PSBuLnR5cGUpIHsgdmFyIG8gPSBuLmFyZzsgcmVzZXRUcnlFbnRyeShyKTsgfSByZXR1cm4gbzsgfSB9IHRocm93IEVycm9yKFwiaWxsZWdhbCBjYXRjaCBhdHRlbXB0XCIpOyB9LCBkZWxlZ2F0ZVlpZWxkOiBmdW5jdGlvbiBkZWxlZ2F0ZVlpZWxkKGUsIHIsIG4pIHsgcmV0dXJuIHRoaXMuZGVsZWdhdGUgPSB7IGl0ZXJhdG9yOiB2YWx1ZXMoZSksIHJlc3VsdE5hbWU6IHIsIG5leHRMb2M6IG4gfSwgXCJuZXh0XCIgPT09IHRoaXMubWV0aG9kICYmICh0aGlzLmFyZyA9IHQpLCB5OyB9IH0sIGU7IH1cbmZ1bmN0aW9uIF90b0NvbnN1bWFibGVBcnJheShyKSB7IHJldHVybiBfYXJyYXlXaXRob3V0SG9sZXMocikgfHwgX2l0ZXJhYmxlVG9BcnJheShyKSB8fCBfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkocikgfHwgX25vbkl0ZXJhYmxlU3ByZWFkKCk7IH1cbmZ1bmN0aW9uIF9ub25JdGVyYWJsZVNwcmVhZCgpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkludmFsaWQgYXR0ZW1wdCB0byBzcHJlYWQgbm9uLWl0ZXJhYmxlIGluc3RhbmNlLlxcbkluIG9yZGVyIHRvIGJlIGl0ZXJhYmxlLCBub24tYXJyYXkgb2JqZWN0cyBtdXN0IGhhdmUgYSBbU3ltYm9sLml0ZXJhdG9yXSgpIG1ldGhvZC5cIik7IH1cbmZ1bmN0aW9uIF91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShyLCBhKSB7IGlmIChyKSB7IGlmIChcInN0cmluZ1wiID09IHR5cGVvZiByKSByZXR1cm4gX2FycmF5TGlrZVRvQXJyYXkociwgYSk7IHZhciB0ID0ge30udG9TdHJpbmcuY2FsbChyKS5zbGljZSg4LCAtMSk7IHJldHVybiBcIk9iamVjdFwiID09PSB0ICYmIHIuY29uc3RydWN0b3IgJiYgKHQgPSByLmNvbnN0cnVjdG9yLm5hbWUpLCBcIk1hcFwiID09PSB0IHx8IFwiU2V0XCIgPT09IHQgPyBBcnJheS5mcm9tKHIpIDogXCJBcmd1bWVudHNcIiA9PT0gdCB8fCAvXig/OlVpfEkpbnQoPzo4fDE2fDMyKSg/OkNsYW1wZWQpP0FycmF5JC8udGVzdCh0KSA/IF9hcnJheUxpa2VUb0FycmF5KHIsIGEpIDogdm9pZCAwOyB9IH1cbmZ1bmN0aW9uIF9pdGVyYWJsZVRvQXJyYXkocikgeyBpZiAoXCJ1bmRlZmluZWRcIiAhPSB0eXBlb2YgU3ltYm9sICYmIG51bGwgIT0gcltTeW1ib2wuaXRlcmF0b3JdIHx8IG51bGwgIT0gcltcIkBAaXRlcmF0b3JcIl0pIHJldHVybiBBcnJheS5mcm9tKHIpOyB9XG5mdW5jdGlvbiBfYXJyYXlXaXRob3V0SG9sZXMocikgeyBpZiAoQXJyYXkuaXNBcnJheShyKSkgcmV0dXJuIF9hcnJheUxpa2VUb0FycmF5KHIpOyB9XG5mdW5jdGlvbiBfYXJyYXlMaWtlVG9BcnJheShyLCBhKSB7IChudWxsID09IGEgfHwgYSA+IHIubGVuZ3RoKSAmJiAoYSA9IHIubGVuZ3RoKTsgZm9yICh2YXIgZSA9IDAsIG4gPSBBcnJheShhKTsgZSA8IGE7IGUrKykgbltlXSA9IHJbZV07IHJldHVybiBuOyB9XG5mdW5jdGlvbiBhc3luY0dlbmVyYXRvclN0ZXAobiwgdCwgZSwgciwgbywgYSwgYykgeyB0cnkgeyB2YXIgaSA9IG5bYV0oYyksIHUgPSBpLnZhbHVlOyB9IGNhdGNoIChuKSB7IHJldHVybiB2b2lkIGUobik7IH0gaS5kb25lID8gdCh1KSA6IFByb21pc2UucmVzb2x2ZSh1KS50aGVuKHIsIG8pOyB9XG5mdW5jdGlvbiBfYXN5bmNUb0dlbmVyYXRvcihuKSB7IHJldHVybiBmdW5jdGlvbiAoKSB7IHZhciB0ID0gdGhpcywgZSA9IGFyZ3VtZW50czsgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyLCBvKSB7IHZhciBhID0gbi5hcHBseSh0LCBlKTsgZnVuY3Rpb24gX25leHQobikgeyBhc3luY0dlbmVyYXRvclN0ZXAoYSwgciwgbywgX25leHQsIF90aHJvdywgXCJuZXh0XCIsIG4pOyB9IGZ1bmN0aW9uIF90aHJvdyhuKSB7IGFzeW5jR2VuZXJhdG9yU3RlcChhLCByLCBvLCBfbmV4dCwgX3Rocm93LCBcInRocm93XCIsIG4pOyB9IF9uZXh0KHZvaWQgMCk7IH0pOyB9OyB9XG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soYSwgbikgeyBpZiAoIShhIGluc3RhbmNlb2YgbikpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH1cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKGUsIHIpIHsgZm9yICh2YXIgdCA9IDA7IHQgPCByLmxlbmd0aDsgdCsrKSB7IHZhciBvID0gclt0XTsgby5lbnVtZXJhYmxlID0gby5lbnVtZXJhYmxlIHx8ICExLCBvLmNvbmZpZ3VyYWJsZSA9ICEwLCBcInZhbHVlXCIgaW4gbyAmJiAoby53cml0YWJsZSA9ICEwKSwgT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsIF90b1Byb3BlcnR5S2V5KG8ua2V5KSwgbyk7IH0gfVxuZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKGUsIHIsIHQpIHsgcmV0dXJuIHIgJiYgX2RlZmluZVByb3BlcnRpZXMoZS5wcm90b3R5cGUsIHIpLCB0ICYmIF9kZWZpbmVQcm9wZXJ0aWVzKGUsIHQpLCBPYmplY3QuZGVmaW5lUHJvcGVydHkoZSwgXCJwcm90b3R5cGVcIiwgeyB3cml0YWJsZTogITEgfSksIGU7IH1cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShlLCByLCB0KSB7IHJldHVybiAociA9IF90b1Byb3BlcnR5S2V5KHIpKSBpbiBlID8gT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsIHIsIHsgdmFsdWU6IHQsIGVudW1lcmFibGU6ICEwLCBjb25maWd1cmFibGU6ICEwLCB3cml0YWJsZTogITAgfSkgOiBlW3JdID0gdCwgZTsgfVxuZnVuY3Rpb24gX3RvUHJvcGVydHlLZXkodCkgeyB2YXIgaSA9IF90b1ByaW1pdGl2ZSh0LCBcInN0cmluZ1wiKTsgcmV0dXJuIFwic3ltYm9sXCIgPT0gX3R5cGVvZihpKSA/IGkgOiBpICsgXCJcIjsgfVxuZnVuY3Rpb24gX3RvUHJpbWl0aXZlKHQsIHIpIHsgaWYgKFwib2JqZWN0XCIgIT0gX3R5cGVvZih0KSB8fCAhdCkgcmV0dXJuIHQ7IHZhciBlID0gdFtTeW1ib2wudG9QcmltaXRpdmVdOyBpZiAodm9pZCAwICE9PSBlKSB7IHZhciBpID0gZS5jYWxsKHQsIHIgfHwgXCJkZWZhdWx0XCIpOyBpZiAoXCJvYmplY3RcIiAhPSBfdHlwZW9mKGkpKSByZXR1cm4gaTsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkBAdG9QcmltaXRpdmUgbXVzdCByZXR1cm4gYSBwcmltaXRpdmUgdmFsdWUuXCIpOyB9IHJldHVybiAoXCJzdHJpbmdcIiA9PT0gciA/IFN0cmluZyA6IE51bWJlcikodCk7IH1cbnZhciBBc3NlbWJsZWRUcmFuc2FjdGlvbiA9IGV4cG9ydHMuQXNzZW1ibGVkVHJhbnNhY3Rpb24gPSBmdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIEFzc2VtYmxlZFRyYW5zYWN0aW9uKG9wdGlvbnMpIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzLFxuICAgICAgX3RoaXMkb3B0aW9ucyRzaW11bGF0LFxuICAgICAgX3RoaXMkb3B0aW9ucyRhbGxvd0h0O1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBBc3NlbWJsZWRUcmFuc2FjdGlvbik7XG4gICAgX2RlZmluZVByb3BlcnR5KHRoaXMsIFwic2ltdWxhdGVcIiwgX2FzeW5jVG9HZW5lcmF0b3IoX3JlZ2VuZXJhdG9yUnVudGltZSgpLm1hcmsoZnVuY3Rpb24gX2NhbGxlZSgpIHtcbiAgICAgIHZhciBfcmVmMixcbiAgICAgICAgcmVzdG9yZSxcbiAgICAgICAgYWNjb3VudCxcbiAgICAgICAgcmVzdWx0LFxuICAgICAgICBfdGhpcyRvcHRpb25zJGZlZSxcbiAgICAgICAgX3RoaXMkb3B0aW9ucyRhcmdzLFxuICAgICAgICBfdGhpcyRvcHRpb25zJHRpbWVvdXQsXG4gICAgICAgIGNvbnRyYWN0LFxuICAgICAgICBfYXJncyA9IGFyZ3VtZW50cztcbiAgICAgIHJldHVybiBfcmVnZW5lcmF0b3JSdW50aW1lKCkud3JhcChmdW5jdGlvbiBfY2FsbGVlJChfY29udGV4dCkge1xuICAgICAgICB3aGlsZSAoMSkgc3dpdGNoIChfY29udGV4dC5wcmV2ID0gX2NvbnRleHQubmV4dCkge1xuICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgIF9yZWYyID0gX2FyZ3MubGVuZ3RoID4gMCAmJiBfYXJnc1swXSAhPT0gdW5kZWZpbmVkID8gX2FyZ3NbMF0gOiB7fSwgcmVzdG9yZSA9IF9yZWYyLnJlc3RvcmU7XG4gICAgICAgICAgICBpZiAoX3RoaXMuYnVpbHQpIHtcbiAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDU7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKF90aGlzLnJhdykge1xuICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gNDtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJUcmFuc2FjdGlvbiBoYXMgbm90IHlldCBiZWVuIGFzc2VtYmxlZDsgXCIgKyBcImNhbGwgYEFzc2VtYmxlZFRyYW5zYWN0aW9uLmJ1aWxkYCBmaXJzdC5cIik7XG4gICAgICAgICAgY2FzZSA0OlxuICAgICAgICAgICAgX3RoaXMuYnVpbHQgPSBfdGhpcy5yYXcuYnVpbGQoKTtcbiAgICAgICAgICBjYXNlIDU6XG4gICAgICAgICAgICByZXN0b3JlID0gcmVzdG9yZSAhPT0gbnVsbCAmJiByZXN0b3JlICE9PSB2b2lkIDAgPyByZXN0b3JlIDogX3RoaXMub3B0aW9ucy5yZXN0b3JlO1xuICAgICAgICAgICAgZGVsZXRlIF90aGlzLnNpbXVsYXRpb25SZXN1bHQ7XG4gICAgICAgICAgICBkZWxldGUgX3RoaXMuc2ltdWxhdGlvblRyYW5zYWN0aW9uRGF0YTtcbiAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSAxMDtcbiAgICAgICAgICAgIHJldHVybiBfdGhpcy5zZXJ2ZXIuc2ltdWxhdGVUcmFuc2FjdGlvbihfdGhpcy5idWlsdCk7XG4gICAgICAgICAgY2FzZSAxMDpcbiAgICAgICAgICAgIF90aGlzLnNpbXVsYXRpb24gPSBfY29udGV4dC5zZW50O1xuICAgICAgICAgICAgaWYgKCEocmVzdG9yZSAmJiBfYXBpLkFwaS5pc1NpbXVsYXRpb25SZXN0b3JlKF90aGlzLnNpbXVsYXRpb24pKSkge1xuICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gMjU7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDE0O1xuICAgICAgICAgICAgcmV0dXJuICgwLCBfdXRpbHMuZ2V0QWNjb3VudCkoX3RoaXMub3B0aW9ucywgX3RoaXMuc2VydmVyKTtcbiAgICAgICAgICBjYXNlIDE0OlxuICAgICAgICAgICAgYWNjb3VudCA9IF9jb250ZXh0LnNlbnQ7XG4gICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gMTc7XG4gICAgICAgICAgICByZXR1cm4gX3RoaXMucmVzdG9yZUZvb3RwcmludChfdGhpcy5zaW11bGF0aW9uLnJlc3RvcmVQcmVhbWJsZSwgYWNjb3VudCk7XG4gICAgICAgICAgY2FzZSAxNzpcbiAgICAgICAgICAgIHJlc3VsdCA9IF9jb250ZXh0LnNlbnQ7XG4gICAgICAgICAgICBpZiAoIShyZXN1bHQuc3RhdHVzID09PSBfYXBpLkFwaS5HZXRUcmFuc2FjdGlvblN0YXR1cy5TVUNDRVNTKSkge1xuICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gMjQ7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29udHJhY3QgPSBuZXcgX3N0ZWxsYXJCYXNlLkNvbnRyYWN0KF90aGlzLm9wdGlvbnMuY29udHJhY3RJZCk7XG4gICAgICAgICAgICBfdGhpcy5yYXcgPSBuZXcgX3N0ZWxsYXJCYXNlLlRyYW5zYWN0aW9uQnVpbGRlcihhY2NvdW50LCB7XG4gICAgICAgICAgICAgIGZlZTogKF90aGlzJG9wdGlvbnMkZmVlID0gX3RoaXMub3B0aW9ucy5mZWUpICE9PSBudWxsICYmIF90aGlzJG9wdGlvbnMkZmVlICE9PSB2b2lkIDAgPyBfdGhpcyRvcHRpb25zJGZlZSA6IF9zdGVsbGFyQmFzZS5CQVNFX0ZFRSxcbiAgICAgICAgICAgICAgbmV0d29ya1Bhc3NwaHJhc2U6IF90aGlzLm9wdGlvbnMubmV0d29ya1Bhc3NwaHJhc2VcbiAgICAgICAgICAgIH0pLmFkZE9wZXJhdGlvbihjb250cmFjdC5jYWxsLmFwcGx5KGNvbnRyYWN0LCBbX3RoaXMub3B0aW9ucy5tZXRob2RdLmNvbmNhdChfdG9Db25zdW1hYmxlQXJyYXkoKF90aGlzJG9wdGlvbnMkYXJncyA9IF90aGlzLm9wdGlvbnMuYXJncykgIT09IG51bGwgJiYgX3RoaXMkb3B0aW9ucyRhcmdzICE9PSB2b2lkIDAgPyBfdGhpcyRvcHRpb25zJGFyZ3MgOiBbXSkpKSkuc2V0VGltZW91dCgoX3RoaXMkb3B0aW9ucyR0aW1lb3V0ID0gX3RoaXMub3B0aW9ucy50aW1lb3V0SW5TZWNvbmRzKSAhPT0gbnVsbCAmJiBfdGhpcyRvcHRpb25zJHRpbWVvdXQgIT09IHZvaWQgMCA/IF90aGlzJG9wdGlvbnMkdGltZW91dCA6IF90eXBlcy5ERUZBVUxUX1RJTUVPVVQpO1xuICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDIzO1xuICAgICAgICAgICAgcmV0dXJuIF90aGlzLnNpbXVsYXRlKCk7XG4gICAgICAgICAgY2FzZSAyMzpcbiAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5hYnJ1cHQoXCJyZXR1cm5cIiwgX3RoaXMpO1xuICAgICAgICAgIGNhc2UgMjQ6XG4gICAgICAgICAgICB0aHJvdyBuZXcgQXNzZW1ibGVkVHJhbnNhY3Rpb24uRXJyb3JzLlJlc3RvcmF0aW9uRmFpbHVyZShcIkF1dG9tYXRpYyByZXN0b3JlIGZhaWxlZCEgWW91IHNldCAncmVzdG9yZTogdHJ1ZScgYnV0IHRoZSBhdHRlbXB0ZWQgcmVzdG9yZSBkaWQgbm90IHdvcmsuIFJlc3VsdDpcXG5cIi5jb25jYXQoSlNPTi5zdHJpbmdpZnkocmVzdWx0KSkpO1xuICAgICAgICAgIGNhc2UgMjU6XG4gICAgICAgICAgICBpZiAoX2FwaS5BcGkuaXNTaW11bGF0aW9uU3VjY2VzcyhfdGhpcy5zaW11bGF0aW9uKSkge1xuICAgICAgICAgICAgICBfdGhpcy5idWlsdCA9ICgwLCBfdHJhbnNhY3Rpb24uYXNzZW1ibGVUcmFuc2FjdGlvbikoX3RoaXMuYnVpbHQsIF90aGlzLnNpbXVsYXRpb24pLmJ1aWxkKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuYWJydXB0KFwicmV0dXJuXCIsIF90aGlzKTtcbiAgICAgICAgICBjYXNlIDI3OlxuICAgICAgICAgIGNhc2UgXCJlbmRcIjpcbiAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5zdG9wKCk7XG4gICAgICAgIH1cbiAgICAgIH0sIF9jYWxsZWUpO1xuICAgIH0pKSk7XG4gICAgX2RlZmluZVByb3BlcnR5KHRoaXMsIFwic2lnblwiLCBfYXN5bmNUb0dlbmVyYXRvcihfcmVnZW5lcmF0b3JSdW50aW1lKCkubWFyayhmdW5jdGlvbiBfY2FsbGVlMigpIHtcbiAgICAgIHZhciBfdGhpcyRvcHRpb25zJHRpbWVvdXQyO1xuICAgICAgdmFyIF9yZWY0LFxuICAgICAgICBfcmVmNCRmb3JjZSxcbiAgICAgICAgZm9yY2UsXG4gICAgICAgIF9yZWY0JHNpZ25UcmFuc2FjdGlvbixcbiAgICAgICAgc2lnblRyYW5zYWN0aW9uLFxuICAgICAgICBzaWdzTmVlZGVkLFxuICAgICAgICB0aW1lb3V0SW5TZWNvbmRzLFxuICAgICAgICBzaWduT3B0cyxcbiAgICAgICAgX3lpZWxkJHNpZ25UcmFuc2FjdGlvLFxuICAgICAgICBzaWduYXR1cmUsXG4gICAgICAgIGVycm9yLFxuICAgICAgICBfYXJnczIgPSBhcmd1bWVudHM7XG4gICAgICByZXR1cm4gX3JlZ2VuZXJhdG9yUnVudGltZSgpLndyYXAoZnVuY3Rpb24gX2NhbGxlZTIkKF9jb250ZXh0Mikge1xuICAgICAgICB3aGlsZSAoMSkgc3dpdGNoIChfY29udGV4dDIucHJldiA9IF9jb250ZXh0Mi5uZXh0KSB7XG4gICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgX3JlZjQgPSBfYXJnczIubGVuZ3RoID4gMCAmJiBfYXJnczJbMF0gIT09IHVuZGVmaW5lZCA/IF9hcmdzMlswXSA6IHt9LCBfcmVmNCRmb3JjZSA9IF9yZWY0LmZvcmNlLCBmb3JjZSA9IF9yZWY0JGZvcmNlID09PSB2b2lkIDAgPyBmYWxzZSA6IF9yZWY0JGZvcmNlLCBfcmVmNCRzaWduVHJhbnNhY3Rpb24gPSBfcmVmNC5zaWduVHJhbnNhY3Rpb24sIHNpZ25UcmFuc2FjdGlvbiA9IF9yZWY0JHNpZ25UcmFuc2FjdGlvbiA9PT0gdm9pZCAwID8gX3RoaXMub3B0aW9ucy5zaWduVHJhbnNhY3Rpb24gOiBfcmVmNCRzaWduVHJhbnNhY3Rpb247XG4gICAgICAgICAgICBpZiAoX3RoaXMuYnVpbHQpIHtcbiAgICAgICAgICAgICAgX2NvbnRleHQyLm5leHQgPSAzO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIlRyYW5zYWN0aW9uIGhhcyBub3QgeWV0IGJlZW4gc2ltdWxhdGVkXCIpO1xuICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgIGlmICghKCFmb3JjZSAmJiBfdGhpcy5pc1JlYWRDYWxsKSkge1xuICAgICAgICAgICAgICBfY29udGV4dDIubmV4dCA9IDU7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhyb3cgbmV3IEFzc2VtYmxlZFRyYW5zYWN0aW9uLkVycm9ycy5Ob1NpZ25hdHVyZU5lZWRlZChcIlRoaXMgaXMgYSByZWFkIGNhbGwuIEl0IHJlcXVpcmVzIG5vIHNpZ25hdHVyZSBvciBzZW5kaW5nLiBcIiArIFwiVXNlIGBmb3JjZTogdHJ1ZWAgdG8gc2lnbiBhbmQgc2VuZCBhbnl3YXkuXCIpO1xuICAgICAgICAgIGNhc2UgNTpcbiAgICAgICAgICAgIGlmIChzaWduVHJhbnNhY3Rpb24pIHtcbiAgICAgICAgICAgICAgX2NvbnRleHQyLm5leHQgPSA3O1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRocm93IG5ldyBBc3NlbWJsZWRUcmFuc2FjdGlvbi5FcnJvcnMuTm9TaWduZXIoXCJZb3UgbXVzdCBwcm92aWRlIGEgc2lnblRyYW5zYWN0aW9uIGZ1bmN0aW9uLCBlaXRoZXIgd2hlbiBjYWxsaW5nIFwiICsgXCJgc2lnbkFuZFNlbmRgIG9yIHdoZW4gaW5pdGlhbGl6aW5nIHlvdXIgQ2xpZW50XCIpO1xuICAgICAgICAgIGNhc2UgNzpcbiAgICAgICAgICAgIHNpZ3NOZWVkZWQgPSBfdGhpcy5uZWVkc05vbkludm9rZXJTaWduaW5nQnkoKS5maWx0ZXIoZnVuY3Rpb24gKGlkKSB7XG4gICAgICAgICAgICAgIHJldHVybiAhaWQuc3RhcnRzV2l0aCgnQycpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBpZiAoIXNpZ3NOZWVkZWQubGVuZ3RoKSB7XG4gICAgICAgICAgICAgIF9jb250ZXh0Mi5uZXh0ID0gMTA7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhyb3cgbmV3IEFzc2VtYmxlZFRyYW5zYWN0aW9uLkVycm9ycy5OZWVkc01vcmVTaWduYXR1cmVzKFwiVHJhbnNhY3Rpb24gcmVxdWlyZXMgc2lnbmF0dXJlcyBmcm9tIFwiLmNvbmNhdChzaWdzTmVlZGVkLCBcIi4gXCIpICsgXCJTZWUgYG5lZWRzTm9uSW52b2tlclNpZ25pbmdCeWAgZm9yIGRldGFpbHMuXCIpO1xuICAgICAgICAgIGNhc2UgMTA6XG4gICAgICAgICAgICB0aW1lb3V0SW5TZWNvbmRzID0gKF90aGlzJG9wdGlvbnMkdGltZW91dDIgPSBfdGhpcy5vcHRpb25zLnRpbWVvdXRJblNlY29uZHMpICE9PSBudWxsICYmIF90aGlzJG9wdGlvbnMkdGltZW91dDIgIT09IHZvaWQgMCA/IF90aGlzJG9wdGlvbnMkdGltZW91dDIgOiBfdHlwZXMuREVGQVVMVF9USU1FT1VUO1xuICAgICAgICAgICAgX3RoaXMuYnVpbHQgPSBfc3RlbGxhckJhc2UuVHJhbnNhY3Rpb25CdWlsZGVyLmNsb25lRnJvbShfdGhpcy5idWlsdCwge1xuICAgICAgICAgICAgICBmZWU6IF90aGlzLmJ1aWx0LmZlZSxcbiAgICAgICAgICAgICAgdGltZWJvdW5kczogdW5kZWZpbmVkLFxuICAgICAgICAgICAgICBzb3JvYmFuRGF0YTogX3RoaXMuc2ltdWxhdGlvbkRhdGEudHJhbnNhY3Rpb25EYXRhXG4gICAgICAgICAgICB9KS5zZXRUaW1lb3V0KHRpbWVvdXRJblNlY29uZHMpLmJ1aWxkKCk7XG4gICAgICAgICAgICBzaWduT3B0cyA9IHtcbiAgICAgICAgICAgICAgbmV0d29ya1Bhc3NwaHJhc2U6IF90aGlzLm9wdGlvbnMubmV0d29ya1Bhc3NwaHJhc2VcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBpZiAoX3RoaXMub3B0aW9ucy5hZGRyZXNzKSBzaWduT3B0cy5hZGRyZXNzID0gX3RoaXMub3B0aW9ucy5hZGRyZXNzO1xuICAgICAgICAgICAgaWYgKF90aGlzLm9wdGlvbnMuc3VibWl0ICE9PSB1bmRlZmluZWQpIHNpZ25PcHRzLnN1Ym1pdCA9IF90aGlzLm9wdGlvbnMuc3VibWl0O1xuICAgICAgICAgICAgaWYgKF90aGlzLm9wdGlvbnMuc3VibWl0VXJsKSBzaWduT3B0cy5zdWJtaXRVcmwgPSBfdGhpcy5vcHRpb25zLnN1Ym1pdFVybDtcbiAgICAgICAgICAgIF9jb250ZXh0Mi5uZXh0ID0gMTg7XG4gICAgICAgICAgICByZXR1cm4gc2lnblRyYW5zYWN0aW9uKF90aGlzLmJ1aWx0LnRvWERSKCksIHNpZ25PcHRzKTtcbiAgICAgICAgICBjYXNlIDE4OlxuICAgICAgICAgICAgX3lpZWxkJHNpZ25UcmFuc2FjdGlvID0gX2NvbnRleHQyLnNlbnQ7XG4gICAgICAgICAgICBzaWduYXR1cmUgPSBfeWllbGQkc2lnblRyYW5zYWN0aW8uc2lnbmVkVHhYZHI7XG4gICAgICAgICAgICBlcnJvciA9IF95aWVsZCRzaWduVHJhbnNhY3Rpby5lcnJvcjtcbiAgICAgICAgICAgIF90aGlzLmhhbmRsZVdhbGxldEVycm9yKGVycm9yKTtcbiAgICAgICAgICAgIF90aGlzLnNpZ25lZCA9IF9zdGVsbGFyQmFzZS5UcmFuc2FjdGlvbkJ1aWxkZXIuZnJvbVhEUihzaWduYXR1cmUsIF90aGlzLm9wdGlvbnMubmV0d29ya1Bhc3NwaHJhc2UpO1xuICAgICAgICAgIGNhc2UgMjM6XG4gICAgICAgICAgY2FzZSBcImVuZFwiOlxuICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0Mi5zdG9wKCk7XG4gICAgICAgIH1cbiAgICAgIH0sIF9jYWxsZWUyKTtcbiAgICB9KSkpO1xuICAgIF9kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcInNpZ25BbmRTZW5kXCIsIF9hc3luY1RvR2VuZXJhdG9yKF9yZWdlbmVyYXRvclJ1bnRpbWUoKS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUzKCkge1xuICAgICAgdmFyIF9yZWY2LFxuICAgICAgICBfcmVmNiRmb3JjZSxcbiAgICAgICAgZm9yY2UsXG4gICAgICAgIF9yZWY2JHNpZ25UcmFuc2FjdGlvbixcbiAgICAgICAgc2lnblRyYW5zYWN0aW9uLFxuICAgICAgICBvcmlnaW5hbFN1Ym1pdCxcbiAgICAgICAgX2FyZ3MzID0gYXJndW1lbnRzO1xuICAgICAgcmV0dXJuIF9yZWdlbmVyYXRvclJ1bnRpbWUoKS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUzJChfY29udGV4dDMpIHtcbiAgICAgICAgd2hpbGUgKDEpIHN3aXRjaCAoX2NvbnRleHQzLnByZXYgPSBfY29udGV4dDMubmV4dCkge1xuICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgIF9yZWY2ID0gX2FyZ3MzLmxlbmd0aCA+IDAgJiYgX2FyZ3MzWzBdICE9PSB1bmRlZmluZWQgPyBfYXJnczNbMF0gOiB7fSwgX3JlZjYkZm9yY2UgPSBfcmVmNi5mb3JjZSwgZm9yY2UgPSBfcmVmNiRmb3JjZSA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcmVmNiRmb3JjZSwgX3JlZjYkc2lnblRyYW5zYWN0aW9uID0gX3JlZjYuc2lnblRyYW5zYWN0aW9uLCBzaWduVHJhbnNhY3Rpb24gPSBfcmVmNiRzaWduVHJhbnNhY3Rpb24gPT09IHZvaWQgMCA/IF90aGlzLm9wdGlvbnMuc2lnblRyYW5zYWN0aW9uIDogX3JlZjYkc2lnblRyYW5zYWN0aW9uO1xuICAgICAgICAgICAgaWYgKF90aGlzLnNpZ25lZCkge1xuICAgICAgICAgICAgICBfY29udGV4dDMubmV4dCA9IDEwO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG9yaWdpbmFsU3VibWl0ID0gX3RoaXMub3B0aW9ucy5zdWJtaXQ7XG4gICAgICAgICAgICBpZiAoX3RoaXMub3B0aW9ucy5zdWJtaXQpIHtcbiAgICAgICAgICAgICAgX3RoaXMub3B0aW9ucy5zdWJtaXQgPSBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIF9jb250ZXh0My5wcmV2ID0gNDtcbiAgICAgICAgICAgIF9jb250ZXh0My5uZXh0ID0gNztcbiAgICAgICAgICAgIHJldHVybiBfdGhpcy5zaWduKHtcbiAgICAgICAgICAgICAgZm9yY2U6IGZvcmNlLFxuICAgICAgICAgICAgICBzaWduVHJhbnNhY3Rpb246IHNpZ25UcmFuc2FjdGlvblxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgY2FzZSA3OlxuICAgICAgICAgICAgX2NvbnRleHQzLnByZXYgPSA3O1xuICAgICAgICAgICAgX3RoaXMub3B0aW9ucy5zdWJtaXQgPSBvcmlnaW5hbFN1Ym1pdDtcbiAgICAgICAgICAgIHJldHVybiBfY29udGV4dDMuZmluaXNoKDcpO1xuICAgICAgICAgIGNhc2UgMTA6XG4gICAgICAgICAgICByZXR1cm4gX2NvbnRleHQzLmFicnVwdChcInJldHVyblwiLCBfdGhpcy5zZW5kKCkpO1xuICAgICAgICAgIGNhc2UgMTE6XG4gICAgICAgICAgY2FzZSBcImVuZFwiOlxuICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0My5zdG9wKCk7XG4gICAgICAgIH1cbiAgICAgIH0sIF9jYWxsZWUzLCBudWxsLCBbWzQsLCA3LCAxMF1dKTtcbiAgICB9KSkpO1xuICAgIF9kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcIm5lZWRzTm9uSW52b2tlclNpZ25pbmdCeVwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgX3Jhd0ludm9rZUhvc3RGdW5jdGlvO1xuICAgICAgdmFyIF9yZWY3ID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fSxcbiAgICAgICAgX3JlZjckaW5jbHVkZUFscmVhZHlTID0gX3JlZjcuaW5jbHVkZUFscmVhZHlTaWduZWQsXG4gICAgICAgIGluY2x1ZGVBbHJlYWR5U2lnbmVkID0gX3JlZjckaW5jbHVkZUFscmVhZHlTID09PSB2b2lkIDAgPyBmYWxzZSA6IF9yZWY3JGluY2x1ZGVBbHJlYWR5UztcbiAgICAgIGlmICghX3RoaXMuYnVpbHQpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVHJhbnNhY3Rpb24gaGFzIG5vdCB5ZXQgYmVlbiBzaW11bGF0ZWRcIik7XG4gICAgICB9XG4gICAgICBpZiAoIShcIm9wZXJhdGlvbnNcIiBpbiBfdGhpcy5idWlsdCkpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVW5leHBlY3RlZCBUcmFuc2FjdGlvbiB0eXBlOyBubyBvcGVyYXRpb25zOiBcIi5jb25jYXQoSlNPTi5zdHJpbmdpZnkoX3RoaXMuYnVpbHQpKSk7XG4gICAgICB9XG4gICAgICB2YXIgcmF3SW52b2tlSG9zdEZ1bmN0aW9uT3AgPSBfdGhpcy5idWlsdC5vcGVyYXRpb25zWzBdO1xuICAgICAgcmV0dXJuIF90b0NvbnN1bWFibGVBcnJheShuZXcgU2V0KCgoX3Jhd0ludm9rZUhvc3RGdW5jdGlvID0gcmF3SW52b2tlSG9zdEZ1bmN0aW9uT3AuYXV0aCkgIT09IG51bGwgJiYgX3Jhd0ludm9rZUhvc3RGdW5jdGlvICE9PSB2b2lkIDAgPyBfcmF3SW52b2tlSG9zdEZ1bmN0aW8gOiBbXSkuZmlsdGVyKGZ1bmN0aW9uIChlbnRyeSkge1xuICAgICAgICByZXR1cm4gZW50cnkuY3JlZGVudGlhbHMoKS5zd2l0Y2goKSA9PT0gX3N0ZWxsYXJCYXNlLnhkci5Tb3JvYmFuQ3JlZGVudGlhbHNUeXBlLnNvcm9iYW5DcmVkZW50aWFsc0FkZHJlc3MoKSAmJiAoaW5jbHVkZUFscmVhZHlTaWduZWQgfHwgZW50cnkuY3JlZGVudGlhbHMoKS5hZGRyZXNzKCkuc2lnbmF0dXJlKCkuc3dpdGNoKCkubmFtZSA9PT0gXCJzY3ZWb2lkXCIpO1xuICAgICAgfSkubWFwKGZ1bmN0aW9uIChlbnRyeSkge1xuICAgICAgICByZXR1cm4gX3N0ZWxsYXJCYXNlLkFkZHJlc3MuZnJvbVNjQWRkcmVzcyhlbnRyeS5jcmVkZW50aWFscygpLmFkZHJlc3MoKS5hZGRyZXNzKCkpLnRvU3RyaW5nKCk7XG4gICAgICB9KSkpO1xuICAgIH0pO1xuICAgIF9kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcInNpZ25BdXRoRW50cmllc1wiLCBfYXN5bmNUb0dlbmVyYXRvcihfcmVnZW5lcmF0b3JSdW50aW1lKCkubWFyayhmdW5jdGlvbiBfY2FsbGVlNigpIHtcbiAgICAgIHZhciBfcmF3SW52b2tlSG9zdEZ1bmN0aW8yO1xuICAgICAgdmFyIF9yZWY5LFxuICAgICAgICBfcmVmOSRleHBpcmF0aW9uLFxuICAgICAgICBleHBpcmF0aW9uLFxuICAgICAgICBfcmVmOSRzaWduQXV0aEVudHJ5LFxuICAgICAgICBzaWduQXV0aEVudHJ5LFxuICAgICAgICBfcmVmOSRhZGRyZXNzLFxuICAgICAgICBhZGRyZXNzLFxuICAgICAgICBfcmVmOSRhdXRob3JpemVFbnRyeSxcbiAgICAgICAgYXV0aG9yaXplRW50cnksXG4gICAgICAgIG5lZWRzTm9uSW52b2tlclNpZ25pbmdCeSxcbiAgICAgICAgcmF3SW52b2tlSG9zdEZ1bmN0aW9uT3AsXG4gICAgICAgIGF1dGhFbnRyaWVzLFxuICAgICAgICBfaXRlcmF0b3IsXG4gICAgICAgIF9zdGVwLFxuICAgICAgICBfbG9vcCxcbiAgICAgICAgX3JldCxcbiAgICAgICAgX2FyZ3M3ID0gYXJndW1lbnRzO1xuICAgICAgcmV0dXJuIF9yZWdlbmVyYXRvclJ1bnRpbWUoKS53cmFwKGZ1bmN0aW9uIF9jYWxsZWU2JChfY29udGV4dDcpIHtcbiAgICAgICAgd2hpbGUgKDEpIHN3aXRjaCAoX2NvbnRleHQ3LnByZXYgPSBfY29udGV4dDcubmV4dCkge1xuICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgIF9yZWY5ID0gX2FyZ3M3Lmxlbmd0aCA+IDAgJiYgX2FyZ3M3WzBdICE9PSB1bmRlZmluZWQgPyBfYXJnczdbMF0gOiB7fSwgX3JlZjkkZXhwaXJhdGlvbiA9IF9yZWY5LmV4cGlyYXRpb24sIGV4cGlyYXRpb24gPSBfcmVmOSRleHBpcmF0aW9uID09PSB2b2lkIDAgPyBfYXN5bmNUb0dlbmVyYXRvcihfcmVnZW5lcmF0b3JSdW50aW1lKCkubWFyayhmdW5jdGlvbiBfY2FsbGVlNCgpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIF9yZWdlbmVyYXRvclJ1bnRpbWUoKS53cmFwKGZ1bmN0aW9uIF9jYWxsZWU0JChfY29udGV4dDQpIHtcbiAgICAgICAgICAgICAgICB3aGlsZSAoMSkgc3dpdGNoIChfY29udGV4dDQucHJldiA9IF9jb250ZXh0NC5uZXh0KSB7XG4gICAgICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgICAgIF9jb250ZXh0NC5uZXh0ID0gMjtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF90aGlzLnNlcnZlci5nZXRMYXRlc3RMZWRnZXIoKTtcbiAgICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgX2NvbnRleHQ0LnQwID0gX2NvbnRleHQ0LnNlbnQuc2VxdWVuY2U7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDQuYWJydXB0KFwicmV0dXJuXCIsIF9jb250ZXh0NC50MCArIDEwMCk7XG4gICAgICAgICAgICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgICAgICAgICBjYXNlIFwiZW5kXCI6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDQuc3RvcCgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSwgX2NhbGxlZTQpO1xuICAgICAgICAgICAgfSkpKCkgOiBfcmVmOSRleHBpcmF0aW9uLCBfcmVmOSRzaWduQXV0aEVudHJ5ID0gX3JlZjkuc2lnbkF1dGhFbnRyeSwgc2lnbkF1dGhFbnRyeSA9IF9yZWY5JHNpZ25BdXRoRW50cnkgPT09IHZvaWQgMCA/IF90aGlzLm9wdGlvbnMuc2lnbkF1dGhFbnRyeSA6IF9yZWY5JHNpZ25BdXRoRW50cnksIF9yZWY5JGFkZHJlc3MgPSBfcmVmOS5hZGRyZXNzLCBhZGRyZXNzID0gX3JlZjkkYWRkcmVzcyA9PT0gdm9pZCAwID8gX3RoaXMub3B0aW9ucy5wdWJsaWNLZXkgOiBfcmVmOSRhZGRyZXNzLCBfcmVmOSRhdXRob3JpemVFbnRyeSA9IF9yZWY5LmF1dGhvcml6ZUVudHJ5LCBhdXRob3JpemVFbnRyeSA9IF9yZWY5JGF1dGhvcml6ZUVudHJ5ID09PSB2b2lkIDAgPyBfc3RlbGxhckJhc2UuYXV0aG9yaXplRW50cnkgOiBfcmVmOSRhdXRob3JpemVFbnRyeTtcbiAgICAgICAgICAgIGlmIChfdGhpcy5idWlsdCkge1xuICAgICAgICAgICAgICBfY29udGV4dDcubmV4dCA9IDM7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVHJhbnNhY3Rpb24gaGFzIG5vdCB5ZXQgYmVlbiBhc3NlbWJsZWQgb3Igc2ltdWxhdGVkXCIpO1xuICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgIGlmICghKGF1dGhvcml6ZUVudHJ5ID09PSBfc3RlbGxhckJhc2UuYXV0aG9yaXplRW50cnkpKSB7XG4gICAgICAgICAgICAgIF9jb250ZXh0Ny5uZXh0ID0gMTE7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbmVlZHNOb25JbnZva2VyU2lnbmluZ0J5ID0gX3RoaXMubmVlZHNOb25JbnZva2VyU2lnbmluZ0J5KCk7XG4gICAgICAgICAgICBpZiAoIShuZWVkc05vbkludm9rZXJTaWduaW5nQnkubGVuZ3RoID09PSAwKSkge1xuICAgICAgICAgICAgICBfY29udGV4dDcubmV4dCA9IDc7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhyb3cgbmV3IEFzc2VtYmxlZFRyYW5zYWN0aW9uLkVycm9ycy5Ob1Vuc2lnbmVkTm9uSW52b2tlckF1dGhFbnRyaWVzKFwiTm8gdW5zaWduZWQgbm9uLWludm9rZXIgYXV0aCBlbnRyaWVzOyBtYXliZSB5b3UgYWxyZWFkeSBzaWduZWQ/XCIpO1xuICAgICAgICAgIGNhc2UgNzpcbiAgICAgICAgICAgIGlmICghKG5lZWRzTm9uSW52b2tlclNpZ25pbmdCeS5pbmRleE9mKGFkZHJlc3MgIT09IG51bGwgJiYgYWRkcmVzcyAhPT0gdm9pZCAwID8gYWRkcmVzcyA6IFwiXCIpID09PSAtMSkpIHtcbiAgICAgICAgICAgICAgX2NvbnRleHQ3Lm5leHQgPSA5O1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRocm93IG5ldyBBc3NlbWJsZWRUcmFuc2FjdGlvbi5FcnJvcnMuTm9TaWduYXR1cmVOZWVkZWQoXCJObyBhdXRoIGVudHJpZXMgZm9yIHB1YmxpYyBrZXkgXFxcIlwiLmNvbmNhdChhZGRyZXNzLCBcIlxcXCJcIikpO1xuICAgICAgICAgIGNhc2UgOTpcbiAgICAgICAgICAgIGlmIChzaWduQXV0aEVudHJ5KSB7XG4gICAgICAgICAgICAgIF9jb250ZXh0Ny5uZXh0ID0gMTE7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhyb3cgbmV3IEFzc2VtYmxlZFRyYW5zYWN0aW9uLkVycm9ycy5Ob1NpZ25lcihcIllvdSBtdXN0IHByb3ZpZGUgYHNpZ25BdXRoRW50cnlgIG9yIGEgY3VzdG9tIGBhdXRob3JpemVFbnRyeWBcIik7XG4gICAgICAgICAgY2FzZSAxMTpcbiAgICAgICAgICAgIHJhd0ludm9rZUhvc3RGdW5jdGlvbk9wID0gX3RoaXMuYnVpbHQub3BlcmF0aW9uc1swXTtcbiAgICAgICAgICAgIGF1dGhFbnRyaWVzID0gKF9yYXdJbnZva2VIb3N0RnVuY3RpbzIgPSByYXdJbnZva2VIb3N0RnVuY3Rpb25PcC5hdXRoKSAhPT0gbnVsbCAmJiBfcmF3SW52b2tlSG9zdEZ1bmN0aW8yICE9PSB2b2lkIDAgPyBfcmF3SW52b2tlSG9zdEZ1bmN0aW8yIDogW107XG4gICAgICAgICAgICBfaXRlcmF0b3IgPSBfY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlcihhdXRoRW50cmllcy5lbnRyaWVzKCkpO1xuICAgICAgICAgICAgX2NvbnRleHQ3LnByZXYgPSAxNDtcbiAgICAgICAgICAgIF9sb29wID0gX3JlZ2VuZXJhdG9yUnVudGltZSgpLm1hcmsoZnVuY3Rpb24gX2xvb3AoKSB7XG4gICAgICAgICAgICAgIHZhciBfc3RlcCR2YWx1ZSwgaSwgZW50cnksIGNyZWRlbnRpYWxzLCBhdXRoRW50cnlBZGRyZXNzLCBzaWduO1xuICAgICAgICAgICAgICByZXR1cm4gX3JlZ2VuZXJhdG9yUnVudGltZSgpLndyYXAoZnVuY3Rpb24gX2xvb3AkKF9jb250ZXh0Nikge1xuICAgICAgICAgICAgICAgIHdoaWxlICgxKSBzd2l0Y2ggKF9jb250ZXh0Ni5wcmV2ID0gX2NvbnRleHQ2Lm5leHQpIHtcbiAgICAgICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICAgICAgX3N0ZXAkdmFsdWUgPSBfc2xpY2VkVG9BcnJheShfc3RlcC52YWx1ZSwgMiksIGkgPSBfc3RlcCR2YWx1ZVswXSwgZW50cnkgPSBfc3RlcCR2YWx1ZVsxXTtcbiAgICAgICAgICAgICAgICAgICAgY3JlZGVudGlhbHMgPSBfc3RlbGxhckJhc2UueGRyLlNvcm9iYW5DcmVkZW50aWFscy5mcm9tWERSKGVudHJ5LmNyZWRlbnRpYWxzKCkudG9YRFIoKSk7XG4gICAgICAgICAgICAgICAgICAgIGlmICghKGNyZWRlbnRpYWxzLnN3aXRjaCgpICE9PSBfc3RlbGxhckJhc2UueGRyLlNvcm9iYW5DcmVkZW50aWFsc1R5cGUuc29yb2JhbkNyZWRlbnRpYWxzQWRkcmVzcygpKSkge1xuICAgICAgICAgICAgICAgICAgICAgIF9jb250ZXh0Ni5uZXh0ID0gNDtcbiAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQ2LmFicnVwdChcInJldHVyblwiLCAwKTtcbiAgICAgICAgICAgICAgICAgIGNhc2UgNDpcbiAgICAgICAgICAgICAgICAgICAgYXV0aEVudHJ5QWRkcmVzcyA9IF9zdGVsbGFyQmFzZS5BZGRyZXNzLmZyb21TY0FkZHJlc3MoY3JlZGVudGlhbHMuYWRkcmVzcygpLmFkZHJlc3MoKSkudG9TdHJpbmcoKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCEoYXV0aEVudHJ5QWRkcmVzcyAhPT0gYWRkcmVzcykpIHtcbiAgICAgICAgICAgICAgICAgICAgICBfY29udGV4dDYubmV4dCA9IDc7XG4gICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0Ni5hYnJ1cHQoXCJyZXR1cm5cIiwgMCk7XG4gICAgICAgICAgICAgICAgICBjYXNlIDc6XG4gICAgICAgICAgICAgICAgICAgIHNpZ24gPSBzaWduQXV0aEVudHJ5ICE9PSBudWxsICYmIHNpZ25BdXRoRW50cnkgIT09IHZvaWQgMCA/IHNpZ25BdXRoRW50cnkgOiBQcm9taXNlLnJlc29sdmU7XG4gICAgICAgICAgICAgICAgICAgIF9jb250ZXh0Ni50MCA9IGF1dGhvcml6ZUVudHJ5O1xuICAgICAgICAgICAgICAgICAgICBfY29udGV4dDYudDEgPSBlbnRyeTtcbiAgICAgICAgICAgICAgICAgICAgX2NvbnRleHQ2LnQyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgIHZhciBfcmVmMTEgPSBfYXN5bmNUb0dlbmVyYXRvcihfcmVnZW5lcmF0b3JSdW50aW1lKCkubWFyayhmdW5jdGlvbiBfY2FsbGVlNShwcmVpbWFnZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIF95aWVsZCRzaWduLCBzaWduZWRBdXRoRW50cnksIGVycm9yO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF9yZWdlbmVyYXRvclJ1bnRpbWUoKS53cmFwKGZ1bmN0aW9uIF9jYWxsZWU1JChfY29udGV4dDUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgd2hpbGUgKDEpIHN3aXRjaCAoX2NvbnRleHQ1LnByZXYgPSBfY29udGV4dDUubmV4dCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jb250ZXh0NS5uZXh0ID0gMjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBzaWduKHByZWltYWdlLnRvWERSKFwiYmFzZTY0XCIpLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFkZHJlc3M6IGFkZHJlc3NcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF95aWVsZCRzaWduID0gX2NvbnRleHQ1LnNlbnQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaWduZWRBdXRoRW50cnkgPSBfeWllbGQkc2lnbi5zaWduZWRBdXRoRW50cnk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlcnJvciA9IF95aWVsZCRzaWduLmVycm9yO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMuaGFuZGxlV2FsbGV0RXJyb3IoZXJyb3IpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0NS5hYnJ1cHQoXCJyZXR1cm5cIiwgQnVmZmVyLmZyb20oc2lnbmVkQXV0aEVudHJ5LCBcImJhc2U2NFwiKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSA3OlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCJlbmRcIjpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDUuc3RvcCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9LCBfY2FsbGVlNSk7XG4gICAgICAgICAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAoX3gpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfcmVmMTEuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICB9KCk7XG4gICAgICAgICAgICAgICAgICAgIF9jb250ZXh0Ni5uZXh0ID0gMTM7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBleHBpcmF0aW9uO1xuICAgICAgICAgICAgICAgICAgY2FzZSAxMzpcbiAgICAgICAgICAgICAgICAgICAgX2NvbnRleHQ2LnQzID0gX2NvbnRleHQ2LnNlbnQ7XG4gICAgICAgICAgICAgICAgICAgIF9jb250ZXh0Ni50NCA9IF90aGlzLm9wdGlvbnMubmV0d29ya1Bhc3NwaHJhc2U7XG4gICAgICAgICAgICAgICAgICAgIF9jb250ZXh0Ni5uZXh0ID0gMTc7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAoMCwgX2NvbnRleHQ2LnQwKShfY29udGV4dDYudDEsIF9jb250ZXh0Ni50MiwgX2NvbnRleHQ2LnQzLCBfY29udGV4dDYudDQpO1xuICAgICAgICAgICAgICAgICAgY2FzZSAxNzpcbiAgICAgICAgICAgICAgICAgICAgYXV0aEVudHJpZXNbaV0gPSBfY29udGV4dDYuc2VudDtcbiAgICAgICAgICAgICAgICAgIGNhc2UgMTg6XG4gICAgICAgICAgICAgICAgICBjYXNlIFwiZW5kXCI6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDYuc3RvcCgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSwgX2xvb3ApO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBfaXRlcmF0b3IucygpO1xuICAgICAgICAgIGNhc2UgMTc6XG4gICAgICAgICAgICBpZiAoKF9zdGVwID0gX2l0ZXJhdG9yLm4oKSkuZG9uZSkge1xuICAgICAgICAgICAgICBfY29udGV4dDcubmV4dCA9IDI0O1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBfY29udGV4dDcuZGVsZWdhdGVZaWVsZChfbG9vcCgpLCBcInQwXCIsIDE5KTtcbiAgICAgICAgICBjYXNlIDE5OlxuICAgICAgICAgICAgX3JldCA9IF9jb250ZXh0Ny50MDtcbiAgICAgICAgICAgIGlmICghKF9yZXQgPT09IDApKSB7XG4gICAgICAgICAgICAgIF9jb250ZXh0Ny5uZXh0ID0gMjI7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0Ny5hYnJ1cHQoXCJjb250aW51ZVwiLCAyMik7XG4gICAgICAgICAgY2FzZSAyMjpcbiAgICAgICAgICAgIF9jb250ZXh0Ny5uZXh0ID0gMTc7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlIDI0OlxuICAgICAgICAgICAgX2NvbnRleHQ3Lm5leHQgPSAyOTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgMjY6XG4gICAgICAgICAgICBfY29udGV4dDcucHJldiA9IDI2O1xuICAgICAgICAgICAgX2NvbnRleHQ3LnQxID0gX2NvbnRleHQ3W1wiY2F0Y2hcIl0oMTQpO1xuICAgICAgICAgICAgX2l0ZXJhdG9yLmUoX2NvbnRleHQ3LnQxKTtcbiAgICAgICAgICBjYXNlIDI5OlxuICAgICAgICAgICAgX2NvbnRleHQ3LnByZXYgPSAyOTtcbiAgICAgICAgICAgIF9pdGVyYXRvci5mKCk7XG4gICAgICAgICAgICByZXR1cm4gX2NvbnRleHQ3LmZpbmlzaCgyOSk7XG4gICAgICAgICAgY2FzZSAzMjpcbiAgICAgICAgICBjYXNlIFwiZW5kXCI6XG4gICAgICAgICAgICByZXR1cm4gX2NvbnRleHQ3LnN0b3AoKTtcbiAgICAgICAgfVxuICAgICAgfSwgX2NhbGxlZTYsIG51bGwsIFtbMTQsIDI2LCAyOSwgMzJdXSk7XG4gICAgfSkpKTtcbiAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICAgIHRoaXMub3B0aW9ucy5zaW11bGF0ZSA9IChfdGhpcyRvcHRpb25zJHNpbXVsYXQgPSB0aGlzLm9wdGlvbnMuc2ltdWxhdGUpICE9PSBudWxsICYmIF90aGlzJG9wdGlvbnMkc2ltdWxhdCAhPT0gdm9pZCAwID8gX3RoaXMkb3B0aW9ucyRzaW11bGF0IDogdHJ1ZTtcbiAgICB0aGlzLnNlcnZlciA9IG5ldyBfcnBjLlNlcnZlcih0aGlzLm9wdGlvbnMucnBjVXJsLCB7XG4gICAgICBhbGxvd0h0dHA6IChfdGhpcyRvcHRpb25zJGFsbG93SHQgPSB0aGlzLm9wdGlvbnMuYWxsb3dIdHRwKSAhPT0gbnVsbCAmJiBfdGhpcyRvcHRpb25zJGFsbG93SHQgIT09IHZvaWQgMCA/IF90aGlzJG9wdGlvbnMkYWxsb3dIdCA6IGZhbHNlXG4gICAgfSk7XG4gIH1cbiAgcmV0dXJuIF9jcmVhdGVDbGFzcyhBc3NlbWJsZWRUcmFuc2FjdGlvbiwgW3tcbiAgICBrZXk6IFwidG9KU09OXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHRvSlNPTigpIHtcbiAgICAgIHZhciBfdGhpcyRidWlsdDtcbiAgICAgIHJldHVybiBKU09OLnN0cmluZ2lmeSh7XG4gICAgICAgIG1ldGhvZDogdGhpcy5vcHRpb25zLm1ldGhvZCxcbiAgICAgICAgdHg6IChfdGhpcyRidWlsdCA9IHRoaXMuYnVpbHQpID09PSBudWxsIHx8IF90aGlzJGJ1aWx0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfdGhpcyRidWlsdC50b1hEUigpLFxuICAgICAgICBzaW11bGF0aW9uUmVzdWx0OiB7XG4gICAgICAgICAgYXV0aDogdGhpcy5zaW11bGF0aW9uRGF0YS5yZXN1bHQuYXV0aC5tYXAoZnVuY3Rpb24gKGEpIHtcbiAgICAgICAgICAgIHJldHVybiBhLnRvWERSKFwiYmFzZTY0XCIpO1xuICAgICAgICAgIH0pLFxuICAgICAgICAgIHJldHZhbDogdGhpcy5zaW11bGF0aW9uRGF0YS5yZXN1bHQucmV0dmFsLnRvWERSKFwiYmFzZTY0XCIpXG4gICAgICAgIH0sXG4gICAgICAgIHNpbXVsYXRpb25UcmFuc2FjdGlvbkRhdGE6IHRoaXMuc2ltdWxhdGlvbkRhdGEudHJhbnNhY3Rpb25EYXRhLnRvWERSKFwiYmFzZTY0XCIpXG4gICAgICB9KTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwidG9YRFJcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gdG9YRFIoKSB7XG4gICAgICB2YXIgX3RoaXMkYnVpbHQyO1xuICAgICAgaWYgKCF0aGlzLmJ1aWx0KSB0aHJvdyBuZXcgRXJyb3IoXCJUcmFuc2FjdGlvbiBoYXMgbm90IHlldCBiZWVuIHNpbXVsYXRlZDsgXCIgKyBcImNhbGwgYEFzc2VtYmxlZFRyYW5zYWN0aW9uLnNpbXVsYXRlYCBmaXJzdC5cIik7XG4gICAgICByZXR1cm4gKF90aGlzJGJ1aWx0MiA9IHRoaXMuYnVpbHQpID09PSBudWxsIHx8IF90aGlzJGJ1aWx0MiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX3RoaXMkYnVpbHQyLnRvRW52ZWxvcGUoKS50b1hEUignYmFzZTY0Jyk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImhhbmRsZVdhbGxldEVycm9yXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGhhbmRsZVdhbGxldEVycm9yKGVycm9yKSB7XG4gICAgICBpZiAoIWVycm9yKSByZXR1cm47XG4gICAgICB2YXIgbWVzc2FnZSA9IGVycm9yLm1lc3NhZ2UsXG4gICAgICAgIGNvZGUgPSBlcnJvci5jb2RlO1xuICAgICAgdmFyIGZ1bGxNZXNzYWdlID0gXCJcIi5jb25jYXQobWVzc2FnZSkuY29uY2F0KGVycm9yLmV4dCA/IFwiIChcIi5jb25jYXQoZXJyb3IuZXh0LmpvaW4oJywgJyksIFwiKVwiKSA6ICcnKTtcbiAgICAgIHN3aXRjaCAoY29kZSkge1xuICAgICAgICBjYXNlIC0xOlxuICAgICAgICAgIHRocm93IG5ldyBBc3NlbWJsZWRUcmFuc2FjdGlvbi5FcnJvcnMuSW50ZXJuYWxXYWxsZXRFcnJvcihmdWxsTWVzc2FnZSk7XG4gICAgICAgIGNhc2UgLTI6XG4gICAgICAgICAgdGhyb3cgbmV3IEFzc2VtYmxlZFRyYW5zYWN0aW9uLkVycm9ycy5FeHRlcm5hbFNlcnZpY2VFcnJvcihmdWxsTWVzc2FnZSk7XG4gICAgICAgIGNhc2UgLTM6XG4gICAgICAgICAgdGhyb3cgbmV3IEFzc2VtYmxlZFRyYW5zYWN0aW9uLkVycm9ycy5JbnZhbGlkQ2xpZW50UmVxdWVzdChmdWxsTWVzc2FnZSk7XG4gICAgICAgIGNhc2UgLTQ6XG4gICAgICAgICAgdGhyb3cgbmV3IEFzc2VtYmxlZFRyYW5zYWN0aW9uLkVycm9ycy5Vc2VyUmVqZWN0ZWQoZnVsbE1lc3NhZ2UpO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIlVuaGFuZGxlZCBlcnJvcjogXCIuY29uY2F0KGZ1bGxNZXNzYWdlKSk7XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInNpbXVsYXRpb25EYXRhXCIsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICB2YXIgX3NpbXVsYXRpb24kcmVzdWx0O1xuICAgICAgaWYgKHRoaXMuc2ltdWxhdGlvblJlc3VsdCAmJiB0aGlzLnNpbXVsYXRpb25UcmFuc2FjdGlvbkRhdGEpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICByZXN1bHQ6IHRoaXMuc2ltdWxhdGlvblJlc3VsdCxcbiAgICAgICAgICB0cmFuc2FjdGlvbkRhdGE6IHRoaXMuc2ltdWxhdGlvblRyYW5zYWN0aW9uRGF0YVxuICAgICAgICB9O1xuICAgICAgfVxuICAgICAgdmFyIHNpbXVsYXRpb24gPSB0aGlzLnNpbXVsYXRpb247XG4gICAgICBpZiAoIXNpbXVsYXRpb24pIHtcbiAgICAgICAgdGhyb3cgbmV3IEFzc2VtYmxlZFRyYW5zYWN0aW9uLkVycm9ycy5Ob3RZZXRTaW11bGF0ZWQoXCJUcmFuc2FjdGlvbiBoYXMgbm90IHlldCBiZWVuIHNpbXVsYXRlZFwiKTtcbiAgICAgIH1cbiAgICAgIGlmIChfYXBpLkFwaS5pc1NpbXVsYXRpb25FcnJvcihzaW11bGF0aW9uKSkge1xuICAgICAgICB0aHJvdyBuZXcgQXNzZW1ibGVkVHJhbnNhY3Rpb24uRXJyb3JzLlNpbXVsYXRpb25GYWlsZWQoXCJUcmFuc2FjdGlvbiBzaW11bGF0aW9uIGZhaWxlZDogXFxcIlwiLmNvbmNhdChzaW11bGF0aW9uLmVycm9yLCBcIlxcXCJcIikpO1xuICAgICAgfVxuICAgICAgaWYgKF9hcGkuQXBpLmlzU2ltdWxhdGlvblJlc3RvcmUoc2ltdWxhdGlvbikpIHtcbiAgICAgICAgdGhyb3cgbmV3IEFzc2VtYmxlZFRyYW5zYWN0aW9uLkVycm9ycy5FeHBpcmVkU3RhdGUoXCJZb3UgbmVlZCB0byByZXN0b3JlIHNvbWUgY29udHJhY3Qgc3RhdGUgYmVmb3JlIHlvdSBjYW4gaW52b2tlIHRoaXMgbWV0aG9kLlxcblwiICsgJ1lvdSBjYW4gc2V0IGByZXN0b3JlYCB0byB0cnVlIGluIHRoZSBtZXRob2Qgb3B0aW9ucyBpbiBvcmRlciB0byAnICsgJ2F1dG9tYXRpY2FsbHkgcmVzdG9yZSB0aGUgY29udHJhY3Qgc3RhdGUgd2hlbiBuZWVkZWQuJyk7XG4gICAgICB9XG4gICAgICB0aGlzLnNpbXVsYXRpb25SZXN1bHQgPSAoX3NpbXVsYXRpb24kcmVzdWx0ID0gc2ltdWxhdGlvbi5yZXN1bHQpICE9PSBudWxsICYmIF9zaW11bGF0aW9uJHJlc3VsdCAhPT0gdm9pZCAwID8gX3NpbXVsYXRpb24kcmVzdWx0IDoge1xuICAgICAgICBhdXRoOiBbXSxcbiAgICAgICAgcmV0dmFsOiBfc3RlbGxhckJhc2UueGRyLlNjVmFsLnNjdlZvaWQoKVxuICAgICAgfTtcbiAgICAgIHRoaXMuc2ltdWxhdGlvblRyYW5zYWN0aW9uRGF0YSA9IHNpbXVsYXRpb24udHJhbnNhY3Rpb25EYXRhLmJ1aWxkKCk7XG4gICAgICByZXR1cm4ge1xuICAgICAgICByZXN1bHQ6IHRoaXMuc2ltdWxhdGlvblJlc3VsdCxcbiAgICAgICAgdHJhbnNhY3Rpb25EYXRhOiB0aGlzLnNpbXVsYXRpb25UcmFuc2FjdGlvbkRhdGFcbiAgICAgIH07XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInJlc3VsdFwiLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgaWYgKCF0aGlzLnNpbXVsYXRpb25EYXRhLnJlc3VsdCkge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIk5vIHNpbXVsYXRpb24gcmVzdWx0IVwiKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5vcHRpb25zLnBhcnNlUmVzdWx0WGRyKHRoaXMuc2ltdWxhdGlvbkRhdGEucmVzdWx0LnJldHZhbCk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGlmICghKDAsIF91dGlscy5pbXBsZW1lbnRzVG9TdHJpbmcpKGUpKSB0aHJvdyBlO1xuICAgICAgICB2YXIgZXJyID0gdGhpcy5wYXJzZUVycm9yKGUudG9TdHJpbmcoKSk7XG4gICAgICAgIGlmIChlcnIpIHJldHVybiBlcnI7XG4gICAgICAgIHRocm93IGU7XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInBhcnNlRXJyb3JcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcGFyc2VFcnJvcihlcnJvck1lc3NhZ2UpIHtcbiAgICAgIGlmICghdGhpcy5vcHRpb25zLmVycm9yVHlwZXMpIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICB2YXIgbWF0Y2ggPSBlcnJvck1lc3NhZ2UubWF0Y2goX3V0aWxzLmNvbnRyYWN0RXJyb3JQYXR0ZXJuKTtcbiAgICAgIGlmICghbWF0Y2gpIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICB2YXIgaSA9IHBhcnNlSW50KG1hdGNoWzFdLCAxMCk7XG4gICAgICB2YXIgZXJyID0gdGhpcy5vcHRpb25zLmVycm9yVHlwZXNbaV07XG4gICAgICBpZiAoIWVycikgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgIHJldHVybiBuZXcgX3J1c3RfcmVzdWx0LkVycihlcnIpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJzZW5kXCIsXG4gICAgdmFsdWU6IChmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgX3NlbmQgPSBfYXN5bmNUb0dlbmVyYXRvcihfcmVnZW5lcmF0b3JSdW50aW1lKCkubWFyayhmdW5jdGlvbiBfY2FsbGVlNygpIHtcbiAgICAgICAgdmFyIHNlbnQ7XG4gICAgICAgIHJldHVybiBfcmVnZW5lcmF0b3JSdW50aW1lKCkud3JhcChmdW5jdGlvbiBfY2FsbGVlNyQoX2NvbnRleHQ4KSB7XG4gICAgICAgICAgd2hpbGUgKDEpIHN3aXRjaCAoX2NvbnRleHQ4LnByZXYgPSBfY29udGV4dDgubmV4dCkge1xuICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICBpZiAodGhpcy5zaWduZWQpIHtcbiAgICAgICAgICAgICAgICBfY29udGV4dDgubmV4dCA9IDI7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVGhlIHRyYW5zYWN0aW9uIGhhcyBub3QgeWV0IGJlZW4gc2lnbmVkLiBSdW4gYHNpZ25gIGZpcnN0LCBvciB1c2UgYHNpZ25BbmRTZW5kYCBpbnN0ZWFkLlwiKTtcbiAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgX2NvbnRleHQ4Lm5leHQgPSA0O1xuICAgICAgICAgICAgICByZXR1cm4gX3NlbnRfdHJhbnNhY3Rpb24uU2VudFRyYW5zYWN0aW9uLmluaXQodGhpcyk7XG4gICAgICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgICAgIHNlbnQgPSBfY29udGV4dDguc2VudDtcbiAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0OC5hYnJ1cHQoXCJyZXR1cm5cIiwgc2VudCk7XG4gICAgICAgICAgICBjYXNlIDY6XG4gICAgICAgICAgICBjYXNlIFwiZW5kXCI6XG4gICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDguc3RvcCgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSwgX2NhbGxlZTcsIHRoaXMpO1xuICAgICAgfSkpO1xuICAgICAgZnVuY3Rpb24gc2VuZCgpIHtcbiAgICAgICAgcmV0dXJuIF9zZW5kLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICB9XG4gICAgICByZXR1cm4gc2VuZDtcbiAgICB9KCkpXG4gIH0sIHtcbiAgICBrZXk6IFwiaXNSZWFkQ2FsbFwiLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgdmFyIGF1dGhzQ291bnQgPSB0aGlzLnNpbXVsYXRpb25EYXRhLnJlc3VsdC5hdXRoLmxlbmd0aDtcbiAgICAgIHZhciB3cml0ZUxlbmd0aCA9IHRoaXMuc2ltdWxhdGlvbkRhdGEudHJhbnNhY3Rpb25EYXRhLnJlc291cmNlcygpLmZvb3RwcmludCgpLnJlYWRXcml0ZSgpLmxlbmd0aDtcbiAgICAgIHJldHVybiBhdXRoc0NvdW50ID09PSAwICYmIHdyaXRlTGVuZ3RoID09PSAwO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJyZXN0b3JlRm9vdHByaW50XCIsXG4gICAgdmFsdWU6IChmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgX3Jlc3RvcmVGb290cHJpbnQgPSBfYXN5bmNUb0dlbmVyYXRvcihfcmVnZW5lcmF0b3JSdW50aW1lKCkubWFyayhmdW5jdGlvbiBfY2FsbGVlOChyZXN0b3JlUHJlYW1ibGUsIGFjY291bnQpIHtcbiAgICAgICAgdmFyIHJlc3RvcmVUeCwgc2VudFRyYW5zYWN0aW9uO1xuICAgICAgICByZXR1cm4gX3JlZ2VuZXJhdG9yUnVudGltZSgpLndyYXAoZnVuY3Rpb24gX2NhbGxlZTgkKF9jb250ZXh0OSkge1xuICAgICAgICAgIHdoaWxlICgxKSBzd2l0Y2ggKF9jb250ZXh0OS5wcmV2ID0gX2NvbnRleHQ5Lm5leHQpIHtcbiAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5zaWduVHJhbnNhY3Rpb24pIHtcbiAgICAgICAgICAgICAgICBfY29udGV4dDkubmV4dCA9IDI7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiRm9yIGF1dG9tYXRpYyByZXN0b3JlIHRvIHdvcmsgeW91IG11c3QgcHJvdmlkZSBhIHNpZ25UcmFuc2FjdGlvbiBmdW5jdGlvbiB3aGVuIGluaXRpYWxpemluZyB5b3VyIENsaWVudFwiKTtcbiAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgaWYgKCEoYWNjb3VudCAhPT0gbnVsbCAmJiBhY2NvdW50ICE9PSB2b2lkIDApKSB7XG4gICAgICAgICAgICAgICAgX2NvbnRleHQ5Lm5leHQgPSA2O1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIF9jb250ZXh0OS50MCA9IGFjY291bnQ7XG4gICAgICAgICAgICAgIF9jb250ZXh0OS5uZXh0ID0gOTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIDY6XG4gICAgICAgICAgICAgIF9jb250ZXh0OS5uZXh0ID0gODtcbiAgICAgICAgICAgICAgcmV0dXJuICgwLCBfdXRpbHMuZ2V0QWNjb3VudCkodGhpcy5vcHRpb25zLCB0aGlzLnNlcnZlcik7XG4gICAgICAgICAgICBjYXNlIDg6XG4gICAgICAgICAgICAgIF9jb250ZXh0OS50MCA9IF9jb250ZXh0OS5zZW50O1xuICAgICAgICAgICAgY2FzZSA5OlxuICAgICAgICAgICAgICBhY2NvdW50ID0gX2NvbnRleHQ5LnQwO1xuICAgICAgICAgICAgICBfY29udGV4dDkubmV4dCA9IDEyO1xuICAgICAgICAgICAgICByZXR1cm4gQXNzZW1ibGVkVHJhbnNhY3Rpb24uYnVpbGRGb290cHJpbnRSZXN0b3JlVHJhbnNhY3Rpb24oX29iamVjdFNwcmVhZCh7fSwgdGhpcy5vcHRpb25zKSwgcmVzdG9yZVByZWFtYmxlLnRyYW5zYWN0aW9uRGF0YSwgYWNjb3VudCwgcmVzdG9yZVByZWFtYmxlLm1pblJlc291cmNlRmVlKTtcbiAgICAgICAgICAgIGNhc2UgMTI6XG4gICAgICAgICAgICAgIHJlc3RvcmVUeCA9IF9jb250ZXh0OS5zZW50O1xuICAgICAgICAgICAgICBfY29udGV4dDkubmV4dCA9IDE1O1xuICAgICAgICAgICAgICByZXR1cm4gcmVzdG9yZVR4LnNpZ25BbmRTZW5kKCk7XG4gICAgICAgICAgICBjYXNlIDE1OlxuICAgICAgICAgICAgICBzZW50VHJhbnNhY3Rpb24gPSBfY29udGV4dDkuc2VudDtcbiAgICAgICAgICAgICAgaWYgKHNlbnRUcmFuc2FjdGlvbi5nZXRUcmFuc2FjdGlvblJlc3BvbnNlKSB7XG4gICAgICAgICAgICAgICAgX2NvbnRleHQ5Lm5leHQgPSAxODtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB0aHJvdyBuZXcgQXNzZW1ibGVkVHJhbnNhY3Rpb24uRXJyb3JzLlJlc3RvcmF0aW9uRmFpbHVyZShcIlRoZSBhdHRlbXB0IGF0IGF1dG9tYXRpYyByZXN0b3JlIGZhaWxlZC4gXFxuXCIuY29uY2F0KEpTT04uc3RyaW5naWZ5KHNlbnRUcmFuc2FjdGlvbikpKTtcbiAgICAgICAgICAgIGNhc2UgMTg6XG4gICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDkuYWJydXB0KFwicmV0dXJuXCIsIHNlbnRUcmFuc2FjdGlvbi5nZXRUcmFuc2FjdGlvblJlc3BvbnNlKTtcbiAgICAgICAgICAgIGNhc2UgMTk6XG4gICAgICAgICAgICBjYXNlIFwiZW5kXCI6XG4gICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDkuc3RvcCgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSwgX2NhbGxlZTgsIHRoaXMpO1xuICAgICAgfSkpO1xuICAgICAgZnVuY3Rpb24gcmVzdG9yZUZvb3RwcmludChfeDIsIF94Mykge1xuICAgICAgICByZXR1cm4gX3Jlc3RvcmVGb290cHJpbnQuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN0b3JlRm9vdHByaW50O1xuICAgIH0oKSlcbiAgfV0sIFt7XG4gICAga2V5OiBcImZyb21KU09OXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGZyb21KU09OKG9wdGlvbnMsIF9yZWYxMikge1xuICAgICAgdmFyIHR4ID0gX3JlZjEyLnR4LFxuICAgICAgICBzaW11bGF0aW9uUmVzdWx0ID0gX3JlZjEyLnNpbXVsYXRpb25SZXN1bHQsXG4gICAgICAgIHNpbXVsYXRpb25UcmFuc2FjdGlvbkRhdGEgPSBfcmVmMTIuc2ltdWxhdGlvblRyYW5zYWN0aW9uRGF0YTtcbiAgICAgIHZhciB0eG4gPSBuZXcgQXNzZW1ibGVkVHJhbnNhY3Rpb24ob3B0aW9ucyk7XG4gICAgICB0eG4uYnVpbHQgPSBfc3RlbGxhckJhc2UuVHJhbnNhY3Rpb25CdWlsZGVyLmZyb21YRFIodHgsIG9wdGlvbnMubmV0d29ya1Bhc3NwaHJhc2UpO1xuICAgICAgdHhuLnNpbXVsYXRpb25SZXN1bHQgPSB7XG4gICAgICAgIGF1dGg6IHNpbXVsYXRpb25SZXN1bHQuYXV0aC5tYXAoZnVuY3Rpb24gKGEpIHtcbiAgICAgICAgICByZXR1cm4gX3N0ZWxsYXJCYXNlLnhkci5Tb3JvYmFuQXV0aG9yaXphdGlvbkVudHJ5LmZyb21YRFIoYSwgXCJiYXNlNjRcIik7XG4gICAgICAgIH0pLFxuICAgICAgICByZXR2YWw6IF9zdGVsbGFyQmFzZS54ZHIuU2NWYWwuZnJvbVhEUihzaW11bGF0aW9uUmVzdWx0LnJldHZhbCwgXCJiYXNlNjRcIilcbiAgICAgIH07XG4gICAgICB0eG4uc2ltdWxhdGlvblRyYW5zYWN0aW9uRGF0YSA9IF9zdGVsbGFyQmFzZS54ZHIuU29yb2JhblRyYW5zYWN0aW9uRGF0YS5mcm9tWERSKHNpbXVsYXRpb25UcmFuc2FjdGlvbkRhdGEsIFwiYmFzZTY0XCIpO1xuICAgICAgcmV0dXJuIHR4bjtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiZnJvbVhEUlwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBmcm9tWERSKG9wdGlvbnMsIGVuY29kZWRYRFIsIHNwZWMpIHtcbiAgICAgIHZhciBfb3BlcmF0aW9uJGZ1bmM7XG4gICAgICB2YXIgZW52ZWxvcGUgPSBfc3RlbGxhckJhc2UueGRyLlRyYW5zYWN0aW9uRW52ZWxvcGUuZnJvbVhEUihlbmNvZGVkWERSLCBcImJhc2U2NFwiKTtcbiAgICAgIHZhciBidWlsdCA9IF9zdGVsbGFyQmFzZS5UcmFuc2FjdGlvbkJ1aWxkZXIuZnJvbVhEUihlbnZlbG9wZSwgb3B0aW9ucy5uZXR3b3JrUGFzc3BocmFzZSk7XG4gICAgICB2YXIgb3BlcmF0aW9uID0gYnVpbHQub3BlcmF0aW9uc1swXTtcbiAgICAgIGlmICghKG9wZXJhdGlvbiAhPT0gbnVsbCAmJiBvcGVyYXRpb24gIT09IHZvaWQgMCAmJiAoX29wZXJhdGlvbiRmdW5jID0gb3BlcmF0aW9uLmZ1bmMpICE9PSBudWxsICYmIF9vcGVyYXRpb24kZnVuYyAhPT0gdm9pZCAwICYmIF9vcGVyYXRpb24kZnVuYy52YWx1ZSkgfHwgdHlwZW9mIG9wZXJhdGlvbi5mdW5jLnZhbHVlICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkNvdWxkIG5vdCBleHRyYWN0IHRoZSBtZXRob2QgZnJvbSB0aGUgdHJhbnNhY3Rpb24gZW52ZWxvcGUuXCIpO1xuICAgICAgfVxuICAgICAgdmFyIGludm9rZUNvbnRyYWN0QXJncyA9IG9wZXJhdGlvbi5mdW5jLnZhbHVlKCk7XG4gICAgICBpZiAoIShpbnZva2VDb250cmFjdEFyZ3MgIT09IG51bGwgJiYgaW52b2tlQ29udHJhY3RBcmdzICE9PSB2b2lkIDAgJiYgaW52b2tlQ29udHJhY3RBcmdzLmZ1bmN0aW9uTmFtZSkpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQ291bGQgbm90IGV4dHJhY3QgdGhlIG1ldGhvZCBuYW1lIGZyb20gdGhlIHRyYW5zYWN0aW9uIGVudmVsb3BlLlwiKTtcbiAgICAgIH1cbiAgICAgIHZhciBtZXRob2QgPSBpbnZva2VDb250cmFjdEFyZ3MuZnVuY3Rpb25OYW1lKCkudG9TdHJpbmcoJ3V0Zi04Jyk7XG4gICAgICB2YXIgdHhuID0gbmV3IEFzc2VtYmxlZFRyYW5zYWN0aW9uKF9vYmplY3RTcHJlYWQoX29iamVjdFNwcmVhZCh7fSwgb3B0aW9ucyksIHt9LCB7XG4gICAgICAgIG1ldGhvZDogbWV0aG9kLFxuICAgICAgICBwYXJzZVJlc3VsdFhkcjogZnVuY3Rpb24gcGFyc2VSZXN1bHRYZHIocmVzdWx0KSB7XG4gICAgICAgICAgcmV0dXJuIHNwZWMuZnVuY1Jlc1RvTmF0aXZlKG1ldGhvZCwgcmVzdWx0KTtcbiAgICAgICAgfVxuICAgICAgfSkpO1xuICAgICAgdHhuLmJ1aWx0ID0gYnVpbHQ7XG4gICAgICByZXR1cm4gdHhuO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJidWlsZFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBidWlsZChvcHRpb25zKSB7XG4gICAgICB2YXIgX29wdGlvbnMkYXJncztcbiAgICAgIHZhciBjb250cmFjdCA9IG5ldyBfc3RlbGxhckJhc2UuQ29udHJhY3Qob3B0aW9ucy5jb250cmFjdElkKTtcbiAgICAgIHJldHVybiBBc3NlbWJsZWRUcmFuc2FjdGlvbi5idWlsZFdpdGhPcChjb250cmFjdC5jYWxsLmFwcGx5KGNvbnRyYWN0LCBbb3B0aW9ucy5tZXRob2RdLmNvbmNhdChfdG9Db25zdW1hYmxlQXJyYXkoKF9vcHRpb25zJGFyZ3MgPSBvcHRpb25zLmFyZ3MpICE9PSBudWxsICYmIF9vcHRpb25zJGFyZ3MgIT09IHZvaWQgMCA/IF9vcHRpb25zJGFyZ3MgOiBbXSkpKSwgb3B0aW9ucyk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImJ1aWxkV2l0aE9wXCIsXG4gICAgdmFsdWU6IChmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgX2J1aWxkV2l0aE9wID0gX2FzeW5jVG9HZW5lcmF0b3IoX3JlZ2VuZXJhdG9yUnVudGltZSgpLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTkob3BlcmF0aW9uLCBvcHRpb25zKSB7XG4gICAgICAgIHZhciBfb3B0aW9ucyRmZWUsIF9vcHRpb25zJHRpbWVvdXRJblNlYztcbiAgICAgICAgdmFyIHR4LCBhY2NvdW50O1xuICAgICAgICByZXR1cm4gX3JlZ2VuZXJhdG9yUnVudGltZSgpLndyYXAoZnVuY3Rpb24gX2NhbGxlZTkkKF9jb250ZXh0MTApIHtcbiAgICAgICAgICB3aGlsZSAoMSkgc3dpdGNoIChfY29udGV4dDEwLnByZXYgPSBfY29udGV4dDEwLm5leHQpIHtcbiAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgdHggPSBuZXcgQXNzZW1ibGVkVHJhbnNhY3Rpb24ob3B0aW9ucyk7XG4gICAgICAgICAgICAgIF9jb250ZXh0MTAubmV4dCA9IDM7XG4gICAgICAgICAgICAgIHJldHVybiAoMCwgX3V0aWxzLmdldEFjY291bnQpKG9wdGlvbnMsIHR4LnNlcnZlcik7XG4gICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgIGFjY291bnQgPSBfY29udGV4dDEwLnNlbnQ7XG4gICAgICAgICAgICAgIHR4LnJhdyA9IG5ldyBfc3RlbGxhckJhc2UuVHJhbnNhY3Rpb25CdWlsZGVyKGFjY291bnQsIHtcbiAgICAgICAgICAgICAgICBmZWU6IChfb3B0aW9ucyRmZWUgPSBvcHRpb25zLmZlZSkgIT09IG51bGwgJiYgX29wdGlvbnMkZmVlICE9PSB2b2lkIDAgPyBfb3B0aW9ucyRmZWUgOiBfc3RlbGxhckJhc2UuQkFTRV9GRUUsXG4gICAgICAgICAgICAgICAgbmV0d29ya1Bhc3NwaHJhc2U6IG9wdGlvbnMubmV0d29ya1Bhc3NwaHJhc2VcbiAgICAgICAgICAgICAgfSkuc2V0VGltZW91dCgoX29wdGlvbnMkdGltZW91dEluU2VjID0gb3B0aW9ucy50aW1lb3V0SW5TZWNvbmRzKSAhPT0gbnVsbCAmJiBfb3B0aW9ucyR0aW1lb3V0SW5TZWMgIT09IHZvaWQgMCA/IF9vcHRpb25zJHRpbWVvdXRJblNlYyA6IF90eXBlcy5ERUZBVUxUX1RJTUVPVVQpLmFkZE9wZXJhdGlvbihvcGVyYXRpb24pO1xuICAgICAgICAgICAgICBpZiAoIW9wdGlvbnMuc2ltdWxhdGUpIHtcbiAgICAgICAgICAgICAgICBfY29udGV4dDEwLm5leHQgPSA4O1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIF9jb250ZXh0MTAubmV4dCA9IDg7XG4gICAgICAgICAgICAgIHJldHVybiB0eC5zaW11bGF0ZSgpO1xuICAgICAgICAgICAgY2FzZSA4OlxuICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQxMC5hYnJ1cHQoXCJyZXR1cm5cIiwgdHgpO1xuICAgICAgICAgICAgY2FzZSA5OlxuICAgICAgICAgICAgY2FzZSBcImVuZFwiOlxuICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQxMC5zdG9wKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9LCBfY2FsbGVlOSk7XG4gICAgICB9KSk7XG4gICAgICBmdW5jdGlvbiBidWlsZFdpdGhPcChfeDQsIF94NSkge1xuICAgICAgICByZXR1cm4gX2J1aWxkV2l0aE9wLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICB9XG4gICAgICByZXR1cm4gYnVpbGRXaXRoT3A7XG4gICAgfSgpKVxuICB9LCB7XG4gICAga2V5OiBcImJ1aWxkRm9vdHByaW50UmVzdG9yZVRyYW5zYWN0aW9uXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBfYnVpbGRGb290cHJpbnRSZXN0b3JlVHJhbnNhY3Rpb24gPSBfYXN5bmNUb0dlbmVyYXRvcihfcmVnZW5lcmF0b3JSdW50aW1lKCkubWFyayhmdW5jdGlvbiBfY2FsbGVlMTAob3B0aW9ucywgc29yb2JhbkRhdGEsIGFjY291bnQsIGZlZSkge1xuICAgICAgICB2YXIgX29wdGlvbnMkdGltZW91dEluU2VjMjtcbiAgICAgICAgdmFyIHR4O1xuICAgICAgICByZXR1cm4gX3JlZ2VuZXJhdG9yUnVudGltZSgpLndyYXAoZnVuY3Rpb24gX2NhbGxlZTEwJChfY29udGV4dDExKSB7XG4gICAgICAgICAgd2hpbGUgKDEpIHN3aXRjaCAoX2NvbnRleHQxMS5wcmV2ID0gX2NvbnRleHQxMS5uZXh0KSB7XG4gICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgIHR4ID0gbmV3IEFzc2VtYmxlZFRyYW5zYWN0aW9uKG9wdGlvbnMpO1xuICAgICAgICAgICAgICB0eC5yYXcgPSBuZXcgX3N0ZWxsYXJCYXNlLlRyYW5zYWN0aW9uQnVpbGRlcihhY2NvdW50LCB7XG4gICAgICAgICAgICAgICAgZmVlOiBmZWUsXG4gICAgICAgICAgICAgICAgbmV0d29ya1Bhc3NwaHJhc2U6IG9wdGlvbnMubmV0d29ya1Bhc3NwaHJhc2VcbiAgICAgICAgICAgICAgfSkuc2V0U29yb2JhbkRhdGEoc29yb2JhbkRhdGEgaW5zdGFuY2VvZiBfc3RlbGxhckJhc2UuU29yb2JhbkRhdGFCdWlsZGVyID8gc29yb2JhbkRhdGEuYnVpbGQoKSA6IHNvcm9iYW5EYXRhKS5hZGRPcGVyYXRpb24oX3N0ZWxsYXJCYXNlLk9wZXJhdGlvbi5yZXN0b3JlRm9vdHByaW50KHt9KSkuc2V0VGltZW91dCgoX29wdGlvbnMkdGltZW91dEluU2VjMiA9IG9wdGlvbnMudGltZW91dEluU2Vjb25kcykgIT09IG51bGwgJiYgX29wdGlvbnMkdGltZW91dEluU2VjMiAhPT0gdm9pZCAwID8gX29wdGlvbnMkdGltZW91dEluU2VjMiA6IF90eXBlcy5ERUZBVUxUX1RJTUVPVVQpO1xuICAgICAgICAgICAgICBfY29udGV4dDExLm5leHQgPSA0O1xuICAgICAgICAgICAgICByZXR1cm4gdHguc2ltdWxhdGUoe1xuICAgICAgICAgICAgICAgIHJlc3RvcmU6IGZhbHNlXG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgY2FzZSA0OlxuICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQxMS5hYnJ1cHQoXCJyZXR1cm5cIiwgdHgpO1xuICAgICAgICAgICAgY2FzZSA1OlxuICAgICAgICAgICAgY2FzZSBcImVuZFwiOlxuICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQxMS5zdG9wKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9LCBfY2FsbGVlMTApO1xuICAgICAgfSkpO1xuICAgICAgZnVuY3Rpb24gYnVpbGRGb290cHJpbnRSZXN0b3JlVHJhbnNhY3Rpb24oX3g2LCBfeDcsIF94OCwgX3g5KSB7XG4gICAgICAgIHJldHVybiBfYnVpbGRGb290cHJpbnRSZXN0b3JlVHJhbnNhY3Rpb24uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBidWlsZEZvb3RwcmludFJlc3RvcmVUcmFuc2FjdGlvbjtcbiAgICB9KClcbiAgfV0pO1xufSgpO1xuX2RlZmluZVByb3BlcnR5KEFzc2VtYmxlZFRyYW5zYWN0aW9uLCBcIkVycm9yc1wiLCB7XG4gIEV4cGlyZWRTdGF0ZTogZnVuY3Rpb24gKF9FcnJvcikge1xuICAgIGZ1bmN0aW9uIEV4cGlyZWRTdGF0ZUVycm9yKCkge1xuICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEV4cGlyZWRTdGF0ZUVycm9yKTtcbiAgICAgIHJldHVybiBfY2FsbFN1cGVyKHRoaXMsIEV4cGlyZWRTdGF0ZUVycm9yLCBhcmd1bWVudHMpO1xuICAgIH1cbiAgICBfaW5oZXJpdHMoRXhwaXJlZFN0YXRlRXJyb3IsIF9FcnJvcik7XG4gICAgcmV0dXJuIF9jcmVhdGVDbGFzcyhFeHBpcmVkU3RhdGVFcnJvcik7XG4gIH0oX3dyYXBOYXRpdmVTdXBlcihFcnJvcikpLFxuICBSZXN0b3JhdGlvbkZhaWx1cmU6IGZ1bmN0aW9uIChfRXJyb3IyKSB7XG4gICAgZnVuY3Rpb24gUmVzdG9yZUZhaWx1cmVFcnJvcigpIHtcbiAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBSZXN0b3JlRmFpbHVyZUVycm9yKTtcbiAgICAgIHJldHVybiBfY2FsbFN1cGVyKHRoaXMsIFJlc3RvcmVGYWlsdXJlRXJyb3IsIGFyZ3VtZW50cyk7XG4gICAgfVxuICAgIF9pbmhlcml0cyhSZXN0b3JlRmFpbHVyZUVycm9yLCBfRXJyb3IyKTtcbiAgICByZXR1cm4gX2NyZWF0ZUNsYXNzKFJlc3RvcmVGYWlsdXJlRXJyb3IpO1xuICB9KF93cmFwTmF0aXZlU3VwZXIoRXJyb3IpKSxcbiAgTmVlZHNNb3JlU2lnbmF0dXJlczogZnVuY3Rpb24gKF9FcnJvcjMpIHtcbiAgICBmdW5jdGlvbiBOZWVkc01vcmVTaWduYXR1cmVzRXJyb3IoKSB7XG4gICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgTmVlZHNNb3JlU2lnbmF0dXJlc0Vycm9yKTtcbiAgICAgIHJldHVybiBfY2FsbFN1cGVyKHRoaXMsIE5lZWRzTW9yZVNpZ25hdHVyZXNFcnJvciwgYXJndW1lbnRzKTtcbiAgICB9XG4gICAgX2luaGVyaXRzKE5lZWRzTW9yZVNpZ25hdHVyZXNFcnJvciwgX0Vycm9yMyk7XG4gICAgcmV0dXJuIF9jcmVhdGVDbGFzcyhOZWVkc01vcmVTaWduYXR1cmVzRXJyb3IpO1xuICB9KF93cmFwTmF0aXZlU3VwZXIoRXJyb3IpKSxcbiAgTm9TaWduYXR1cmVOZWVkZWQ6IGZ1bmN0aW9uIChfRXJyb3I0KSB7XG4gICAgZnVuY3Rpb24gTm9TaWduYXR1cmVOZWVkZWRFcnJvcigpIHtcbiAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBOb1NpZ25hdHVyZU5lZWRlZEVycm9yKTtcbiAgICAgIHJldHVybiBfY2FsbFN1cGVyKHRoaXMsIE5vU2lnbmF0dXJlTmVlZGVkRXJyb3IsIGFyZ3VtZW50cyk7XG4gICAgfVxuICAgIF9pbmhlcml0cyhOb1NpZ25hdHVyZU5lZWRlZEVycm9yLCBfRXJyb3I0KTtcbiAgICByZXR1cm4gX2NyZWF0ZUNsYXNzKE5vU2lnbmF0dXJlTmVlZGVkRXJyb3IpO1xuICB9KF93cmFwTmF0aXZlU3VwZXIoRXJyb3IpKSxcbiAgTm9VbnNpZ25lZE5vbkludm9rZXJBdXRoRW50cmllczogZnVuY3Rpb24gKF9FcnJvcjUpIHtcbiAgICBmdW5jdGlvbiBOb1Vuc2lnbmVkTm9uSW52b2tlckF1dGhFbnRyaWVzRXJyb3IoKSB7XG4gICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgTm9VbnNpZ25lZE5vbkludm9rZXJBdXRoRW50cmllc0Vycm9yKTtcbiAgICAgIHJldHVybiBfY2FsbFN1cGVyKHRoaXMsIE5vVW5zaWduZWROb25JbnZva2VyQXV0aEVudHJpZXNFcnJvciwgYXJndW1lbnRzKTtcbiAgICB9XG4gICAgX2luaGVyaXRzKE5vVW5zaWduZWROb25JbnZva2VyQXV0aEVudHJpZXNFcnJvciwgX0Vycm9yNSk7XG4gICAgcmV0dXJuIF9jcmVhdGVDbGFzcyhOb1Vuc2lnbmVkTm9uSW52b2tlckF1dGhFbnRyaWVzRXJyb3IpO1xuICB9KF93cmFwTmF0aXZlU3VwZXIoRXJyb3IpKSxcbiAgTm9TaWduZXI6IGZ1bmN0aW9uIChfRXJyb3I2KSB7XG4gICAgZnVuY3Rpb24gTm9TaWduZXJFcnJvcigpIHtcbiAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBOb1NpZ25lckVycm9yKTtcbiAgICAgIHJldHVybiBfY2FsbFN1cGVyKHRoaXMsIE5vU2lnbmVyRXJyb3IsIGFyZ3VtZW50cyk7XG4gICAgfVxuICAgIF9pbmhlcml0cyhOb1NpZ25lckVycm9yLCBfRXJyb3I2KTtcbiAgICByZXR1cm4gX2NyZWF0ZUNsYXNzKE5vU2lnbmVyRXJyb3IpO1xuICB9KF93cmFwTmF0aXZlU3VwZXIoRXJyb3IpKSxcbiAgTm90WWV0U2ltdWxhdGVkOiBmdW5jdGlvbiAoX0Vycm9yNykge1xuICAgIGZ1bmN0aW9uIE5vdFlldFNpbXVsYXRlZEVycm9yKCkge1xuICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIE5vdFlldFNpbXVsYXRlZEVycm9yKTtcbiAgICAgIHJldHVybiBfY2FsbFN1cGVyKHRoaXMsIE5vdFlldFNpbXVsYXRlZEVycm9yLCBhcmd1bWVudHMpO1xuICAgIH1cbiAgICBfaW5oZXJpdHMoTm90WWV0U2ltdWxhdGVkRXJyb3IsIF9FcnJvcjcpO1xuICAgIHJldHVybiBfY3JlYXRlQ2xhc3MoTm90WWV0U2ltdWxhdGVkRXJyb3IpO1xuICB9KF93cmFwTmF0aXZlU3VwZXIoRXJyb3IpKSxcbiAgRmFrZUFjY291bnQ6IGZ1bmN0aW9uIChfRXJyb3I4KSB7XG4gICAgZnVuY3Rpb24gRmFrZUFjY291bnRFcnJvcigpIHtcbiAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBGYWtlQWNjb3VudEVycm9yKTtcbiAgICAgIHJldHVybiBfY2FsbFN1cGVyKHRoaXMsIEZha2VBY2NvdW50RXJyb3IsIGFyZ3VtZW50cyk7XG4gICAgfVxuICAgIF9pbmhlcml0cyhGYWtlQWNjb3VudEVycm9yLCBfRXJyb3I4KTtcbiAgICByZXR1cm4gX2NyZWF0ZUNsYXNzKEZha2VBY2NvdW50RXJyb3IpO1xuICB9KF93cmFwTmF0aXZlU3VwZXIoRXJyb3IpKSxcbiAgU2ltdWxhdGlvbkZhaWxlZDogZnVuY3Rpb24gKF9FcnJvcjkpIHtcbiAgICBmdW5jdGlvbiBTaW11bGF0aW9uRmFpbGVkRXJyb3IoKSB7XG4gICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgU2ltdWxhdGlvbkZhaWxlZEVycm9yKTtcbiAgICAgIHJldHVybiBfY2FsbFN1cGVyKHRoaXMsIFNpbXVsYXRpb25GYWlsZWRFcnJvciwgYXJndW1lbnRzKTtcbiAgICB9XG4gICAgX2luaGVyaXRzKFNpbXVsYXRpb25GYWlsZWRFcnJvciwgX0Vycm9yOSk7XG4gICAgcmV0dXJuIF9jcmVhdGVDbGFzcyhTaW11bGF0aW9uRmFpbGVkRXJyb3IpO1xuICB9KF93cmFwTmF0aXZlU3VwZXIoRXJyb3IpKSxcbiAgSW50ZXJuYWxXYWxsZXRFcnJvcjogZnVuY3Rpb24gKF9FcnJvcjEwKSB7XG4gICAgZnVuY3Rpb24gSW50ZXJuYWxXYWxsZXRFcnJvcigpIHtcbiAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBJbnRlcm5hbFdhbGxldEVycm9yKTtcbiAgICAgIHJldHVybiBfY2FsbFN1cGVyKHRoaXMsIEludGVybmFsV2FsbGV0RXJyb3IsIGFyZ3VtZW50cyk7XG4gICAgfVxuICAgIF9pbmhlcml0cyhJbnRlcm5hbFdhbGxldEVycm9yLCBfRXJyb3IxMCk7XG4gICAgcmV0dXJuIF9jcmVhdGVDbGFzcyhJbnRlcm5hbFdhbGxldEVycm9yKTtcbiAgfShfd3JhcE5hdGl2ZVN1cGVyKEVycm9yKSksXG4gIEV4dGVybmFsU2VydmljZUVycm9yOiBmdW5jdGlvbiAoX0Vycm9yMTEpIHtcbiAgICBmdW5jdGlvbiBFeHRlcm5hbFNlcnZpY2VFcnJvcigpIHtcbiAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBFeHRlcm5hbFNlcnZpY2VFcnJvcik7XG4gICAgICByZXR1cm4gX2NhbGxTdXBlcih0aGlzLCBFeHRlcm5hbFNlcnZpY2VFcnJvciwgYXJndW1lbnRzKTtcbiAgICB9XG4gICAgX2luaGVyaXRzKEV4dGVybmFsU2VydmljZUVycm9yLCBfRXJyb3IxMSk7XG4gICAgcmV0dXJuIF9jcmVhdGVDbGFzcyhFeHRlcm5hbFNlcnZpY2VFcnJvcik7XG4gIH0oX3dyYXBOYXRpdmVTdXBlcihFcnJvcikpLFxuICBJbnZhbGlkQ2xpZW50UmVxdWVzdDogZnVuY3Rpb24gKF9FcnJvcjEyKSB7XG4gICAgZnVuY3Rpb24gSW52YWxpZENsaWVudFJlcXVlc3RFcnJvcigpIHtcbiAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBJbnZhbGlkQ2xpZW50UmVxdWVzdEVycm9yKTtcbiAgICAgIHJldHVybiBfY2FsbFN1cGVyKHRoaXMsIEludmFsaWRDbGllbnRSZXF1ZXN0RXJyb3IsIGFyZ3VtZW50cyk7XG4gICAgfVxuICAgIF9pbmhlcml0cyhJbnZhbGlkQ2xpZW50UmVxdWVzdEVycm9yLCBfRXJyb3IxMik7XG4gICAgcmV0dXJuIF9jcmVhdGVDbGFzcyhJbnZhbGlkQ2xpZW50UmVxdWVzdEVycm9yKTtcbiAgfShfd3JhcE5hdGl2ZVN1cGVyKEVycm9yKSksXG4gIFVzZXJSZWplY3RlZDogZnVuY3Rpb24gKF9FcnJvcjEzKSB7XG4gICAgZnVuY3Rpb24gVXNlclJlamVjdGVkRXJyb3IoKSB7XG4gICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgVXNlclJlamVjdGVkRXJyb3IpO1xuICAgICAgcmV0dXJuIF9jYWxsU3VwZXIodGhpcywgVXNlclJlamVjdGVkRXJyb3IsIGFyZ3VtZW50cyk7XG4gICAgfVxuICAgIF9pbmhlcml0cyhVc2VyUmVqZWN0ZWRFcnJvciwgX0Vycm9yMTMpO1xuICAgIHJldHVybiBfY3JlYXRlQ2xhc3MoVXNlclJlamVjdGVkRXJyb3IpO1xuICB9KF93cmFwTmF0aXZlU3VwZXIoRXJyb3IpKVxufSk7Il0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@stellar/stellar-sdk/lib/contract/assembled_transaction.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@stellar/stellar-sdk/lib/contract/basic_node_signer.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@stellar/stellar-sdk/lib/contract/basic_node_signer.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.basicNodeSigner = void 0;\nvar _stellarBase = __webpack_require__(/*! @stellar/stellar-base */ \"(ssr)/./node_modules/@stellar/stellar-base/lib/index.js\");\nfunction _regeneratorRuntime() { \"use strict\"; _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = \"function\" == typeof Symbol ? Symbol : {}, a = i.iterator || \"@@iterator\", c = i.asyncIterator || \"@@asyncIterator\", u = i.toStringTag || \"@@toStringTag\"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, \"\"); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, \"_invoke\", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: \"normal\", arg: t.call(e, r) }; } catch (t) { return { type: \"throw\", arg: t }; } } e.wrap = wrap; var h = \"suspendedStart\", l = \"suspendedYield\", f = \"executing\", s = \"completed\", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { [\"next\", \"throw\", \"return\"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if (\"throw\" !== c.type) { var u = c.arg, h = u.value; return h && \"object\" == _typeof(h) && n.call(h, \"__await\") ? e.resolve(h.__await).then(function (t) { invoke(\"next\", t, i, a); }, function (t) { invoke(\"throw\", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke(\"throw\", t, i, a); }); } a(c.arg); } var r; o(this, \"_invoke\", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw Error(\"Generator is already running\"); if (o === s) { if (\"throw\" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if (\"next\" === n.method) n.sent = n._sent = n.arg;else if (\"throw\" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else \"return\" === n.method && n.abrupt(\"return\", n.arg); o = f; var p = tryCatch(e, r, n); if (\"normal\" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } \"throw\" === p.type && (o = s, n.method = \"throw\", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, \"throw\" === n && e.iterator.return && (r.method = \"return\", r.arg = t, maybeInvokeDelegate(e, r), \"throw\" === r.method) || \"return\" !== n && (r.method = \"throw\", r.arg = new TypeError(\"The iterator does not provide a '\" + n + \"' method\")), y; var i = tryCatch(o, e.iterator, r.arg); if (\"throw\" === i.type) return r.method = \"throw\", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, \"return\" !== r.method && (r.method = \"next\", r.arg = t), r.delegate = null, y) : a : (r.method = \"throw\", r.arg = new TypeError(\"iterator result is not an object\"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = \"normal\", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: \"root\" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || \"\" === e) { var r = e[a]; if (r) return r.call(e); if (\"function\" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(_typeof(e) + \" is not iterable\"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, \"constructor\", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, \"constructor\", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, \"GeneratorFunction\"), e.isGeneratorFunction = function (t) { var e = \"function\" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || \"GeneratorFunction\" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, \"GeneratorFunction\")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, \"Generator\"), define(g, a, function () { return this; }), define(g, \"toString\", function () { return \"[object Generator]\"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) \"t\" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if (\"throw\" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = \"throw\", a.arg = e, r.next = n, o && (r.method = \"next\", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if (\"root\" === i.tryLoc) return handle(\"end\"); if (i.tryLoc <= this.prev) { var c = n.call(i, \"catchLoc\"), u = n.call(i, \"finallyLoc\"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw Error(\"try statement without catch or finally\"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, \"finallyLoc\") && this.prev < o.finallyLoc) { var i = o; break; } } i && (\"break\" === t || \"continue\" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = \"next\", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if (\"throw\" === t.type) throw t.arg; return \"break\" === t.type || \"continue\" === t.type ? this.next = t.arg : \"return\" === t.type ? (this.rval = this.arg = t.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, catch: function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if (\"throw\" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, \"next\" === this.method && (this.arg = t), y; } }, e; }\nfunction asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }\nfunction _asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, \"next\", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, \"throw\", n); } _next(void 0); }); }; }\nvar basicNodeSigner = exports.basicNodeSigner = function basicNodeSigner(keypair, networkPassphrase) {\n  return {\n    signTransaction: function () {\n      var _signTransaction = _asyncToGenerator(_regeneratorRuntime().mark(function _callee(xdr, opts) {\n        var t;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              t = _stellarBase.TransactionBuilder.fromXDR(xdr, (opts === null || opts === void 0 ? void 0 : opts.networkPassphrase) || networkPassphrase);\n              t.sign(keypair);\n              return _context.abrupt(\"return\", {\n                signedTxXdr: t.toXDR(),\n                signerAddress: keypair.publicKey()\n              });\n            case 3:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee);\n      }));\n      function signTransaction(_x, _x2) {\n        return _signTransaction.apply(this, arguments);\n      }\n      return signTransaction;\n    }(),\n    signAuthEntry: function () {\n      var _signAuthEntry = _asyncToGenerator(_regeneratorRuntime().mark(function _callee2(authEntry) {\n        var signedAuthEntry;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              signedAuthEntry = keypair.sign((0, _stellarBase.hash)(Buffer.from(authEntry, \"base64\"))).toString(\"base64\");\n              return _context2.abrupt(\"return\", {\n                signedAuthEntry: signedAuthEntry,\n                signerAddress: keypair.publicKey()\n              });\n            case 2:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2);\n      }));\n      function signAuthEntry(_x3) {\n        return _signAuthEntry.apply(this, arguments);\n      }\n      return signAuthEntry;\n    }()\n  };\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@stellar/stellar-sdk/lib/contract/basic_node_signer.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@stellar/stellar-sdk/lib/contract/client.js":
/*!******************************************************************!*\
  !*** ./node_modules/@stellar/stellar-sdk/lib/contract/client.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.Client = void 0;\nvar _stellarBase = __webpack_require__(/*! @stellar/stellar-base */ \"(ssr)/./node_modules/@stellar/stellar-base/lib/index.js\");\nvar _spec = __webpack_require__(/*! ./spec */ \"(ssr)/./node_modules/@stellar/stellar-sdk/lib/contract/spec.js\");\nvar _rpc = __webpack_require__(/*! ../rpc */ \"(ssr)/./node_modules/@stellar/stellar-sdk/lib/rpc/index.js\");\nvar _assembled_transaction = __webpack_require__(/*! ./assembled_transaction */ \"(ssr)/./node_modules/@stellar/stellar-sdk/lib/contract/assembled_transaction.js\");\nvar _utils = __webpack_require__(/*! ./utils */ \"(ssr)/./node_modules/@stellar/stellar-sdk/lib/contract/utils.js\");\nvar _excluded = [\"method\"],\n  _excluded2 = [\"wasmHash\", \"salt\", \"format\", \"fee\", \"timeoutInSeconds\", \"simulate\"];\nfunction _regeneratorRuntime() { \"use strict\"; _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = \"function\" == typeof Symbol ? Symbol : {}, a = i.iterator || \"@@iterator\", c = i.asyncIterator || \"@@asyncIterator\", u = i.toStringTag || \"@@toStringTag\"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, \"\"); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, \"_invoke\", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: \"normal\", arg: t.call(e, r) }; } catch (t) { return { type: \"throw\", arg: t }; } } e.wrap = wrap; var h = \"suspendedStart\", l = \"suspendedYield\", f = \"executing\", s = \"completed\", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { [\"next\", \"throw\", \"return\"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if (\"throw\" !== c.type) { var u = c.arg, h = u.value; return h && \"object\" == _typeof(h) && n.call(h, \"__await\") ? e.resolve(h.__await).then(function (t) { invoke(\"next\", t, i, a); }, function (t) { invoke(\"throw\", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke(\"throw\", t, i, a); }); } a(c.arg); } var r; o(this, \"_invoke\", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw Error(\"Generator is already running\"); if (o === s) { if (\"throw\" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if (\"next\" === n.method) n.sent = n._sent = n.arg;else if (\"throw\" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else \"return\" === n.method && n.abrupt(\"return\", n.arg); o = f; var p = tryCatch(e, r, n); if (\"normal\" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } \"throw\" === p.type && (o = s, n.method = \"throw\", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, \"throw\" === n && e.iterator.return && (r.method = \"return\", r.arg = t, maybeInvokeDelegate(e, r), \"throw\" === r.method) || \"return\" !== n && (r.method = \"throw\", r.arg = new TypeError(\"The iterator does not provide a '\" + n + \"' method\")), y; var i = tryCatch(o, e.iterator, r.arg); if (\"throw\" === i.type) return r.method = \"throw\", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, \"return\" !== r.method && (r.method = \"next\", r.arg = t), r.delegate = null, y) : a : (r.method = \"throw\", r.arg = new TypeError(\"iterator result is not an object\"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = \"normal\", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: \"root\" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || \"\" === e) { var r = e[a]; if (r) return r.call(e); if (\"function\" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(_typeof(e) + \" is not iterable\"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, \"constructor\", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, \"constructor\", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, \"GeneratorFunction\"), e.isGeneratorFunction = function (t) { var e = \"function\" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || \"GeneratorFunction\" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, \"GeneratorFunction\")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, \"Generator\"), define(g, a, function () { return this; }), define(g, \"toString\", function () { return \"[object Generator]\"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) \"t\" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if (\"throw\" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = \"throw\", a.arg = e, r.next = n, o && (r.method = \"next\", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if (\"root\" === i.tryLoc) return handle(\"end\"); if (i.tryLoc <= this.prev) { var c = n.call(i, \"catchLoc\"), u = n.call(i, \"finallyLoc\"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw Error(\"try statement without catch or finally\"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, \"finallyLoc\") && this.prev < o.finallyLoc) { var i = o; break; } } i && (\"break\" === t || \"continue\" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = \"next\", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if (\"throw\" === t.type) throw t.arg; return \"break\" === t.type || \"continue\" === t.type ? this.next = t.arg : \"return\" === t.type ? (this.rval = this.arg = t.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, catch: function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if (\"throw\" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, \"next\" === this.method && (this.arg = t), y; } }, e; }\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _objectWithoutProperties(e, t) { if (null == e) return {}; var o, r, i = _objectWithoutPropertiesLoose(e, t); if (Object.getOwnPropertySymbols) { var n = Object.getOwnPropertySymbols(e); for (r = 0; r < n.length; r++) o = n[r], -1 === t.indexOf(o) && {}.propertyIsEnumerable.call(e, o) && (i[o] = e[o]); } return i; }\nfunction _objectWithoutPropertiesLoose(r, e) { if (null == r) return {}; var t = {}; for (var n in r) if ({}.hasOwnProperty.call(r, n)) { if (-1 !== e.indexOf(n)) continue; t[n] = r[n]; } return t; }\nfunction _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\nfunction _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }\nfunction _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\nfunction _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nfunction _toConsumableArray(r) { return _arrayWithoutHoles(r) || _iterableToArray(r) || _unsupportedIterableToArray(r) || _nonIterableSpread(); }\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _unsupportedIterableToArray(r, a) { if (r) { if (\"string\" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return \"Object\" === t && r.constructor && (t = r.constructor.name), \"Map\" === t || \"Set\" === t ? Array.from(r) : \"Arguments\" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }\nfunction _iterableToArray(r) { if (\"undefined\" != typeof Symbol && null != r[Symbol.iterator] || null != r[\"@@iterator\"]) return Array.from(r); }\nfunction _arrayWithoutHoles(r) { if (Array.isArray(r)) return _arrayLikeToArray(r); }\nfunction _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }\nfunction asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }\nfunction _asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, \"next\", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, \"throw\", n); } _next(void 0); }); }; }\nvar CONSTRUCTOR_FUNC = \"__constructor\";\nfunction specFromWasm(_x) {\n  return _specFromWasm.apply(this, arguments);\n}\nfunction _specFromWasm() {\n  _specFromWasm = _asyncToGenerator(_regeneratorRuntime().mark(function _callee5(wasm) {\n    var xdrSections, wasmModule, customData, bufferSection, specEntryArray, spec;\n    return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n      while (1) switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.prev = 0;\n          _context5.next = 3;\n          return WebAssembly.compile(wasm);\n        case 3:\n          wasmModule = _context5.sent;\n          xdrSections = WebAssembly.Module.customSections(wasmModule, \"contractspecv0\");\n          _context5.next = 11;\n          break;\n        case 7:\n          _context5.prev = 7;\n          _context5.t0 = _context5[\"catch\"](0);\n          customData = parseWasmCustomSections(wasm);\n          xdrSections = customData.get('contractspecv0');\n        case 11:\n          if (!(!xdrSections || xdrSections.length === 0)) {\n            _context5.next = 13;\n            break;\n          }\n          throw new Error(\"Could not obtain contract spec from wasm\");\n        case 13:\n          bufferSection = Buffer.from(xdrSections[0]);\n          specEntryArray = (0, _utils.processSpecEntryStream)(bufferSection);\n          spec = new _spec.Spec(specEntryArray);\n          return _context5.abrupt(\"return\", spec);\n        case 17:\n        case \"end\":\n          return _context5.stop();\n      }\n    }, _callee5, null, [[0, 7]]);\n  }));\n  return _specFromWasm.apply(this, arguments);\n}\nfunction parseWasmCustomSections(buffer) {\n  var sections = new Map();\n  var arrayBuffer = buffer.buffer.slice(buffer.byteOffset, buffer.byteOffset + buffer.byteLength);\n  var offset = 0;\n  var read = function read(length) {\n    if (offset + length > buffer.byteLength) throw new Error('Buffer overflow');\n    var bytes = new Uint8Array(arrayBuffer, offset, length);\n    offset += length;\n    return bytes;\n  };\n  if (_toConsumableArray(read(4)).join() !== '0,97,115,109') throw new Error('Invalid WASM magic');\n  if (_toConsumableArray(read(4)).join() !== '1,0,0,0') throw new Error('Invalid WASM version');\n  while (offset < buffer.byteLength) {\n    var sectionId = read(1)[0];\n    var sectionLength = readVarUint32();\n    var start = offset;\n    if (sectionId === 0) {\n      var nameLen = readVarUint32();\n      if (nameLen === 0 || offset + nameLen > start + sectionLength) continue;\n      var nameBytes = read(nameLen);\n      var payload = read(sectionLength - (offset - start));\n      try {\n        var name = new TextDecoder('utf-8', {\n          fatal: true\n        }).decode(nameBytes);\n        if (payload.length > 0) {\n          sections.set(name, (sections.get(name) || []).concat(payload));\n        }\n      } catch (_unused) {}\n    } else {\n      offset += sectionLength;\n    }\n  }\n  function readVarUint32() {\n    var value = 0,\n      shift = 0;\n    while (true) {\n      var byte = read(1)[0];\n      value |= (byte & 0x7F) << shift;\n      if ((byte & 0x80) === 0) break;\n      if ((shift += 7) >= 32) throw new Error('Invalid WASM value');\n    }\n    return value >>> 0;\n  }\n  return sections;\n}\nfunction specFromWasmHash(_x2, _x3) {\n  return _specFromWasmHash.apply(this, arguments);\n}\nfunction _specFromWasmHash() {\n  _specFromWasmHash = _asyncToGenerator(_regeneratorRuntime().mark(function _callee6(wasmHash, options) {\n    var format,\n      rpcUrl,\n      allowHttp,\n      serverOpts,\n      server,\n      wasm,\n      _args6 = arguments;\n    return _regeneratorRuntime().wrap(function _callee6$(_context6) {\n      while (1) switch (_context6.prev = _context6.next) {\n        case 0:\n          format = _args6.length > 2 && _args6[2] !== undefined ? _args6[2] : \"hex\";\n          if (!(!options || !options.rpcUrl)) {\n            _context6.next = 3;\n            break;\n          }\n          throw new TypeError(\"options must contain rpcUrl\");\n        case 3:\n          rpcUrl = options.rpcUrl, allowHttp = options.allowHttp;\n          serverOpts = {\n            allowHttp: allowHttp\n          };\n          server = new _rpc.Server(rpcUrl, serverOpts);\n          _context6.next = 8;\n          return server.getContractWasmByHash(wasmHash, format);\n        case 8:\n          wasm = _context6.sent;\n          return _context6.abrupt(\"return\", specFromWasm(wasm));\n        case 10:\n        case \"end\":\n          return _context6.stop();\n      }\n    }, _callee6);\n  }));\n  return _specFromWasmHash.apply(this, arguments);\n}\nvar Client = exports.Client = function () {\n  function Client(spec, options) {\n    var _this = this;\n    _classCallCheck(this, Client);\n    _defineProperty(this, \"txFromJSON\", function (json) {\n      var _JSON$parse = JSON.parse(json),\n        method = _JSON$parse.method,\n        tx = _objectWithoutProperties(_JSON$parse, _excluded);\n      return _assembled_transaction.AssembledTransaction.fromJSON(_objectSpread(_objectSpread({}, _this.options), {}, {\n        method: method,\n        parseResultXdr: function parseResultXdr(result) {\n          return _this.spec.funcResToNative(method, result);\n        }\n      }), tx);\n    });\n    _defineProperty(this, \"txFromXDR\", function (xdrBase64) {\n      return _assembled_transaction.AssembledTransaction.fromXDR(_this.options, xdrBase64, _this.spec);\n    });\n    this.spec = spec;\n    this.options = options;\n    this.spec.funcs().forEach(function (xdrFn) {\n      var method = xdrFn.name().toString();\n      if (method === CONSTRUCTOR_FUNC) {\n        return;\n      }\n      var assembleTransaction = function assembleTransaction(args, methodOptions) {\n        return _assembled_transaction.AssembledTransaction.build(_objectSpread(_objectSpread(_objectSpread({\n          method: method,\n          args: args && spec.funcArgsToScVals(method, args)\n        }, options), methodOptions), {}, {\n          errorTypes: spec.errorCases().reduce(function (acc, curr) {\n            return _objectSpread(_objectSpread({}, acc), {}, _defineProperty({}, curr.value(), {\n              message: curr.doc().toString()\n            }));\n          }, {}),\n          parseResultXdr: function parseResultXdr(result) {\n            return spec.funcResToNative(method, result);\n          }\n        }));\n      };\n      _this[method] = spec.getFunc(method).inputs().length === 0 ? function (opts) {\n        return assembleTransaction(undefined, opts);\n      } : assembleTransaction;\n    });\n  }\n  return _createClass(Client, null, [{\n    key: \"deploy\",\n    value: function () {\n      var _deploy = _asyncToGenerator(_regeneratorRuntime().mark(function _callee(args, options) {\n        var wasmHash, salt, format, fee, timeoutInSeconds, simulate, clientOptions, spec, operation;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              wasmHash = options.wasmHash, salt = options.salt, format = options.format, fee = options.fee, timeoutInSeconds = options.timeoutInSeconds, simulate = options.simulate, clientOptions = _objectWithoutProperties(options, _excluded2);\n              _context.next = 3;\n              return specFromWasmHash(wasmHash, clientOptions, format);\n            case 3:\n              spec = _context.sent;\n              operation = _stellarBase.Operation.createCustomContract({\n                address: new _stellarBase.Address(options.address || options.publicKey),\n                wasmHash: typeof wasmHash === \"string\" ? Buffer.from(wasmHash, format !== null && format !== void 0 ? format : \"hex\") : wasmHash,\n                salt: salt,\n                constructorArgs: args ? spec.funcArgsToScVals(CONSTRUCTOR_FUNC, args) : []\n              });\n              return _context.abrupt(\"return\", _assembled_transaction.AssembledTransaction.buildWithOp(operation, _objectSpread(_objectSpread({\n                fee: fee,\n                timeoutInSeconds: timeoutInSeconds,\n                simulate: simulate\n              }, clientOptions), {}, {\n                contractId: \"ignored\",\n                method: CONSTRUCTOR_FUNC,\n                parseResultXdr: function parseResultXdr(result) {\n                  return new Client(spec, _objectSpread(_objectSpread({}, clientOptions), {}, {\n                    contractId: _stellarBase.Address.fromScVal(result).toString()\n                  }));\n                }\n              })));\n            case 6:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee);\n      }));\n      function deploy(_x4, _x5) {\n        return _deploy.apply(this, arguments);\n      }\n      return deploy;\n    }()\n  }, {\n    key: \"fromWasmHash\",\n    value: (function () {\n      var _fromWasmHash = _asyncToGenerator(_regeneratorRuntime().mark(function _callee2(wasmHash, options) {\n        var format,\n          rpcUrl,\n          allowHttp,\n          serverOpts,\n          server,\n          wasm,\n          _args2 = arguments;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              format = _args2.length > 2 && _args2[2] !== undefined ? _args2[2] : \"hex\";\n              if (!(!options || !options.rpcUrl)) {\n                _context2.next = 3;\n                break;\n              }\n              throw new TypeError('options must contain rpcUrl');\n            case 3:\n              rpcUrl = options.rpcUrl, allowHttp = options.allowHttp;\n              serverOpts = {\n                allowHttp: allowHttp\n              };\n              server = new _rpc.Server(rpcUrl, serverOpts);\n              _context2.next = 8;\n              return server.getContractWasmByHash(wasmHash, format);\n            case 8:\n              wasm = _context2.sent;\n              return _context2.abrupt(\"return\", Client.fromWasm(wasm, options));\n            case 10:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2);\n      }));\n      function fromWasmHash(_x6, _x7) {\n        return _fromWasmHash.apply(this, arguments);\n      }\n      return fromWasmHash;\n    }())\n  }, {\n    key: \"fromWasm\",\n    value: (function () {\n      var _fromWasm = _asyncToGenerator(_regeneratorRuntime().mark(function _callee3(wasm, options) {\n        var spec;\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.next = 2;\n              return specFromWasm(wasm);\n            case 2:\n              spec = _context3.sent;\n              return _context3.abrupt(\"return\", new Client(spec, options));\n            case 4:\n            case \"end\":\n              return _context3.stop();\n          }\n        }, _callee3);\n      }));\n      function fromWasm(_x8, _x9) {\n        return _fromWasm.apply(this, arguments);\n      }\n      return fromWasm;\n    }())\n  }, {\n    key: \"from\",\n    value: (function () {\n      var _from = _asyncToGenerator(_regeneratorRuntime().mark(function _callee4(options) {\n        var rpcUrl, contractId, allowHttp, serverOpts, server, wasm;\n        return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) switch (_context4.prev = _context4.next) {\n            case 0:\n              if (!(!options || !options.rpcUrl || !options.contractId)) {\n                _context4.next = 2;\n                break;\n              }\n              throw new TypeError('options must contain rpcUrl and contractId');\n            case 2:\n              rpcUrl = options.rpcUrl, contractId = options.contractId, allowHttp = options.allowHttp;\n              serverOpts = {\n                allowHttp: allowHttp\n              };\n              server = new _rpc.Server(rpcUrl, serverOpts);\n              _context4.next = 7;\n              return server.getContractWasmByContractId(contractId);\n            case 7:\n              wasm = _context4.sent;\n              return _context4.abrupt(\"return\", Client.fromWasm(wasm, options));\n            case 9:\n            case \"end\":\n              return _context4.stop();\n          }\n        }, _callee4);\n      }));\n      function from(_x10) {\n        return _from.apply(this, arguments);\n      }\n      return from;\n    }())\n  }]);\n}();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHN0ZWxsYXIvc3RlbGxhci1zZGsvbGliL2NvbnRyYWN0L2NsaWVudC5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYixzQkFBc0IsMkJBQTJCLG9HQUFvRyxtQkFBbUIsaUJBQWlCLHNIQUFzSDtBQUMvUyw4Q0FBNkM7QUFDN0M7QUFDQSxDQUFDLEVBQUM7QUFDRixjQUFjO0FBQ2QsbUJBQW1CLG1CQUFPLENBQUMsc0ZBQXVCO0FBQ2xELFlBQVksbUJBQU8sQ0FBQyw4RUFBUTtBQUM1QixXQUFXLG1CQUFPLENBQUMsMEVBQVE7QUFDM0IsNkJBQTZCLG1CQUFPLENBQUMsZ0hBQXlCO0FBQzlELGFBQWEsbUJBQU8sQ0FBQyxnRkFBUztBQUM5QjtBQUNBO0FBQ0EsaUNBQWlDLGNBQWMsdURBQXVELGFBQWEsYUFBYSxnR0FBZ0csaUJBQWlCLCtDQUErQyxrSEFBa0gsMkJBQTJCLHFDQUFxQywwREFBMEQsV0FBVyxNQUFNLFNBQVMsU0FBUyxZQUFZLG9DQUFvQyxzQkFBc0IsNEJBQTRCLHlIQUF5SCx5QkFBeUIsa0NBQWtDLFFBQVEsNkJBQTZCLE1BQU0sU0FBUyx1Q0FBdUMsWUFBWSxTQUFTLDZCQUE2QixlQUFlLDBGQUEwRix3QkFBd0IsZ0NBQWdDLHlDQUF5QyxZQUFZLDJCQUEyQixjQUFjLEdBQUcsMERBQTBELHlDQUF5Qyx1RkFBdUYsb0NBQW9DLG1EQUFtRCw0QkFBNEIsNEJBQTRCLElBQUksS0FBSywrQkFBK0IsOEJBQThCLDhCQUE4QiwwQkFBMEIsNEJBQTRCLHNHQUFzRywwQkFBMEIsaUJBQWlCLDJCQUEyQixxQ0FBcUMsb0JBQW9CLGlCQUFpQixrQ0FBa0MsS0FBSyxZQUFZLE9BQU8scUJBQXFCLDhCQUE4Qix3Q0FBd0MsK0JBQStCLHFCQUFxQixLQUFLLGlIQUFpSCxLQUFLLHFDQUFxQyxXQUFXLHlCQUF5QiwwREFBMEQsZUFBZSw0QkFBNEIsU0FBUyx3QkFBd0IsOEJBQThCLElBQUksb0JBQW9CLFNBQVMsbUNBQW1DLFNBQVMsdUJBQXVCLGNBQWMsa0RBQWtELGlDQUFpQyxpQ0FBaUMsOEJBQThCLHlEQUF5RCxPQUFPLDJCQUEyQiwyQkFBMkIsK0NBQStDLFNBQVMsZ0NBQWdDLHlFQUF5RSxxQ0FBcUMscUNBQXFDLDBSQUEwUix3Q0FBd0Msd0ZBQXdGLGVBQWUsa1FBQWtRLDJCQUEyQixVQUFVLGdCQUFnQiw4R0FBOEcsNEJBQTRCLDRCQUE0QixxREFBcUQsc0JBQXNCLHFCQUFxQixnQkFBZ0Isb0RBQW9ELHFCQUFxQixxQkFBcUIsY0FBYyx5QkFBeUIsMkNBQTJDLHdCQUF3QixrQ0FBa0MsT0FBTyxlQUFlLG9FQUFvRSxnREFBZ0QsdUJBQXVCLHdEQUF3RCx1RkFBdUYscURBQXFELGtEQUFrRCw0Q0FBNEMsc0lBQXNJLGlEQUFpRCwrRkFBK0YsMEJBQTBCLHlNQUF5TSwyQkFBMkIsU0FBUyxlQUFlLG1HQUFtRyxjQUFjLHlFQUF5RSwrQkFBK0IsZ0RBQWdELG1FQUFtRSxxQ0FBcUMsSUFBSSxrRkFBa0YsY0FBYyx1Q0FBdUMsOEJBQThCLDJCQUEyQiwyQkFBMkIsNEJBQTRCLHNDQUFzQyxPQUFPLFNBQVMsSUFBSSxpQkFBaUIsMkRBQTJELGlDQUFpQywyQ0FBMkMsaURBQWlELHlSQUF5UiwwQkFBMEIsZ0JBQWdCLHVDQUF1QyxxQ0FBcUMsbUJBQW1CLHFEQUFxRCx3QkFBd0IsY0FBYyx3QkFBd0IsNEZBQTRGLHlDQUF5QyxRQUFRLE9BQU8sOENBQThDLCtDQUErQyw2QkFBNkIsNERBQTRELGNBQWMsMkRBQTJELDZEQUE2RCxjQUFjLDZEQUE2RCxPQUFPLCtEQUErRCxrRUFBa0Usa0NBQWtDLHlDQUF5QyxRQUFRLE9BQU8sNEJBQTRCLG9GQUFvRixXQUFXLFdBQVcsOEZBQThGLCtCQUErQiwyR0FBMkcsc0NBQXNDLHFDQUFxQyw0TkFBNE4sK0JBQStCLHlDQUF5QyxRQUFRLE9BQU8sNEJBQTRCLGdHQUFnRyw4QkFBOEIseUNBQXlDLFFBQVEsT0FBTyw0QkFBNEIsc0JBQXNCLHNCQUFzQiwwQkFBMEIsZUFBZSxvQkFBb0IsY0FBYyx1Q0FBdUMsbURBQW1ELHlCQUF5QixnREFBZ0Qsa0RBQWtEO0FBQ3pyUix5QkFBeUIsd0JBQXdCLG9DQUFvQyx5Q0FBeUMsa0NBQWtDLDBEQUEwRCwwQkFBMEI7QUFDcFAsNEJBQTRCLGdCQUFnQixzQkFBc0IsT0FBTyxrREFBa0Qsc0RBQXNELDhCQUE4QixtSkFBbUoscUVBQXFFLEtBQUs7QUFDNWEsMENBQTBDLDBCQUEwQixtREFBbUQsb0NBQW9DLHlDQUF5QyxZQUFZLGNBQWMsd0NBQXdDLHFEQUFxRDtBQUMzVCwrQ0FBK0MsMEJBQTBCLFlBQVksdUJBQXVCLDhCQUE4QixtQ0FBbUMsZUFBZTtBQUM1TCxpQ0FBaUM7QUFDakMsbUNBQW1DLGdCQUFnQixjQUFjLE9BQU8sY0FBYztBQUN0RixpQ0FBaUMscUhBQXFILGNBQWM7QUFDcEssb0NBQW9DLG9FQUFvRSwwREFBMEQ7QUFDbEssNkJBQTZCLG1DQUFtQztBQUNoRSw4QkFBOEIsNENBQTRDLCtCQUErQixvQkFBb0IsbUNBQW1DLHNDQUFzQyx1RUFBdUU7QUFDN1EsaUNBQWlDO0FBQ2pDLGdDQUFnQztBQUNoQyw2Q0FBNkMsU0FBUywwREFBMEQsVUFBVSxnQ0FBZ0M7QUFDMUosK0JBQStCO0FBQy9CLGlDQUFpQztBQUNqQyxtQ0FBbUMsK0NBQStDLDhCQUE4QixPQUFPLGtCQUFrQjtBQUN6SSxtREFBbUQsTUFBTSxnQ0FBZ0MsWUFBWSxvQkFBb0I7QUFDekgsZ0NBQWdDLHFCQUFxQiw2QkFBNkIscUNBQXFDLHVCQUF1QixvQkFBb0IseURBQXlELHFCQUFxQiwwREFBMEQsZ0JBQWdCO0FBQzFUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCxHQUFHO0FBQ0g7QUFDQTtBQUNBLGFBQWEsY0FBYztBQUMzQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdHQUFnRyxvQkFBb0I7QUFDcEg7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1AsS0FBSztBQUNMO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVMsOEJBQThCO0FBQ3ZDO0FBQ0EsaURBQWlELFVBQVUsb0JBQW9CO0FBQy9FO0FBQ0EsYUFBYTtBQUNiLFdBQVcsSUFBSTtBQUNmO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1IsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZTtBQUNmO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxvQkFBb0I7QUFDbkM7QUFDQTtBQUNBO0FBQ0Esd0VBQXdFLG9CQUFvQjtBQUM1RjtBQUNBLG1CQUFtQjtBQUNuQjtBQUNBLGVBQWU7QUFDZjtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVCxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNULE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1QsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1QsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLEdBQUc7QUFDSCxDQUFDIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXFVTVUFSSU9cXERvY3VtZW50c1xcR2l0aHViXFxHYWxheHlLSi13YWxsZXQtLS1IYWNrXFx3ZWJcXG5vZGVfbW9kdWxlc1xcQHN0ZWxsYXJcXHN0ZWxsYXItc2RrXFxsaWJcXGNvbnRyYWN0XFxjbGllbnQuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmZ1bmN0aW9uIF90eXBlb2YobykgeyBcIkBiYWJlbC9oZWxwZXJzIC0gdHlwZW9mXCI7IHJldHVybiBfdHlwZW9mID0gXCJmdW5jdGlvblwiID09IHR5cGVvZiBTeW1ib2wgJiYgXCJzeW1ib2xcIiA9PSB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID8gZnVuY3Rpb24gKG8pIHsgcmV0dXJuIHR5cGVvZiBvOyB9IDogZnVuY3Rpb24gKG8pIHsgcmV0dXJuIG8gJiYgXCJmdW5jdGlvblwiID09IHR5cGVvZiBTeW1ib2wgJiYgby5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG8gIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG87IH0sIF90eXBlb2Yobyk7IH1cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLkNsaWVudCA9IHZvaWQgMDtcbnZhciBfc3RlbGxhckJhc2UgPSByZXF1aXJlKFwiQHN0ZWxsYXIvc3RlbGxhci1iYXNlXCIpO1xudmFyIF9zcGVjID0gcmVxdWlyZShcIi4vc3BlY1wiKTtcbnZhciBfcnBjID0gcmVxdWlyZShcIi4uL3JwY1wiKTtcbnZhciBfYXNzZW1ibGVkX3RyYW5zYWN0aW9uID0gcmVxdWlyZShcIi4vYXNzZW1ibGVkX3RyYW5zYWN0aW9uXCIpO1xudmFyIF91dGlscyA9IHJlcXVpcmUoXCIuL3V0aWxzXCIpO1xudmFyIF9leGNsdWRlZCA9IFtcIm1ldGhvZFwiXSxcbiAgX2V4Y2x1ZGVkMiA9IFtcIndhc21IYXNoXCIsIFwic2FsdFwiLCBcImZvcm1hdFwiLCBcImZlZVwiLCBcInRpbWVvdXRJblNlY29uZHNcIiwgXCJzaW11bGF0ZVwiXTtcbmZ1bmN0aW9uIF9yZWdlbmVyYXRvclJ1bnRpbWUoKSB7IFwidXNlIHN0cmljdFwiOyBfcmVnZW5lcmF0b3JSdW50aW1lID0gZnVuY3Rpb24gX3JlZ2VuZXJhdG9yUnVudGltZSgpIHsgcmV0dXJuIGU7IH07IHZhciB0LCBlID0ge30sIHIgPSBPYmplY3QucHJvdG90eXBlLCBuID0gci5oYXNPd25Qcm9wZXJ0eSwgbyA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSB8fCBmdW5jdGlvbiAodCwgZSwgcikgeyB0W2VdID0gci52YWx1ZTsgfSwgaSA9IFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgU3ltYm9sID8gU3ltYm9sIDoge30sIGEgPSBpLml0ZXJhdG9yIHx8IFwiQEBpdGVyYXRvclwiLCBjID0gaS5hc3luY0l0ZXJhdG9yIHx8IFwiQEBhc3luY0l0ZXJhdG9yXCIsIHUgPSBpLnRvU3RyaW5nVGFnIHx8IFwiQEB0b1N0cmluZ1RhZ1wiOyBmdW5jdGlvbiBkZWZpbmUodCwgZSwgcikgeyByZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KHQsIGUsIHsgdmFsdWU6IHIsIGVudW1lcmFibGU6ICEwLCBjb25maWd1cmFibGU6ICEwLCB3cml0YWJsZTogITAgfSksIHRbZV07IH0gdHJ5IHsgZGVmaW5lKHt9LCBcIlwiKTsgfSBjYXRjaCAodCkgeyBkZWZpbmUgPSBmdW5jdGlvbiBkZWZpbmUodCwgZSwgcikgeyByZXR1cm4gdFtlXSA9IHI7IH07IH0gZnVuY3Rpb24gd3JhcCh0LCBlLCByLCBuKSB7IHZhciBpID0gZSAmJiBlLnByb3RvdHlwZSBpbnN0YW5jZW9mIEdlbmVyYXRvciA/IGUgOiBHZW5lcmF0b3IsIGEgPSBPYmplY3QuY3JlYXRlKGkucHJvdG90eXBlKSwgYyA9IG5ldyBDb250ZXh0KG4gfHwgW10pOyByZXR1cm4gbyhhLCBcIl9pbnZva2VcIiwgeyB2YWx1ZTogbWFrZUludm9rZU1ldGhvZCh0LCByLCBjKSB9KSwgYTsgfSBmdW5jdGlvbiB0cnlDYXRjaCh0LCBlLCByKSB7IHRyeSB7IHJldHVybiB7IHR5cGU6IFwibm9ybWFsXCIsIGFyZzogdC5jYWxsKGUsIHIpIH07IH0gY2F0Y2ggKHQpIHsgcmV0dXJuIHsgdHlwZTogXCJ0aHJvd1wiLCBhcmc6IHQgfTsgfSB9IGUud3JhcCA9IHdyYXA7IHZhciBoID0gXCJzdXNwZW5kZWRTdGFydFwiLCBsID0gXCJzdXNwZW5kZWRZaWVsZFwiLCBmID0gXCJleGVjdXRpbmdcIiwgcyA9IFwiY29tcGxldGVkXCIsIHkgPSB7fTsgZnVuY3Rpb24gR2VuZXJhdG9yKCkge30gZnVuY3Rpb24gR2VuZXJhdG9yRnVuY3Rpb24oKSB7fSBmdW5jdGlvbiBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZSgpIHt9IHZhciBwID0ge307IGRlZmluZShwLCBhLCBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9KTsgdmFyIGQgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YsIHYgPSBkICYmIGQoZCh2YWx1ZXMoW10pKSk7IHYgJiYgdiAhPT0gciAmJiBuLmNhbGwodiwgYSkgJiYgKHAgPSB2KTsgdmFyIGcgPSBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZS5wcm90b3R5cGUgPSBHZW5lcmF0b3IucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShwKTsgZnVuY3Rpb24gZGVmaW5lSXRlcmF0b3JNZXRob2RzKHQpIHsgW1wibmV4dFwiLCBcInRocm93XCIsIFwicmV0dXJuXCJdLmZvckVhY2goZnVuY3Rpb24gKGUpIHsgZGVmaW5lKHQsIGUsIGZ1bmN0aW9uICh0KSB7IHJldHVybiB0aGlzLl9pbnZva2UoZSwgdCk7IH0pOyB9KTsgfSBmdW5jdGlvbiBBc3luY0l0ZXJhdG9yKHQsIGUpIHsgZnVuY3Rpb24gaW52b2tlKHIsIG8sIGksIGEpIHsgdmFyIGMgPSB0cnlDYXRjaCh0W3JdLCB0LCBvKTsgaWYgKFwidGhyb3dcIiAhPT0gYy50eXBlKSB7IHZhciB1ID0gYy5hcmcsIGggPSB1LnZhbHVlOyByZXR1cm4gaCAmJiBcIm9iamVjdFwiID09IF90eXBlb2YoaCkgJiYgbi5jYWxsKGgsIFwiX19hd2FpdFwiKSA/IGUucmVzb2x2ZShoLl9fYXdhaXQpLnRoZW4oZnVuY3Rpb24gKHQpIHsgaW52b2tlKFwibmV4dFwiLCB0LCBpLCBhKTsgfSwgZnVuY3Rpb24gKHQpIHsgaW52b2tlKFwidGhyb3dcIiwgdCwgaSwgYSk7IH0pIDogZS5yZXNvbHZlKGgpLnRoZW4oZnVuY3Rpb24gKHQpIHsgdS52YWx1ZSA9IHQsIGkodSk7IH0sIGZ1bmN0aW9uICh0KSB7IHJldHVybiBpbnZva2UoXCJ0aHJvd1wiLCB0LCBpLCBhKTsgfSk7IH0gYShjLmFyZyk7IH0gdmFyIHI7IG8odGhpcywgXCJfaW52b2tlXCIsIHsgdmFsdWU6IGZ1bmN0aW9uIHZhbHVlKHQsIG4pIHsgZnVuY3Rpb24gY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmcoKSB7IHJldHVybiBuZXcgZShmdW5jdGlvbiAoZSwgcikgeyBpbnZva2UodCwgbiwgZSwgcik7IH0pOyB9IHJldHVybiByID0gciA/IHIudGhlbihjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZywgY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmcpIDogY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmcoKTsgfSB9KTsgfSBmdW5jdGlvbiBtYWtlSW52b2tlTWV0aG9kKGUsIHIsIG4pIHsgdmFyIG8gPSBoOyByZXR1cm4gZnVuY3Rpb24gKGksIGEpIHsgaWYgKG8gPT09IGYpIHRocm93IEVycm9yKFwiR2VuZXJhdG9yIGlzIGFscmVhZHkgcnVubmluZ1wiKTsgaWYgKG8gPT09IHMpIHsgaWYgKFwidGhyb3dcIiA9PT0gaSkgdGhyb3cgYTsgcmV0dXJuIHsgdmFsdWU6IHQsIGRvbmU6ICEwIH07IH0gZm9yIChuLm1ldGhvZCA9IGksIG4uYXJnID0gYTs7KSB7IHZhciBjID0gbi5kZWxlZ2F0ZTsgaWYgKGMpIHsgdmFyIHUgPSBtYXliZUludm9rZURlbGVnYXRlKGMsIG4pOyBpZiAodSkgeyBpZiAodSA9PT0geSkgY29udGludWU7IHJldHVybiB1OyB9IH0gaWYgKFwibmV4dFwiID09PSBuLm1ldGhvZCkgbi5zZW50ID0gbi5fc2VudCA9IG4uYXJnO2Vsc2UgaWYgKFwidGhyb3dcIiA9PT0gbi5tZXRob2QpIHsgaWYgKG8gPT09IGgpIHRocm93IG8gPSBzLCBuLmFyZzsgbi5kaXNwYXRjaEV4Y2VwdGlvbihuLmFyZyk7IH0gZWxzZSBcInJldHVyblwiID09PSBuLm1ldGhvZCAmJiBuLmFicnVwdChcInJldHVyblwiLCBuLmFyZyk7IG8gPSBmOyB2YXIgcCA9IHRyeUNhdGNoKGUsIHIsIG4pOyBpZiAoXCJub3JtYWxcIiA9PT0gcC50eXBlKSB7IGlmIChvID0gbi5kb25lID8gcyA6IGwsIHAuYXJnID09PSB5KSBjb250aW51ZTsgcmV0dXJuIHsgdmFsdWU6IHAuYXJnLCBkb25lOiBuLmRvbmUgfTsgfSBcInRocm93XCIgPT09IHAudHlwZSAmJiAobyA9IHMsIG4ubWV0aG9kID0gXCJ0aHJvd1wiLCBuLmFyZyA9IHAuYXJnKTsgfSB9OyB9IGZ1bmN0aW9uIG1heWJlSW52b2tlRGVsZWdhdGUoZSwgcikgeyB2YXIgbiA9IHIubWV0aG9kLCBvID0gZS5pdGVyYXRvcltuXTsgaWYgKG8gPT09IHQpIHJldHVybiByLmRlbGVnYXRlID0gbnVsbCwgXCJ0aHJvd1wiID09PSBuICYmIGUuaXRlcmF0b3IucmV0dXJuICYmIChyLm1ldGhvZCA9IFwicmV0dXJuXCIsIHIuYXJnID0gdCwgbWF5YmVJbnZva2VEZWxlZ2F0ZShlLCByKSwgXCJ0aHJvd1wiID09PSByLm1ldGhvZCkgfHwgXCJyZXR1cm5cIiAhPT0gbiAmJiAoci5tZXRob2QgPSBcInRocm93XCIsIHIuYXJnID0gbmV3IFR5cGVFcnJvcihcIlRoZSBpdGVyYXRvciBkb2VzIG5vdCBwcm92aWRlIGEgJ1wiICsgbiArIFwiJyBtZXRob2RcIikpLCB5OyB2YXIgaSA9IHRyeUNhdGNoKG8sIGUuaXRlcmF0b3IsIHIuYXJnKTsgaWYgKFwidGhyb3dcIiA9PT0gaS50eXBlKSByZXR1cm4gci5tZXRob2QgPSBcInRocm93XCIsIHIuYXJnID0gaS5hcmcsIHIuZGVsZWdhdGUgPSBudWxsLCB5OyB2YXIgYSA9IGkuYXJnOyByZXR1cm4gYSA/IGEuZG9uZSA/IChyW2UucmVzdWx0TmFtZV0gPSBhLnZhbHVlLCByLm5leHQgPSBlLm5leHRMb2MsIFwicmV0dXJuXCIgIT09IHIubWV0aG9kICYmIChyLm1ldGhvZCA9IFwibmV4dFwiLCByLmFyZyA9IHQpLCByLmRlbGVnYXRlID0gbnVsbCwgeSkgOiBhIDogKHIubWV0aG9kID0gXCJ0aHJvd1wiLCByLmFyZyA9IG5ldyBUeXBlRXJyb3IoXCJpdGVyYXRvciByZXN1bHQgaXMgbm90IGFuIG9iamVjdFwiKSwgci5kZWxlZ2F0ZSA9IG51bGwsIHkpOyB9IGZ1bmN0aW9uIHB1c2hUcnlFbnRyeSh0KSB7IHZhciBlID0geyB0cnlMb2M6IHRbMF0gfTsgMSBpbiB0ICYmIChlLmNhdGNoTG9jID0gdFsxXSksIDIgaW4gdCAmJiAoZS5maW5hbGx5TG9jID0gdFsyXSwgZS5hZnRlckxvYyA9IHRbM10pLCB0aGlzLnRyeUVudHJpZXMucHVzaChlKTsgfSBmdW5jdGlvbiByZXNldFRyeUVudHJ5KHQpIHsgdmFyIGUgPSB0LmNvbXBsZXRpb24gfHwge307IGUudHlwZSA9IFwibm9ybWFsXCIsIGRlbGV0ZSBlLmFyZywgdC5jb21wbGV0aW9uID0gZTsgfSBmdW5jdGlvbiBDb250ZXh0KHQpIHsgdGhpcy50cnlFbnRyaWVzID0gW3sgdHJ5TG9jOiBcInJvb3RcIiB9XSwgdC5mb3JFYWNoKHB1c2hUcnlFbnRyeSwgdGhpcyksIHRoaXMucmVzZXQoITApOyB9IGZ1bmN0aW9uIHZhbHVlcyhlKSB7IGlmIChlIHx8IFwiXCIgPT09IGUpIHsgdmFyIHIgPSBlW2FdOyBpZiAocikgcmV0dXJuIHIuY2FsbChlKTsgaWYgKFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgZS5uZXh0KSByZXR1cm4gZTsgaWYgKCFpc05hTihlLmxlbmd0aCkpIHsgdmFyIG8gPSAtMSwgaSA9IGZ1bmN0aW9uIG5leHQoKSB7IGZvciAoOyArK28gPCBlLmxlbmd0aDspIGlmIChuLmNhbGwoZSwgbykpIHJldHVybiBuZXh0LnZhbHVlID0gZVtvXSwgbmV4dC5kb25lID0gITEsIG5leHQ7IHJldHVybiBuZXh0LnZhbHVlID0gdCwgbmV4dC5kb25lID0gITAsIG5leHQ7IH07IHJldHVybiBpLm5leHQgPSBpOyB9IH0gdGhyb3cgbmV3IFR5cGVFcnJvcihfdHlwZW9mKGUpICsgXCIgaXMgbm90IGl0ZXJhYmxlXCIpOyB9IHJldHVybiBHZW5lcmF0b3JGdW5jdGlvbi5wcm90b3R5cGUgPSBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZSwgbyhnLCBcImNvbnN0cnVjdG9yXCIsIHsgdmFsdWU6IEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlLCBjb25maWd1cmFibGU6ICEwIH0pLCBvKEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlLCBcImNvbnN0cnVjdG9yXCIsIHsgdmFsdWU6IEdlbmVyYXRvckZ1bmN0aW9uLCBjb25maWd1cmFibGU6ICEwIH0pLCBHZW5lcmF0b3JGdW5jdGlvbi5kaXNwbGF5TmFtZSA9IGRlZmluZShHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZSwgdSwgXCJHZW5lcmF0b3JGdW5jdGlvblwiKSwgZS5pc0dlbmVyYXRvckZ1bmN0aW9uID0gZnVuY3Rpb24gKHQpIHsgdmFyIGUgPSBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIHQgJiYgdC5jb25zdHJ1Y3RvcjsgcmV0dXJuICEhZSAmJiAoZSA9PT0gR2VuZXJhdG9yRnVuY3Rpb24gfHwgXCJHZW5lcmF0b3JGdW5jdGlvblwiID09PSAoZS5kaXNwbGF5TmFtZSB8fCBlLm5hbWUpKTsgfSwgZS5tYXJrID0gZnVuY3Rpb24gKHQpIHsgcmV0dXJuIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZih0LCBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZSkgOiAodC5fX3Byb3RvX18gPSBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZSwgZGVmaW5lKHQsIHUsIFwiR2VuZXJhdG9yRnVuY3Rpb25cIikpLCB0LnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoZyksIHQ7IH0sIGUuYXdyYXAgPSBmdW5jdGlvbiAodCkgeyByZXR1cm4geyBfX2F3YWl0OiB0IH07IH0sIGRlZmluZUl0ZXJhdG9yTWV0aG9kcyhBc3luY0l0ZXJhdG9yLnByb3RvdHlwZSksIGRlZmluZShBc3luY0l0ZXJhdG9yLnByb3RvdHlwZSwgYywgZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfSksIGUuQXN5bmNJdGVyYXRvciA9IEFzeW5jSXRlcmF0b3IsIGUuYXN5bmMgPSBmdW5jdGlvbiAodCwgciwgbiwgbywgaSkgeyB2b2lkIDAgPT09IGkgJiYgKGkgPSBQcm9taXNlKTsgdmFyIGEgPSBuZXcgQXN5bmNJdGVyYXRvcih3cmFwKHQsIHIsIG4sIG8pLCBpKTsgcmV0dXJuIGUuaXNHZW5lcmF0b3JGdW5jdGlvbihyKSA/IGEgOiBhLm5leHQoKS50aGVuKGZ1bmN0aW9uICh0KSB7IHJldHVybiB0LmRvbmUgPyB0LnZhbHVlIDogYS5uZXh0KCk7IH0pOyB9LCBkZWZpbmVJdGVyYXRvck1ldGhvZHMoZyksIGRlZmluZShnLCB1LCBcIkdlbmVyYXRvclwiKSwgZGVmaW5lKGcsIGEsIGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH0pLCBkZWZpbmUoZywgXCJ0b1N0cmluZ1wiLCBmdW5jdGlvbiAoKSB7IHJldHVybiBcIltvYmplY3QgR2VuZXJhdG9yXVwiOyB9KSwgZS5rZXlzID0gZnVuY3Rpb24gKHQpIHsgdmFyIGUgPSBPYmplY3QodCksIHIgPSBbXTsgZm9yICh2YXIgbiBpbiBlKSByLnB1c2gobik7IHJldHVybiByLnJldmVyc2UoKSwgZnVuY3Rpb24gbmV4dCgpIHsgZm9yICg7IHIubGVuZ3RoOykgeyB2YXIgdCA9IHIucG9wKCk7IGlmICh0IGluIGUpIHJldHVybiBuZXh0LnZhbHVlID0gdCwgbmV4dC5kb25lID0gITEsIG5leHQ7IH0gcmV0dXJuIG5leHQuZG9uZSA9ICEwLCBuZXh0OyB9OyB9LCBlLnZhbHVlcyA9IHZhbHVlcywgQ29udGV4dC5wcm90b3R5cGUgPSB7IGNvbnN0cnVjdG9yOiBDb250ZXh0LCByZXNldDogZnVuY3Rpb24gcmVzZXQoZSkgeyBpZiAodGhpcy5wcmV2ID0gMCwgdGhpcy5uZXh0ID0gMCwgdGhpcy5zZW50ID0gdGhpcy5fc2VudCA9IHQsIHRoaXMuZG9uZSA9ICExLCB0aGlzLmRlbGVnYXRlID0gbnVsbCwgdGhpcy5tZXRob2QgPSBcIm5leHRcIiwgdGhpcy5hcmcgPSB0LCB0aGlzLnRyeUVudHJpZXMuZm9yRWFjaChyZXNldFRyeUVudHJ5KSwgIWUpIGZvciAodmFyIHIgaW4gdGhpcykgXCJ0XCIgPT09IHIuY2hhckF0KDApICYmIG4uY2FsbCh0aGlzLCByKSAmJiAhaXNOYU4oK3Iuc2xpY2UoMSkpICYmICh0aGlzW3JdID0gdCk7IH0sIHN0b3A6IGZ1bmN0aW9uIHN0b3AoKSB7IHRoaXMuZG9uZSA9ICEwOyB2YXIgdCA9IHRoaXMudHJ5RW50cmllc1swXS5jb21wbGV0aW9uOyBpZiAoXCJ0aHJvd1wiID09PSB0LnR5cGUpIHRocm93IHQuYXJnOyByZXR1cm4gdGhpcy5ydmFsOyB9LCBkaXNwYXRjaEV4Y2VwdGlvbjogZnVuY3Rpb24gZGlzcGF0Y2hFeGNlcHRpb24oZSkgeyBpZiAodGhpcy5kb25lKSB0aHJvdyBlOyB2YXIgciA9IHRoaXM7IGZ1bmN0aW9uIGhhbmRsZShuLCBvKSB7IHJldHVybiBhLnR5cGUgPSBcInRocm93XCIsIGEuYXJnID0gZSwgci5uZXh0ID0gbiwgbyAmJiAoci5tZXRob2QgPSBcIm5leHRcIiwgci5hcmcgPSB0KSwgISFvOyB9IGZvciAodmFyIG8gPSB0aGlzLnRyeUVudHJpZXMubGVuZ3RoIC0gMTsgbyA+PSAwOyAtLW8pIHsgdmFyIGkgPSB0aGlzLnRyeUVudHJpZXNbb10sIGEgPSBpLmNvbXBsZXRpb247IGlmIChcInJvb3RcIiA9PT0gaS50cnlMb2MpIHJldHVybiBoYW5kbGUoXCJlbmRcIik7IGlmIChpLnRyeUxvYyA8PSB0aGlzLnByZXYpIHsgdmFyIGMgPSBuLmNhbGwoaSwgXCJjYXRjaExvY1wiKSwgdSA9IG4uY2FsbChpLCBcImZpbmFsbHlMb2NcIik7IGlmIChjICYmIHUpIHsgaWYgKHRoaXMucHJldiA8IGkuY2F0Y2hMb2MpIHJldHVybiBoYW5kbGUoaS5jYXRjaExvYywgITApOyBpZiAodGhpcy5wcmV2IDwgaS5maW5hbGx5TG9jKSByZXR1cm4gaGFuZGxlKGkuZmluYWxseUxvYyk7IH0gZWxzZSBpZiAoYykgeyBpZiAodGhpcy5wcmV2IDwgaS5jYXRjaExvYykgcmV0dXJuIGhhbmRsZShpLmNhdGNoTG9jLCAhMCk7IH0gZWxzZSB7IGlmICghdSkgdGhyb3cgRXJyb3IoXCJ0cnkgc3RhdGVtZW50IHdpdGhvdXQgY2F0Y2ggb3IgZmluYWxseVwiKTsgaWYgKHRoaXMucHJldiA8IGkuZmluYWxseUxvYykgcmV0dXJuIGhhbmRsZShpLmZpbmFsbHlMb2MpOyB9IH0gfSB9LCBhYnJ1cHQ6IGZ1bmN0aW9uIGFicnVwdCh0LCBlKSB7IGZvciAodmFyIHIgPSB0aGlzLnRyeUVudHJpZXMubGVuZ3RoIC0gMTsgciA+PSAwOyAtLXIpIHsgdmFyIG8gPSB0aGlzLnRyeUVudHJpZXNbcl07IGlmIChvLnRyeUxvYyA8PSB0aGlzLnByZXYgJiYgbi5jYWxsKG8sIFwiZmluYWxseUxvY1wiKSAmJiB0aGlzLnByZXYgPCBvLmZpbmFsbHlMb2MpIHsgdmFyIGkgPSBvOyBicmVhazsgfSB9IGkgJiYgKFwiYnJlYWtcIiA9PT0gdCB8fCBcImNvbnRpbnVlXCIgPT09IHQpICYmIGkudHJ5TG9jIDw9IGUgJiYgZSA8PSBpLmZpbmFsbHlMb2MgJiYgKGkgPSBudWxsKTsgdmFyIGEgPSBpID8gaS5jb21wbGV0aW9uIDoge307IHJldHVybiBhLnR5cGUgPSB0LCBhLmFyZyA9IGUsIGkgPyAodGhpcy5tZXRob2QgPSBcIm5leHRcIiwgdGhpcy5uZXh0ID0gaS5maW5hbGx5TG9jLCB5KSA6IHRoaXMuY29tcGxldGUoYSk7IH0sIGNvbXBsZXRlOiBmdW5jdGlvbiBjb21wbGV0ZSh0LCBlKSB7IGlmIChcInRocm93XCIgPT09IHQudHlwZSkgdGhyb3cgdC5hcmc7IHJldHVybiBcImJyZWFrXCIgPT09IHQudHlwZSB8fCBcImNvbnRpbnVlXCIgPT09IHQudHlwZSA/IHRoaXMubmV4dCA9IHQuYXJnIDogXCJyZXR1cm5cIiA9PT0gdC50eXBlID8gKHRoaXMucnZhbCA9IHRoaXMuYXJnID0gdC5hcmcsIHRoaXMubWV0aG9kID0gXCJyZXR1cm5cIiwgdGhpcy5uZXh0ID0gXCJlbmRcIikgOiBcIm5vcm1hbFwiID09PSB0LnR5cGUgJiYgZSAmJiAodGhpcy5uZXh0ID0gZSksIHk7IH0sIGZpbmlzaDogZnVuY3Rpb24gZmluaXNoKHQpIHsgZm9yICh2YXIgZSA9IHRoaXMudHJ5RW50cmllcy5sZW5ndGggLSAxOyBlID49IDA7IC0tZSkgeyB2YXIgciA9IHRoaXMudHJ5RW50cmllc1tlXTsgaWYgKHIuZmluYWxseUxvYyA9PT0gdCkgcmV0dXJuIHRoaXMuY29tcGxldGUoci5jb21wbGV0aW9uLCByLmFmdGVyTG9jKSwgcmVzZXRUcnlFbnRyeShyKSwgeTsgfSB9LCBjYXRjaDogZnVuY3Rpb24gX2NhdGNoKHQpIHsgZm9yICh2YXIgZSA9IHRoaXMudHJ5RW50cmllcy5sZW5ndGggLSAxOyBlID49IDA7IC0tZSkgeyB2YXIgciA9IHRoaXMudHJ5RW50cmllc1tlXTsgaWYgKHIudHJ5TG9jID09PSB0KSB7IHZhciBuID0gci5jb21wbGV0aW9uOyBpZiAoXCJ0aHJvd1wiID09PSBuLnR5cGUpIHsgdmFyIG8gPSBuLmFyZzsgcmVzZXRUcnlFbnRyeShyKTsgfSByZXR1cm4gbzsgfSB9IHRocm93IEVycm9yKFwiaWxsZWdhbCBjYXRjaCBhdHRlbXB0XCIpOyB9LCBkZWxlZ2F0ZVlpZWxkOiBmdW5jdGlvbiBkZWxlZ2F0ZVlpZWxkKGUsIHIsIG4pIHsgcmV0dXJuIHRoaXMuZGVsZWdhdGUgPSB7IGl0ZXJhdG9yOiB2YWx1ZXMoZSksIHJlc3VsdE5hbWU6IHIsIG5leHRMb2M6IG4gfSwgXCJuZXh0XCIgPT09IHRoaXMubWV0aG9kICYmICh0aGlzLmFyZyA9IHQpLCB5OyB9IH0sIGU7IH1cbmZ1bmN0aW9uIG93bktleXMoZSwgcikgeyB2YXIgdCA9IE9iamVjdC5rZXlzKGUpOyBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scykgeyB2YXIgbyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMoZSk7IHIgJiYgKG8gPSBvLmZpbHRlcihmdW5jdGlvbiAocikgeyByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihlLCByKS5lbnVtZXJhYmxlOyB9KSksIHQucHVzaC5hcHBseSh0LCBvKTsgfSByZXR1cm4gdDsgfVxuZnVuY3Rpb24gX29iamVjdFNwcmVhZChlKSB7IGZvciAodmFyIHIgPSAxOyByIDwgYXJndW1lbnRzLmxlbmd0aDsgcisrKSB7IHZhciB0ID0gbnVsbCAhPSBhcmd1bWVudHNbcl0gPyBhcmd1bWVudHNbcl0gOiB7fTsgciAlIDIgPyBvd25LZXlzKE9iamVjdCh0KSwgITApLmZvckVhY2goZnVuY3Rpb24gKHIpIHsgX2RlZmluZVByb3BlcnR5KGUsIHIsIHRbcl0pOyB9KSA6IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzID8gT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoZSwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnModCkpIDogb3duS2V5cyhPYmplY3QodCkpLmZvckVhY2goZnVuY3Rpb24gKHIpIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsIHIsIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodCwgcikpOyB9KTsgfSByZXR1cm4gZTsgfVxuZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKGUsIHQpIHsgaWYgKG51bGwgPT0gZSkgcmV0dXJuIHt9OyB2YXIgbywgciwgaSA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKGUsIHQpOyBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scykgeyB2YXIgbiA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMoZSk7IGZvciAociA9IDA7IHIgPCBuLmxlbmd0aDsgcisrKSBvID0gbltyXSwgLTEgPT09IHQuaW5kZXhPZihvKSAmJiB7fS5wcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKGUsIG8pICYmIChpW29dID0gZVtvXSk7IH0gcmV0dXJuIGk7IH1cbmZ1bmN0aW9uIF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHIsIGUpIHsgaWYgKG51bGwgPT0gcikgcmV0dXJuIHt9OyB2YXIgdCA9IHt9OyBmb3IgKHZhciBuIGluIHIpIGlmICh7fS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHIsIG4pKSB7IGlmICgtMSAhPT0gZS5pbmRleE9mKG4pKSBjb250aW51ZTsgdFtuXSA9IHJbbl07IH0gcmV0dXJuIHQ7IH1cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhhLCBuKSB7IGlmICghKGEgaW5zdGFuY2VvZiBuKSkgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfVxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXMoZSwgcikgeyBmb3IgKHZhciB0ID0gMDsgdCA8IHIubGVuZ3RoOyB0KyspIHsgdmFyIG8gPSByW3RdOyBvLmVudW1lcmFibGUgPSBvLmVudW1lcmFibGUgfHwgITEsIG8uY29uZmlndXJhYmxlID0gITAsIFwidmFsdWVcIiBpbiBvICYmIChvLndyaXRhYmxlID0gITApLCBPYmplY3QuZGVmaW5lUHJvcGVydHkoZSwgX3RvUHJvcGVydHlLZXkoby5rZXkpLCBvKTsgfSB9XG5mdW5jdGlvbiBfY3JlYXRlQ2xhc3MoZSwgciwgdCkgeyByZXR1cm4gciAmJiBfZGVmaW5lUHJvcGVydGllcyhlLnByb3RvdHlwZSwgciksIHQgJiYgX2RlZmluZVByb3BlcnRpZXMoZSwgdCksIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLCBcInByb3RvdHlwZVwiLCB7IHdyaXRhYmxlOiAhMSB9KSwgZTsgfVxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KGUsIHIsIHQpIHsgcmV0dXJuIChyID0gX3RvUHJvcGVydHlLZXkocikpIGluIGUgPyBPYmplY3QuZGVmaW5lUHJvcGVydHkoZSwgciwgeyB2YWx1ZTogdCwgZW51bWVyYWJsZTogITAsIGNvbmZpZ3VyYWJsZTogITAsIHdyaXRhYmxlOiAhMCB9KSA6IGVbcl0gPSB0LCBlOyB9XG5mdW5jdGlvbiBfdG9Qcm9wZXJ0eUtleSh0KSB7IHZhciBpID0gX3RvUHJpbWl0aXZlKHQsIFwic3RyaW5nXCIpOyByZXR1cm4gXCJzeW1ib2xcIiA9PSBfdHlwZW9mKGkpID8gaSA6IGkgKyBcIlwiOyB9XG5mdW5jdGlvbiBfdG9QcmltaXRpdmUodCwgcikgeyBpZiAoXCJvYmplY3RcIiAhPSBfdHlwZW9mKHQpIHx8ICF0KSByZXR1cm4gdDsgdmFyIGUgPSB0W1N5bWJvbC50b1ByaW1pdGl2ZV07IGlmICh2b2lkIDAgIT09IGUpIHsgdmFyIGkgPSBlLmNhbGwodCwgciB8fCBcImRlZmF1bHRcIik7IGlmIChcIm9iamVjdFwiICE9IF90eXBlb2YoaSkpIHJldHVybiBpOyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQEB0b1ByaW1pdGl2ZSBtdXN0IHJldHVybiBhIHByaW1pdGl2ZSB2YWx1ZS5cIik7IH0gcmV0dXJuIChcInN0cmluZ1wiID09PSByID8gU3RyaW5nIDogTnVtYmVyKSh0KTsgfVxuZnVuY3Rpb24gX3RvQ29uc3VtYWJsZUFycmF5KHIpIHsgcmV0dXJuIF9hcnJheVdpdGhvdXRIb2xlcyhyKSB8fCBfaXRlcmFibGVUb0FycmF5KHIpIHx8IF91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShyKSB8fCBfbm9uSXRlcmFibGVTcHJlYWQoKTsgfVxuZnVuY3Rpb24gX25vbkl0ZXJhYmxlU3ByZWFkKCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiSW52YWxpZCBhdHRlbXB0IHRvIHNwcmVhZCBub24taXRlcmFibGUgaW5zdGFuY2UuXFxuSW4gb3JkZXIgdG8gYmUgaXRlcmFibGUsIG5vbi1hcnJheSBvYmplY3RzIG11c3QgaGF2ZSBhIFtTeW1ib2wuaXRlcmF0b3JdKCkgbWV0aG9kLlwiKTsgfVxuZnVuY3Rpb24gX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5KHIsIGEpIHsgaWYgKHIpIHsgaWYgKFwic3RyaW5nXCIgPT0gdHlwZW9mIHIpIHJldHVybiBfYXJyYXlMaWtlVG9BcnJheShyLCBhKTsgdmFyIHQgPSB7fS50b1N0cmluZy5jYWxsKHIpLnNsaWNlKDgsIC0xKTsgcmV0dXJuIFwiT2JqZWN0XCIgPT09IHQgJiYgci5jb25zdHJ1Y3RvciAmJiAodCA9IHIuY29uc3RydWN0b3IubmFtZSksIFwiTWFwXCIgPT09IHQgfHwgXCJTZXRcIiA9PT0gdCA/IEFycmF5LmZyb20ocikgOiBcIkFyZ3VtZW50c1wiID09PSB0IHx8IC9eKD86VWl8SSludCg/Ojh8MTZ8MzIpKD86Q2xhbXBlZCk/QXJyYXkkLy50ZXN0KHQpID8gX2FycmF5TGlrZVRvQXJyYXkociwgYSkgOiB2b2lkIDA7IH0gfVxuZnVuY3Rpb24gX2l0ZXJhYmxlVG9BcnJheShyKSB7IGlmIChcInVuZGVmaW5lZFwiICE9IHR5cGVvZiBTeW1ib2wgJiYgbnVsbCAhPSByW1N5bWJvbC5pdGVyYXRvcl0gfHwgbnVsbCAhPSByW1wiQEBpdGVyYXRvclwiXSkgcmV0dXJuIEFycmF5LmZyb20ocik7IH1cbmZ1bmN0aW9uIF9hcnJheVdpdGhvdXRIb2xlcyhyKSB7IGlmIChBcnJheS5pc0FycmF5KHIpKSByZXR1cm4gX2FycmF5TGlrZVRvQXJyYXkocik7IH1cbmZ1bmN0aW9uIF9hcnJheUxpa2VUb0FycmF5KHIsIGEpIHsgKG51bGwgPT0gYSB8fCBhID4gci5sZW5ndGgpICYmIChhID0gci5sZW5ndGgpOyBmb3IgKHZhciBlID0gMCwgbiA9IEFycmF5KGEpOyBlIDwgYTsgZSsrKSBuW2VdID0gcltlXTsgcmV0dXJuIG47IH1cbmZ1bmN0aW9uIGFzeW5jR2VuZXJhdG9yU3RlcChuLCB0LCBlLCByLCBvLCBhLCBjKSB7IHRyeSB7IHZhciBpID0gblthXShjKSwgdSA9IGkudmFsdWU7IH0gY2F0Y2ggKG4pIHsgcmV0dXJuIHZvaWQgZShuKTsgfSBpLmRvbmUgPyB0KHUpIDogUHJvbWlzZS5yZXNvbHZlKHUpLnRoZW4ociwgbyk7IH1cbmZ1bmN0aW9uIF9hc3luY1RvR2VuZXJhdG9yKG4pIHsgcmV0dXJuIGZ1bmN0aW9uICgpIHsgdmFyIHQgPSB0aGlzLCBlID0gYXJndW1lbnRzOyByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHIsIG8pIHsgdmFyIGEgPSBuLmFwcGx5KHQsIGUpOyBmdW5jdGlvbiBfbmV4dChuKSB7IGFzeW5jR2VuZXJhdG9yU3RlcChhLCByLCBvLCBfbmV4dCwgX3Rocm93LCBcIm5leHRcIiwgbik7IH0gZnVuY3Rpb24gX3Rocm93KG4pIHsgYXN5bmNHZW5lcmF0b3JTdGVwKGEsIHIsIG8sIF9uZXh0LCBfdGhyb3csIFwidGhyb3dcIiwgbik7IH0gX25leHQodm9pZCAwKTsgfSk7IH07IH1cbnZhciBDT05TVFJVQ1RPUl9GVU5DID0gXCJfX2NvbnN0cnVjdG9yXCI7XG5mdW5jdGlvbiBzcGVjRnJvbVdhc20oX3gpIHtcbiAgcmV0dXJuIF9zcGVjRnJvbVdhc20uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbn1cbmZ1bmN0aW9uIF9zcGVjRnJvbVdhc20oKSB7XG4gIF9zcGVjRnJvbVdhc20gPSBfYXN5bmNUb0dlbmVyYXRvcihfcmVnZW5lcmF0b3JSdW50aW1lKCkubWFyayhmdW5jdGlvbiBfY2FsbGVlNSh3YXNtKSB7XG4gICAgdmFyIHhkclNlY3Rpb25zLCB3YXNtTW9kdWxlLCBjdXN0b21EYXRhLCBidWZmZXJTZWN0aW9uLCBzcGVjRW50cnlBcnJheSwgc3BlYztcbiAgICByZXR1cm4gX3JlZ2VuZXJhdG9yUnVudGltZSgpLndyYXAoZnVuY3Rpb24gX2NhbGxlZTUkKF9jb250ZXh0NSkge1xuICAgICAgd2hpbGUgKDEpIHN3aXRjaCAoX2NvbnRleHQ1LnByZXYgPSBfY29udGV4dDUubmV4dCkge1xuICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgX2NvbnRleHQ1LnByZXYgPSAwO1xuICAgICAgICAgIF9jb250ZXh0NS5uZXh0ID0gMztcbiAgICAgICAgICByZXR1cm4gV2ViQXNzZW1ibHkuY29tcGlsZSh3YXNtKTtcbiAgICAgICAgY2FzZSAzOlxuICAgICAgICAgIHdhc21Nb2R1bGUgPSBfY29udGV4dDUuc2VudDtcbiAgICAgICAgICB4ZHJTZWN0aW9ucyA9IFdlYkFzc2VtYmx5Lk1vZHVsZS5jdXN0b21TZWN0aW9ucyh3YXNtTW9kdWxlLCBcImNvbnRyYWN0c3BlY3YwXCIpO1xuICAgICAgICAgIF9jb250ZXh0NS5uZXh0ID0gMTE7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgNzpcbiAgICAgICAgICBfY29udGV4dDUucHJldiA9IDc7XG4gICAgICAgICAgX2NvbnRleHQ1LnQwID0gX2NvbnRleHQ1W1wiY2F0Y2hcIl0oMCk7XG4gICAgICAgICAgY3VzdG9tRGF0YSA9IHBhcnNlV2FzbUN1c3RvbVNlY3Rpb25zKHdhc20pO1xuICAgICAgICAgIHhkclNlY3Rpb25zID0gY3VzdG9tRGF0YS5nZXQoJ2NvbnRyYWN0c3BlY3YwJyk7XG4gICAgICAgIGNhc2UgMTE6XG4gICAgICAgICAgaWYgKCEoIXhkclNlY3Rpb25zIHx8IHhkclNlY3Rpb25zLmxlbmd0aCA9PT0gMCkpIHtcbiAgICAgICAgICAgIF9jb250ZXh0NS5uZXh0ID0gMTM7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQ291bGQgbm90IG9idGFpbiBjb250cmFjdCBzcGVjIGZyb20gd2FzbVwiKTtcbiAgICAgICAgY2FzZSAxMzpcbiAgICAgICAgICBidWZmZXJTZWN0aW9uID0gQnVmZmVyLmZyb20oeGRyU2VjdGlvbnNbMF0pO1xuICAgICAgICAgIHNwZWNFbnRyeUFycmF5ID0gKDAsIF91dGlscy5wcm9jZXNzU3BlY0VudHJ5U3RyZWFtKShidWZmZXJTZWN0aW9uKTtcbiAgICAgICAgICBzcGVjID0gbmV3IF9zcGVjLlNwZWMoc3BlY0VudHJ5QXJyYXkpO1xuICAgICAgICAgIHJldHVybiBfY29udGV4dDUuYWJydXB0KFwicmV0dXJuXCIsIHNwZWMpO1xuICAgICAgICBjYXNlIDE3OlxuICAgICAgICBjYXNlIFwiZW5kXCI6XG4gICAgICAgICAgcmV0dXJuIF9jb250ZXh0NS5zdG9wKCk7XG4gICAgICB9XG4gICAgfSwgX2NhbGxlZTUsIG51bGwsIFtbMCwgN11dKTtcbiAgfSkpO1xuICByZXR1cm4gX3NwZWNGcm9tV2FzbS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xufVxuZnVuY3Rpb24gcGFyc2VXYXNtQ3VzdG9tU2VjdGlvbnMoYnVmZmVyKSB7XG4gIHZhciBzZWN0aW9ucyA9IG5ldyBNYXAoKTtcbiAgdmFyIGFycmF5QnVmZmVyID0gYnVmZmVyLmJ1ZmZlci5zbGljZShidWZmZXIuYnl0ZU9mZnNldCwgYnVmZmVyLmJ5dGVPZmZzZXQgKyBidWZmZXIuYnl0ZUxlbmd0aCk7XG4gIHZhciBvZmZzZXQgPSAwO1xuICB2YXIgcmVhZCA9IGZ1bmN0aW9uIHJlYWQobGVuZ3RoKSB7XG4gICAgaWYgKG9mZnNldCArIGxlbmd0aCA+IGJ1ZmZlci5ieXRlTGVuZ3RoKSB0aHJvdyBuZXcgRXJyb3IoJ0J1ZmZlciBvdmVyZmxvdycpO1xuICAgIHZhciBieXRlcyA9IG5ldyBVaW50OEFycmF5KGFycmF5QnVmZmVyLCBvZmZzZXQsIGxlbmd0aCk7XG4gICAgb2Zmc2V0ICs9IGxlbmd0aDtcbiAgICByZXR1cm4gYnl0ZXM7XG4gIH07XG4gIGlmIChfdG9Db25zdW1hYmxlQXJyYXkocmVhZCg0KSkuam9pbigpICE9PSAnMCw5NywxMTUsMTA5JykgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIFdBU00gbWFnaWMnKTtcbiAgaWYgKF90b0NvbnN1bWFibGVBcnJheShyZWFkKDQpKS5qb2luKCkgIT09ICcxLDAsMCwwJykgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIFdBU00gdmVyc2lvbicpO1xuICB3aGlsZSAob2Zmc2V0IDwgYnVmZmVyLmJ5dGVMZW5ndGgpIHtcbiAgICB2YXIgc2VjdGlvbklkID0gcmVhZCgxKVswXTtcbiAgICB2YXIgc2VjdGlvbkxlbmd0aCA9IHJlYWRWYXJVaW50MzIoKTtcbiAgICB2YXIgc3RhcnQgPSBvZmZzZXQ7XG4gICAgaWYgKHNlY3Rpb25JZCA9PT0gMCkge1xuICAgICAgdmFyIG5hbWVMZW4gPSByZWFkVmFyVWludDMyKCk7XG4gICAgICBpZiAobmFtZUxlbiA9PT0gMCB8fCBvZmZzZXQgKyBuYW1lTGVuID4gc3RhcnQgKyBzZWN0aW9uTGVuZ3RoKSBjb250aW51ZTtcbiAgICAgIHZhciBuYW1lQnl0ZXMgPSByZWFkKG5hbWVMZW4pO1xuICAgICAgdmFyIHBheWxvYWQgPSByZWFkKHNlY3Rpb25MZW5ndGggLSAob2Zmc2V0IC0gc3RhcnQpKTtcbiAgICAgIHRyeSB7XG4gICAgICAgIHZhciBuYW1lID0gbmV3IFRleHREZWNvZGVyKCd1dGYtOCcsIHtcbiAgICAgICAgICBmYXRhbDogdHJ1ZVxuICAgICAgICB9KS5kZWNvZGUobmFtZUJ5dGVzKTtcbiAgICAgICAgaWYgKHBheWxvYWQubGVuZ3RoID4gMCkge1xuICAgICAgICAgIHNlY3Rpb25zLnNldChuYW1lLCAoc2VjdGlvbnMuZ2V0KG5hbWUpIHx8IFtdKS5jb25jYXQocGF5bG9hZCkpO1xuICAgICAgICB9XG4gICAgICB9IGNhdGNoIChfdW51c2VkKSB7fVxuICAgIH0gZWxzZSB7XG4gICAgICBvZmZzZXQgKz0gc2VjdGlvbkxlbmd0aDtcbiAgICB9XG4gIH1cbiAgZnVuY3Rpb24gcmVhZFZhclVpbnQzMigpIHtcbiAgICB2YXIgdmFsdWUgPSAwLFxuICAgICAgc2hpZnQgPSAwO1xuICAgIHdoaWxlICh0cnVlKSB7XG4gICAgICB2YXIgYnl0ZSA9IHJlYWQoMSlbMF07XG4gICAgICB2YWx1ZSB8PSAoYnl0ZSAmIDB4N0YpIDw8IHNoaWZ0O1xuICAgICAgaWYgKChieXRlICYgMHg4MCkgPT09IDApIGJyZWFrO1xuICAgICAgaWYgKChzaGlmdCArPSA3KSA+PSAzMikgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIFdBU00gdmFsdWUnKTtcbiAgICB9XG4gICAgcmV0dXJuIHZhbHVlID4+PiAwO1xuICB9XG4gIHJldHVybiBzZWN0aW9ucztcbn1cbmZ1bmN0aW9uIHNwZWNGcm9tV2FzbUhhc2goX3gyLCBfeDMpIHtcbiAgcmV0dXJuIF9zcGVjRnJvbVdhc21IYXNoLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG59XG5mdW5jdGlvbiBfc3BlY0Zyb21XYXNtSGFzaCgpIHtcbiAgX3NwZWNGcm9tV2FzbUhhc2ggPSBfYXN5bmNUb0dlbmVyYXRvcihfcmVnZW5lcmF0b3JSdW50aW1lKCkubWFyayhmdW5jdGlvbiBfY2FsbGVlNih3YXNtSGFzaCwgb3B0aW9ucykge1xuICAgIHZhciBmb3JtYXQsXG4gICAgICBycGNVcmwsXG4gICAgICBhbGxvd0h0dHAsXG4gICAgICBzZXJ2ZXJPcHRzLFxuICAgICAgc2VydmVyLFxuICAgICAgd2FzbSxcbiAgICAgIF9hcmdzNiA9IGFyZ3VtZW50cztcbiAgICByZXR1cm4gX3JlZ2VuZXJhdG9yUnVudGltZSgpLndyYXAoZnVuY3Rpb24gX2NhbGxlZTYkKF9jb250ZXh0Nikge1xuICAgICAgd2hpbGUgKDEpIHN3aXRjaCAoX2NvbnRleHQ2LnByZXYgPSBfY29udGV4dDYubmV4dCkge1xuICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgZm9ybWF0ID0gX2FyZ3M2Lmxlbmd0aCA+IDIgJiYgX2FyZ3M2WzJdICE9PSB1bmRlZmluZWQgPyBfYXJnczZbMl0gOiBcImhleFwiO1xuICAgICAgICAgIGlmICghKCFvcHRpb25zIHx8ICFvcHRpb25zLnJwY1VybCkpIHtcbiAgICAgICAgICAgIF9jb250ZXh0Ni5uZXh0ID0gMztcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwib3B0aW9ucyBtdXN0IGNvbnRhaW4gcnBjVXJsXCIpO1xuICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgcnBjVXJsID0gb3B0aW9ucy5ycGNVcmwsIGFsbG93SHR0cCA9IG9wdGlvbnMuYWxsb3dIdHRwO1xuICAgICAgICAgIHNlcnZlck9wdHMgPSB7XG4gICAgICAgICAgICBhbGxvd0h0dHA6IGFsbG93SHR0cFxuICAgICAgICAgIH07XG4gICAgICAgICAgc2VydmVyID0gbmV3IF9ycGMuU2VydmVyKHJwY1VybCwgc2VydmVyT3B0cyk7XG4gICAgICAgICAgX2NvbnRleHQ2Lm5leHQgPSA4O1xuICAgICAgICAgIHJldHVybiBzZXJ2ZXIuZ2V0Q29udHJhY3RXYXNtQnlIYXNoKHdhc21IYXNoLCBmb3JtYXQpO1xuICAgICAgICBjYXNlIDg6XG4gICAgICAgICAgd2FzbSA9IF9jb250ZXh0Ni5zZW50O1xuICAgICAgICAgIHJldHVybiBfY29udGV4dDYuYWJydXB0KFwicmV0dXJuXCIsIHNwZWNGcm9tV2FzbSh3YXNtKSk7XG4gICAgICAgIGNhc2UgMTA6XG4gICAgICAgIGNhc2UgXCJlbmRcIjpcbiAgICAgICAgICByZXR1cm4gX2NvbnRleHQ2LnN0b3AoKTtcbiAgICAgIH1cbiAgICB9LCBfY2FsbGVlNik7XG4gIH0pKTtcbiAgcmV0dXJuIF9zcGVjRnJvbVdhc21IYXNoLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG59XG52YXIgQ2xpZW50ID0gZXhwb3J0cy5DbGllbnQgPSBmdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIENsaWVudChzcGVjLCBvcHRpb25zKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgQ2xpZW50KTtcbiAgICBfZGVmaW5lUHJvcGVydHkodGhpcywgXCJ0eEZyb21KU09OXCIsIGZ1bmN0aW9uIChqc29uKSB7XG4gICAgICB2YXIgX0pTT04kcGFyc2UgPSBKU09OLnBhcnNlKGpzb24pLFxuICAgICAgICBtZXRob2QgPSBfSlNPTiRwYXJzZS5tZXRob2QsXG4gICAgICAgIHR4ID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKF9KU09OJHBhcnNlLCBfZXhjbHVkZWQpO1xuICAgICAgcmV0dXJuIF9hc3NlbWJsZWRfdHJhbnNhY3Rpb24uQXNzZW1ibGVkVHJhbnNhY3Rpb24uZnJvbUpTT04oX29iamVjdFNwcmVhZChfb2JqZWN0U3ByZWFkKHt9LCBfdGhpcy5vcHRpb25zKSwge30sIHtcbiAgICAgICAgbWV0aG9kOiBtZXRob2QsXG4gICAgICAgIHBhcnNlUmVzdWx0WGRyOiBmdW5jdGlvbiBwYXJzZVJlc3VsdFhkcihyZXN1bHQpIHtcbiAgICAgICAgICByZXR1cm4gX3RoaXMuc3BlYy5mdW5jUmVzVG9OYXRpdmUobWV0aG9kLCByZXN1bHQpO1xuICAgICAgICB9XG4gICAgICB9KSwgdHgpO1xuICAgIH0pO1xuICAgIF9kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcInR4RnJvbVhEUlwiLCBmdW5jdGlvbiAoeGRyQmFzZTY0KSB7XG4gICAgICByZXR1cm4gX2Fzc2VtYmxlZF90cmFuc2FjdGlvbi5Bc3NlbWJsZWRUcmFuc2FjdGlvbi5mcm9tWERSKF90aGlzLm9wdGlvbnMsIHhkckJhc2U2NCwgX3RoaXMuc3BlYyk7XG4gICAgfSk7XG4gICAgdGhpcy5zcGVjID0gc3BlYztcbiAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICAgIHRoaXMuc3BlYy5mdW5jcygpLmZvckVhY2goZnVuY3Rpb24gKHhkckZuKSB7XG4gICAgICB2YXIgbWV0aG9kID0geGRyRm4ubmFtZSgpLnRvU3RyaW5nKCk7XG4gICAgICBpZiAobWV0aG9kID09PSBDT05TVFJVQ1RPUl9GVU5DKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHZhciBhc3NlbWJsZVRyYW5zYWN0aW9uID0gZnVuY3Rpb24gYXNzZW1ibGVUcmFuc2FjdGlvbihhcmdzLCBtZXRob2RPcHRpb25zKSB7XG4gICAgICAgIHJldHVybiBfYXNzZW1ibGVkX3RyYW5zYWN0aW9uLkFzc2VtYmxlZFRyYW5zYWN0aW9uLmJ1aWxkKF9vYmplY3RTcHJlYWQoX29iamVjdFNwcmVhZChfb2JqZWN0U3ByZWFkKHtcbiAgICAgICAgICBtZXRob2Q6IG1ldGhvZCxcbiAgICAgICAgICBhcmdzOiBhcmdzICYmIHNwZWMuZnVuY0FyZ3NUb1NjVmFscyhtZXRob2QsIGFyZ3MpXG4gICAgICAgIH0sIG9wdGlvbnMpLCBtZXRob2RPcHRpb25zKSwge30sIHtcbiAgICAgICAgICBlcnJvclR5cGVzOiBzcGVjLmVycm9yQ2FzZXMoKS5yZWR1Y2UoZnVuY3Rpb24gKGFjYywgY3Vycikge1xuICAgICAgICAgICAgcmV0dXJuIF9vYmplY3RTcHJlYWQoX29iamVjdFNwcmVhZCh7fSwgYWNjKSwge30sIF9kZWZpbmVQcm9wZXJ0eSh7fSwgY3Vyci52YWx1ZSgpLCB7XG4gICAgICAgICAgICAgIG1lc3NhZ2U6IGN1cnIuZG9jKCkudG9TdHJpbmcoKVxuICAgICAgICAgICAgfSkpO1xuICAgICAgICAgIH0sIHt9KSxcbiAgICAgICAgICBwYXJzZVJlc3VsdFhkcjogZnVuY3Rpb24gcGFyc2VSZXN1bHRYZHIocmVzdWx0KSB7XG4gICAgICAgICAgICByZXR1cm4gc3BlYy5mdW5jUmVzVG9OYXRpdmUobWV0aG9kLCByZXN1bHQpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSkpO1xuICAgICAgfTtcbiAgICAgIF90aGlzW21ldGhvZF0gPSBzcGVjLmdldEZ1bmMobWV0aG9kKS5pbnB1dHMoKS5sZW5ndGggPT09IDAgPyBmdW5jdGlvbiAob3B0cykge1xuICAgICAgICByZXR1cm4gYXNzZW1ibGVUcmFuc2FjdGlvbih1bmRlZmluZWQsIG9wdHMpO1xuICAgICAgfSA6IGFzc2VtYmxlVHJhbnNhY3Rpb247XG4gICAgfSk7XG4gIH1cbiAgcmV0dXJuIF9jcmVhdGVDbGFzcyhDbGllbnQsIG51bGwsIFt7XG4gICAga2V5OiBcImRlcGxveVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgX2RlcGxveSA9IF9hc3luY1RvR2VuZXJhdG9yKF9yZWdlbmVyYXRvclJ1bnRpbWUoKS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUoYXJncywgb3B0aW9ucykge1xuICAgICAgICB2YXIgd2FzbUhhc2gsIHNhbHQsIGZvcm1hdCwgZmVlLCB0aW1lb3V0SW5TZWNvbmRzLCBzaW11bGF0ZSwgY2xpZW50T3B0aW9ucywgc3BlYywgb3BlcmF0aW9uO1xuICAgICAgICByZXR1cm4gX3JlZ2VuZXJhdG9yUnVudGltZSgpLndyYXAoZnVuY3Rpb24gX2NhbGxlZSQoX2NvbnRleHQpIHtcbiAgICAgICAgICB3aGlsZSAoMSkgc3dpdGNoIChfY29udGV4dC5wcmV2ID0gX2NvbnRleHQubmV4dCkge1xuICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICB3YXNtSGFzaCA9IG9wdGlvbnMud2FzbUhhc2gsIHNhbHQgPSBvcHRpb25zLnNhbHQsIGZvcm1hdCA9IG9wdGlvbnMuZm9ybWF0LCBmZWUgPSBvcHRpb25zLmZlZSwgdGltZW91dEluU2Vjb25kcyA9IG9wdGlvbnMudGltZW91dEluU2Vjb25kcywgc2ltdWxhdGUgPSBvcHRpb25zLnNpbXVsYXRlLCBjbGllbnRPcHRpb25zID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKG9wdGlvbnMsIF9leGNsdWRlZDIpO1xuICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gMztcbiAgICAgICAgICAgICAgcmV0dXJuIHNwZWNGcm9tV2FzbUhhc2god2FzbUhhc2gsIGNsaWVudE9wdGlvbnMsIGZvcm1hdCk7XG4gICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgIHNwZWMgPSBfY29udGV4dC5zZW50O1xuICAgICAgICAgICAgICBvcGVyYXRpb24gPSBfc3RlbGxhckJhc2UuT3BlcmF0aW9uLmNyZWF0ZUN1c3RvbUNvbnRyYWN0KHtcbiAgICAgICAgICAgICAgICBhZGRyZXNzOiBuZXcgX3N0ZWxsYXJCYXNlLkFkZHJlc3Mob3B0aW9ucy5hZGRyZXNzIHx8IG9wdGlvbnMucHVibGljS2V5KSxcbiAgICAgICAgICAgICAgICB3YXNtSGFzaDogdHlwZW9mIHdhc21IYXNoID09PSBcInN0cmluZ1wiID8gQnVmZmVyLmZyb20od2FzbUhhc2gsIGZvcm1hdCAhPT0gbnVsbCAmJiBmb3JtYXQgIT09IHZvaWQgMCA/IGZvcm1hdCA6IFwiaGV4XCIpIDogd2FzbUhhc2gsXG4gICAgICAgICAgICAgICAgc2FsdDogc2FsdCxcbiAgICAgICAgICAgICAgICBjb25zdHJ1Y3RvckFyZ3M6IGFyZ3MgPyBzcGVjLmZ1bmNBcmdzVG9TY1ZhbHMoQ09OU1RSVUNUT1JfRlVOQywgYXJncykgOiBbXVxuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LmFicnVwdChcInJldHVyblwiLCBfYXNzZW1ibGVkX3RyYW5zYWN0aW9uLkFzc2VtYmxlZFRyYW5zYWN0aW9uLmJ1aWxkV2l0aE9wKG9wZXJhdGlvbiwgX29iamVjdFNwcmVhZChfb2JqZWN0U3ByZWFkKHtcbiAgICAgICAgICAgICAgICBmZWU6IGZlZSxcbiAgICAgICAgICAgICAgICB0aW1lb3V0SW5TZWNvbmRzOiB0aW1lb3V0SW5TZWNvbmRzLFxuICAgICAgICAgICAgICAgIHNpbXVsYXRlOiBzaW11bGF0ZVxuICAgICAgICAgICAgICB9LCBjbGllbnRPcHRpb25zKSwge30sIHtcbiAgICAgICAgICAgICAgICBjb250cmFjdElkOiBcImlnbm9yZWRcIixcbiAgICAgICAgICAgICAgICBtZXRob2Q6IENPTlNUUlVDVE9SX0ZVTkMsXG4gICAgICAgICAgICAgICAgcGFyc2VSZXN1bHRYZHI6IGZ1bmN0aW9uIHBhcnNlUmVzdWx0WGRyKHJlc3VsdCkge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBDbGllbnQoc3BlYywgX29iamVjdFNwcmVhZChfb2JqZWN0U3ByZWFkKHt9LCBjbGllbnRPcHRpb25zKSwge30sIHtcbiAgICAgICAgICAgICAgICAgICAgY29udHJhY3RJZDogX3N0ZWxsYXJCYXNlLkFkZHJlc3MuZnJvbVNjVmFsKHJlc3VsdCkudG9TdHJpbmcoKVxuICAgICAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSkpKTtcbiAgICAgICAgICAgIGNhc2UgNjpcbiAgICAgICAgICAgIGNhc2UgXCJlbmRcIjpcbiAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LnN0b3AoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0sIF9jYWxsZWUpO1xuICAgICAgfSkpO1xuICAgICAgZnVuY3Rpb24gZGVwbG95KF94NCwgX3g1KSB7XG4gICAgICAgIHJldHVybiBfZGVwbG95LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICB9XG4gICAgICByZXR1cm4gZGVwbG95O1xuICAgIH0oKVxuICB9LCB7XG4gICAga2V5OiBcImZyb21XYXNtSGFzaFwiLFxuICAgIHZhbHVlOiAoZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIF9mcm9tV2FzbUhhc2ggPSBfYXN5bmNUb0dlbmVyYXRvcihfcmVnZW5lcmF0b3JSdW50aW1lKCkubWFyayhmdW5jdGlvbiBfY2FsbGVlMih3YXNtSGFzaCwgb3B0aW9ucykge1xuICAgICAgICB2YXIgZm9ybWF0LFxuICAgICAgICAgIHJwY1VybCxcbiAgICAgICAgICBhbGxvd0h0dHAsXG4gICAgICAgICAgc2VydmVyT3B0cyxcbiAgICAgICAgICBzZXJ2ZXIsXG4gICAgICAgICAgd2FzbSxcbiAgICAgICAgICBfYXJnczIgPSBhcmd1bWVudHM7XG4gICAgICAgIHJldHVybiBfcmVnZW5lcmF0b3JSdW50aW1lKCkud3JhcChmdW5jdGlvbiBfY2FsbGVlMiQoX2NvbnRleHQyKSB7XG4gICAgICAgICAgd2hpbGUgKDEpIHN3aXRjaCAoX2NvbnRleHQyLnByZXYgPSBfY29udGV4dDIubmV4dCkge1xuICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICBmb3JtYXQgPSBfYXJnczIubGVuZ3RoID4gMiAmJiBfYXJnczJbMl0gIT09IHVuZGVmaW5lZCA/IF9hcmdzMlsyXSA6IFwiaGV4XCI7XG4gICAgICAgICAgICAgIGlmICghKCFvcHRpb25zIHx8ICFvcHRpb25zLnJwY1VybCkpIHtcbiAgICAgICAgICAgICAgICBfY29udGV4dDIubmV4dCA9IDM7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignb3B0aW9ucyBtdXN0IGNvbnRhaW4gcnBjVXJsJyk7XG4gICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgIHJwY1VybCA9IG9wdGlvbnMucnBjVXJsLCBhbGxvd0h0dHAgPSBvcHRpb25zLmFsbG93SHR0cDtcbiAgICAgICAgICAgICAgc2VydmVyT3B0cyA9IHtcbiAgICAgICAgICAgICAgICBhbGxvd0h0dHA6IGFsbG93SHR0cFxuICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICBzZXJ2ZXIgPSBuZXcgX3JwYy5TZXJ2ZXIocnBjVXJsLCBzZXJ2ZXJPcHRzKTtcbiAgICAgICAgICAgICAgX2NvbnRleHQyLm5leHQgPSA4O1xuICAgICAgICAgICAgICByZXR1cm4gc2VydmVyLmdldENvbnRyYWN0V2FzbUJ5SGFzaCh3YXNtSGFzaCwgZm9ybWF0KTtcbiAgICAgICAgICAgIGNhc2UgODpcbiAgICAgICAgICAgICAgd2FzbSA9IF9jb250ZXh0Mi5zZW50O1xuICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQyLmFicnVwdChcInJldHVyblwiLCBDbGllbnQuZnJvbVdhc20od2FzbSwgb3B0aW9ucykpO1xuICAgICAgICAgICAgY2FzZSAxMDpcbiAgICAgICAgICAgIGNhc2UgXCJlbmRcIjpcbiAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0Mi5zdG9wKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9LCBfY2FsbGVlMik7XG4gICAgICB9KSk7XG4gICAgICBmdW5jdGlvbiBmcm9tV2FzbUhhc2goX3g2LCBfeDcpIHtcbiAgICAgICAgcmV0dXJuIF9mcm9tV2FzbUhhc2guYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBmcm9tV2FzbUhhc2g7XG4gICAgfSgpKVxuICB9LCB7XG4gICAga2V5OiBcImZyb21XYXNtXCIsXG4gICAgdmFsdWU6IChmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgX2Zyb21XYXNtID0gX2FzeW5jVG9HZW5lcmF0b3IoX3JlZ2VuZXJhdG9yUnVudGltZSgpLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTMod2FzbSwgb3B0aW9ucykge1xuICAgICAgICB2YXIgc3BlYztcbiAgICAgICAgcmV0dXJuIF9yZWdlbmVyYXRvclJ1bnRpbWUoKS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUzJChfY29udGV4dDMpIHtcbiAgICAgICAgICB3aGlsZSAoMSkgc3dpdGNoIChfY29udGV4dDMucHJldiA9IF9jb250ZXh0My5uZXh0KSB7XG4gICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgIF9jb250ZXh0My5uZXh0ID0gMjtcbiAgICAgICAgICAgICAgcmV0dXJuIHNwZWNGcm9tV2FzbSh3YXNtKTtcbiAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgc3BlYyA9IF9jb250ZXh0My5zZW50O1xuICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQzLmFicnVwdChcInJldHVyblwiLCBuZXcgQ2xpZW50KHNwZWMsIG9wdGlvbnMpKTtcbiAgICAgICAgICAgIGNhc2UgNDpcbiAgICAgICAgICAgIGNhc2UgXCJlbmRcIjpcbiAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0My5zdG9wKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9LCBfY2FsbGVlMyk7XG4gICAgICB9KSk7XG4gICAgICBmdW5jdGlvbiBmcm9tV2FzbShfeDgsIF94OSkge1xuICAgICAgICByZXR1cm4gX2Zyb21XYXNtLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICB9XG4gICAgICByZXR1cm4gZnJvbVdhc207XG4gICAgfSgpKVxuICB9LCB7XG4gICAga2V5OiBcImZyb21cIixcbiAgICB2YWx1ZTogKGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBfZnJvbSA9IF9hc3luY1RvR2VuZXJhdG9yKF9yZWdlbmVyYXRvclJ1bnRpbWUoKS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWU0KG9wdGlvbnMpIHtcbiAgICAgICAgdmFyIHJwY1VybCwgY29udHJhY3RJZCwgYWxsb3dIdHRwLCBzZXJ2ZXJPcHRzLCBzZXJ2ZXIsIHdhc207XG4gICAgICAgIHJldHVybiBfcmVnZW5lcmF0b3JSdW50aW1lKCkud3JhcChmdW5jdGlvbiBfY2FsbGVlNCQoX2NvbnRleHQ0KSB7XG4gICAgICAgICAgd2hpbGUgKDEpIHN3aXRjaCAoX2NvbnRleHQ0LnByZXYgPSBfY29udGV4dDQubmV4dCkge1xuICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICBpZiAoISghb3B0aW9ucyB8fCAhb3B0aW9ucy5ycGNVcmwgfHwgIW9wdGlvbnMuY29udHJhY3RJZCkpIHtcbiAgICAgICAgICAgICAgICBfY29udGV4dDQubmV4dCA9IDI7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignb3B0aW9ucyBtdXN0IGNvbnRhaW4gcnBjVXJsIGFuZCBjb250cmFjdElkJyk7XG4gICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgIHJwY1VybCA9IG9wdGlvbnMucnBjVXJsLCBjb250cmFjdElkID0gb3B0aW9ucy5jb250cmFjdElkLCBhbGxvd0h0dHAgPSBvcHRpb25zLmFsbG93SHR0cDtcbiAgICAgICAgICAgICAgc2VydmVyT3B0cyA9IHtcbiAgICAgICAgICAgICAgICBhbGxvd0h0dHA6IGFsbG93SHR0cFxuICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICBzZXJ2ZXIgPSBuZXcgX3JwYy5TZXJ2ZXIocnBjVXJsLCBzZXJ2ZXJPcHRzKTtcbiAgICAgICAgICAgICAgX2NvbnRleHQ0Lm5leHQgPSA3O1xuICAgICAgICAgICAgICByZXR1cm4gc2VydmVyLmdldENvbnRyYWN0V2FzbUJ5Q29udHJhY3RJZChjb250cmFjdElkKTtcbiAgICAgICAgICAgIGNhc2UgNzpcbiAgICAgICAgICAgICAgd2FzbSA9IF9jb250ZXh0NC5zZW50O1xuICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQ0LmFicnVwdChcInJldHVyblwiLCBDbGllbnQuZnJvbVdhc20od2FzbSwgb3B0aW9ucykpO1xuICAgICAgICAgICAgY2FzZSA5OlxuICAgICAgICAgICAgY2FzZSBcImVuZFwiOlxuICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQ0LnN0b3AoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0sIF9jYWxsZWU0KTtcbiAgICAgIH0pKTtcbiAgICAgIGZ1bmN0aW9uIGZyb20oX3gxMCkge1xuICAgICAgICByZXR1cm4gX2Zyb20uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBmcm9tO1xuICAgIH0oKSlcbiAgfV0pO1xufSgpOyJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@stellar/stellar-sdk/lib/contract/client.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@stellar/stellar-sdk/lib/contract/index.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@stellar/stellar-sdk/lib/contract/index.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nvar _assembled_transaction = __webpack_require__(/*! ./assembled_transaction */ \"(ssr)/./node_modules/@stellar/stellar-sdk/lib/contract/assembled_transaction.js\");\nObject.keys(_assembled_transaction).forEach(function (key) {\n  if (key === \"default\" || key === \"__esModule\") return;\n  if (key in exports && exports[key] === _assembled_transaction[key]) return;\n  Object.defineProperty(exports, key, {\n    enumerable: true,\n    get: function get() {\n      return _assembled_transaction[key];\n    }\n  });\n});\nvar _basic_node_signer = __webpack_require__(/*! ./basic_node_signer */ \"(ssr)/./node_modules/@stellar/stellar-sdk/lib/contract/basic_node_signer.js\");\nObject.keys(_basic_node_signer).forEach(function (key) {\n  if (key === \"default\" || key === \"__esModule\") return;\n  if (key in exports && exports[key] === _basic_node_signer[key]) return;\n  Object.defineProperty(exports, key, {\n    enumerable: true,\n    get: function get() {\n      return _basic_node_signer[key];\n    }\n  });\n});\nvar _client = __webpack_require__(/*! ./client */ \"(ssr)/./node_modules/@stellar/stellar-sdk/lib/contract/client.js\");\nObject.keys(_client).forEach(function (key) {\n  if (key === \"default\" || key === \"__esModule\") return;\n  if (key in exports && exports[key] === _client[key]) return;\n  Object.defineProperty(exports, key, {\n    enumerable: true,\n    get: function get() {\n      return _client[key];\n    }\n  });\n});\nvar _rust_result = __webpack_require__(/*! ./rust_result */ \"(ssr)/./node_modules/@stellar/stellar-sdk/lib/contract/rust_result.js\");\nObject.keys(_rust_result).forEach(function (key) {\n  if (key === \"default\" || key === \"__esModule\") return;\n  if (key in exports && exports[key] === _rust_result[key]) return;\n  Object.defineProperty(exports, key, {\n    enumerable: true,\n    get: function get() {\n      return _rust_result[key];\n    }\n  });\n});\nvar _sent_transaction = __webpack_require__(/*! ./sent_transaction */ \"(ssr)/./node_modules/@stellar/stellar-sdk/lib/contract/sent_transaction.js\");\nObject.keys(_sent_transaction).forEach(function (key) {\n  if (key === \"default\" || key === \"__esModule\") return;\n  if (key in exports && exports[key] === _sent_transaction[key]) return;\n  Object.defineProperty(exports, key, {\n    enumerable: true,\n    get: function get() {\n      return _sent_transaction[key];\n    }\n  });\n});\nvar _spec = __webpack_require__(/*! ./spec */ \"(ssr)/./node_modules/@stellar/stellar-sdk/lib/contract/spec.js\");\nObject.keys(_spec).forEach(function (key) {\n  if (key === \"default\" || key === \"__esModule\") return;\n  if (key in exports && exports[key] === _spec[key]) return;\n  Object.defineProperty(exports, key, {\n    enumerable: true,\n    get: function get() {\n      return _spec[key];\n    }\n  });\n});\nvar _types = __webpack_require__(/*! ./types */ \"(ssr)/./node_modules/@stellar/stellar-sdk/lib/contract/types.js\");\nObject.keys(_types).forEach(function (key) {\n  if (key === \"default\" || key === \"__esModule\") return;\n  if (key in exports && exports[key] === _types[key]) return;\n  Object.defineProperty(exports, key, {\n    enumerable: true,\n    get: function get() {\n      return _types[key];\n    }\n  });\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHN0ZWxsYXIvc3RlbGxhci1zZGsvbGliL2NvbnRyYWN0L2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLDhDQUE2QztBQUM3QztBQUNBLENBQUMsRUFBQztBQUNGLDZCQUE2QixtQkFBTyxDQUFDLGdIQUF5QjtBQUM5RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNILENBQUM7QUFDRCx5QkFBeUIsbUJBQU8sQ0FBQyx3R0FBcUI7QUFDdEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSCxDQUFDO0FBQ0QsY0FBYyxtQkFBTyxDQUFDLGtGQUFVO0FBQ2hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0gsQ0FBQztBQUNELG1CQUFtQixtQkFBTyxDQUFDLDRGQUFlO0FBQzFDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0gsQ0FBQztBQUNELHdCQUF3QixtQkFBTyxDQUFDLHNHQUFvQjtBQUNwRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNILENBQUM7QUFDRCxZQUFZLG1CQUFPLENBQUMsOEVBQVE7QUFDNUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSCxDQUFDO0FBQ0QsYUFBYSxtQkFBTyxDQUFDLGdGQUFTO0FBQzlCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0gsQ0FBQyIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxVU1VBUklPXFxEb2N1bWVudHNcXEdpdGh1YlxcR2FsYXh5S0otd2FsbGV0LS0tSGFja1xcd2ViXFxub2RlX21vZHVsZXNcXEBzdGVsbGFyXFxzdGVsbGFyLXNka1xcbGliXFxjb250cmFjdFxcaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG52YXIgX2Fzc2VtYmxlZF90cmFuc2FjdGlvbiA9IHJlcXVpcmUoXCIuL2Fzc2VtYmxlZF90cmFuc2FjdGlvblwiKTtcbk9iamVjdC5rZXlzKF9hc3NlbWJsZWRfdHJhbnNhY3Rpb24pLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICBpZiAoa2V5ID09PSBcImRlZmF1bHRcIiB8fCBrZXkgPT09IFwiX19lc01vZHVsZVwiKSByZXR1cm47XG4gIGlmIChrZXkgaW4gZXhwb3J0cyAmJiBleHBvcnRzW2tleV0gPT09IF9hc3NlbWJsZWRfdHJhbnNhY3Rpb25ba2V5XSkgcmV0dXJuO1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywga2V5LCB7XG4gICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiBfYXNzZW1ibGVkX3RyYW5zYWN0aW9uW2tleV07XG4gICAgfVxuICB9KTtcbn0pO1xudmFyIF9iYXNpY19ub2RlX3NpZ25lciA9IHJlcXVpcmUoXCIuL2Jhc2ljX25vZGVfc2lnbmVyXCIpO1xuT2JqZWN0LmtleXMoX2Jhc2ljX25vZGVfc2lnbmVyKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgaWYgKGtleSA9PT0gXCJkZWZhdWx0XCIgfHwga2V5ID09PSBcIl9fZXNNb2R1bGVcIikgcmV0dXJuO1xuICBpZiAoa2V5IGluIGV4cG9ydHMgJiYgZXhwb3J0c1trZXldID09PSBfYmFzaWNfbm9kZV9zaWduZXJba2V5XSkgcmV0dXJuO1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywga2V5LCB7XG4gICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiBfYmFzaWNfbm9kZV9zaWduZXJba2V5XTtcbiAgICB9XG4gIH0pO1xufSk7XG52YXIgX2NsaWVudCA9IHJlcXVpcmUoXCIuL2NsaWVudFwiKTtcbk9iamVjdC5rZXlzKF9jbGllbnQpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICBpZiAoa2V5ID09PSBcImRlZmF1bHRcIiB8fCBrZXkgPT09IFwiX19lc01vZHVsZVwiKSByZXR1cm47XG4gIGlmIChrZXkgaW4gZXhwb3J0cyAmJiBleHBvcnRzW2tleV0gPT09IF9jbGllbnRba2V5XSkgcmV0dXJuO1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywga2V5LCB7XG4gICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiBfY2xpZW50W2tleV07XG4gICAgfVxuICB9KTtcbn0pO1xudmFyIF9ydXN0X3Jlc3VsdCA9IHJlcXVpcmUoXCIuL3J1c3RfcmVzdWx0XCIpO1xuT2JqZWN0LmtleXMoX3J1c3RfcmVzdWx0KS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgaWYgKGtleSA9PT0gXCJkZWZhdWx0XCIgfHwga2V5ID09PSBcIl9fZXNNb2R1bGVcIikgcmV0dXJuO1xuICBpZiAoa2V5IGluIGV4cG9ydHMgJiYgZXhwb3J0c1trZXldID09PSBfcnVzdF9yZXN1bHRba2V5XSkgcmV0dXJuO1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywga2V5LCB7XG4gICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiBfcnVzdF9yZXN1bHRba2V5XTtcbiAgICB9XG4gIH0pO1xufSk7XG52YXIgX3NlbnRfdHJhbnNhY3Rpb24gPSByZXF1aXJlKFwiLi9zZW50X3RyYW5zYWN0aW9uXCIpO1xuT2JqZWN0LmtleXMoX3NlbnRfdHJhbnNhY3Rpb24pLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICBpZiAoa2V5ID09PSBcImRlZmF1bHRcIiB8fCBrZXkgPT09IFwiX19lc01vZHVsZVwiKSByZXR1cm47XG4gIGlmIChrZXkgaW4gZXhwb3J0cyAmJiBleHBvcnRzW2tleV0gPT09IF9zZW50X3RyYW5zYWN0aW9uW2tleV0pIHJldHVybjtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIGtleSwge1xuICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gX3NlbnRfdHJhbnNhY3Rpb25ba2V5XTtcbiAgICB9XG4gIH0pO1xufSk7XG52YXIgX3NwZWMgPSByZXF1aXJlKFwiLi9zcGVjXCIpO1xuT2JqZWN0LmtleXMoX3NwZWMpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICBpZiAoa2V5ID09PSBcImRlZmF1bHRcIiB8fCBrZXkgPT09IFwiX19lc01vZHVsZVwiKSByZXR1cm47XG4gIGlmIChrZXkgaW4gZXhwb3J0cyAmJiBleHBvcnRzW2tleV0gPT09IF9zcGVjW2tleV0pIHJldHVybjtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIGtleSwge1xuICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gX3NwZWNba2V5XTtcbiAgICB9XG4gIH0pO1xufSk7XG52YXIgX3R5cGVzID0gcmVxdWlyZShcIi4vdHlwZXNcIik7XG5PYmplY3Qua2V5cyhfdHlwZXMpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICBpZiAoa2V5ID09PSBcImRlZmF1bHRcIiB8fCBrZXkgPT09IFwiX19lc01vZHVsZVwiKSByZXR1cm47XG4gIGlmIChrZXkgaW4gZXhwb3J0cyAmJiBleHBvcnRzW2tleV0gPT09IF90eXBlc1trZXldKSByZXR1cm47XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBrZXksIHtcbiAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIF90eXBlc1trZXldO1xuICAgIH1cbiAgfSk7XG59KTsiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@stellar/stellar-sdk/lib/contract/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@stellar/stellar-sdk/lib/contract/rust_result.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@stellar/stellar-sdk/lib/contract/rust_result.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.Ok = exports.Err = void 0;\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\nfunction _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }\nfunction _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nvar Ok = exports.Ok = function () {\n  function Ok(value) {\n    _classCallCheck(this, Ok);\n    this.value = value;\n  }\n  return _createClass(Ok, [{\n    key: \"unwrapErr\",\n    value: function unwrapErr() {\n      throw new Error(\"No error\");\n    }\n  }, {\n    key: \"unwrap\",\n    value: function unwrap() {\n      return this.value;\n    }\n  }, {\n    key: \"isOk\",\n    value: function isOk() {\n      return true;\n    }\n  }, {\n    key: \"isErr\",\n    value: function isErr() {\n      return false;\n    }\n  }]);\n}();\nvar Err = exports.Err = function () {\n  function Err(error) {\n    _classCallCheck(this, Err);\n    this.error = error;\n  }\n  return _createClass(Err, [{\n    key: \"unwrapErr\",\n    value: function unwrapErr() {\n      return this.error;\n    }\n  }, {\n    key: \"unwrap\",\n    value: function unwrap() {\n      throw new Error(this.error.message);\n    }\n  }, {\n    key: \"isOk\",\n    value: function isOk() {\n      return false;\n    }\n  }, {\n    key: \"isErr\",\n    value: function isErr() {\n      return true;\n    }\n  }]);\n}();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHN0ZWxsYXIvc3RlbGxhci1zZGsvbGliL2NvbnRyYWN0L3J1c3RfcmVzdWx0LmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLDhDQUE2QztBQUM3QztBQUNBLENBQUMsRUFBQztBQUNGLFVBQVUsR0FBRyxXQUFXO0FBQ3hCLHNCQUFzQiwyQkFBMkIsb0dBQW9HLG1CQUFtQixpQkFBaUIsc0hBQXNIO0FBQy9TLGlDQUFpQztBQUNqQyxtQ0FBbUMsZ0JBQWdCLGNBQWMsT0FBTyxjQUFjO0FBQ3RGLGlDQUFpQyxxSEFBcUgsY0FBYztBQUNwSyw2QkFBNkIsbUNBQW1DO0FBQ2hFLDhCQUE4Qiw0Q0FBNEMsK0JBQStCLG9CQUFvQixtQ0FBbUMsc0NBQXNDLHVFQUF1RTtBQUM3USxTQUFTLFVBQVU7QUFDbkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNILENBQUM7QUFDRCxVQUFVLFdBQVc7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNILENBQUMiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcVVNVQVJJT1xcRG9jdW1lbnRzXFxHaXRodWJcXEdhbGF4eUtKLXdhbGxldC0tLUhhY2tcXHdlYlxcbm9kZV9tb2R1bGVzXFxAc3RlbGxhclxcc3RlbGxhci1zZGtcXGxpYlxcY29udHJhY3RcXHJ1c3RfcmVzdWx0LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5PayA9IGV4cG9ydHMuRXJyID0gdm9pZCAwO1xuZnVuY3Rpb24gX3R5cGVvZihvKSB7IFwiQGJhYmVsL2hlbHBlcnMgLSB0eXBlb2ZcIjsgcmV0dXJuIF90eXBlb2YgPSBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIFN5bWJvbCAmJiBcInN5bWJvbFwiID09IHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPyBmdW5jdGlvbiAobykgeyByZXR1cm4gdHlwZW9mIG87IH0gOiBmdW5jdGlvbiAobykgeyByZXR1cm4gbyAmJiBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIFN5bWJvbCAmJiBvLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgbyAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2YgbzsgfSwgX3R5cGVvZihvKTsgfVxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGEsIG4pIHsgaWYgKCEoYSBpbnN0YW5jZW9mIG4pKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9XG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyhlLCByKSB7IGZvciAodmFyIHQgPSAwOyB0IDwgci5sZW5ndGg7IHQrKykgeyB2YXIgbyA9IHJbdF07IG8uZW51bWVyYWJsZSA9IG8uZW51bWVyYWJsZSB8fCAhMSwgby5jb25maWd1cmFibGUgPSAhMCwgXCJ2YWx1ZVwiIGluIG8gJiYgKG8ud3JpdGFibGUgPSAhMCksIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLCBfdG9Qcm9wZXJ0eUtleShvLmtleSksIG8pOyB9IH1cbmZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhlLCByLCB0KSB7IHJldHVybiByICYmIF9kZWZpbmVQcm9wZXJ0aWVzKGUucHJvdG90eXBlLCByKSwgdCAmJiBfZGVmaW5lUHJvcGVydGllcyhlLCB0KSwgT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsIFwicHJvdG90eXBlXCIsIHsgd3JpdGFibGU6ICExIH0pLCBlOyB9XG5mdW5jdGlvbiBfdG9Qcm9wZXJ0eUtleSh0KSB7IHZhciBpID0gX3RvUHJpbWl0aXZlKHQsIFwic3RyaW5nXCIpOyByZXR1cm4gXCJzeW1ib2xcIiA9PSBfdHlwZW9mKGkpID8gaSA6IGkgKyBcIlwiOyB9XG5mdW5jdGlvbiBfdG9QcmltaXRpdmUodCwgcikgeyBpZiAoXCJvYmplY3RcIiAhPSBfdHlwZW9mKHQpIHx8ICF0KSByZXR1cm4gdDsgdmFyIGUgPSB0W1N5bWJvbC50b1ByaW1pdGl2ZV07IGlmICh2b2lkIDAgIT09IGUpIHsgdmFyIGkgPSBlLmNhbGwodCwgciB8fCBcImRlZmF1bHRcIik7IGlmIChcIm9iamVjdFwiICE9IF90eXBlb2YoaSkpIHJldHVybiBpOyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQEB0b1ByaW1pdGl2ZSBtdXN0IHJldHVybiBhIHByaW1pdGl2ZSB2YWx1ZS5cIik7IH0gcmV0dXJuIChcInN0cmluZ1wiID09PSByID8gU3RyaW5nIDogTnVtYmVyKSh0KTsgfVxudmFyIE9rID0gZXhwb3J0cy5PayA9IGZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gT2sodmFsdWUpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgT2spO1xuICAgIHRoaXMudmFsdWUgPSB2YWx1ZTtcbiAgfVxuICByZXR1cm4gX2NyZWF0ZUNsYXNzKE9rLCBbe1xuICAgIGtleTogXCJ1bndyYXBFcnJcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gdW53cmFwRXJyKCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTm8gZXJyb3JcIik7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInVud3JhcFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiB1bndyYXAoKSB7XG4gICAgICByZXR1cm4gdGhpcy52YWx1ZTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiaXNPa1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBpc09rKCkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImlzRXJyXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGlzRXJyKCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfV0pO1xufSgpO1xudmFyIEVyciA9IGV4cG9ydHMuRXJyID0gZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBFcnIoZXJyb3IpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgRXJyKTtcbiAgICB0aGlzLmVycm9yID0gZXJyb3I7XG4gIH1cbiAgcmV0dXJuIF9jcmVhdGVDbGFzcyhFcnIsIFt7XG4gICAga2V5OiBcInVud3JhcEVyclwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiB1bndyYXBFcnIoKSB7XG4gICAgICByZXR1cm4gdGhpcy5lcnJvcjtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwidW53cmFwXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHVud3JhcCgpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcih0aGlzLmVycm9yLm1lc3NhZ2UpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJpc09rXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGlzT2soKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImlzRXJyXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGlzRXJyKCkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9XSk7XG59KCk7Il0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@stellar/stellar-sdk/lib/contract/rust_result.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@stellar/stellar-sdk/lib/contract/sent_transaction.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@stellar/stellar-sdk/lib/contract/sent_transaction.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.SentTransaction = void 0;\nvar _rpc = __webpack_require__(/*! ../rpc */ \"(ssr)/./node_modules/@stellar/stellar-sdk/lib/rpc/index.js\");\nvar _api = __webpack_require__(/*! ../rpc/api */ \"(ssr)/./node_modules/@stellar/stellar-sdk/lib/rpc/api.js\");\nvar _utils = __webpack_require__(/*! ./utils */ \"(ssr)/./node_modules/@stellar/stellar-sdk/lib/contract/utils.js\");\nvar _types = __webpack_require__(/*! ./types */ \"(ssr)/./node_modules/@stellar/stellar-sdk/lib/contract/types.js\");\nvar _SentTransaction;\nfunction _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }\nfunction _possibleConstructorReturn(t, e) { if (e && (\"object\" == _typeof(e) || \"function\" == typeof e)) return e; if (void 0 !== e) throw new TypeError(\"Derived constructors may only return object or undefined\"); return _assertThisInitialized(t); }\nfunction _assertThisInitialized(e) { if (void 0 === e) throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); return e; }\nfunction _inherits(t, e) { if (\"function\" != typeof e && null !== e) throw new TypeError(\"Super expression must either be null or a function\"); t.prototype = Object.create(e && e.prototype, { constructor: { value: t, writable: !0, configurable: !0 } }), Object.defineProperty(t, \"prototype\", { writable: !1 }), e && _setPrototypeOf(t, e); }\nfunction _wrapNativeSuper(t) { var r = \"function\" == typeof Map ? new Map() : void 0; return _wrapNativeSuper = function _wrapNativeSuper(t) { if (null === t || !_isNativeFunction(t)) return t; if (\"function\" != typeof t) throw new TypeError(\"Super expression must either be null or a function\"); if (void 0 !== r) { if (r.has(t)) return r.get(t); r.set(t, Wrapper); } function Wrapper() { return _construct(t, arguments, _getPrototypeOf(this).constructor); } return Wrapper.prototype = Object.create(t.prototype, { constructor: { value: Wrapper, enumerable: !1, writable: !0, configurable: !0 } }), _setPrototypeOf(Wrapper, t); }, _wrapNativeSuper(t); }\nfunction _construct(t, e, r) { if (_isNativeReflectConstruct()) return Reflect.construct.apply(null, arguments); var o = [null]; o.push.apply(o, e); var p = new (t.bind.apply(t, o))(); return r && _setPrototypeOf(p, r.prototype), p; }\nfunction _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }\nfunction _isNativeFunction(t) { try { return -1 !== Function.toString.call(t).indexOf(\"[native code]\"); } catch (n) { return \"function\" == typeof t; } }\nfunction _setPrototypeOf(t, e) { return _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function (t, e) { return t.__proto__ = e, t; }, _setPrototypeOf(t, e); }\nfunction _getPrototypeOf(t) { return _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function (t) { return t.__proto__ || Object.getPrototypeOf(t); }, _getPrototypeOf(t); }\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _regeneratorRuntime() { \"use strict\"; _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = \"function\" == typeof Symbol ? Symbol : {}, a = i.iterator || \"@@iterator\", c = i.asyncIterator || \"@@asyncIterator\", u = i.toStringTag || \"@@toStringTag\"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, \"\"); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, \"_invoke\", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: \"normal\", arg: t.call(e, r) }; } catch (t) { return { type: \"throw\", arg: t }; } } e.wrap = wrap; var h = \"suspendedStart\", l = \"suspendedYield\", f = \"executing\", s = \"completed\", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { [\"next\", \"throw\", \"return\"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if (\"throw\" !== c.type) { var u = c.arg, h = u.value; return h && \"object\" == _typeof(h) && n.call(h, \"__await\") ? e.resolve(h.__await).then(function (t) { invoke(\"next\", t, i, a); }, function (t) { invoke(\"throw\", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke(\"throw\", t, i, a); }); } a(c.arg); } var r; o(this, \"_invoke\", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw Error(\"Generator is already running\"); if (o === s) { if (\"throw\" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if (\"next\" === n.method) n.sent = n._sent = n.arg;else if (\"throw\" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else \"return\" === n.method && n.abrupt(\"return\", n.arg); o = f; var p = tryCatch(e, r, n); if (\"normal\" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } \"throw\" === p.type && (o = s, n.method = \"throw\", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, \"throw\" === n && e.iterator.return && (r.method = \"return\", r.arg = t, maybeInvokeDelegate(e, r), \"throw\" === r.method) || \"return\" !== n && (r.method = \"throw\", r.arg = new TypeError(\"The iterator does not provide a '\" + n + \"' method\")), y; var i = tryCatch(o, e.iterator, r.arg); if (\"throw\" === i.type) return r.method = \"throw\", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, \"return\" !== r.method && (r.method = \"next\", r.arg = t), r.delegate = null, y) : a : (r.method = \"throw\", r.arg = new TypeError(\"iterator result is not an object\"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = \"normal\", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: \"root\" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || \"\" === e) { var r = e[a]; if (r) return r.call(e); if (\"function\" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(_typeof(e) + \" is not iterable\"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, \"constructor\", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, \"constructor\", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, \"GeneratorFunction\"), e.isGeneratorFunction = function (t) { var e = \"function\" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || \"GeneratorFunction\" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, \"GeneratorFunction\")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, \"Generator\"), define(g, a, function () { return this; }), define(g, \"toString\", function () { return \"[object Generator]\"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) \"t\" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if (\"throw\" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = \"throw\", a.arg = e, r.next = n, o && (r.method = \"next\", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if (\"root\" === i.tryLoc) return handle(\"end\"); if (i.tryLoc <= this.prev) { var c = n.call(i, \"catchLoc\"), u = n.call(i, \"finallyLoc\"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw Error(\"try statement without catch or finally\"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, \"finallyLoc\") && this.prev < o.finallyLoc) { var i = o; break; } } i && (\"break\" === t || \"continue\" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = \"next\", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if (\"throw\" === t.type) throw t.arg; return \"break\" === t.type || \"continue\" === t.type ? this.next = t.arg : \"return\" === t.type ? (this.rval = this.arg = t.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, catch: function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if (\"throw\" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, \"next\" === this.method && (this.arg = t), y; } }, e; }\nfunction asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }\nfunction _asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, \"next\", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, \"throw\", n); } _next(void 0); }); }; }\nfunction _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\nfunction _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }\nfunction _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\nfunction _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nvar SentTransaction = exports.SentTransaction = function () {\n  function SentTransaction(assembled) {\n    var _this = this,\n      _this$assembled$optio2;\n    _classCallCheck(this, SentTransaction);\n    _defineProperty(this, \"send\", _asyncToGenerator(_regeneratorRuntime().mark(function _callee() {\n      var _this$assembled$optio;\n      var hash, timeoutInSeconds;\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _this.server.sendTransaction(_this.assembled.signed);\n          case 2:\n            _this.sendTransactionResponse = _context.sent;\n            if (!(_this.sendTransactionResponse.status !== \"PENDING\")) {\n              _context.next = 5;\n              break;\n            }\n            throw new SentTransaction.Errors.SendFailed(\"Sending the transaction to the network failed!\\n\".concat(JSON.stringify(_this.sendTransactionResponse, null, 2)));\n          case 5:\n            hash = _this.sendTransactionResponse.hash;\n            timeoutInSeconds = (_this$assembled$optio = _this.assembled.options.timeoutInSeconds) !== null && _this$assembled$optio !== void 0 ? _this$assembled$optio : _types.DEFAULT_TIMEOUT;\n            _context.next = 9;\n            return (0, _utils.withExponentialBackoff)(function () {\n              return _this.server.getTransaction(hash);\n            }, function (resp) {\n              return resp.status === _api.Api.GetTransactionStatus.NOT_FOUND;\n            }, timeoutInSeconds);\n          case 9:\n            _this.getTransactionResponseAll = _context.sent;\n            _this.getTransactionResponse = _this.getTransactionResponseAll[_this.getTransactionResponseAll.length - 1];\n            if (!(_this.getTransactionResponse.status === _api.Api.GetTransactionStatus.NOT_FOUND)) {\n              _context.next = 13;\n              break;\n            }\n            throw new SentTransaction.Errors.TransactionStillPending(\"Waited \".concat(timeoutInSeconds, \" seconds for transaction to complete, but it did not. \") + \"Returning anyway. Check the transaction status manually. \" + \"Sent transaction: \".concat(JSON.stringify(_this.sendTransactionResponse, null, 2), \"\\n\") + \"All attempts to get the result: \".concat(JSON.stringify(_this.getTransactionResponseAll, null, 2)));\n          case 13:\n            return _context.abrupt(\"return\", _this);\n          case 14:\n          case \"end\":\n            return _context.stop();\n        }\n      }, _callee);\n    })));\n    this.assembled = assembled;\n    this.server = new _rpc.Server(this.assembled.options.rpcUrl, {\n      allowHttp: (_this$assembled$optio2 = this.assembled.options.allowHttp) !== null && _this$assembled$optio2 !== void 0 ? _this$assembled$optio2 : false\n    });\n  }\n  return _createClass(SentTransaction, [{\n    key: \"result\",\n    get: function get() {\n      if (\"getTransactionResponse\" in this && this.getTransactionResponse) {\n        if (\"returnValue\" in this.getTransactionResponse) {\n          return this.assembled.options.parseResultXdr(this.getTransactionResponse.returnValue);\n        }\n        throw new Error(\"Transaction failed! Cannot parse result.\");\n      }\n      if (this.sendTransactionResponse) {\n        var _this$sendTransaction;\n        var errorResult = (_this$sendTransaction = this.sendTransactionResponse.errorResult) === null || _this$sendTransaction === void 0 ? void 0 : _this$sendTransaction.result();\n        if (errorResult) {\n          throw new SentTransaction.Errors.SendFailed(\"Transaction simulation looked correct, but attempting to send the transaction failed. Check `simulation` and `sendTransactionResponseAll` to troubleshoot. Decoded `sendTransactionResponse.errorResultXdr`: \".concat(errorResult));\n        }\n        throw new SentTransaction.Errors.SendResultOnly(\"Transaction was sent to the network, but not yet awaited. No result to show. Await transaction completion with `getTransaction(sendTransactionResponse.hash)`\");\n      }\n      throw new Error(\"Sending transaction failed: \".concat(JSON.stringify(this.assembled.signed)));\n    }\n  }]);\n}();\n_SentTransaction = SentTransaction;\n_defineProperty(SentTransaction, \"Errors\", {\n  SendFailed: function (_Error) {\n    function SendFailedError() {\n      _classCallCheck(this, SendFailedError);\n      return _callSuper(this, SendFailedError, arguments);\n    }\n    _inherits(SendFailedError, _Error);\n    return _createClass(SendFailedError);\n  }(_wrapNativeSuper(Error)),\n  SendResultOnly: function (_Error2) {\n    function SendResultOnlyError() {\n      _classCallCheck(this, SendResultOnlyError);\n      return _callSuper(this, SendResultOnlyError, arguments);\n    }\n    _inherits(SendResultOnlyError, _Error2);\n    return _createClass(SendResultOnlyError);\n  }(_wrapNativeSuper(Error)),\n  TransactionStillPending: function (_Error3) {\n    function TransactionStillPendingError() {\n      _classCallCheck(this, TransactionStillPendingError);\n      return _callSuper(this, TransactionStillPendingError, arguments);\n    }\n    _inherits(TransactionStillPendingError, _Error3);\n    return _createClass(TransactionStillPendingError);\n  }(_wrapNativeSuper(Error))\n});\n_defineProperty(SentTransaction, \"init\", function () {\n  var _ref2 = _asyncToGenerator(_regeneratorRuntime().mark(function _callee2(assembled) {\n    var tx, sent;\n    return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n      while (1) switch (_context2.prev = _context2.next) {\n        case 0:\n          tx = new _SentTransaction(assembled);\n          _context2.next = 3;\n          return tx.send();\n        case 3:\n          sent = _context2.sent;\n          return _context2.abrupt(\"return\", sent);\n        case 5:\n        case \"end\":\n          return _context2.stop();\n      }\n    }, _callee2);\n  }));\n  return function (_x) {\n    return _ref2.apply(this, arguments);\n  };\n}());//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@stellar/stellar-sdk/lib/contract/sent_transaction.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@stellar/stellar-sdk/lib/contract/spec.js":
/*!****************************************************************!*\
  !*** ./node_modules/@stellar/stellar-sdk/lib/contract/spec.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.Spec = void 0;\nvar _stellarBase = __webpack_require__(/*! @stellar/stellar-base */ \"(ssr)/./node_modules/@stellar/stellar-base/lib/index.js\");\nvar _rust_result = __webpack_require__(/*! ./rust_result */ \"(ssr)/./node_modules/@stellar/stellar-sdk/lib/contract/rust_result.js\");\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\nfunction _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }\nfunction _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\nfunction _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nfunction _slicedToArray(r, e) { return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest(); }\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _unsupportedIterableToArray(r, a) { if (r) { if (\"string\" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return \"Object\" === t && r.constructor && (t = r.constructor.name), \"Map\" === t || \"Set\" === t ? Array.from(r) : \"Arguments\" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }\nfunction _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }\nfunction _iterableToArrayLimit(r, l) { var t = null == r ? null : \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t.return && (u = t.return(), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }\nfunction _arrayWithHoles(r) { if (Array.isArray(r)) return r; }\nfunction enumToJsonSchema(udt) {\n  var description = udt.doc().toString();\n  var cases = udt.cases();\n  var oneOf = [];\n  cases.forEach(function (aCase) {\n    var title = aCase.name().toString();\n    var desc = aCase.doc().toString();\n    oneOf.push({\n      description: desc,\n      title: title,\n      enum: [aCase.value()],\n      type: \"number\"\n    });\n  });\n  var res = {\n    oneOf: oneOf\n  };\n  if (description.length > 0) {\n    res.description = description;\n  }\n  return res;\n}\nfunction isNumeric(field) {\n  return /^\\d+$/.test(field.name().toString());\n}\nfunction readObj(args, input) {\n  var inputName = input.name().toString();\n  var entry = Object.entries(args).find(function (_ref) {\n    var _ref2 = _slicedToArray(_ref, 1),\n      name = _ref2[0];\n    return name === inputName;\n  });\n  if (!entry) {\n    throw new Error(\"Missing field \".concat(inputName));\n  }\n  return entry[1];\n}\nfunction findCase(name) {\n  return function matches(entry) {\n    switch (entry.switch().value) {\n      case _stellarBase.xdr.ScSpecUdtUnionCaseV0Kind.scSpecUdtUnionCaseTupleV0().value:\n        {\n          var tuple = entry.tupleCase();\n          return tuple.name().toString() === name;\n        }\n      case _stellarBase.xdr.ScSpecUdtUnionCaseV0Kind.scSpecUdtUnionCaseVoidV0().value:\n        {\n          var voidCase = entry.voidCase();\n          return voidCase.name().toString() === name;\n        }\n      default:\n        return false;\n    }\n  };\n}\nfunction stringToScVal(str, ty) {\n  switch (ty.value) {\n    case _stellarBase.xdr.ScSpecType.scSpecTypeString().value:\n      return _stellarBase.xdr.ScVal.scvString(str);\n    case _stellarBase.xdr.ScSpecType.scSpecTypeSymbol().value:\n      return _stellarBase.xdr.ScVal.scvSymbol(str);\n    case _stellarBase.xdr.ScSpecType.scSpecTypeAddress().value:\n      return _stellarBase.Address.fromString(str).toScVal();\n    case _stellarBase.xdr.ScSpecType.scSpecTypeU64().value:\n      return new _stellarBase.XdrLargeInt(\"u64\", str).toScVal();\n    case _stellarBase.xdr.ScSpecType.scSpecTypeI64().value:\n      return new _stellarBase.XdrLargeInt(\"i64\", str).toScVal();\n    case _stellarBase.xdr.ScSpecType.scSpecTypeU128().value:\n      return new _stellarBase.XdrLargeInt(\"u128\", str).toScVal();\n    case _stellarBase.xdr.ScSpecType.scSpecTypeI128().value:\n      return new _stellarBase.XdrLargeInt(\"i128\", str).toScVal();\n    case _stellarBase.xdr.ScSpecType.scSpecTypeU256().value:\n      return new _stellarBase.XdrLargeInt(\"u256\", str).toScVal();\n    case _stellarBase.xdr.ScSpecType.scSpecTypeI256().value:\n      return new _stellarBase.XdrLargeInt(\"i256\", str).toScVal();\n    case _stellarBase.xdr.ScSpecType.scSpecTypeBytes().value:\n    case _stellarBase.xdr.ScSpecType.scSpecTypeBytesN().value:\n      return _stellarBase.xdr.ScVal.scvBytes(Buffer.from(str, \"base64\"));\n    default:\n      throw new TypeError(\"invalid type \".concat(ty.name, \" specified for string value\"));\n  }\n}\nvar PRIMITIVE_DEFINITONS = {\n  U32: {\n    type: \"integer\",\n    minimum: 0,\n    maximum: 4294967295\n  },\n  I32: {\n    type: \"integer\",\n    minimum: -2147483648,\n    maximum: 2147483647\n  },\n  U64: {\n    type: \"string\",\n    pattern: \"^([1-9][0-9]*|0)$\",\n    minLength: 1,\n    maxLength: 20\n  },\n  I64: {\n    type: \"string\",\n    pattern: \"^(-?[1-9][0-9]*|0)$\",\n    minLength: 1,\n    maxLength: 21\n  },\n  U128: {\n    type: \"string\",\n    pattern: \"^([1-9][0-9]*|0)$\",\n    minLength: 1,\n    maxLength: 39\n  },\n  I128: {\n    type: \"string\",\n    pattern: \"^(-?[1-9][0-9]*|0)$\",\n    minLength: 1,\n    maxLength: 40\n  },\n  U256: {\n    type: \"string\",\n    pattern: \"^([1-9][0-9]*|0)$\",\n    minLength: 1,\n    maxLength: 78\n  },\n  I256: {\n    type: \"string\",\n    pattern: \"^(-?[1-9][0-9]*|0)$\",\n    minLength: 1,\n    maxLength: 79\n  },\n  Address: {\n    type: \"string\",\n    format: \"address\",\n    description: \"Address can be a public key or contract id\"\n  },\n  ScString: {\n    type: \"string\",\n    description: \"ScString is a string\"\n  },\n  ScSymbol: {\n    type: \"string\",\n    description: \"ScSymbol is a string\"\n  },\n  DataUrl: {\n    type: \"string\",\n    pattern: \"^(?:[A-Za-z0-9+\\\\/]{4})*(?:[A-Za-z0-9+\\\\/]{2}==|[A-Za-z0-9+\\\\/]{3}=)?$\"\n  }\n};\nfunction typeRef(typeDef) {\n  var t = typeDef.switch();\n  var value = t.value;\n  var ref;\n  switch (value) {\n    case _stellarBase.xdr.ScSpecType.scSpecTypeVal().value:\n      {\n        ref = \"Val\";\n        break;\n      }\n    case _stellarBase.xdr.ScSpecType.scSpecTypeBool().value:\n      {\n        return {\n          type: \"boolean\"\n        };\n      }\n    case _stellarBase.xdr.ScSpecType.scSpecTypeVoid().value:\n      {\n        return {\n          type: \"null\"\n        };\n      }\n    case _stellarBase.xdr.ScSpecType.scSpecTypeError().value:\n      {\n        ref = \"Error\";\n        break;\n      }\n    case _stellarBase.xdr.ScSpecType.scSpecTypeU32().value:\n      {\n        ref = \"U32\";\n        break;\n      }\n    case _stellarBase.xdr.ScSpecType.scSpecTypeI32().value:\n      {\n        ref = \"I32\";\n        break;\n      }\n    case _stellarBase.xdr.ScSpecType.scSpecTypeU64().value:\n      {\n        ref = \"U64\";\n        break;\n      }\n    case _stellarBase.xdr.ScSpecType.scSpecTypeI64().value:\n      {\n        ref = \"I64\";\n        break;\n      }\n    case _stellarBase.xdr.ScSpecType.scSpecTypeTimepoint().value:\n      {\n        throw new Error(\"Timepoint type not supported\");\n        ref = \"Timepoint\";\n        break;\n      }\n    case _stellarBase.xdr.ScSpecType.scSpecTypeDuration().value:\n      {\n        throw new Error(\"Duration not supported\");\n        ref = \"Duration\";\n        break;\n      }\n    case _stellarBase.xdr.ScSpecType.scSpecTypeU128().value:\n      {\n        ref = \"U128\";\n        break;\n      }\n    case _stellarBase.xdr.ScSpecType.scSpecTypeI128().value:\n      {\n        ref = \"I128\";\n        break;\n      }\n    case _stellarBase.xdr.ScSpecType.scSpecTypeU256().value:\n      {\n        ref = \"U256\";\n        break;\n      }\n    case _stellarBase.xdr.ScSpecType.scSpecTypeI256().value:\n      {\n        ref = \"I256\";\n        break;\n      }\n    case _stellarBase.xdr.ScSpecType.scSpecTypeBytes().value:\n      {\n        ref = \"DataUrl\";\n        break;\n      }\n    case _stellarBase.xdr.ScSpecType.scSpecTypeString().value:\n      {\n        ref = \"ScString\";\n        break;\n      }\n    case _stellarBase.xdr.ScSpecType.scSpecTypeSymbol().value:\n      {\n        ref = \"ScSymbol\";\n        break;\n      }\n    case _stellarBase.xdr.ScSpecType.scSpecTypeAddress().value:\n      {\n        ref = \"Address\";\n        break;\n      }\n    case _stellarBase.xdr.ScSpecType.scSpecTypeOption().value:\n      {\n        var opt = typeDef.option();\n        return typeRef(opt.valueType());\n      }\n    case _stellarBase.xdr.ScSpecType.scSpecTypeResult().value:\n      {\n        break;\n      }\n    case _stellarBase.xdr.ScSpecType.scSpecTypeVec().value:\n      {\n        var arr = typeDef.vec();\n        var reference = typeRef(arr.elementType());\n        return {\n          type: \"array\",\n          items: reference\n        };\n      }\n    case _stellarBase.xdr.ScSpecType.scSpecTypeMap().value:\n      {\n        var map = typeDef.map();\n        var items = [typeRef(map.keyType()), typeRef(map.valueType())];\n        return {\n          type: \"array\",\n          items: {\n            type: \"array\",\n            items: items,\n            minItems: 2,\n            maxItems: 2\n          }\n        };\n      }\n    case _stellarBase.xdr.ScSpecType.scSpecTypeTuple().value:\n      {\n        var tuple = typeDef.tuple();\n        var minItems = tuple.valueTypes().length;\n        var maxItems = minItems;\n        var _items = tuple.valueTypes().map(typeRef);\n        return {\n          type: \"array\",\n          items: _items,\n          minItems: minItems,\n          maxItems: maxItems\n        };\n      }\n    case _stellarBase.xdr.ScSpecType.scSpecTypeBytesN().value:\n      {\n        var _arr = typeDef.bytesN();\n        return {\n          $ref: \"#/definitions/DataUrl\",\n          maxLength: _arr.n()\n        };\n      }\n    case _stellarBase.xdr.ScSpecType.scSpecTypeUdt().value:\n      {\n        var udt = typeDef.udt();\n        ref = udt.name().toString();\n        break;\n      }\n  }\n  return {\n    $ref: \"#/definitions/\".concat(ref)\n  };\n}\nfunction isRequired(typeDef) {\n  return typeDef.switch().value !== _stellarBase.xdr.ScSpecType.scSpecTypeOption().value;\n}\nfunction argsAndRequired(input) {\n  var properties = {};\n  var required = [];\n  input.forEach(function (arg) {\n    var aType = arg.type();\n    var name = arg.name().toString();\n    properties[name] = typeRef(aType);\n    if (isRequired(aType)) {\n      required.push(name);\n    }\n  });\n  var res = {\n    properties: properties\n  };\n  if (required.length > 0) {\n    res.required = required;\n  }\n  return res;\n}\nfunction structToJsonSchema(udt) {\n  var fields = udt.fields();\n  if (fields.some(isNumeric)) {\n    if (!fields.every(isNumeric)) {\n      throw new Error(\"mixed numeric and non-numeric field names are not allowed\");\n    }\n    var items = fields.map(function (_, i) {\n      return typeRef(fields[i].type());\n    });\n    return {\n      type: \"array\",\n      items: items,\n      minItems: fields.length,\n      maxItems: fields.length\n    };\n  }\n  var description = udt.doc().toString();\n  var _argsAndRequired = argsAndRequired(fields),\n    properties = _argsAndRequired.properties,\n    required = _argsAndRequired.required;\n  properties.additionalProperties = false;\n  return {\n    description: description,\n    properties: properties,\n    required: required,\n    type: \"object\"\n  };\n}\nfunction functionToJsonSchema(func) {\n  var _argsAndRequired2 = argsAndRequired(func.inputs()),\n    properties = _argsAndRequired2.properties,\n    required = _argsAndRequired2.required;\n  var args = {\n    additionalProperties: false,\n    properties: properties,\n    type: \"object\"\n  };\n  if ((required === null || required === void 0 ? void 0 : required.length) > 0) {\n    args.required = required;\n  }\n  var input = {\n    properties: {\n      args: args\n    }\n  };\n  var outputs = func.outputs();\n  var output = outputs.length > 0 ? typeRef(outputs[0]) : typeRef(_stellarBase.xdr.ScSpecTypeDef.scSpecTypeVoid());\n  var description = func.doc().toString();\n  if (description.length > 0) {\n    input.description = description;\n  }\n  input.additionalProperties = false;\n  output.additionalProperties = false;\n  return {\n    input: input,\n    output: output\n  };\n}\nfunction unionToJsonSchema(udt) {\n  var description = udt.doc().toString();\n  var cases = udt.cases();\n  var oneOf = [];\n  cases.forEach(function (aCase) {\n    switch (aCase.switch().value) {\n      case _stellarBase.xdr.ScSpecUdtUnionCaseV0Kind.scSpecUdtUnionCaseVoidV0().value:\n        {\n          var c = aCase.voidCase();\n          var title = c.name().toString();\n          oneOf.push({\n            type: \"object\",\n            title: title,\n            properties: {\n              tag: title\n            },\n            additionalProperties: false,\n            required: [\"tag\"]\n          });\n          break;\n        }\n      case _stellarBase.xdr.ScSpecUdtUnionCaseV0Kind.scSpecUdtUnionCaseTupleV0().value:\n        {\n          var _c = aCase.tupleCase();\n          var _title = _c.name().toString();\n          oneOf.push({\n            type: \"object\",\n            title: _title,\n            properties: {\n              tag: _title,\n              values: {\n                type: \"array\",\n                items: _c.type().map(typeRef)\n              }\n            },\n            required: [\"tag\", \"values\"],\n            additionalProperties: false\n          });\n        }\n    }\n  });\n  var res = {\n    oneOf: oneOf\n  };\n  if (description.length > 0) {\n    res.description = description;\n  }\n  return res;\n}\nvar Spec = exports.Spec = function () {\n  function Spec(entries) {\n    _classCallCheck(this, Spec);\n    _defineProperty(this, \"entries\", []);\n    if (entries.length === 0) {\n      throw new Error(\"Contract spec must have at least one entry\");\n    }\n    var entry = entries[0];\n    if (typeof entry === \"string\") {\n      this.entries = entries.map(function (s) {\n        return _stellarBase.xdr.ScSpecEntry.fromXDR(s, \"base64\");\n      });\n    } else {\n      this.entries = entries;\n    }\n  }\n  return _createClass(Spec, [{\n    key: \"funcs\",\n    value: function funcs() {\n      return this.entries.filter(function (entry) {\n        return entry.switch().value === _stellarBase.xdr.ScSpecEntryKind.scSpecEntryFunctionV0().value;\n      }).map(function (entry) {\n        return entry.functionV0();\n      });\n    }\n  }, {\n    key: \"getFunc\",\n    value: function getFunc(name) {\n      var entry = this.findEntry(name);\n      if (entry.switch().value !== _stellarBase.xdr.ScSpecEntryKind.scSpecEntryFunctionV0().value) {\n        throw new Error(\"\".concat(name, \" is not a function\"));\n      }\n      return entry.functionV0();\n    }\n  }, {\n    key: \"funcArgsToScVals\",\n    value: function funcArgsToScVals(name, args) {\n      var _this = this;\n      var fn = this.getFunc(name);\n      return fn.inputs().map(function (input) {\n        return _this.nativeToScVal(readObj(args, input), input.type());\n      });\n    }\n  }, {\n    key: \"funcResToNative\",\n    value: function funcResToNative(name, val_or_base64) {\n      var val = typeof val_or_base64 === \"string\" ? _stellarBase.xdr.ScVal.fromXDR(val_or_base64, \"base64\") : val_or_base64;\n      var func = this.getFunc(name);\n      var outputs = func.outputs();\n      if (outputs.length === 0) {\n        var type = val.switch();\n        if (type.value !== _stellarBase.xdr.ScValType.scvVoid().value) {\n          throw new Error(\"Expected void, got \".concat(type.name));\n        }\n        return null;\n      }\n      if (outputs.length > 1) {\n        throw new Error(\"Multiple outputs not supported\");\n      }\n      var output = outputs[0];\n      if (output.switch().value === _stellarBase.xdr.ScSpecType.scSpecTypeResult().value) {\n        return new _rust_result.Ok(this.scValToNative(val, output.result().okType()));\n      }\n      return this.scValToNative(val, output);\n    }\n  }, {\n    key: \"findEntry\",\n    value: function findEntry(name) {\n      var entry = this.entries.find(function (e) {\n        return e.value().name().toString() === name;\n      });\n      if (!entry) {\n        throw new Error(\"no such entry: \".concat(name));\n      }\n      return entry;\n    }\n  }, {\n    key: \"nativeToScVal\",\n    value: function nativeToScVal(val, ty) {\n      var _this2 = this;\n      var t = ty.switch();\n      var value = t.value;\n      if (t.value === _stellarBase.xdr.ScSpecType.scSpecTypeUdt().value) {\n        var udt = ty.udt();\n        return this.nativeToUdt(val, udt.name().toString());\n      }\n      if (value === _stellarBase.xdr.ScSpecType.scSpecTypeOption().value) {\n        var opt = ty.option();\n        if (val === undefined) {\n          return _stellarBase.xdr.ScVal.scvVoid();\n        }\n        return this.nativeToScVal(val, opt.valueType());\n      }\n      switch (_typeof(val)) {\n        case \"object\":\n          {\n            var _val$constructor$name, _val$constructor;\n            if (val === null) {\n              switch (value) {\n                case _stellarBase.xdr.ScSpecType.scSpecTypeVoid().value:\n                  return _stellarBase.xdr.ScVal.scvVoid();\n                default:\n                  throw new TypeError(\"Type \".concat(ty, \" was not void, but value was null\"));\n              }\n            }\n            if (val instanceof _stellarBase.xdr.ScVal) {\n              return val;\n            }\n            if (val instanceof _stellarBase.Address) {\n              if (ty.switch().value !== _stellarBase.xdr.ScSpecType.scSpecTypeAddress().value) {\n                throw new TypeError(\"Type \".concat(ty, \" was not address, but value was Address\"));\n              }\n              return val.toScVal();\n            }\n            if (val instanceof _stellarBase.Contract) {\n              if (ty.switch().value !== _stellarBase.xdr.ScSpecType.scSpecTypeAddress().value) {\n                throw new TypeError(\"Type \".concat(ty, \" was not address, but value was Address\"));\n              }\n              return val.address().toScVal();\n            }\n            if (val instanceof Uint8Array || Buffer.isBuffer(val)) {\n              var copy = Uint8Array.from(val);\n              switch (value) {\n                case _stellarBase.xdr.ScSpecType.scSpecTypeBytesN().value:\n                  {\n                    var bytesN = ty.bytesN();\n                    if (copy.length !== bytesN.n()) {\n                      throw new TypeError(\"expected \".concat(bytesN.n(), \" bytes, but got \").concat(copy.length));\n                    }\n                    return _stellarBase.xdr.ScVal.scvBytes(copy);\n                  }\n                case _stellarBase.xdr.ScSpecType.scSpecTypeBytes().value:\n                  return _stellarBase.xdr.ScVal.scvBytes(copy);\n                default:\n                  throw new TypeError(\"invalid type (\".concat(ty, \") specified for Bytes and BytesN\"));\n              }\n            }\n            if (Array.isArray(val)) {\n              switch (value) {\n                case _stellarBase.xdr.ScSpecType.scSpecTypeVec().value:\n                  {\n                    var vec = ty.vec();\n                    var elementType = vec.elementType();\n                    return _stellarBase.xdr.ScVal.scvVec(val.map(function (v) {\n                      return _this2.nativeToScVal(v, elementType);\n                    }));\n                  }\n                case _stellarBase.xdr.ScSpecType.scSpecTypeTuple().value:\n                  {\n                    var tup = ty.tuple();\n                    var valTypes = tup.valueTypes();\n                    if (val.length !== valTypes.length) {\n                      throw new TypeError(\"Tuple expects \".concat(valTypes.length, \" values, but \").concat(val.length, \" were provided\"));\n                    }\n                    return _stellarBase.xdr.ScVal.scvVec(val.map(function (v, i) {\n                      return _this2.nativeToScVal(v, valTypes[i]);\n                    }));\n                  }\n                case _stellarBase.xdr.ScSpecType.scSpecTypeMap().value:\n                  {\n                    var map = ty.map();\n                    var keyType = map.keyType();\n                    var valueType = map.valueType();\n                    return _stellarBase.xdr.ScVal.scvMap(val.map(function (entry) {\n                      var key = _this2.nativeToScVal(entry[0], keyType);\n                      var mapVal = _this2.nativeToScVal(entry[1], valueType);\n                      return new _stellarBase.xdr.ScMapEntry({\n                        key: key,\n                        val: mapVal\n                      });\n                    }));\n                  }\n                default:\n                  throw new TypeError(\"Type \".concat(ty, \" was not vec, but value was Array\"));\n              }\n            }\n            if (val.constructor === Map) {\n              if (value !== _stellarBase.xdr.ScSpecType.scSpecTypeMap().value) {\n                throw new TypeError(\"Type \".concat(ty, \" was not map, but value was Map\"));\n              }\n              var scMap = ty.map();\n              var _map = val;\n              var entries = [];\n              var values = _map.entries();\n              var res = values.next();\n              while (!res.done) {\n                var _res$value = _slicedToArray(res.value, 2),\n                  k = _res$value[0],\n                  v = _res$value[1];\n                var key = this.nativeToScVal(k, scMap.keyType());\n                var mapval = this.nativeToScVal(v, scMap.valueType());\n                entries.push(new _stellarBase.xdr.ScMapEntry({\n                  key: key,\n                  val: mapval\n                }));\n                res = values.next();\n              }\n              return _stellarBase.xdr.ScVal.scvMap(entries);\n            }\n            if (((_val$constructor$name = (_val$constructor = val.constructor) === null || _val$constructor === void 0 ? void 0 : _val$constructor.name) !== null && _val$constructor$name !== void 0 ? _val$constructor$name : \"\") !== \"Object\") {\n              var _val$constructor2;\n              throw new TypeError(\"cannot interpret \".concat((_val$constructor2 = val.constructor) === null || _val$constructor2 === void 0 ? void 0 : _val$constructor2.name, \" value as ScVal (\").concat(JSON.stringify(val), \")\"));\n            }\n            throw new TypeError(\"Received object \".concat(val, \"  did not match the provided type \").concat(ty));\n          }\n        case \"number\":\n        case \"bigint\":\n          {\n            switch (value) {\n              case _stellarBase.xdr.ScSpecType.scSpecTypeU32().value:\n                return _stellarBase.xdr.ScVal.scvU32(val);\n              case _stellarBase.xdr.ScSpecType.scSpecTypeI32().value:\n                return _stellarBase.xdr.ScVal.scvI32(val);\n              case _stellarBase.xdr.ScSpecType.scSpecTypeU64().value:\n              case _stellarBase.xdr.ScSpecType.scSpecTypeI64().value:\n              case _stellarBase.xdr.ScSpecType.scSpecTypeU128().value:\n              case _stellarBase.xdr.ScSpecType.scSpecTypeI128().value:\n              case _stellarBase.xdr.ScSpecType.scSpecTypeU256().value:\n              case _stellarBase.xdr.ScSpecType.scSpecTypeI256().value:\n                {\n                  var intType = t.name.substring(10).toLowerCase();\n                  return new _stellarBase.XdrLargeInt(intType, val).toScVal();\n                }\n              default:\n                throw new TypeError(\"invalid type (\".concat(ty, \") specified for integer\"));\n            }\n          }\n        case \"string\":\n          return stringToScVal(val, t);\n        case \"boolean\":\n          {\n            if (value !== _stellarBase.xdr.ScSpecType.scSpecTypeBool().value) {\n              throw TypeError(\"Type \".concat(ty, \" was not bool, but value was bool\"));\n            }\n            return _stellarBase.xdr.ScVal.scvBool(val);\n          }\n        case \"undefined\":\n          {\n            if (!ty) {\n              return _stellarBase.xdr.ScVal.scvVoid();\n            }\n            switch (value) {\n              case _stellarBase.xdr.ScSpecType.scSpecTypeVoid().value:\n              case _stellarBase.xdr.ScSpecType.scSpecTypeOption().value:\n                return _stellarBase.xdr.ScVal.scvVoid();\n              default:\n                throw new TypeError(\"Type \".concat(ty, \" was not void, but value was undefined\"));\n            }\n          }\n        case \"function\":\n          return this.nativeToScVal(val(), ty);\n        default:\n          throw new TypeError(\"failed to convert typeof \".concat(_typeof(val), \" (\").concat(val, \")\"));\n      }\n    }\n  }, {\n    key: \"nativeToUdt\",\n    value: function nativeToUdt(val, name) {\n      var entry = this.findEntry(name);\n      switch (entry.switch()) {\n        case _stellarBase.xdr.ScSpecEntryKind.scSpecEntryUdtEnumV0():\n          if (typeof val !== \"number\") {\n            throw new TypeError(\"expected number for enum \".concat(name, \", but got \").concat(_typeof(val)));\n          }\n          return this.nativeToEnum(val, entry.udtEnumV0());\n        case _stellarBase.xdr.ScSpecEntryKind.scSpecEntryUdtStructV0():\n          return this.nativeToStruct(val, entry.udtStructV0());\n        case _stellarBase.xdr.ScSpecEntryKind.scSpecEntryUdtUnionV0():\n          return this.nativeToUnion(val, entry.udtUnionV0());\n        default:\n          throw new Error(\"failed to parse udt \".concat(name));\n      }\n    }\n  }, {\n    key: \"nativeToUnion\",\n    value: function nativeToUnion(val, union_) {\n      var _this3 = this;\n      var entryName = val.tag;\n      var caseFound = union_.cases().find(function (entry) {\n        var caseN = entry.value().name().toString();\n        return caseN === entryName;\n      });\n      if (!caseFound) {\n        throw new TypeError(\"no such enum entry: \".concat(entryName, \" in \").concat(union_));\n      }\n      var key = _stellarBase.xdr.ScVal.scvSymbol(entryName);\n      switch (caseFound.switch()) {\n        case _stellarBase.xdr.ScSpecUdtUnionCaseV0Kind.scSpecUdtUnionCaseVoidV0():\n          {\n            return _stellarBase.xdr.ScVal.scvVec([key]);\n          }\n        case _stellarBase.xdr.ScSpecUdtUnionCaseV0Kind.scSpecUdtUnionCaseTupleV0():\n          {\n            var types = caseFound.tupleCase().type();\n            if (Array.isArray(val.values)) {\n              if (val.values.length !== types.length) {\n                throw new TypeError(\"union \".concat(union_, \" expects \").concat(types.length, \" values, but got \").concat(val.values.length));\n              }\n              var scvals = val.values.map(function (v, i) {\n                return _this3.nativeToScVal(v, types[i]);\n              });\n              scvals.unshift(key);\n              return _stellarBase.xdr.ScVal.scvVec(scvals);\n            }\n            throw new Error(\"failed to parse union case \".concat(caseFound, \" with \").concat(val));\n          }\n        default:\n          throw new Error(\"failed to parse union \".concat(union_, \" with \").concat(val));\n      }\n    }\n  }, {\n    key: \"nativeToStruct\",\n    value: function nativeToStruct(val, struct) {\n      var _this4 = this;\n      var fields = struct.fields();\n      if (fields.some(isNumeric)) {\n        if (!fields.every(isNumeric)) {\n          throw new Error(\"mixed numeric and non-numeric field names are not allowed\");\n        }\n        return _stellarBase.xdr.ScVal.scvVec(fields.map(function (_, i) {\n          return _this4.nativeToScVal(val[i], fields[i].type());\n        }));\n      }\n      return _stellarBase.xdr.ScVal.scvMap(fields.map(function (field) {\n        var name = field.name().toString();\n        return new _stellarBase.xdr.ScMapEntry({\n          key: _this4.nativeToScVal(name, _stellarBase.xdr.ScSpecTypeDef.scSpecTypeSymbol()),\n          val: _this4.nativeToScVal(val[name], field.type())\n        });\n      }));\n    }\n  }, {\n    key: \"nativeToEnum\",\n    value: function nativeToEnum(val, enum_) {\n      if (enum_.cases().some(function (entry) {\n        return entry.value() === val;\n      })) {\n        return _stellarBase.xdr.ScVal.scvU32(val);\n      }\n      throw new TypeError(\"no such enum entry: \".concat(val, \" in \").concat(enum_));\n    }\n  }, {\n    key: \"scValStrToNative\",\n    value: function scValStrToNative(scv, typeDef) {\n      return this.scValToNative(_stellarBase.xdr.ScVal.fromXDR(scv, \"base64\"), typeDef);\n    }\n  }, {\n    key: \"scValToNative\",\n    value: function scValToNative(scv, typeDef) {\n      var _this5 = this;\n      var t = typeDef.switch();\n      var value = t.value;\n      if (value === _stellarBase.xdr.ScSpecType.scSpecTypeUdt().value) {\n        return this.scValUdtToNative(scv, typeDef.udt());\n      }\n      switch (scv.switch().value) {\n        case _stellarBase.xdr.ScValType.scvVoid().value:\n          return undefined;\n        case _stellarBase.xdr.ScValType.scvU64().value:\n        case _stellarBase.xdr.ScValType.scvI64().value:\n        case _stellarBase.xdr.ScValType.scvU128().value:\n        case _stellarBase.xdr.ScValType.scvI128().value:\n        case _stellarBase.xdr.ScValType.scvU256().value:\n        case _stellarBase.xdr.ScValType.scvI256().value:\n          return (0, _stellarBase.scValToBigInt)(scv);\n        case _stellarBase.xdr.ScValType.scvVec().value:\n          {\n            if (value === _stellarBase.xdr.ScSpecType.scSpecTypeVec().value) {\n              var _scv$vec;\n              var vec = typeDef.vec();\n              return ((_scv$vec = scv.vec()) !== null && _scv$vec !== void 0 ? _scv$vec : []).map(function (elm) {\n                return _this5.scValToNative(elm, vec.elementType());\n              });\n            }\n            if (value === _stellarBase.xdr.ScSpecType.scSpecTypeTuple().value) {\n              var _scv$vec2;\n              var tuple = typeDef.tuple();\n              var valTypes = tuple.valueTypes();\n              return ((_scv$vec2 = scv.vec()) !== null && _scv$vec2 !== void 0 ? _scv$vec2 : []).map(function (elm, i) {\n                return _this5.scValToNative(elm, valTypes[i]);\n              });\n            }\n            throw new TypeError(\"Type \".concat(typeDef, \" was not vec, but \").concat(scv, \" is\"));\n          }\n        case _stellarBase.xdr.ScValType.scvAddress().value:\n          return _stellarBase.Address.fromScVal(scv).toString();\n        case _stellarBase.xdr.ScValType.scvMap().value:\n          {\n            var _scv$map;\n            var map = (_scv$map = scv.map()) !== null && _scv$map !== void 0 ? _scv$map : [];\n            if (value === _stellarBase.xdr.ScSpecType.scSpecTypeMap().value) {\n              var typed = typeDef.map();\n              var keyType = typed.keyType();\n              var valueType = typed.valueType();\n              var res = map.map(function (entry) {\n                return [_this5.scValToNative(entry.key(), keyType), _this5.scValToNative(entry.val(), valueType)];\n              });\n              return res;\n            }\n            throw new TypeError(\"ScSpecType \".concat(t.name, \" was not map, but \").concat(JSON.stringify(scv, null, 2), \" is\"));\n          }\n        case _stellarBase.xdr.ScValType.scvBool().value:\n        case _stellarBase.xdr.ScValType.scvU32().value:\n        case _stellarBase.xdr.ScValType.scvI32().value:\n        case _stellarBase.xdr.ScValType.scvBytes().value:\n          return scv.value();\n        case _stellarBase.xdr.ScValType.scvString().value:\n        case _stellarBase.xdr.ScValType.scvSymbol().value:\n          {\n            var _scv$value;\n            if (value !== _stellarBase.xdr.ScSpecType.scSpecTypeString().value && value !== _stellarBase.xdr.ScSpecType.scSpecTypeSymbol().value) {\n              throw new Error(\"ScSpecType \".concat(t.name, \" was not string or symbol, but \").concat(JSON.stringify(scv, null, 2), \" is\"));\n            }\n            return (_scv$value = scv.value()) === null || _scv$value === void 0 ? void 0 : _scv$value.toString();\n          }\n        case _stellarBase.xdr.ScValType.scvTimepoint().value:\n        case _stellarBase.xdr.ScValType.scvDuration().value:\n          return (0, _stellarBase.scValToBigInt)(_stellarBase.xdr.ScVal.scvU64(scv.u64()));\n        default:\n          throw new TypeError(\"failed to convert \".concat(JSON.stringify(scv, null, 2), \" to native type from type \").concat(t.name));\n      }\n    }\n  }, {\n    key: \"scValUdtToNative\",\n    value: function scValUdtToNative(scv, udt) {\n      var entry = this.findEntry(udt.name().toString());\n      switch (entry.switch()) {\n        case _stellarBase.xdr.ScSpecEntryKind.scSpecEntryUdtEnumV0():\n          return this.enumToNative(scv);\n        case _stellarBase.xdr.ScSpecEntryKind.scSpecEntryUdtStructV0():\n          return this.structToNative(scv, entry.udtStructV0());\n        case _stellarBase.xdr.ScSpecEntryKind.scSpecEntryUdtUnionV0():\n          return this.unionToNative(scv, entry.udtUnionV0());\n        default:\n          throw new Error(\"failed to parse udt \".concat(udt.name().toString(), \": \").concat(entry));\n      }\n    }\n  }, {\n    key: \"unionToNative\",\n    value: function unionToNative(val, udt) {\n      var _this6 = this;\n      var vec = val.vec();\n      if (!vec) {\n        throw new Error(\"\".concat(JSON.stringify(val, null, 2), \" is not a vec\"));\n      }\n      if (vec.length === 0 && udt.cases.length !== 0) {\n        throw new Error(\"\".concat(val, \" has length 0, but the there are at least one case in the union\"));\n      }\n      var name = vec[0].sym().toString();\n      if (vec[0].switch().value !== _stellarBase.xdr.ScValType.scvSymbol().value) {\n        throw new Error(\"{vec[0]} is not a symbol\");\n      }\n      var entry = udt.cases().find(findCase(name));\n      if (!entry) {\n        throw new Error(\"failed to find entry \".concat(name, \" in union {udt.name().toString()}\"));\n      }\n      var res = {\n        tag: name\n      };\n      if (entry.switch().value === _stellarBase.xdr.ScSpecUdtUnionCaseV0Kind.scSpecUdtUnionCaseTupleV0().value) {\n        var tuple = entry.tupleCase();\n        var ty = tuple.type();\n        var values = ty.map(function (e, i) {\n          return _this6.scValToNative(vec[i + 1], e);\n        });\n        res.values = values;\n      }\n      return res;\n    }\n  }, {\n    key: \"structToNative\",\n    value: function structToNative(val, udt) {\n      var _this7 = this,\n        _val$map;\n      var res = {};\n      var fields = udt.fields();\n      if (fields.some(isNumeric)) {\n        var _val$vec;\n        var r = (_val$vec = val.vec()) === null || _val$vec === void 0 ? void 0 : _val$vec.map(function (entry, i) {\n          return _this7.scValToNative(entry, fields[i].type());\n        });\n        return r;\n      }\n      (_val$map = val.map()) === null || _val$map === void 0 || _val$map.forEach(function (entry, i) {\n        var field = fields[i];\n        res[field.name().toString()] = _this7.scValToNative(entry.val(), field.type());\n      });\n      return res;\n    }\n  }, {\n    key: \"enumToNative\",\n    value: function enumToNative(scv) {\n      if (scv.switch().value !== _stellarBase.xdr.ScValType.scvU32().value) {\n        throw new Error(\"Enum must have a u32 value\");\n      }\n      var num = scv.u32();\n      return num;\n    }\n  }, {\n    key: \"errorCases\",\n    value: function errorCases() {\n      return this.entries.filter(function (entry) {\n        return entry.switch().value === _stellarBase.xdr.ScSpecEntryKind.scSpecEntryUdtErrorEnumV0().value;\n      }).flatMap(function (entry) {\n        return entry.value().cases();\n      });\n    }\n  }, {\n    key: \"jsonSchema\",\n    value: function jsonSchema(funcName) {\n      var definitions = {};\n      this.entries.forEach(function (entry) {\n        switch (entry.switch().value) {\n          case _stellarBase.xdr.ScSpecEntryKind.scSpecEntryUdtEnumV0().value:\n            {\n              var udt = entry.udtEnumV0();\n              definitions[udt.name().toString()] = enumToJsonSchema(udt);\n              break;\n            }\n          case _stellarBase.xdr.ScSpecEntryKind.scSpecEntryUdtStructV0().value:\n            {\n              var _udt = entry.udtStructV0();\n              definitions[_udt.name().toString()] = structToJsonSchema(_udt);\n              break;\n            }\n          case _stellarBase.xdr.ScSpecEntryKind.scSpecEntryUdtUnionV0().value:\n            {\n              var _udt2 = entry.udtUnionV0();\n              definitions[_udt2.name().toString()] = unionToJsonSchema(_udt2);\n              break;\n            }\n          case _stellarBase.xdr.ScSpecEntryKind.scSpecEntryFunctionV0().value:\n            {\n              var fn = entry.functionV0();\n              var fnName = fn.name().toString();\n              var _functionToJsonSchema = functionToJsonSchema(fn),\n                input = _functionToJsonSchema.input;\n              definitions[fnName] = input;\n              break;\n            }\n          case _stellarBase.xdr.ScSpecEntryKind.scSpecEntryUdtErrorEnumV0().value:\n            {}\n        }\n      });\n      var res = {\n        $schema: \"http://json-schema.org/draft-07/schema#\",\n        definitions: _objectSpread(_objectSpread({}, PRIMITIVE_DEFINITONS), definitions)\n      };\n      if (funcName) {\n        res.$ref = \"#/definitions/\".concat(funcName);\n      }\n      return res;\n    }\n  }]);\n}();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@stellar/stellar-sdk/lib/contract/spec.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@stellar/stellar-sdk/lib/contract/types.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@stellar/stellar-sdk/lib/contract/types.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.NULL_ACCOUNT = exports.DEFAULT_TIMEOUT = void 0;\nvar _stellarBase = __webpack_require__(/*! @stellar/stellar-base */ \"(ssr)/./node_modules/@stellar/stellar-base/lib/index.js\");\nvar DEFAULT_TIMEOUT = exports.DEFAULT_TIMEOUT = 5 * 60;\nvar NULL_ACCOUNT = exports.NULL_ACCOUNT = \"GAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAWHF\";//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHN0ZWxsYXIvc3RlbGxhci1zZGsvbGliL2NvbnRyYWN0L3R5cGVzLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLDhDQUE2QztBQUM3QztBQUNBLENBQUMsRUFBQztBQUNGLG9CQUFvQixHQUFHLHVCQUF1QjtBQUM5QyxtQkFBbUIsbUJBQU8sQ0FBQyxzRkFBdUI7QUFDbEQsc0JBQXNCLHVCQUF1QjtBQUM3QyxtQkFBbUIsb0JBQW9CIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXFVTVUFSSU9cXERvY3VtZW50c1xcR2l0aHViXFxHYWxheHlLSi13YWxsZXQtLS1IYWNrXFx3ZWJcXG5vZGVfbW9kdWxlc1xcQHN0ZWxsYXJcXHN0ZWxsYXItc2RrXFxsaWJcXGNvbnRyYWN0XFx0eXBlcy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuTlVMTF9BQ0NPVU5UID0gZXhwb3J0cy5ERUZBVUxUX1RJTUVPVVQgPSB2b2lkIDA7XG52YXIgX3N0ZWxsYXJCYXNlID0gcmVxdWlyZShcIkBzdGVsbGFyL3N0ZWxsYXItYmFzZVwiKTtcbnZhciBERUZBVUxUX1RJTUVPVVQgPSBleHBvcnRzLkRFRkFVTFRfVElNRU9VVCA9IDUgKiA2MDtcbnZhciBOVUxMX0FDQ09VTlQgPSBleHBvcnRzLk5VTExfQUNDT1VOVCA9IFwiR0FBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFXSEZcIjsiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@stellar/stellar-sdk/lib/contract/types.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@stellar/stellar-sdk/lib/contract/utils.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@stellar/stellar-sdk/lib/contract/utils.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.contractErrorPattern = void 0;\nexports.getAccount = getAccount;\nexports.implementsToString = implementsToString;\nexports.processSpecEntryStream = processSpecEntryStream;\nexports.withExponentialBackoff = withExponentialBackoff;\nvar _stellarBase = __webpack_require__(/*! @stellar/stellar-base */ \"(ssr)/./node_modules/@stellar/stellar-base/lib/index.js\");\nvar _types = __webpack_require__(/*! ./types */ \"(ssr)/./node_modules/@stellar/stellar-sdk/lib/contract/types.js\");\nfunction _regeneratorRuntime() { \"use strict\"; _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = \"function\" == typeof Symbol ? Symbol : {}, a = i.iterator || \"@@iterator\", c = i.asyncIterator || \"@@asyncIterator\", u = i.toStringTag || \"@@toStringTag\"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, \"\"); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, \"_invoke\", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: \"normal\", arg: t.call(e, r) }; } catch (t) { return { type: \"throw\", arg: t }; } } e.wrap = wrap; var h = \"suspendedStart\", l = \"suspendedYield\", f = \"executing\", s = \"completed\", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { [\"next\", \"throw\", \"return\"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if (\"throw\" !== c.type) { var u = c.arg, h = u.value; return h && \"object\" == _typeof(h) && n.call(h, \"__await\") ? e.resolve(h.__await).then(function (t) { invoke(\"next\", t, i, a); }, function (t) { invoke(\"throw\", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke(\"throw\", t, i, a); }); } a(c.arg); } var r; o(this, \"_invoke\", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw Error(\"Generator is already running\"); if (o === s) { if (\"throw\" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if (\"next\" === n.method) n.sent = n._sent = n.arg;else if (\"throw\" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else \"return\" === n.method && n.abrupt(\"return\", n.arg); o = f; var p = tryCatch(e, r, n); if (\"normal\" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } \"throw\" === p.type && (o = s, n.method = \"throw\", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, \"throw\" === n && e.iterator.return && (r.method = \"return\", r.arg = t, maybeInvokeDelegate(e, r), \"throw\" === r.method) || \"return\" !== n && (r.method = \"throw\", r.arg = new TypeError(\"The iterator does not provide a '\" + n + \"' method\")), y; var i = tryCatch(o, e.iterator, r.arg); if (\"throw\" === i.type) return r.method = \"throw\", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, \"return\" !== r.method && (r.method = \"next\", r.arg = t), r.delegate = null, y) : a : (r.method = \"throw\", r.arg = new TypeError(\"iterator result is not an object\"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = \"normal\", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: \"root\" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || \"\" === e) { var r = e[a]; if (r) return r.call(e); if (\"function\" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(_typeof(e) + \" is not iterable\"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, \"constructor\", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, \"constructor\", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, \"GeneratorFunction\"), e.isGeneratorFunction = function (t) { var e = \"function\" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || \"GeneratorFunction\" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, \"GeneratorFunction\")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, \"Generator\"), define(g, a, function () { return this; }), define(g, \"toString\", function () { return \"[object Generator]\"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) \"t\" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if (\"throw\" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = \"throw\", a.arg = e, r.next = n, o && (r.method = \"next\", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if (\"root\" === i.tryLoc) return handle(\"end\"); if (i.tryLoc <= this.prev) { var c = n.call(i, \"catchLoc\"), u = n.call(i, \"finallyLoc\"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw Error(\"try statement without catch or finally\"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, \"finallyLoc\") && this.prev < o.finallyLoc) { var i = o; break; } } i && (\"break\" === t || \"continue\" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = \"next\", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if (\"throw\" === t.type) throw t.arg; return \"break\" === t.type || \"continue\" === t.type ? this.next = t.arg : \"return\" === t.type ? (this.rval = this.arg = t.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, catch: function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if (\"throw\" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, \"next\" === this.method && (this.arg = t), y; } }, e; }\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }\nfunction _asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, \"next\", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, \"throw\", n); } _next(void 0); }); }; }\nfunction withExponentialBackoff(_x, _x2, _x3) {\n  return _withExponentialBackoff.apply(this, arguments);\n}\nfunction _withExponentialBackoff() {\n  _withExponentialBackoff = _asyncToGenerator(_regeneratorRuntime().mark(function _callee(fn, keepWaitingIf, timeoutInSeconds) {\n    var exponentialFactor,\n      verbose,\n      attempts,\n      count,\n      waitUntil,\n      waitTime,\n      totalWaitTime,\n      _args = arguments;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          exponentialFactor = _args.length > 3 && _args[3] !== undefined ? _args[3] : 1.5;\n          verbose = _args.length > 4 && _args[4] !== undefined ? _args[4] : false;\n          attempts = [];\n          count = 0;\n          _context.t0 = attempts;\n          _context.next = 7;\n          return fn();\n        case 7:\n          _context.t1 = _context.sent;\n          _context.t0.push.call(_context.t0, _context.t1);\n          if (keepWaitingIf(attempts[attempts.length - 1])) {\n            _context.next = 11;\n            break;\n          }\n          return _context.abrupt(\"return\", attempts);\n        case 11:\n          waitUntil = new Date(Date.now() + timeoutInSeconds * 1000).valueOf();\n          waitTime = 1000;\n          totalWaitTime = waitTime;\n        case 14:\n          if (!(Date.now() < waitUntil && keepWaitingIf(attempts[attempts.length - 1]))) {\n            _context.next = 30;\n            break;\n          }\n          count += 1;\n          if (verbose) {\n            console.info(\"Waiting \".concat(waitTime, \"ms before trying again (bringing the total wait time to \").concat(totalWaitTime, \"ms so far, of total \").concat(timeoutInSeconds * 1000, \"ms)\"));\n          }\n          _context.next = 19;\n          return new Promise(function (res) {\n            return setTimeout(res, waitTime);\n          });\n        case 19:\n          waitTime *= exponentialFactor;\n          if (new Date(Date.now() + waitTime).valueOf() > waitUntil) {\n            waitTime = waitUntil - Date.now();\n            if (verbose) {\n              console.info(\"was gonna wait too long; new waitTime: \".concat(waitTime, \"ms\"));\n            }\n          }\n          totalWaitTime = waitTime + totalWaitTime;\n          _context.t2 = attempts;\n          _context.next = 25;\n          return fn(attempts[attempts.length - 1]);\n        case 25:\n          _context.t3 = _context.sent;\n          _context.t2.push.call(_context.t2, _context.t3);\n          if (verbose && keepWaitingIf(attempts[attempts.length - 1])) {\n            console.info(\"\".concat(count, \". Called \").concat(fn, \"; \").concat(attempts.length, \" prev attempts. Most recent: \").concat(JSON.stringify(attempts[attempts.length - 1], null, 2)));\n          }\n          _context.next = 14;\n          break;\n        case 30:\n          return _context.abrupt(\"return\", attempts);\n        case 31:\n        case \"end\":\n          return _context.stop();\n      }\n    }, _callee);\n  }));\n  return _withExponentialBackoff.apply(this, arguments);\n}\nvar contractErrorPattern = exports.contractErrorPattern = /Error\\(Contract, #(\\d+)\\)/;\nfunction implementsToString(obj) {\n  return _typeof(obj) === \"object\" && obj !== null && \"toString\" in obj;\n}\nfunction processSpecEntryStream(buffer) {\n  var reader = new _stellarBase.cereal.XdrReader(buffer);\n  var res = [];\n  while (!reader.eof) {\n    res.push(_stellarBase.xdr.ScSpecEntry.read(reader));\n  }\n  return res;\n}\nfunction getAccount(_x4, _x5) {\n  return _getAccount.apply(this, arguments);\n}\nfunction _getAccount() {\n  _getAccount = _asyncToGenerator(_regeneratorRuntime().mark(function _callee2(options, server) {\n    return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n      while (1) switch (_context2.prev = _context2.next) {\n        case 0:\n          return _context2.abrupt(\"return\", options.publicKey ? server.getAccount(options.publicKey) : new _stellarBase.Account(_types.NULL_ACCOUNT, \"0\"));\n        case 1:\n        case \"end\":\n          return _context2.stop();\n      }\n    }, _callee2);\n  }));\n  return _getAccount.apply(this, arguments);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@stellar/stellar-sdk/lib/contract/utils.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@stellar/stellar-sdk/lib/errors/account_requires_memo.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@stellar/stellar-sdk/lib/errors/account_requires_memo.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.AccountRequiresMemoError = void 0;\nfunction _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }\nfunction _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nfunction _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\nfunction _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }\nfunction _possibleConstructorReturn(t, e) { if (e && (\"object\" == _typeof(e) || \"function\" == typeof e)) return e; if (void 0 !== e) throw new TypeError(\"Derived constructors may only return object or undefined\"); return _assertThisInitialized(t); }\nfunction _assertThisInitialized(e) { if (void 0 === e) throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); return e; }\nfunction _inherits(t, e) { if (\"function\" != typeof e && null !== e) throw new TypeError(\"Super expression must either be null or a function\"); t.prototype = Object.create(e && e.prototype, { constructor: { value: t, writable: !0, configurable: !0 } }), Object.defineProperty(t, \"prototype\", { writable: !1 }), e && _setPrototypeOf(t, e); }\nfunction _wrapNativeSuper(t) { var r = \"function\" == typeof Map ? new Map() : void 0; return _wrapNativeSuper = function _wrapNativeSuper(t) { if (null === t || !_isNativeFunction(t)) return t; if (\"function\" != typeof t) throw new TypeError(\"Super expression must either be null or a function\"); if (void 0 !== r) { if (r.has(t)) return r.get(t); r.set(t, Wrapper); } function Wrapper() { return _construct(t, arguments, _getPrototypeOf(this).constructor); } return Wrapper.prototype = Object.create(t.prototype, { constructor: { value: Wrapper, enumerable: !1, writable: !0, configurable: !0 } }), _setPrototypeOf(Wrapper, t); }, _wrapNativeSuper(t); }\nfunction _construct(t, e, r) { if (_isNativeReflectConstruct()) return Reflect.construct.apply(null, arguments); var o = [null]; o.push.apply(o, e); var p = new (t.bind.apply(t, o))(); return r && _setPrototypeOf(p, r.prototype), p; }\nfunction _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }\nfunction _isNativeFunction(t) { try { return -1 !== Function.toString.call(t).indexOf(\"[native code]\"); } catch (n) { return \"function\" == typeof t; } }\nfunction _setPrototypeOf(t, e) { return _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function (t, e) { return t.__proto__ = e, t; }, _setPrototypeOf(t, e); }\nfunction _getPrototypeOf(t) { return _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function (t) { return t.__proto__ || Object.getPrototypeOf(t); }, _getPrototypeOf(t); }\nvar AccountRequiresMemoError = exports.AccountRequiresMemoError = function (_Error) {\n  function AccountRequiresMemoError(message, accountId, operationIndex) {\n    var _this;\n    _classCallCheck(this, AccountRequiresMemoError);\n    var trueProto = (this instanceof AccountRequiresMemoError ? this.constructor : void 0).prototype;\n    _this = _callSuper(this, AccountRequiresMemoError, [message]);\n    _this.__proto__ = trueProto;\n    _this.constructor = AccountRequiresMemoError;\n    _this.name = \"AccountRequiresMemoError\";\n    _this.accountId = accountId;\n    _this.operationIndex = operationIndex;\n    return _this;\n  }\n  _inherits(AccountRequiresMemoError, _Error);\n  return _createClass(AccountRequiresMemoError);\n}(_wrapNativeSuper(Error));//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHN0ZWxsYXIvc3RlbGxhci1zZGsvbGliL2Vycm9ycy9hY2NvdW50X3JlcXVpcmVzX21lbW8uanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsc0JBQXNCLDJCQUEyQixvR0FBb0csbUJBQW1CLGlCQUFpQixzSEFBc0g7QUFDL1MsOENBQTZDO0FBQzdDO0FBQ0EsQ0FBQyxFQUFDO0FBQ0YsZ0NBQWdDO0FBQ2hDLG1DQUFtQyxnQkFBZ0IsY0FBYyxPQUFPLGNBQWM7QUFDdEYsaUNBQWlDLHFIQUFxSCxjQUFjO0FBQ3BLLDZCQUE2QixtQ0FBbUM7QUFDaEUsOEJBQThCLDRDQUE0QywrQkFBK0Isb0JBQW9CLG1DQUFtQyxzQ0FBc0MsdUVBQXVFO0FBQzdRLGlDQUFpQztBQUNqQywrQkFBK0I7QUFDL0IsNENBQTRDLHVFQUF1RSxtR0FBbUc7QUFDdE4scUNBQXFDLHlHQUF5RztBQUM5SSwyQkFBMkIscUhBQXFILGdEQUFnRCxlQUFlLDRDQUE0QywyQ0FBMkMsY0FBYztBQUNwVCwrQkFBK0IsdURBQXVELHlEQUF5RCxtREFBbUQsdUdBQXVHLG9CQUFvQiwrQkFBK0IscUJBQXFCLHFCQUFxQixzRUFBc0Usd0RBQXdELGVBQWUsa0VBQWtFLGlDQUFpQztBQUN0bkIsK0JBQStCLGtGQUFrRixnQkFBZ0Isb0JBQW9CLG9DQUFvQztBQUN6TCx1Q0FBdUMsTUFBTSxxRkFBcUYsTUFBTSxhQUFhLDJFQUEyRSxhQUFhO0FBQzdPLGdDQUFnQyxNQUFNLG9FQUFvRSxZQUFZO0FBQ3RILGlDQUFpQyxrR0FBa0csNEJBQTRCO0FBQy9KLDhCQUE4QiwrRkFBK0YsaURBQWlEO0FBQzlLLCtCQUErQixnQ0FBZ0M7QUFDL0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcVVNVQVJJT1xcRG9jdW1lbnRzXFxHaXRodWJcXEdhbGF4eUtKLXdhbGxldC0tLUhhY2tcXHdlYlxcbm9kZV9tb2R1bGVzXFxAc3RlbGxhclxcc3RlbGxhci1zZGtcXGxpYlxcZXJyb3JzXFxhY2NvdW50X3JlcXVpcmVzX21lbW8uanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmZ1bmN0aW9uIF90eXBlb2YobykgeyBcIkBiYWJlbC9oZWxwZXJzIC0gdHlwZW9mXCI7IHJldHVybiBfdHlwZW9mID0gXCJmdW5jdGlvblwiID09IHR5cGVvZiBTeW1ib2wgJiYgXCJzeW1ib2xcIiA9PSB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID8gZnVuY3Rpb24gKG8pIHsgcmV0dXJuIHR5cGVvZiBvOyB9IDogZnVuY3Rpb24gKG8pIHsgcmV0dXJuIG8gJiYgXCJmdW5jdGlvblwiID09IHR5cGVvZiBTeW1ib2wgJiYgby5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG8gIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG87IH0sIF90eXBlb2Yobyk7IH1cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLkFjY291bnRSZXF1aXJlc01lbW9FcnJvciA9IHZvaWQgMDtcbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKGUsIHIpIHsgZm9yICh2YXIgdCA9IDA7IHQgPCByLmxlbmd0aDsgdCsrKSB7IHZhciBvID0gclt0XTsgby5lbnVtZXJhYmxlID0gby5lbnVtZXJhYmxlIHx8ICExLCBvLmNvbmZpZ3VyYWJsZSA9ICEwLCBcInZhbHVlXCIgaW4gbyAmJiAoby53cml0YWJsZSA9ICEwKSwgT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsIF90b1Byb3BlcnR5S2V5KG8ua2V5KSwgbyk7IH0gfVxuZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKGUsIHIsIHQpIHsgcmV0dXJuIHIgJiYgX2RlZmluZVByb3BlcnRpZXMoZS5wcm90b3R5cGUsIHIpLCB0ICYmIF9kZWZpbmVQcm9wZXJ0aWVzKGUsIHQpLCBPYmplY3QuZGVmaW5lUHJvcGVydHkoZSwgXCJwcm90b3R5cGVcIiwgeyB3cml0YWJsZTogITEgfSksIGU7IH1cbmZ1bmN0aW9uIF90b1Byb3BlcnR5S2V5KHQpIHsgdmFyIGkgPSBfdG9QcmltaXRpdmUodCwgXCJzdHJpbmdcIik7IHJldHVybiBcInN5bWJvbFwiID09IF90eXBlb2YoaSkgPyBpIDogaSArIFwiXCI7IH1cbmZ1bmN0aW9uIF90b1ByaW1pdGl2ZSh0LCByKSB7IGlmIChcIm9iamVjdFwiICE9IF90eXBlb2YodCkgfHwgIXQpIHJldHVybiB0OyB2YXIgZSA9IHRbU3ltYm9sLnRvUHJpbWl0aXZlXTsgaWYgKHZvaWQgMCAhPT0gZSkgeyB2YXIgaSA9IGUuY2FsbCh0LCByIHx8IFwiZGVmYXVsdFwiKTsgaWYgKFwib2JqZWN0XCIgIT0gX3R5cGVvZihpKSkgcmV0dXJuIGk7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJAQHRvUHJpbWl0aXZlIG11c3QgcmV0dXJuIGEgcHJpbWl0aXZlIHZhbHVlLlwiKTsgfSByZXR1cm4gKFwic3RyaW5nXCIgPT09IHIgPyBTdHJpbmcgOiBOdW1iZXIpKHQpOyB9XG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soYSwgbikgeyBpZiAoIShhIGluc3RhbmNlb2YgbikpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH1cbmZ1bmN0aW9uIF9jYWxsU3VwZXIodCwgbywgZSkgeyByZXR1cm4gbyA9IF9nZXRQcm90b3R5cGVPZihvKSwgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odCwgX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpID8gUmVmbGVjdC5jb25zdHJ1Y3QobywgZSB8fCBbXSwgX2dldFByb3RvdHlwZU9mKHQpLmNvbnN0cnVjdG9yKSA6IG8uYXBwbHkodCwgZSkpOyB9XG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0LCBlKSB7IGlmIChlICYmIChcIm9iamVjdFwiID09IF90eXBlb2YoZSkgfHwgXCJmdW5jdGlvblwiID09IHR5cGVvZiBlKSkgcmV0dXJuIGU7IGlmICh2b2lkIDAgIT09IGUpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJEZXJpdmVkIGNvbnN0cnVjdG9ycyBtYXkgb25seSByZXR1cm4gb2JqZWN0IG9yIHVuZGVmaW5lZFwiKTsgcmV0dXJuIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQodCk7IH1cbmZ1bmN0aW9uIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoZSkgeyBpZiAodm9pZCAwID09PSBlKSB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IHJldHVybiBlOyB9XG5mdW5jdGlvbiBfaW5oZXJpdHModCwgZSkgeyBpZiAoXCJmdW5jdGlvblwiICE9IHR5cGVvZiBlICYmIG51bGwgIT09IGUpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvblwiKTsgdC5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKGUgJiYgZS5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHQsIHdyaXRhYmxlOiAhMCwgY29uZmlndXJhYmxlOiAhMCB9IH0pLCBPYmplY3QuZGVmaW5lUHJvcGVydHkodCwgXCJwcm90b3R5cGVcIiwgeyB3cml0YWJsZTogITEgfSksIGUgJiYgX3NldFByb3RvdHlwZU9mKHQsIGUpOyB9XG5mdW5jdGlvbiBfd3JhcE5hdGl2ZVN1cGVyKHQpIHsgdmFyIHIgPSBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIE1hcCA/IG5ldyBNYXAoKSA6IHZvaWQgMDsgcmV0dXJuIF93cmFwTmF0aXZlU3VwZXIgPSBmdW5jdGlvbiBfd3JhcE5hdGl2ZVN1cGVyKHQpIHsgaWYgKG51bGwgPT09IHQgfHwgIV9pc05hdGl2ZUZ1bmN0aW9uKHQpKSByZXR1cm4gdDsgaWYgKFwiZnVuY3Rpb25cIiAhPSB0eXBlb2YgdCkgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uXCIpOyBpZiAodm9pZCAwICE9PSByKSB7IGlmIChyLmhhcyh0KSkgcmV0dXJuIHIuZ2V0KHQpOyByLnNldCh0LCBXcmFwcGVyKTsgfSBmdW5jdGlvbiBXcmFwcGVyKCkgeyByZXR1cm4gX2NvbnN0cnVjdCh0LCBhcmd1bWVudHMsIF9nZXRQcm90b3R5cGVPZih0aGlzKS5jb25zdHJ1Y3Rvcik7IH0gcmV0dXJuIFdyYXBwZXIucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSh0LnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogV3JhcHBlciwgZW51bWVyYWJsZTogITEsIHdyaXRhYmxlOiAhMCwgY29uZmlndXJhYmxlOiAhMCB9IH0pLCBfc2V0UHJvdG90eXBlT2YoV3JhcHBlciwgdCk7IH0sIF93cmFwTmF0aXZlU3VwZXIodCk7IH1cbmZ1bmN0aW9uIF9jb25zdHJ1Y3QodCwgZSwgcikgeyBpZiAoX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpKSByZXR1cm4gUmVmbGVjdC5jb25zdHJ1Y3QuYXBwbHkobnVsbCwgYXJndW1lbnRzKTsgdmFyIG8gPSBbbnVsbF07IG8ucHVzaC5hcHBseShvLCBlKTsgdmFyIHAgPSBuZXcgKHQuYmluZC5hcHBseSh0LCBvKSkoKTsgcmV0dXJuIHIgJiYgX3NldFByb3RvdHlwZU9mKHAsIHIucHJvdG90eXBlKSwgcDsgfVxuZnVuY3Rpb24gX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpIHsgdHJ5IHsgdmFyIHQgPSAhQm9vbGVhbi5wcm90b3R5cGUudmFsdWVPZi5jYWxsKFJlZmxlY3QuY29uc3RydWN0KEJvb2xlYW4sIFtdLCBmdW5jdGlvbiAoKSB7fSkpOyB9IGNhdGNoICh0KSB7fSByZXR1cm4gKF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QgPSBmdW5jdGlvbiBfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KCkgeyByZXR1cm4gISF0OyB9KSgpOyB9XG5mdW5jdGlvbiBfaXNOYXRpdmVGdW5jdGlvbih0KSB7IHRyeSB7IHJldHVybiAtMSAhPT0gRnVuY3Rpb24udG9TdHJpbmcuY2FsbCh0KS5pbmRleE9mKFwiW25hdGl2ZSBjb2RlXVwiKTsgfSBjYXRjaCAobikgeyByZXR1cm4gXCJmdW5jdGlvblwiID09IHR5cGVvZiB0OyB9IH1cbmZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZih0LCBlKSB7IHJldHVybiBfc2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2YuYmluZCgpIDogZnVuY3Rpb24gKHQsIGUpIHsgcmV0dXJuIHQuX19wcm90b19fID0gZSwgdDsgfSwgX3NldFByb3RvdHlwZU9mKHQsIGUpOyB9XG5mdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2YodCkgeyByZXR1cm4gX2dldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LmdldFByb3RvdHlwZU9mLmJpbmQoKSA6IGZ1bmN0aW9uICh0KSB7IHJldHVybiB0Ll9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YodCk7IH0sIF9nZXRQcm90b3R5cGVPZih0KTsgfVxudmFyIEFjY291bnRSZXF1aXJlc01lbW9FcnJvciA9IGV4cG9ydHMuQWNjb3VudFJlcXVpcmVzTWVtb0Vycm9yID0gZnVuY3Rpb24gKF9FcnJvcikge1xuICBmdW5jdGlvbiBBY2NvdW50UmVxdWlyZXNNZW1vRXJyb3IobWVzc2FnZSwgYWNjb3VudElkLCBvcGVyYXRpb25JbmRleCkge1xuICAgIHZhciBfdGhpcztcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgQWNjb3VudFJlcXVpcmVzTWVtb0Vycm9yKTtcbiAgICB2YXIgdHJ1ZVByb3RvID0gKHRoaXMgaW5zdGFuY2VvZiBBY2NvdW50UmVxdWlyZXNNZW1vRXJyb3IgPyB0aGlzLmNvbnN0cnVjdG9yIDogdm9pZCAwKS5wcm90b3R5cGU7XG4gICAgX3RoaXMgPSBfY2FsbFN1cGVyKHRoaXMsIEFjY291bnRSZXF1aXJlc01lbW9FcnJvciwgW21lc3NhZ2VdKTtcbiAgICBfdGhpcy5fX3Byb3RvX18gPSB0cnVlUHJvdG87XG4gICAgX3RoaXMuY29uc3RydWN0b3IgPSBBY2NvdW50UmVxdWlyZXNNZW1vRXJyb3I7XG4gICAgX3RoaXMubmFtZSA9IFwiQWNjb3VudFJlcXVpcmVzTWVtb0Vycm9yXCI7XG4gICAgX3RoaXMuYWNjb3VudElkID0gYWNjb3VudElkO1xuICAgIF90aGlzLm9wZXJhdGlvbkluZGV4ID0gb3BlcmF0aW9uSW5kZXg7XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG4gIF9pbmhlcml0cyhBY2NvdW50UmVxdWlyZXNNZW1vRXJyb3IsIF9FcnJvcik7XG4gIHJldHVybiBfY3JlYXRlQ2xhc3MoQWNjb3VudFJlcXVpcmVzTWVtb0Vycm9yKTtcbn0oX3dyYXBOYXRpdmVTdXBlcihFcnJvcikpOyJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@stellar/stellar-sdk/lib/errors/account_requires_memo.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@stellar/stellar-sdk/lib/errors/bad_request.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@stellar/stellar-sdk/lib/errors/bad_request.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.BadRequestError = void 0;\nvar _network = __webpack_require__(/*! ./network */ \"(ssr)/./node_modules/@stellar/stellar-sdk/lib/errors/network.js\");\nfunction _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }\nfunction _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nfunction _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\nfunction _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }\nfunction _possibleConstructorReturn(t, e) { if (e && (\"object\" == _typeof(e) || \"function\" == typeof e)) return e; if (void 0 !== e) throw new TypeError(\"Derived constructors may only return object or undefined\"); return _assertThisInitialized(t); }\nfunction _assertThisInitialized(e) { if (void 0 === e) throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); return e; }\nfunction _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }\nfunction _getPrototypeOf(t) { return _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function (t) { return t.__proto__ || Object.getPrototypeOf(t); }, _getPrototypeOf(t); }\nfunction _inherits(t, e) { if (\"function\" != typeof e && null !== e) throw new TypeError(\"Super expression must either be null or a function\"); t.prototype = Object.create(e && e.prototype, { constructor: { value: t, writable: !0, configurable: !0 } }), Object.defineProperty(t, \"prototype\", { writable: !1 }), e && _setPrototypeOf(t, e); }\nfunction _setPrototypeOf(t, e) { return _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function (t, e) { return t.__proto__ = e, t; }, _setPrototypeOf(t, e); }\nvar BadRequestError = exports.BadRequestError = function (_NetworkError) {\n  function BadRequestError(message, response) {\n    var _this;\n    _classCallCheck(this, BadRequestError);\n    var trueProto = (this instanceof BadRequestError ? this.constructor : void 0).prototype;\n    _this = _callSuper(this, BadRequestError, [message, response]);\n    _this.__proto__ = trueProto;\n    _this.constructor = BadRequestError;\n    _this.name = \"BadRequestError\";\n    return _this;\n  }\n  _inherits(BadRequestError, _NetworkError);\n  return _createClass(BadRequestError);\n}(_network.NetworkError);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHN0ZWxsYXIvc3RlbGxhci1zZGsvbGliL2Vycm9ycy9iYWRfcmVxdWVzdC5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYixzQkFBc0IsMkJBQTJCLG9HQUFvRyxtQkFBbUIsaUJBQWlCLHNIQUFzSDtBQUMvUyw4Q0FBNkM7QUFDN0M7QUFDQSxDQUFDLEVBQUM7QUFDRix1QkFBdUI7QUFDdkIsZUFBZSxtQkFBTyxDQUFDLGtGQUFXO0FBQ2xDLG1DQUFtQyxnQkFBZ0IsY0FBYyxPQUFPLGNBQWM7QUFDdEYsaUNBQWlDLHFIQUFxSCxjQUFjO0FBQ3BLLDZCQUE2QixtQ0FBbUM7QUFDaEUsOEJBQThCLDRDQUE0QywrQkFBK0Isb0JBQW9CLG1DQUFtQyxzQ0FBc0MsdUVBQXVFO0FBQzdRLGlDQUFpQztBQUNqQywrQkFBK0I7QUFDL0IsNENBQTRDLHVFQUF1RSxtR0FBbUc7QUFDdE4scUNBQXFDLHlHQUF5RztBQUM5SSx1Q0FBdUMsTUFBTSxxRkFBcUYsTUFBTSxhQUFhLDJFQUEyRSxhQUFhO0FBQzdPLDhCQUE4QiwrRkFBK0YsaURBQWlEO0FBQzlLLDJCQUEyQixxSEFBcUgsZ0RBQWdELGVBQWUsNENBQTRDLDJDQUEyQyxjQUFjO0FBQ3BULGlDQUFpQyxrR0FBa0csNEJBQTRCO0FBQy9KLHNCQUFzQix1QkFBdUI7QUFDN0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQyIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxVU1VBUklPXFxEb2N1bWVudHNcXEdpdGh1YlxcR2FsYXh5S0otd2FsbGV0LS0tSGFja1xcd2ViXFxub2RlX21vZHVsZXNcXEBzdGVsbGFyXFxzdGVsbGFyLXNka1xcbGliXFxlcnJvcnNcXGJhZF9yZXF1ZXN0LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5mdW5jdGlvbiBfdHlwZW9mKG8pIHsgXCJAYmFiZWwvaGVscGVycyAtIHR5cGVvZlwiOyByZXR1cm4gX3R5cGVvZiA9IFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgU3ltYm9sICYmIFwic3ltYm9sXCIgPT0gdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA/IGZ1bmN0aW9uIChvKSB7IHJldHVybiB0eXBlb2YgbzsgfSA6IGZ1bmN0aW9uIChvKSB7IHJldHVybiBvICYmIFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgU3ltYm9sICYmIG8uY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvOyB9LCBfdHlwZW9mKG8pOyB9XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5CYWRSZXF1ZXN0RXJyb3IgPSB2b2lkIDA7XG52YXIgX25ldHdvcmsgPSByZXF1aXJlKFwiLi9uZXR3b3JrXCIpO1xuZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXMoZSwgcikgeyBmb3IgKHZhciB0ID0gMDsgdCA8IHIubGVuZ3RoOyB0KyspIHsgdmFyIG8gPSByW3RdOyBvLmVudW1lcmFibGUgPSBvLmVudW1lcmFibGUgfHwgITEsIG8uY29uZmlndXJhYmxlID0gITAsIFwidmFsdWVcIiBpbiBvICYmIChvLndyaXRhYmxlID0gITApLCBPYmplY3QuZGVmaW5lUHJvcGVydHkoZSwgX3RvUHJvcGVydHlLZXkoby5rZXkpLCBvKTsgfSB9XG5mdW5jdGlvbiBfY3JlYXRlQ2xhc3MoZSwgciwgdCkgeyByZXR1cm4gciAmJiBfZGVmaW5lUHJvcGVydGllcyhlLnByb3RvdHlwZSwgciksIHQgJiYgX2RlZmluZVByb3BlcnRpZXMoZSwgdCksIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLCBcInByb3RvdHlwZVwiLCB7IHdyaXRhYmxlOiAhMSB9KSwgZTsgfVxuZnVuY3Rpb24gX3RvUHJvcGVydHlLZXkodCkgeyB2YXIgaSA9IF90b1ByaW1pdGl2ZSh0LCBcInN0cmluZ1wiKTsgcmV0dXJuIFwic3ltYm9sXCIgPT0gX3R5cGVvZihpKSA/IGkgOiBpICsgXCJcIjsgfVxuZnVuY3Rpb24gX3RvUHJpbWl0aXZlKHQsIHIpIHsgaWYgKFwib2JqZWN0XCIgIT0gX3R5cGVvZih0KSB8fCAhdCkgcmV0dXJuIHQ7IHZhciBlID0gdFtTeW1ib2wudG9QcmltaXRpdmVdOyBpZiAodm9pZCAwICE9PSBlKSB7IHZhciBpID0gZS5jYWxsKHQsIHIgfHwgXCJkZWZhdWx0XCIpOyBpZiAoXCJvYmplY3RcIiAhPSBfdHlwZW9mKGkpKSByZXR1cm4gaTsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkBAdG9QcmltaXRpdmUgbXVzdCByZXR1cm4gYSBwcmltaXRpdmUgdmFsdWUuXCIpOyB9IHJldHVybiAoXCJzdHJpbmdcIiA9PT0gciA/IFN0cmluZyA6IE51bWJlcikodCk7IH1cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhhLCBuKSB7IGlmICghKGEgaW5zdGFuY2VvZiBuKSkgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfVxuZnVuY3Rpb24gX2NhbGxTdXBlcih0LCBvLCBlKSB7IHJldHVybiBvID0gX2dldFByb3RvdHlwZU9mKG8pLCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0LCBfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KCkgPyBSZWZsZWN0LmNvbnN0cnVjdChvLCBlIHx8IFtdLCBfZ2V0UHJvdG90eXBlT2YodCkuY29uc3RydWN0b3IpIDogby5hcHBseSh0LCBlKSk7IH1cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHQsIGUpIHsgaWYgKGUgJiYgKFwib2JqZWN0XCIgPT0gX3R5cGVvZihlKSB8fCBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIGUpKSByZXR1cm4gZTsgaWYgKHZvaWQgMCAhPT0gZSkgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkRlcml2ZWQgY29uc3RydWN0b3JzIG1heSBvbmx5IHJldHVybiBvYmplY3Qgb3IgdW5kZWZpbmVkXCIpOyByZXR1cm4gX2Fzc2VydFRoaXNJbml0aWFsaXplZCh0KTsgfVxuZnVuY3Rpb24gX2Fzc2VydFRoaXNJbml0aWFsaXplZChlKSB7IGlmICh2b2lkIDAgPT09IGUpIHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgcmV0dXJuIGU7IH1cbmZ1bmN0aW9uIF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKSB7IHRyeSB7IHZhciB0ID0gIUJvb2xlYW4ucHJvdG90eXBlLnZhbHVlT2YuY2FsbChSZWZsZWN0LmNvbnN0cnVjdChCb29sZWFuLCBbXSwgZnVuY3Rpb24gKCkge30pKTsgfSBjYXRjaCAodCkge30gcmV0dXJuIChfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0ID0gZnVuY3Rpb24gX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpIHsgcmV0dXJuICEhdDsgfSkoKTsgfVxuZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKHQpIHsgcmV0dXJuIF9nZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5nZXRQcm90b3R5cGVPZi5iaW5kKCkgOiBmdW5jdGlvbiAodCkgeyByZXR1cm4gdC5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKHQpOyB9LCBfZ2V0UHJvdG90eXBlT2YodCk7IH1cbmZ1bmN0aW9uIF9pbmhlcml0cyh0LCBlKSB7IGlmIChcImZ1bmN0aW9uXCIgIT0gdHlwZW9mIGUgJiYgbnVsbCAhPT0gZSkgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uXCIpOyB0LnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoZSAmJiBlLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogdCwgd3JpdGFibGU6ICEwLCBjb25maWd1cmFibGU6ICEwIH0gfSksIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LCBcInByb3RvdHlwZVwiLCB7IHdyaXRhYmxlOiAhMSB9KSwgZSAmJiBfc2V0UHJvdG90eXBlT2YodCwgZSk7IH1cbmZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZih0LCBlKSB7IHJldHVybiBfc2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2YuYmluZCgpIDogZnVuY3Rpb24gKHQsIGUpIHsgcmV0dXJuIHQuX19wcm90b19fID0gZSwgdDsgfSwgX3NldFByb3RvdHlwZU9mKHQsIGUpOyB9XG52YXIgQmFkUmVxdWVzdEVycm9yID0gZXhwb3J0cy5CYWRSZXF1ZXN0RXJyb3IgPSBmdW5jdGlvbiAoX05ldHdvcmtFcnJvcikge1xuICBmdW5jdGlvbiBCYWRSZXF1ZXN0RXJyb3IobWVzc2FnZSwgcmVzcG9uc2UpIHtcbiAgICB2YXIgX3RoaXM7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEJhZFJlcXVlc3RFcnJvcik7XG4gICAgdmFyIHRydWVQcm90byA9ICh0aGlzIGluc3RhbmNlb2YgQmFkUmVxdWVzdEVycm9yID8gdGhpcy5jb25zdHJ1Y3RvciA6IHZvaWQgMCkucHJvdG90eXBlO1xuICAgIF90aGlzID0gX2NhbGxTdXBlcih0aGlzLCBCYWRSZXF1ZXN0RXJyb3IsIFttZXNzYWdlLCByZXNwb25zZV0pO1xuICAgIF90aGlzLl9fcHJvdG9fXyA9IHRydWVQcm90bztcbiAgICBfdGhpcy5jb25zdHJ1Y3RvciA9IEJhZFJlcXVlc3RFcnJvcjtcbiAgICBfdGhpcy5uYW1lID0gXCJCYWRSZXF1ZXN0RXJyb3JcIjtcbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cbiAgX2luaGVyaXRzKEJhZFJlcXVlc3RFcnJvciwgX05ldHdvcmtFcnJvcik7XG4gIHJldHVybiBfY3JlYXRlQ2xhc3MoQmFkUmVxdWVzdEVycm9yKTtcbn0oX25ldHdvcmsuTmV0d29ya0Vycm9yKTsiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@stellar/stellar-sdk/lib/errors/bad_request.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@stellar/stellar-sdk/lib/errors/bad_response.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@stellar/stellar-sdk/lib/errors/bad_response.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.BadResponseError = void 0;\nvar _network = __webpack_require__(/*! ./network */ \"(ssr)/./node_modules/@stellar/stellar-sdk/lib/errors/network.js\");\nfunction _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }\nfunction _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nfunction _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\nfunction _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }\nfunction _possibleConstructorReturn(t, e) { if (e && (\"object\" == _typeof(e) || \"function\" == typeof e)) return e; if (void 0 !== e) throw new TypeError(\"Derived constructors may only return object or undefined\"); return _assertThisInitialized(t); }\nfunction _assertThisInitialized(e) { if (void 0 === e) throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); return e; }\nfunction _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }\nfunction _getPrototypeOf(t) { return _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function (t) { return t.__proto__ || Object.getPrototypeOf(t); }, _getPrototypeOf(t); }\nfunction _inherits(t, e) { if (\"function\" != typeof e && null !== e) throw new TypeError(\"Super expression must either be null or a function\"); t.prototype = Object.create(e && e.prototype, { constructor: { value: t, writable: !0, configurable: !0 } }), Object.defineProperty(t, \"prototype\", { writable: !1 }), e && _setPrototypeOf(t, e); }\nfunction _setPrototypeOf(t, e) { return _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function (t, e) { return t.__proto__ = e, t; }, _setPrototypeOf(t, e); }\nvar BadResponseError = exports.BadResponseError = function (_NetworkError) {\n  function BadResponseError(message, response) {\n    var _this;\n    _classCallCheck(this, BadResponseError);\n    var trueProto = (this instanceof BadResponseError ? this.constructor : void 0).prototype;\n    _this = _callSuper(this, BadResponseError, [message, response]);\n    _this.__proto__ = trueProto;\n    _this.constructor = BadResponseError;\n    _this.name = \"BadResponseError\";\n    return _this;\n  }\n  _inherits(BadResponseError, _NetworkError);\n  return _createClass(BadResponseError);\n}(_network.NetworkError);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHN0ZWxsYXIvc3RlbGxhci1zZGsvbGliL2Vycm9ycy9iYWRfcmVzcG9uc2UuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsc0JBQXNCLDJCQUEyQixvR0FBb0csbUJBQW1CLGlCQUFpQixzSEFBc0g7QUFDL1MsOENBQTZDO0FBQzdDO0FBQ0EsQ0FBQyxFQUFDO0FBQ0Ysd0JBQXdCO0FBQ3hCLGVBQWUsbUJBQU8sQ0FBQyxrRkFBVztBQUNsQyxtQ0FBbUMsZ0JBQWdCLGNBQWMsT0FBTyxjQUFjO0FBQ3RGLGlDQUFpQyxxSEFBcUgsY0FBYztBQUNwSyw2QkFBNkIsbUNBQW1DO0FBQ2hFLDhCQUE4Qiw0Q0FBNEMsK0JBQStCLG9CQUFvQixtQ0FBbUMsc0NBQXNDLHVFQUF1RTtBQUM3USxpQ0FBaUM7QUFDakMsK0JBQStCO0FBQy9CLDRDQUE0Qyx1RUFBdUUsbUdBQW1HO0FBQ3ROLHFDQUFxQyx5R0FBeUc7QUFDOUksdUNBQXVDLE1BQU0scUZBQXFGLE1BQU0sYUFBYSwyRUFBMkUsYUFBYTtBQUM3Tyw4QkFBOEIsK0ZBQStGLGlEQUFpRDtBQUM5SywyQkFBMkIscUhBQXFILGdEQUFnRCxlQUFlLDRDQUE0QywyQ0FBMkMsY0FBYztBQUNwVCxpQ0FBaUMsa0dBQWtHLDRCQUE0QjtBQUMvSix1QkFBdUIsd0JBQXdCO0FBQy9DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcVVNVQVJJT1xcRG9jdW1lbnRzXFxHaXRodWJcXEdhbGF4eUtKLXdhbGxldC0tLUhhY2tcXHdlYlxcbm9kZV9tb2R1bGVzXFxAc3RlbGxhclxcc3RlbGxhci1zZGtcXGxpYlxcZXJyb3JzXFxiYWRfcmVzcG9uc2UuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmZ1bmN0aW9uIF90eXBlb2YobykgeyBcIkBiYWJlbC9oZWxwZXJzIC0gdHlwZW9mXCI7IHJldHVybiBfdHlwZW9mID0gXCJmdW5jdGlvblwiID09IHR5cGVvZiBTeW1ib2wgJiYgXCJzeW1ib2xcIiA9PSB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID8gZnVuY3Rpb24gKG8pIHsgcmV0dXJuIHR5cGVvZiBvOyB9IDogZnVuY3Rpb24gKG8pIHsgcmV0dXJuIG8gJiYgXCJmdW5jdGlvblwiID09IHR5cGVvZiBTeW1ib2wgJiYgby5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG8gIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG87IH0sIF90eXBlb2Yobyk7IH1cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLkJhZFJlc3BvbnNlRXJyb3IgPSB2b2lkIDA7XG52YXIgX25ldHdvcmsgPSByZXF1aXJlKFwiLi9uZXR3b3JrXCIpO1xuZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXMoZSwgcikgeyBmb3IgKHZhciB0ID0gMDsgdCA8IHIubGVuZ3RoOyB0KyspIHsgdmFyIG8gPSByW3RdOyBvLmVudW1lcmFibGUgPSBvLmVudW1lcmFibGUgfHwgITEsIG8uY29uZmlndXJhYmxlID0gITAsIFwidmFsdWVcIiBpbiBvICYmIChvLndyaXRhYmxlID0gITApLCBPYmplY3QuZGVmaW5lUHJvcGVydHkoZSwgX3RvUHJvcGVydHlLZXkoby5rZXkpLCBvKTsgfSB9XG5mdW5jdGlvbiBfY3JlYXRlQ2xhc3MoZSwgciwgdCkgeyByZXR1cm4gciAmJiBfZGVmaW5lUHJvcGVydGllcyhlLnByb3RvdHlwZSwgciksIHQgJiYgX2RlZmluZVByb3BlcnRpZXMoZSwgdCksIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLCBcInByb3RvdHlwZVwiLCB7IHdyaXRhYmxlOiAhMSB9KSwgZTsgfVxuZnVuY3Rpb24gX3RvUHJvcGVydHlLZXkodCkgeyB2YXIgaSA9IF90b1ByaW1pdGl2ZSh0LCBcInN0cmluZ1wiKTsgcmV0dXJuIFwic3ltYm9sXCIgPT0gX3R5cGVvZihpKSA/IGkgOiBpICsgXCJcIjsgfVxuZnVuY3Rpb24gX3RvUHJpbWl0aXZlKHQsIHIpIHsgaWYgKFwib2JqZWN0XCIgIT0gX3R5cGVvZih0KSB8fCAhdCkgcmV0dXJuIHQ7IHZhciBlID0gdFtTeW1ib2wudG9QcmltaXRpdmVdOyBpZiAodm9pZCAwICE9PSBlKSB7IHZhciBpID0gZS5jYWxsKHQsIHIgfHwgXCJkZWZhdWx0XCIpOyBpZiAoXCJvYmplY3RcIiAhPSBfdHlwZW9mKGkpKSByZXR1cm4gaTsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkBAdG9QcmltaXRpdmUgbXVzdCByZXR1cm4gYSBwcmltaXRpdmUgdmFsdWUuXCIpOyB9IHJldHVybiAoXCJzdHJpbmdcIiA9PT0gciA/IFN0cmluZyA6IE51bWJlcikodCk7IH1cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhhLCBuKSB7IGlmICghKGEgaW5zdGFuY2VvZiBuKSkgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfVxuZnVuY3Rpb24gX2NhbGxTdXBlcih0LCBvLCBlKSB7IHJldHVybiBvID0gX2dldFByb3RvdHlwZU9mKG8pLCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0LCBfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KCkgPyBSZWZsZWN0LmNvbnN0cnVjdChvLCBlIHx8IFtdLCBfZ2V0UHJvdG90eXBlT2YodCkuY29uc3RydWN0b3IpIDogby5hcHBseSh0LCBlKSk7IH1cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHQsIGUpIHsgaWYgKGUgJiYgKFwib2JqZWN0XCIgPT0gX3R5cGVvZihlKSB8fCBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIGUpKSByZXR1cm4gZTsgaWYgKHZvaWQgMCAhPT0gZSkgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkRlcml2ZWQgY29uc3RydWN0b3JzIG1heSBvbmx5IHJldHVybiBvYmplY3Qgb3IgdW5kZWZpbmVkXCIpOyByZXR1cm4gX2Fzc2VydFRoaXNJbml0aWFsaXplZCh0KTsgfVxuZnVuY3Rpb24gX2Fzc2VydFRoaXNJbml0aWFsaXplZChlKSB7IGlmICh2b2lkIDAgPT09IGUpIHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgcmV0dXJuIGU7IH1cbmZ1bmN0aW9uIF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKSB7IHRyeSB7IHZhciB0ID0gIUJvb2xlYW4ucHJvdG90eXBlLnZhbHVlT2YuY2FsbChSZWZsZWN0LmNvbnN0cnVjdChCb29sZWFuLCBbXSwgZnVuY3Rpb24gKCkge30pKTsgfSBjYXRjaCAodCkge30gcmV0dXJuIChfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0ID0gZnVuY3Rpb24gX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpIHsgcmV0dXJuICEhdDsgfSkoKTsgfVxuZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKHQpIHsgcmV0dXJuIF9nZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5nZXRQcm90b3R5cGVPZi5iaW5kKCkgOiBmdW5jdGlvbiAodCkgeyByZXR1cm4gdC5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKHQpOyB9LCBfZ2V0UHJvdG90eXBlT2YodCk7IH1cbmZ1bmN0aW9uIF9pbmhlcml0cyh0LCBlKSB7IGlmIChcImZ1bmN0aW9uXCIgIT0gdHlwZW9mIGUgJiYgbnVsbCAhPT0gZSkgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uXCIpOyB0LnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoZSAmJiBlLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogdCwgd3JpdGFibGU6ICEwLCBjb25maWd1cmFibGU6ICEwIH0gfSksIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LCBcInByb3RvdHlwZVwiLCB7IHdyaXRhYmxlOiAhMSB9KSwgZSAmJiBfc2V0UHJvdG90eXBlT2YodCwgZSk7IH1cbmZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZih0LCBlKSB7IHJldHVybiBfc2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2YuYmluZCgpIDogZnVuY3Rpb24gKHQsIGUpIHsgcmV0dXJuIHQuX19wcm90b19fID0gZSwgdDsgfSwgX3NldFByb3RvdHlwZU9mKHQsIGUpOyB9XG52YXIgQmFkUmVzcG9uc2VFcnJvciA9IGV4cG9ydHMuQmFkUmVzcG9uc2VFcnJvciA9IGZ1bmN0aW9uIChfTmV0d29ya0Vycm9yKSB7XG4gIGZ1bmN0aW9uIEJhZFJlc3BvbnNlRXJyb3IobWVzc2FnZSwgcmVzcG9uc2UpIHtcbiAgICB2YXIgX3RoaXM7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEJhZFJlc3BvbnNlRXJyb3IpO1xuICAgIHZhciB0cnVlUHJvdG8gPSAodGhpcyBpbnN0YW5jZW9mIEJhZFJlc3BvbnNlRXJyb3IgPyB0aGlzLmNvbnN0cnVjdG9yIDogdm9pZCAwKS5wcm90b3R5cGU7XG4gICAgX3RoaXMgPSBfY2FsbFN1cGVyKHRoaXMsIEJhZFJlc3BvbnNlRXJyb3IsIFttZXNzYWdlLCByZXNwb25zZV0pO1xuICAgIF90aGlzLl9fcHJvdG9fXyA9IHRydWVQcm90bztcbiAgICBfdGhpcy5jb25zdHJ1Y3RvciA9IEJhZFJlc3BvbnNlRXJyb3I7XG4gICAgX3RoaXMubmFtZSA9IFwiQmFkUmVzcG9uc2VFcnJvclwiO1xuICAgIHJldHVybiBfdGhpcztcbiAgfVxuICBfaW5oZXJpdHMoQmFkUmVzcG9uc2VFcnJvciwgX05ldHdvcmtFcnJvcik7XG4gIHJldHVybiBfY3JlYXRlQ2xhc3MoQmFkUmVzcG9uc2VFcnJvcik7XG59KF9uZXR3b3JrLk5ldHdvcmtFcnJvcik7Il0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@stellar/stellar-sdk/lib/errors/bad_response.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@stellar/stellar-sdk/lib/errors/index.js":
/*!***************************************************************!*\
  !*** ./node_modules/@stellar/stellar-sdk/lib/errors/index.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nvar _network = __webpack_require__(/*! ./network */ \"(ssr)/./node_modules/@stellar/stellar-sdk/lib/errors/network.js\");\nObject.keys(_network).forEach(function (key) {\n  if (key === \"default\" || key === \"__esModule\") return;\n  if (key in exports && exports[key] === _network[key]) return;\n  Object.defineProperty(exports, key, {\n    enumerable: true,\n    get: function get() {\n      return _network[key];\n    }\n  });\n});\nvar _not_found = __webpack_require__(/*! ./not_found */ \"(ssr)/./node_modules/@stellar/stellar-sdk/lib/errors/not_found.js\");\nObject.keys(_not_found).forEach(function (key) {\n  if (key === \"default\" || key === \"__esModule\") return;\n  if (key in exports && exports[key] === _not_found[key]) return;\n  Object.defineProperty(exports, key, {\n    enumerable: true,\n    get: function get() {\n      return _not_found[key];\n    }\n  });\n});\nvar _bad_request = __webpack_require__(/*! ./bad_request */ \"(ssr)/./node_modules/@stellar/stellar-sdk/lib/errors/bad_request.js\");\nObject.keys(_bad_request).forEach(function (key) {\n  if (key === \"default\" || key === \"__esModule\") return;\n  if (key in exports && exports[key] === _bad_request[key]) return;\n  Object.defineProperty(exports, key, {\n    enumerable: true,\n    get: function get() {\n      return _bad_request[key];\n    }\n  });\n});\nvar _bad_response = __webpack_require__(/*! ./bad_response */ \"(ssr)/./node_modules/@stellar/stellar-sdk/lib/errors/bad_response.js\");\nObject.keys(_bad_response).forEach(function (key) {\n  if (key === \"default\" || key === \"__esModule\") return;\n  if (key in exports && exports[key] === _bad_response[key]) return;\n  Object.defineProperty(exports, key, {\n    enumerable: true,\n    get: function get() {\n      return _bad_response[key];\n    }\n  });\n});\nvar _account_requires_memo = __webpack_require__(/*! ./account_requires_memo */ \"(ssr)/./node_modules/@stellar/stellar-sdk/lib/errors/account_requires_memo.js\");\nObject.keys(_account_requires_memo).forEach(function (key) {\n  if (key === \"default\" || key === \"__esModule\") return;\n  if (key in exports && exports[key] === _account_requires_memo[key]) return;\n  Object.defineProperty(exports, key, {\n    enumerable: true,\n    get: function get() {\n      return _account_requires_memo[key];\n    }\n  });\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHN0ZWxsYXIvc3RlbGxhci1zZGsvbGliL2Vycm9ycy9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYiw4Q0FBNkM7QUFDN0M7QUFDQSxDQUFDLEVBQUM7QUFDRixlQUFlLG1CQUFPLENBQUMsa0ZBQVc7QUFDbEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSCxDQUFDO0FBQ0QsaUJBQWlCLG1CQUFPLENBQUMsc0ZBQWE7QUFDdEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSCxDQUFDO0FBQ0QsbUJBQW1CLG1CQUFPLENBQUMsMEZBQWU7QUFDMUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSCxDQUFDO0FBQ0Qsb0JBQW9CLG1CQUFPLENBQUMsNEZBQWdCO0FBQzVDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0gsQ0FBQztBQUNELDZCQUE2QixtQkFBTyxDQUFDLDhHQUF5QjtBQUM5RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNILENBQUMiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcVVNVQVJJT1xcRG9jdW1lbnRzXFxHaXRodWJcXEdhbGF4eUtKLXdhbGxldC0tLUhhY2tcXHdlYlxcbm9kZV9tb2R1bGVzXFxAc3RlbGxhclxcc3RlbGxhci1zZGtcXGxpYlxcZXJyb3JzXFxpbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbnZhciBfbmV0d29yayA9IHJlcXVpcmUoXCIuL25ldHdvcmtcIik7XG5PYmplY3Qua2V5cyhfbmV0d29yaykuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gIGlmIChrZXkgPT09IFwiZGVmYXVsdFwiIHx8IGtleSA9PT0gXCJfX2VzTW9kdWxlXCIpIHJldHVybjtcbiAgaWYgKGtleSBpbiBleHBvcnRzICYmIGV4cG9ydHNba2V5XSA9PT0gX25ldHdvcmtba2V5XSkgcmV0dXJuO1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywga2V5LCB7XG4gICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiBfbmV0d29ya1trZXldO1xuICAgIH1cbiAgfSk7XG59KTtcbnZhciBfbm90X2ZvdW5kID0gcmVxdWlyZShcIi4vbm90X2ZvdW5kXCIpO1xuT2JqZWN0LmtleXMoX25vdF9mb3VuZCkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gIGlmIChrZXkgPT09IFwiZGVmYXVsdFwiIHx8IGtleSA9PT0gXCJfX2VzTW9kdWxlXCIpIHJldHVybjtcbiAgaWYgKGtleSBpbiBleHBvcnRzICYmIGV4cG9ydHNba2V5XSA9PT0gX25vdF9mb3VuZFtrZXldKSByZXR1cm47XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBrZXksIHtcbiAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIF9ub3RfZm91bmRba2V5XTtcbiAgICB9XG4gIH0pO1xufSk7XG52YXIgX2JhZF9yZXF1ZXN0ID0gcmVxdWlyZShcIi4vYmFkX3JlcXVlc3RcIik7XG5PYmplY3Qua2V5cyhfYmFkX3JlcXVlc3QpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICBpZiAoa2V5ID09PSBcImRlZmF1bHRcIiB8fCBrZXkgPT09IFwiX19lc01vZHVsZVwiKSByZXR1cm47XG4gIGlmIChrZXkgaW4gZXhwb3J0cyAmJiBleHBvcnRzW2tleV0gPT09IF9iYWRfcmVxdWVzdFtrZXldKSByZXR1cm47XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBrZXksIHtcbiAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIF9iYWRfcmVxdWVzdFtrZXldO1xuICAgIH1cbiAgfSk7XG59KTtcbnZhciBfYmFkX3Jlc3BvbnNlID0gcmVxdWlyZShcIi4vYmFkX3Jlc3BvbnNlXCIpO1xuT2JqZWN0LmtleXMoX2JhZF9yZXNwb25zZSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gIGlmIChrZXkgPT09IFwiZGVmYXVsdFwiIHx8IGtleSA9PT0gXCJfX2VzTW9kdWxlXCIpIHJldHVybjtcbiAgaWYgKGtleSBpbiBleHBvcnRzICYmIGV4cG9ydHNba2V5XSA9PT0gX2JhZF9yZXNwb25zZVtrZXldKSByZXR1cm47XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBrZXksIHtcbiAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIF9iYWRfcmVzcG9uc2Vba2V5XTtcbiAgICB9XG4gIH0pO1xufSk7XG52YXIgX2FjY291bnRfcmVxdWlyZXNfbWVtbyA9IHJlcXVpcmUoXCIuL2FjY291bnRfcmVxdWlyZXNfbWVtb1wiKTtcbk9iamVjdC5rZXlzKF9hY2NvdW50X3JlcXVpcmVzX21lbW8pLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICBpZiAoa2V5ID09PSBcImRlZmF1bHRcIiB8fCBrZXkgPT09IFwiX19lc01vZHVsZVwiKSByZXR1cm47XG4gIGlmIChrZXkgaW4gZXhwb3J0cyAmJiBleHBvcnRzW2tleV0gPT09IF9hY2NvdW50X3JlcXVpcmVzX21lbW9ba2V5XSkgcmV0dXJuO1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywga2V5LCB7XG4gICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiBfYWNjb3VudF9yZXF1aXJlc19tZW1vW2tleV07XG4gICAgfVxuICB9KTtcbn0pOyJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@stellar/stellar-sdk/lib/errors/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@stellar/stellar-sdk/lib/errors/network.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@stellar/stellar-sdk/lib/errors/network.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.NetworkError = void 0;\nfunction _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\nfunction _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }\nfunction _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nfunction _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }\nfunction _possibleConstructorReturn(t, e) { if (e && (\"object\" == _typeof(e) || \"function\" == typeof e)) return e; if (void 0 !== e) throw new TypeError(\"Derived constructors may only return object or undefined\"); return _assertThisInitialized(t); }\nfunction _assertThisInitialized(e) { if (void 0 === e) throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); return e; }\nfunction _inherits(t, e) { if (\"function\" != typeof e && null !== e) throw new TypeError(\"Super expression must either be null or a function\"); t.prototype = Object.create(e && e.prototype, { constructor: { value: t, writable: !0, configurable: !0 } }), Object.defineProperty(t, \"prototype\", { writable: !1 }), e && _setPrototypeOf(t, e); }\nfunction _wrapNativeSuper(t) { var r = \"function\" == typeof Map ? new Map() : void 0; return _wrapNativeSuper = function _wrapNativeSuper(t) { if (null === t || !_isNativeFunction(t)) return t; if (\"function\" != typeof t) throw new TypeError(\"Super expression must either be null or a function\"); if (void 0 !== r) { if (r.has(t)) return r.get(t); r.set(t, Wrapper); } function Wrapper() { return _construct(t, arguments, _getPrototypeOf(this).constructor); } return Wrapper.prototype = Object.create(t.prototype, { constructor: { value: Wrapper, enumerable: !1, writable: !0, configurable: !0 } }), _setPrototypeOf(Wrapper, t); }, _wrapNativeSuper(t); }\nfunction _construct(t, e, r) { if (_isNativeReflectConstruct()) return Reflect.construct.apply(null, arguments); var o = [null]; o.push.apply(o, e); var p = new (t.bind.apply(t, o))(); return r && _setPrototypeOf(p, r.prototype), p; }\nfunction _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }\nfunction _isNativeFunction(t) { try { return -1 !== Function.toString.call(t).indexOf(\"[native code]\"); } catch (n) { return \"function\" == typeof t; } }\nfunction _setPrototypeOf(t, e) { return _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function (t, e) { return t.__proto__ = e, t; }, _setPrototypeOf(t, e); }\nfunction _getPrototypeOf(t) { return _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function (t) { return t.__proto__ || Object.getPrototypeOf(t); }, _getPrototypeOf(t); }\nvar NetworkError = exports.NetworkError = function (_Error) {\n  function NetworkError(message, response) {\n    var _this;\n    _classCallCheck(this, NetworkError);\n    var trueProto = (this instanceof NetworkError ? this.constructor : void 0).prototype;\n    _this = _callSuper(this, NetworkError, [message]);\n    _this.__proto__ = trueProto;\n    _this.constructor = NetworkError;\n    _this.response = response;\n    return _this;\n  }\n  _inherits(NetworkError, _Error);\n  return _createClass(NetworkError, [{\n    key: \"getResponse\",\n    value: function getResponse() {\n      return this.response;\n    }\n  }]);\n}(_wrapNativeSuper(Error));//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHN0ZWxsYXIvc3RlbGxhci1zZGsvbGliL2Vycm9ycy9uZXR3b3JrLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLHNCQUFzQiwyQkFBMkIsb0dBQW9HLG1CQUFtQixpQkFBaUIsc0hBQXNIO0FBQy9TLDhDQUE2QztBQUM3QztBQUNBLENBQUMsRUFBQztBQUNGLG9CQUFvQjtBQUNwQixpQ0FBaUM7QUFDakMsbUNBQW1DLGdCQUFnQixjQUFjLE9BQU8sY0FBYztBQUN0RixpQ0FBaUMscUhBQXFILGNBQWM7QUFDcEssNkJBQTZCLG1DQUFtQztBQUNoRSw4QkFBOEIsNENBQTRDLCtCQUErQixvQkFBb0IsbUNBQW1DLHNDQUFzQyx1RUFBdUU7QUFDN1EsK0JBQStCO0FBQy9CLDRDQUE0Qyx1RUFBdUUsbUdBQW1HO0FBQ3ROLHFDQUFxQyx5R0FBeUc7QUFDOUksMkJBQTJCLHFIQUFxSCxnREFBZ0QsZUFBZSw0Q0FBNEMsMkNBQTJDLGNBQWM7QUFDcFQsK0JBQStCLHVEQUF1RCx5REFBeUQsbURBQW1ELHVHQUF1RyxvQkFBb0IsK0JBQStCLHFCQUFxQixxQkFBcUIsc0VBQXNFLHdEQUF3RCxlQUFlLGtFQUFrRSxpQ0FBaUM7QUFDdG5CLCtCQUErQixrRkFBa0YsZ0JBQWdCLG9CQUFvQixvQ0FBb0M7QUFDekwsdUNBQXVDLE1BQU0scUZBQXFGLE1BQU0sYUFBYSwyRUFBMkUsYUFBYTtBQUM3TyxnQ0FBZ0MsTUFBTSxvRUFBb0UsWUFBWTtBQUN0SCxpQ0FBaUMsa0dBQWtHLDRCQUE0QjtBQUMvSiw4QkFBOEIsK0ZBQStGLGlEQUFpRDtBQUM5SyxtQkFBbUIsb0JBQW9CO0FBQ3ZDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNILENBQUMiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcVVNVQVJJT1xcRG9jdW1lbnRzXFxHaXRodWJcXEdhbGF4eUtKLXdhbGxldC0tLUhhY2tcXHdlYlxcbm9kZV9tb2R1bGVzXFxAc3RlbGxhclxcc3RlbGxhci1zZGtcXGxpYlxcZXJyb3JzXFxuZXR3b3JrLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5mdW5jdGlvbiBfdHlwZW9mKG8pIHsgXCJAYmFiZWwvaGVscGVycyAtIHR5cGVvZlwiOyByZXR1cm4gX3R5cGVvZiA9IFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgU3ltYm9sICYmIFwic3ltYm9sXCIgPT0gdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA/IGZ1bmN0aW9uIChvKSB7IHJldHVybiB0eXBlb2YgbzsgfSA6IGZ1bmN0aW9uIChvKSB7IHJldHVybiBvICYmIFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgU3ltYm9sICYmIG8uY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvOyB9LCBfdHlwZW9mKG8pOyB9XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5OZXR3b3JrRXJyb3IgPSB2b2lkIDA7XG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soYSwgbikgeyBpZiAoIShhIGluc3RhbmNlb2YgbikpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH1cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKGUsIHIpIHsgZm9yICh2YXIgdCA9IDA7IHQgPCByLmxlbmd0aDsgdCsrKSB7IHZhciBvID0gclt0XTsgby5lbnVtZXJhYmxlID0gby5lbnVtZXJhYmxlIHx8ICExLCBvLmNvbmZpZ3VyYWJsZSA9ICEwLCBcInZhbHVlXCIgaW4gbyAmJiAoby53cml0YWJsZSA9ICEwKSwgT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsIF90b1Byb3BlcnR5S2V5KG8ua2V5KSwgbyk7IH0gfVxuZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKGUsIHIsIHQpIHsgcmV0dXJuIHIgJiYgX2RlZmluZVByb3BlcnRpZXMoZS5wcm90b3R5cGUsIHIpLCB0ICYmIF9kZWZpbmVQcm9wZXJ0aWVzKGUsIHQpLCBPYmplY3QuZGVmaW5lUHJvcGVydHkoZSwgXCJwcm90b3R5cGVcIiwgeyB3cml0YWJsZTogITEgfSksIGU7IH1cbmZ1bmN0aW9uIF90b1Byb3BlcnR5S2V5KHQpIHsgdmFyIGkgPSBfdG9QcmltaXRpdmUodCwgXCJzdHJpbmdcIik7IHJldHVybiBcInN5bWJvbFwiID09IF90eXBlb2YoaSkgPyBpIDogaSArIFwiXCI7IH1cbmZ1bmN0aW9uIF90b1ByaW1pdGl2ZSh0LCByKSB7IGlmIChcIm9iamVjdFwiICE9IF90eXBlb2YodCkgfHwgIXQpIHJldHVybiB0OyB2YXIgZSA9IHRbU3ltYm9sLnRvUHJpbWl0aXZlXTsgaWYgKHZvaWQgMCAhPT0gZSkgeyB2YXIgaSA9IGUuY2FsbCh0LCByIHx8IFwiZGVmYXVsdFwiKTsgaWYgKFwib2JqZWN0XCIgIT0gX3R5cGVvZihpKSkgcmV0dXJuIGk7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJAQHRvUHJpbWl0aXZlIG11c3QgcmV0dXJuIGEgcHJpbWl0aXZlIHZhbHVlLlwiKTsgfSByZXR1cm4gKFwic3RyaW5nXCIgPT09IHIgPyBTdHJpbmcgOiBOdW1iZXIpKHQpOyB9XG5mdW5jdGlvbiBfY2FsbFN1cGVyKHQsIG8sIGUpIHsgcmV0dXJuIG8gPSBfZ2V0UHJvdG90eXBlT2YobyksIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHQsIF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKSA/IFJlZmxlY3QuY29uc3RydWN0KG8sIGUgfHwgW10sIF9nZXRQcm90b3R5cGVPZih0KS5jb25zdHJ1Y3RvcikgOiBvLmFwcGx5KHQsIGUpKTsgfVxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odCwgZSkgeyBpZiAoZSAmJiAoXCJvYmplY3RcIiA9PSBfdHlwZW9mKGUpIHx8IFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgZSkpIHJldHVybiBlOyBpZiAodm9pZCAwICE9PSBlKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiRGVyaXZlZCBjb25zdHJ1Y3RvcnMgbWF5IG9ubHkgcmV0dXJuIG9iamVjdCBvciB1bmRlZmluZWRcIik7IHJldHVybiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHQpOyB9XG5mdW5jdGlvbiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKGUpIHsgaWYgKHZvaWQgMCA9PT0gZSkgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyByZXR1cm4gZTsgfVxuZnVuY3Rpb24gX2luaGVyaXRzKHQsIGUpIHsgaWYgKFwiZnVuY3Rpb25cIiAhPSB0eXBlb2YgZSAmJiBudWxsICE9PSBlKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb25cIik7IHQucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShlICYmIGUucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiB0LCB3cml0YWJsZTogITAsIGNvbmZpZ3VyYWJsZTogITAgfSB9KSwgT2JqZWN0LmRlZmluZVByb3BlcnR5KHQsIFwicHJvdG90eXBlXCIsIHsgd3JpdGFibGU6ICExIH0pLCBlICYmIF9zZXRQcm90b3R5cGVPZih0LCBlKTsgfVxuZnVuY3Rpb24gX3dyYXBOYXRpdmVTdXBlcih0KSB7IHZhciByID0gXCJmdW5jdGlvblwiID09IHR5cGVvZiBNYXAgPyBuZXcgTWFwKCkgOiB2b2lkIDA7IHJldHVybiBfd3JhcE5hdGl2ZVN1cGVyID0gZnVuY3Rpb24gX3dyYXBOYXRpdmVTdXBlcih0KSB7IGlmIChudWxsID09PSB0IHx8ICFfaXNOYXRpdmVGdW5jdGlvbih0KSkgcmV0dXJuIHQ7IGlmIChcImZ1bmN0aW9uXCIgIT0gdHlwZW9mIHQpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvblwiKTsgaWYgKHZvaWQgMCAhPT0gcikgeyBpZiAoci5oYXModCkpIHJldHVybiByLmdldCh0KTsgci5zZXQodCwgV3JhcHBlcik7IH0gZnVuY3Rpb24gV3JhcHBlcigpIHsgcmV0dXJuIF9jb25zdHJ1Y3QodCwgYXJndW1lbnRzLCBfZ2V0UHJvdG90eXBlT2YodGhpcykuY29uc3RydWN0b3IpOyB9IHJldHVybiBXcmFwcGVyLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUodC5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IFdyYXBwZXIsIGVudW1lcmFibGU6ICExLCB3cml0YWJsZTogITAsIGNvbmZpZ3VyYWJsZTogITAgfSB9KSwgX3NldFByb3RvdHlwZU9mKFdyYXBwZXIsIHQpOyB9LCBfd3JhcE5hdGl2ZVN1cGVyKHQpOyB9XG5mdW5jdGlvbiBfY29uc3RydWN0KHQsIGUsIHIpIHsgaWYgKF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKSkgcmV0dXJuIFJlZmxlY3QuY29uc3RydWN0LmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7IHZhciBvID0gW251bGxdOyBvLnB1c2guYXBwbHkobywgZSk7IHZhciBwID0gbmV3ICh0LmJpbmQuYXBwbHkodCwgbykpKCk7IHJldHVybiByICYmIF9zZXRQcm90b3R5cGVPZihwLCByLnByb3RvdHlwZSksIHA7IH1cbmZ1bmN0aW9uIF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKSB7IHRyeSB7IHZhciB0ID0gIUJvb2xlYW4ucHJvdG90eXBlLnZhbHVlT2YuY2FsbChSZWZsZWN0LmNvbnN0cnVjdChCb29sZWFuLCBbXSwgZnVuY3Rpb24gKCkge30pKTsgfSBjYXRjaCAodCkge30gcmV0dXJuIChfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0ID0gZnVuY3Rpb24gX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpIHsgcmV0dXJuICEhdDsgfSkoKTsgfVxuZnVuY3Rpb24gX2lzTmF0aXZlRnVuY3Rpb24odCkgeyB0cnkgeyByZXR1cm4gLTEgIT09IEZ1bmN0aW9uLnRvU3RyaW5nLmNhbGwodCkuaW5kZXhPZihcIltuYXRpdmUgY29kZV1cIik7IH0gY2F0Y2ggKG4pIHsgcmV0dXJuIFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgdDsgfSB9XG5mdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YodCwgZSkgeyByZXR1cm4gX3NldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mLmJpbmQoKSA6IGZ1bmN0aW9uICh0LCBlKSB7IHJldHVybiB0Ll9fcHJvdG9fXyA9IGUsIHQ7IH0sIF9zZXRQcm90b3R5cGVPZih0LCBlKTsgfVxuZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKHQpIHsgcmV0dXJuIF9nZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5nZXRQcm90b3R5cGVPZi5iaW5kKCkgOiBmdW5jdGlvbiAodCkgeyByZXR1cm4gdC5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKHQpOyB9LCBfZ2V0UHJvdG90eXBlT2YodCk7IH1cbnZhciBOZXR3b3JrRXJyb3IgPSBleHBvcnRzLk5ldHdvcmtFcnJvciA9IGZ1bmN0aW9uIChfRXJyb3IpIHtcbiAgZnVuY3Rpb24gTmV0d29ya0Vycm9yKG1lc3NhZ2UsIHJlc3BvbnNlKSB7XG4gICAgdmFyIF90aGlzO1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBOZXR3b3JrRXJyb3IpO1xuICAgIHZhciB0cnVlUHJvdG8gPSAodGhpcyBpbnN0YW5jZW9mIE5ldHdvcmtFcnJvciA/IHRoaXMuY29uc3RydWN0b3IgOiB2b2lkIDApLnByb3RvdHlwZTtcbiAgICBfdGhpcyA9IF9jYWxsU3VwZXIodGhpcywgTmV0d29ya0Vycm9yLCBbbWVzc2FnZV0pO1xuICAgIF90aGlzLl9fcHJvdG9fXyA9IHRydWVQcm90bztcbiAgICBfdGhpcy5jb25zdHJ1Y3RvciA9IE5ldHdvcmtFcnJvcjtcbiAgICBfdGhpcy5yZXNwb25zZSA9IHJlc3BvbnNlO1xuICAgIHJldHVybiBfdGhpcztcbiAgfVxuICBfaW5oZXJpdHMoTmV0d29ya0Vycm9yLCBfRXJyb3IpO1xuICByZXR1cm4gX2NyZWF0ZUNsYXNzKE5ldHdvcmtFcnJvciwgW3tcbiAgICBrZXk6IFwiZ2V0UmVzcG9uc2VcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0UmVzcG9uc2UoKSB7XG4gICAgICByZXR1cm4gdGhpcy5yZXNwb25zZTtcbiAgICB9XG4gIH1dKTtcbn0oX3dyYXBOYXRpdmVTdXBlcihFcnJvcikpOyJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@stellar/stellar-sdk/lib/errors/network.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@stellar/stellar-sdk/lib/errors/not_found.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@stellar/stellar-sdk/lib/errors/not_found.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.NotFoundError = void 0;\nvar _network = __webpack_require__(/*! ./network */ \"(ssr)/./node_modules/@stellar/stellar-sdk/lib/errors/network.js\");\nfunction _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }\nfunction _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nfunction _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\nfunction _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }\nfunction _possibleConstructorReturn(t, e) { if (e && (\"object\" == _typeof(e) || \"function\" == typeof e)) return e; if (void 0 !== e) throw new TypeError(\"Derived constructors may only return object or undefined\"); return _assertThisInitialized(t); }\nfunction _assertThisInitialized(e) { if (void 0 === e) throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); return e; }\nfunction _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }\nfunction _getPrototypeOf(t) { return _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function (t) { return t.__proto__ || Object.getPrototypeOf(t); }, _getPrototypeOf(t); }\nfunction _inherits(t, e) { if (\"function\" != typeof e && null !== e) throw new TypeError(\"Super expression must either be null or a function\"); t.prototype = Object.create(e && e.prototype, { constructor: { value: t, writable: !0, configurable: !0 } }), Object.defineProperty(t, \"prototype\", { writable: !1 }), e && _setPrototypeOf(t, e); }\nfunction _setPrototypeOf(t, e) { return _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function (t, e) { return t.__proto__ = e, t; }, _setPrototypeOf(t, e); }\nvar NotFoundError = exports.NotFoundError = function (_NetworkError) {\n  function NotFoundError(message, response) {\n    var _this;\n    _classCallCheck(this, NotFoundError);\n    var trueProto = (this instanceof NotFoundError ? this.constructor : void 0).prototype;\n    _this = _callSuper(this, NotFoundError, [message, response]);\n    _this.__proto__ = trueProto;\n    _this.constructor = NotFoundError;\n    _this.name = \"NotFoundError\";\n    return _this;\n  }\n  _inherits(NotFoundError, _NetworkError);\n  return _createClass(NotFoundError);\n}(_network.NetworkError);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHN0ZWxsYXIvc3RlbGxhci1zZGsvbGliL2Vycm9ycy9ub3RfZm91bmQuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsc0JBQXNCLDJCQUEyQixvR0FBb0csbUJBQW1CLGlCQUFpQixzSEFBc0g7QUFDL1MsOENBQTZDO0FBQzdDO0FBQ0EsQ0FBQyxFQUFDO0FBQ0YscUJBQXFCO0FBQ3JCLGVBQWUsbUJBQU8sQ0FBQyxrRkFBVztBQUNsQyxtQ0FBbUMsZ0JBQWdCLGNBQWMsT0FBTyxjQUFjO0FBQ3RGLGlDQUFpQyxxSEFBcUgsY0FBYztBQUNwSyw2QkFBNkIsbUNBQW1DO0FBQ2hFLDhCQUE4Qiw0Q0FBNEMsK0JBQStCLG9CQUFvQixtQ0FBbUMsc0NBQXNDLHVFQUF1RTtBQUM3USxpQ0FBaUM7QUFDakMsK0JBQStCO0FBQy9CLDRDQUE0Qyx1RUFBdUUsbUdBQW1HO0FBQ3ROLHFDQUFxQyx5R0FBeUc7QUFDOUksdUNBQXVDLE1BQU0scUZBQXFGLE1BQU0sYUFBYSwyRUFBMkUsYUFBYTtBQUM3Tyw4QkFBOEIsK0ZBQStGLGlEQUFpRDtBQUM5SywyQkFBMkIscUhBQXFILGdEQUFnRCxlQUFlLDRDQUE0QywyQ0FBMkMsY0FBYztBQUNwVCxpQ0FBaUMsa0dBQWtHLDRCQUE0QjtBQUMvSixvQkFBb0IscUJBQXFCO0FBQ3pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcVVNVQVJJT1xcRG9jdW1lbnRzXFxHaXRodWJcXEdhbGF4eUtKLXdhbGxldC0tLUhhY2tcXHdlYlxcbm9kZV9tb2R1bGVzXFxAc3RlbGxhclxcc3RlbGxhci1zZGtcXGxpYlxcZXJyb3JzXFxub3RfZm91bmQuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmZ1bmN0aW9uIF90eXBlb2YobykgeyBcIkBiYWJlbC9oZWxwZXJzIC0gdHlwZW9mXCI7IHJldHVybiBfdHlwZW9mID0gXCJmdW5jdGlvblwiID09IHR5cGVvZiBTeW1ib2wgJiYgXCJzeW1ib2xcIiA9PSB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID8gZnVuY3Rpb24gKG8pIHsgcmV0dXJuIHR5cGVvZiBvOyB9IDogZnVuY3Rpb24gKG8pIHsgcmV0dXJuIG8gJiYgXCJmdW5jdGlvblwiID09IHR5cGVvZiBTeW1ib2wgJiYgby5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG8gIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG87IH0sIF90eXBlb2Yobyk7IH1cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLk5vdEZvdW5kRXJyb3IgPSB2b2lkIDA7XG52YXIgX25ldHdvcmsgPSByZXF1aXJlKFwiLi9uZXR3b3JrXCIpO1xuZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXMoZSwgcikgeyBmb3IgKHZhciB0ID0gMDsgdCA8IHIubGVuZ3RoOyB0KyspIHsgdmFyIG8gPSByW3RdOyBvLmVudW1lcmFibGUgPSBvLmVudW1lcmFibGUgfHwgITEsIG8uY29uZmlndXJhYmxlID0gITAsIFwidmFsdWVcIiBpbiBvICYmIChvLndyaXRhYmxlID0gITApLCBPYmplY3QuZGVmaW5lUHJvcGVydHkoZSwgX3RvUHJvcGVydHlLZXkoby5rZXkpLCBvKTsgfSB9XG5mdW5jdGlvbiBfY3JlYXRlQ2xhc3MoZSwgciwgdCkgeyByZXR1cm4gciAmJiBfZGVmaW5lUHJvcGVydGllcyhlLnByb3RvdHlwZSwgciksIHQgJiYgX2RlZmluZVByb3BlcnRpZXMoZSwgdCksIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLCBcInByb3RvdHlwZVwiLCB7IHdyaXRhYmxlOiAhMSB9KSwgZTsgfVxuZnVuY3Rpb24gX3RvUHJvcGVydHlLZXkodCkgeyB2YXIgaSA9IF90b1ByaW1pdGl2ZSh0LCBcInN0cmluZ1wiKTsgcmV0dXJuIFwic3ltYm9sXCIgPT0gX3R5cGVvZihpKSA/IGkgOiBpICsgXCJcIjsgfVxuZnVuY3Rpb24gX3RvUHJpbWl0aXZlKHQsIHIpIHsgaWYgKFwib2JqZWN0XCIgIT0gX3R5cGVvZih0KSB8fCAhdCkgcmV0dXJuIHQ7IHZhciBlID0gdFtTeW1ib2wudG9QcmltaXRpdmVdOyBpZiAodm9pZCAwICE9PSBlKSB7IHZhciBpID0gZS5jYWxsKHQsIHIgfHwgXCJkZWZhdWx0XCIpOyBpZiAoXCJvYmplY3RcIiAhPSBfdHlwZW9mKGkpKSByZXR1cm4gaTsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkBAdG9QcmltaXRpdmUgbXVzdCByZXR1cm4gYSBwcmltaXRpdmUgdmFsdWUuXCIpOyB9IHJldHVybiAoXCJzdHJpbmdcIiA9PT0gciA/IFN0cmluZyA6IE51bWJlcikodCk7IH1cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhhLCBuKSB7IGlmICghKGEgaW5zdGFuY2VvZiBuKSkgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfVxuZnVuY3Rpb24gX2NhbGxTdXBlcih0LCBvLCBlKSB7IHJldHVybiBvID0gX2dldFByb3RvdHlwZU9mKG8pLCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0LCBfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KCkgPyBSZWZsZWN0LmNvbnN0cnVjdChvLCBlIHx8IFtdLCBfZ2V0UHJvdG90eXBlT2YodCkuY29uc3RydWN0b3IpIDogby5hcHBseSh0LCBlKSk7IH1cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHQsIGUpIHsgaWYgKGUgJiYgKFwib2JqZWN0XCIgPT0gX3R5cGVvZihlKSB8fCBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIGUpKSByZXR1cm4gZTsgaWYgKHZvaWQgMCAhPT0gZSkgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkRlcml2ZWQgY29uc3RydWN0b3JzIG1heSBvbmx5IHJldHVybiBvYmplY3Qgb3IgdW5kZWZpbmVkXCIpOyByZXR1cm4gX2Fzc2VydFRoaXNJbml0aWFsaXplZCh0KTsgfVxuZnVuY3Rpb24gX2Fzc2VydFRoaXNJbml0aWFsaXplZChlKSB7IGlmICh2b2lkIDAgPT09IGUpIHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgcmV0dXJuIGU7IH1cbmZ1bmN0aW9uIF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKSB7IHRyeSB7IHZhciB0ID0gIUJvb2xlYW4ucHJvdG90eXBlLnZhbHVlT2YuY2FsbChSZWZsZWN0LmNvbnN0cnVjdChCb29sZWFuLCBbXSwgZnVuY3Rpb24gKCkge30pKTsgfSBjYXRjaCAodCkge30gcmV0dXJuIChfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0ID0gZnVuY3Rpb24gX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpIHsgcmV0dXJuICEhdDsgfSkoKTsgfVxuZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKHQpIHsgcmV0dXJuIF9nZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5nZXRQcm90b3R5cGVPZi5iaW5kKCkgOiBmdW5jdGlvbiAodCkgeyByZXR1cm4gdC5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKHQpOyB9LCBfZ2V0UHJvdG90eXBlT2YodCk7IH1cbmZ1bmN0aW9uIF9pbmhlcml0cyh0LCBlKSB7IGlmIChcImZ1bmN0aW9uXCIgIT0gdHlwZW9mIGUgJiYgbnVsbCAhPT0gZSkgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uXCIpOyB0LnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoZSAmJiBlLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogdCwgd3JpdGFibGU6ICEwLCBjb25maWd1cmFibGU6ICEwIH0gfSksIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LCBcInByb3RvdHlwZVwiLCB7IHdyaXRhYmxlOiAhMSB9KSwgZSAmJiBfc2V0UHJvdG90eXBlT2YodCwgZSk7IH1cbmZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZih0LCBlKSB7IHJldHVybiBfc2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2YuYmluZCgpIDogZnVuY3Rpb24gKHQsIGUpIHsgcmV0dXJuIHQuX19wcm90b19fID0gZSwgdDsgfSwgX3NldFByb3RvdHlwZU9mKHQsIGUpOyB9XG52YXIgTm90Rm91bmRFcnJvciA9IGV4cG9ydHMuTm90Rm91bmRFcnJvciA9IGZ1bmN0aW9uIChfTmV0d29ya0Vycm9yKSB7XG4gIGZ1bmN0aW9uIE5vdEZvdW5kRXJyb3IobWVzc2FnZSwgcmVzcG9uc2UpIHtcbiAgICB2YXIgX3RoaXM7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIE5vdEZvdW5kRXJyb3IpO1xuICAgIHZhciB0cnVlUHJvdG8gPSAodGhpcyBpbnN0YW5jZW9mIE5vdEZvdW5kRXJyb3IgPyB0aGlzLmNvbnN0cnVjdG9yIDogdm9pZCAwKS5wcm90b3R5cGU7XG4gICAgX3RoaXMgPSBfY2FsbFN1cGVyKHRoaXMsIE5vdEZvdW5kRXJyb3IsIFttZXNzYWdlLCByZXNwb25zZV0pO1xuICAgIF90aGlzLl9fcHJvdG9fXyA9IHRydWVQcm90bztcbiAgICBfdGhpcy5jb25zdHJ1Y3RvciA9IE5vdEZvdW5kRXJyb3I7XG4gICAgX3RoaXMubmFtZSA9IFwiTm90Rm91bmRFcnJvclwiO1xuICAgIHJldHVybiBfdGhpcztcbiAgfVxuICBfaW5oZXJpdHMoTm90Rm91bmRFcnJvciwgX05ldHdvcmtFcnJvcik7XG4gIHJldHVybiBfY3JlYXRlQ2xhc3MoTm90Rm91bmRFcnJvcik7XG59KF9uZXR3b3JrLk5ldHdvcmtFcnJvcik7Il0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@stellar/stellar-sdk/lib/errors/not_found.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@stellar/stellar-sdk/lib/federation/api.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@stellar/stellar-sdk/lib/federation/api.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.Api = void 0;\nvar Api;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHN0ZWxsYXIvc3RlbGxhci1zZGsvbGliL2ZlZGVyYXRpb24vYXBpLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLDhDQUE2QztBQUM3QztBQUNBLENBQUMsRUFBQztBQUNGLFdBQVc7QUFDWCIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxVU1VBUklPXFxEb2N1bWVudHNcXEdpdGh1YlxcR2FsYXh5S0otd2FsbGV0LS0tSGFja1xcd2ViXFxub2RlX21vZHVsZXNcXEBzdGVsbGFyXFxzdGVsbGFyLXNka1xcbGliXFxmZWRlcmF0aW9uXFxhcGkuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLkFwaSA9IHZvaWQgMDtcbnZhciBBcGk7Il0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@stellar/stellar-sdk/lib/federation/api.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@stellar/stellar-sdk/lib/federation/index.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@stellar/stellar-sdk/lib/federation/index.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nvar _exportNames = {\n  Server: true,\n  FEDERATION_RESPONSE_MAX_SIZE: true\n};\nObject.defineProperty(exports, \"FEDERATION_RESPONSE_MAX_SIZE\", ({\n  enumerable: true,\n  get: function get() {\n    return _server.FEDERATION_RESPONSE_MAX_SIZE;\n  }\n}));\nObject.defineProperty(exports, \"Server\", ({\n  enumerable: true,\n  get: function get() {\n    return _server.FederationServer;\n  }\n}));\nvar _server = __webpack_require__(/*! ./server */ \"(ssr)/./node_modules/@stellar/stellar-sdk/lib/federation/server.js\");\nvar _api = __webpack_require__(/*! ./api */ \"(ssr)/./node_modules/@stellar/stellar-sdk/lib/federation/api.js\");\nObject.keys(_api).forEach(function (key) {\n  if (key === \"default\" || key === \"__esModule\") return;\n  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;\n  if (key in exports && exports[key] === _api[key]) return;\n  Object.defineProperty(exports, key, {\n    enumerable: true,\n    get: function get() {\n      return _api[key];\n    }\n  });\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHN0ZWxsYXIvc3RlbGxhci1zZGsvbGliL2ZlZGVyYXRpb24vaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsOENBQTZDO0FBQzdDO0FBQ0EsQ0FBQyxFQUFDO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnRUFBK0Q7QUFDL0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRiwwQ0FBeUM7QUFDekM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRixjQUFjLG1CQUFPLENBQUMsb0ZBQVU7QUFDaEMsV0FBVyxtQkFBTyxDQUFDLDhFQUFPO0FBQzFCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSCxDQUFDIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXFVTVUFSSU9cXERvY3VtZW50c1xcR2l0aHViXFxHYWxheHlLSi13YWxsZXQtLS1IYWNrXFx3ZWJcXG5vZGVfbW9kdWxlc1xcQHN0ZWxsYXJcXHN0ZWxsYXItc2RrXFxsaWJcXGZlZGVyYXRpb25cXGluZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xudmFyIF9leHBvcnROYW1lcyA9IHtcbiAgU2VydmVyOiB0cnVlLFxuICBGRURFUkFUSU9OX1JFU1BPTlNFX01BWF9TSVpFOiB0cnVlXG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiRkVERVJBVElPTl9SRVNQT05TRV9NQVhfU0laRVwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBfc2VydmVyLkZFREVSQVRJT05fUkVTUE9OU0VfTUFYX1NJWkU7XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiU2VydmVyXCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIF9zZXJ2ZXIuRmVkZXJhdGlvblNlcnZlcjtcbiAgfVxufSk7XG52YXIgX3NlcnZlciA9IHJlcXVpcmUoXCIuL3NlcnZlclwiKTtcbnZhciBfYXBpID0gcmVxdWlyZShcIi4vYXBpXCIpO1xuT2JqZWN0LmtleXMoX2FwaSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gIGlmIChrZXkgPT09IFwiZGVmYXVsdFwiIHx8IGtleSA9PT0gXCJfX2VzTW9kdWxlXCIpIHJldHVybjtcbiAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChfZXhwb3J0TmFtZXMsIGtleSkpIHJldHVybjtcbiAgaWYgKGtleSBpbiBleHBvcnRzICYmIGV4cG9ydHNba2V5XSA9PT0gX2FwaVtrZXldKSByZXR1cm47XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBrZXksIHtcbiAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIF9hcGlba2V5XTtcbiAgICB9XG4gIH0pO1xufSk7Il0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@stellar/stellar-sdk/lib/federation/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@stellar/stellar-sdk/lib/federation/server.js":
/*!********************************************************************!*\
  !*** ./node_modules/@stellar/stellar-sdk/lib/federation/server.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.FederationServer = exports.FEDERATION_RESPONSE_MAX_SIZE = void 0;\nvar _stellarBase = __webpack_require__(/*! @stellar/stellar-base */ \"(ssr)/./node_modules/@stellar/stellar-base/lib/index.js\");\nvar _urijs = _interopRequireDefault(__webpack_require__(/*! urijs */ \"(ssr)/./node_modules/urijs/src/URI.js\"));\nvar _config = __webpack_require__(/*! ../config */ \"(ssr)/./node_modules/@stellar/stellar-sdk/lib/config.js\");\nvar _errors = __webpack_require__(/*! ../errors */ \"(ssr)/./node_modules/@stellar/stellar-sdk/lib/errors/index.js\");\nvar _stellartoml = __webpack_require__(/*! ../stellartoml */ \"(ssr)/./node_modules/@stellar/stellar-sdk/lib/stellartoml/index.js\");\nvar _httpClient = __webpack_require__(/*! ../http-client */ \"(ssr)/./node_modules/@stellar/stellar-sdk/lib/http-client/index.js\");\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _slicedToArray(r, e) { return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest(); }\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _unsupportedIterableToArray(r, a) { if (r) { if (\"string\" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return \"Object\" === t && r.constructor && (t = r.constructor.name), \"Map\" === t || \"Set\" === t ? Array.from(r) : \"Arguments\" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }\nfunction _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }\nfunction _iterableToArrayLimit(r, l) { var t = null == r ? null : \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t.return && (u = t.return(), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }\nfunction _arrayWithHoles(r) { if (Array.isArray(r)) return r; }\nfunction _regeneratorRuntime() { \"use strict\"; _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = \"function\" == typeof Symbol ? Symbol : {}, a = i.iterator || \"@@iterator\", c = i.asyncIterator || \"@@asyncIterator\", u = i.toStringTag || \"@@toStringTag\"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, \"\"); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, \"_invoke\", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: \"normal\", arg: t.call(e, r) }; } catch (t) { return { type: \"throw\", arg: t }; } } e.wrap = wrap; var h = \"suspendedStart\", l = \"suspendedYield\", f = \"executing\", s = \"completed\", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { [\"next\", \"throw\", \"return\"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if (\"throw\" !== c.type) { var u = c.arg, h = u.value; return h && \"object\" == _typeof(h) && n.call(h, \"__await\") ? e.resolve(h.__await).then(function (t) { invoke(\"next\", t, i, a); }, function (t) { invoke(\"throw\", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke(\"throw\", t, i, a); }); } a(c.arg); } var r; o(this, \"_invoke\", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw Error(\"Generator is already running\"); if (o === s) { if (\"throw\" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if (\"next\" === n.method) n.sent = n._sent = n.arg;else if (\"throw\" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else \"return\" === n.method && n.abrupt(\"return\", n.arg); o = f; var p = tryCatch(e, r, n); if (\"normal\" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } \"throw\" === p.type && (o = s, n.method = \"throw\", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, \"throw\" === n && e.iterator.return && (r.method = \"return\", r.arg = t, maybeInvokeDelegate(e, r), \"throw\" === r.method) || \"return\" !== n && (r.method = \"throw\", r.arg = new TypeError(\"The iterator does not provide a '\" + n + \"' method\")), y; var i = tryCatch(o, e.iterator, r.arg); if (\"throw\" === i.type) return r.method = \"throw\", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, \"return\" !== r.method && (r.method = \"next\", r.arg = t), r.delegate = null, y) : a : (r.method = \"throw\", r.arg = new TypeError(\"iterator result is not an object\"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = \"normal\", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: \"root\" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || \"\" === e) { var r = e[a]; if (r) return r.call(e); if (\"function\" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(_typeof(e) + \" is not iterable\"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, \"constructor\", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, \"constructor\", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, \"GeneratorFunction\"), e.isGeneratorFunction = function (t) { var e = \"function\" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || \"GeneratorFunction\" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, \"GeneratorFunction\")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, \"Generator\"), define(g, a, function () { return this; }), define(g, \"toString\", function () { return \"[object Generator]\"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) \"t\" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if (\"throw\" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = \"throw\", a.arg = e, r.next = n, o && (r.method = \"next\", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if (\"root\" === i.tryLoc) return handle(\"end\"); if (i.tryLoc <= this.prev) { var c = n.call(i, \"catchLoc\"), u = n.call(i, \"finallyLoc\"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw Error(\"try statement without catch or finally\"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, \"finallyLoc\") && this.prev < o.finallyLoc) { var i = o; break; } } i && (\"break\" === t || \"continue\" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = \"next\", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if (\"throw\" === t.type) throw t.arg; return \"break\" === t.type || \"continue\" === t.type ? this.next = t.arg : \"return\" === t.type ? (this.rval = this.arg = t.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, catch: function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if (\"throw\" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, \"next\" === this.method && (this.arg = t), y; } }, e; }\nfunction asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }\nfunction _asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, \"next\", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, \"throw\", n); } _next(void 0); }); }; }\nfunction _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\nfunction _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }\nfunction _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nvar FEDERATION_RESPONSE_MAX_SIZE = exports.FEDERATION_RESPONSE_MAX_SIZE = 100 * 1024;\nvar FederationServer = exports.FederationServer = function () {\n  function FederationServer(serverURL, domain) {\n    var opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    _classCallCheck(this, FederationServer);\n    this.serverURL = (0, _urijs.default)(serverURL);\n    this.domain = domain;\n    var allowHttp = typeof opts.allowHttp === \"undefined\" ? _config.Config.isAllowHttp() : opts.allowHttp;\n    this.timeout = typeof opts.timeout === \"undefined\" ? _config.Config.getTimeout() : opts.timeout;\n    if (this.serverURL.protocol() !== \"https\" && !allowHttp) {\n      throw new Error(\"Cannot connect to insecure federation server\");\n    }\n  }\n  return _createClass(FederationServer, [{\n    key: \"resolveAddress\",\n    value: (function () {\n      var _resolveAddress = _asyncToGenerator(_regeneratorRuntime().mark(function _callee(address) {\n        var stellarAddress, url;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              stellarAddress = address;\n              if (!(address.indexOf(\"*\") < 0)) {\n                _context.next = 5;\n                break;\n              }\n              if (this.domain) {\n                _context.next = 4;\n                break;\n              }\n              return _context.abrupt(\"return\", Promise.reject(new Error(\"Unknown domain. Make sure `address` contains a domain (ex. `bob*stellar.org`) or pass `domain` parameter when instantiating the server object.\")));\n            case 4:\n              stellarAddress = \"\".concat(address, \"*\").concat(this.domain);\n            case 5:\n              url = this.serverURL.query({\n                type: \"name\",\n                q: stellarAddress\n              });\n              return _context.abrupt(\"return\", this._sendRequest(url));\n            case 7:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this);\n      }));\n      function resolveAddress(_x) {\n        return _resolveAddress.apply(this, arguments);\n      }\n      return resolveAddress;\n    }())\n  }, {\n    key: \"resolveAccountId\",\n    value: (function () {\n      var _resolveAccountId = _asyncToGenerator(_regeneratorRuntime().mark(function _callee2(accountId) {\n        var url;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              url = this.serverURL.query({\n                type: \"id\",\n                q: accountId\n              });\n              return _context2.abrupt(\"return\", this._sendRequest(url));\n            case 2:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2, this);\n      }));\n      function resolveAccountId(_x2) {\n        return _resolveAccountId.apply(this, arguments);\n      }\n      return resolveAccountId;\n    }())\n  }, {\n    key: \"resolveTransactionId\",\n    value: (function () {\n      var _resolveTransactionId = _asyncToGenerator(_regeneratorRuntime().mark(function _callee3(transactionId) {\n        var url;\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) switch (_context3.prev = _context3.next) {\n            case 0:\n              url = this.serverURL.query({\n                type: \"txid\",\n                q: transactionId\n              });\n              return _context3.abrupt(\"return\", this._sendRequest(url));\n            case 2:\n            case \"end\":\n              return _context3.stop();\n          }\n        }, _callee3, this);\n      }));\n      function resolveTransactionId(_x3) {\n        return _resolveTransactionId.apply(this, arguments);\n      }\n      return resolveTransactionId;\n    }())\n  }, {\n    key: \"_sendRequest\",\n    value: function () {\n      var _sendRequest2 = _asyncToGenerator(_regeneratorRuntime().mark(function _callee4(url) {\n        var timeout;\n        return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) switch (_context4.prev = _context4.next) {\n            case 0:\n              timeout = this.timeout;\n              return _context4.abrupt(\"return\", _httpClient.httpClient.get(url.toString(), {\n                maxContentLength: FEDERATION_RESPONSE_MAX_SIZE,\n                timeout: timeout\n              }).then(function (response) {\n                if (typeof response.data.memo !== \"undefined\" && typeof response.data.memo !== \"string\") {\n                  throw new Error(\"memo value should be of type string\");\n                }\n                return response.data;\n              }).catch(function (response) {\n                if (response instanceof Error) {\n                  if (response.message.match(/^maxContentLength size/)) {\n                    throw new Error(\"federation response exceeds allowed size of \".concat(FEDERATION_RESPONSE_MAX_SIZE));\n                  } else {\n                    return Promise.reject(response);\n                  }\n                } else {\n                  return Promise.reject(new _errors.BadResponseError(\"Server query failed. Server responded: \".concat(response.status, \" \").concat(response.statusText), response.data));\n                }\n              }));\n            case 2:\n            case \"end\":\n              return _context4.stop();\n          }\n        }, _callee4, this);\n      }));\n      function _sendRequest(_x4) {\n        return _sendRequest2.apply(this, arguments);\n      }\n      return _sendRequest;\n    }()\n  }], [{\n    key: \"resolve\",\n    value: (function () {\n      var _resolve = _asyncToGenerator(_regeneratorRuntime().mark(function _callee5(value) {\n        var opts,\n          addressParts,\n          _addressParts,\n          domain,\n          federationServer,\n          _args5 = arguments;\n        return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n          while (1) switch (_context5.prev = _context5.next) {\n            case 0:\n              opts = _args5.length > 1 && _args5[1] !== undefined ? _args5[1] : {};\n              if (!(value.indexOf(\"*\") < 0)) {\n                _context5.next = 5;\n                break;\n              }\n              if (_stellarBase.StrKey.isValidEd25519PublicKey(value)) {\n                _context5.next = 4;\n                break;\n              }\n              return _context5.abrupt(\"return\", Promise.reject(new Error(\"Invalid Account ID\")));\n            case 4:\n              return _context5.abrupt(\"return\", Promise.resolve({\n                account_id: value\n              }));\n            case 5:\n              addressParts = value.split(\"*\");\n              _addressParts = _slicedToArray(addressParts, 2), domain = _addressParts[1];\n              if (!(addressParts.length !== 2 || !domain)) {\n                _context5.next = 9;\n                break;\n              }\n              return _context5.abrupt(\"return\", Promise.reject(new Error(\"Invalid Stellar address\")));\n            case 9:\n              _context5.next = 11;\n              return FederationServer.createForDomain(domain, opts);\n            case 11:\n              federationServer = _context5.sent;\n              return _context5.abrupt(\"return\", federationServer.resolveAddress(value));\n            case 13:\n            case \"end\":\n              return _context5.stop();\n          }\n        }, _callee5);\n      }));\n      function resolve(_x5) {\n        return _resolve.apply(this, arguments);\n      }\n      return resolve;\n    }())\n  }, {\n    key: \"createForDomain\",\n    value: (function () {\n      var _createForDomain = _asyncToGenerator(_regeneratorRuntime().mark(function _callee6(domain) {\n        var opts,\n          tomlObject,\n          _args6 = arguments;\n        return _regeneratorRuntime().wrap(function _callee6$(_context6) {\n          while (1) switch (_context6.prev = _context6.next) {\n            case 0:\n              opts = _args6.length > 1 && _args6[1] !== undefined ? _args6[1] : {};\n              _context6.next = 3;\n              return _stellartoml.Resolver.resolve(domain, opts);\n            case 3:\n              tomlObject = _context6.sent;\n              if (tomlObject.FEDERATION_SERVER) {\n                _context6.next = 6;\n                break;\n              }\n              return _context6.abrupt(\"return\", Promise.reject(new Error(\"stellar.toml does not contain FEDERATION_SERVER field\")));\n            case 6:\n              return _context6.abrupt(\"return\", new FederationServer(tomlObject.FEDERATION_SERVER, domain, opts));\n            case 7:\n            case \"end\":\n              return _context6.stop();\n          }\n        }, _callee6);\n      }));\n      function createForDomain(_x6) {\n        return _createForDomain.apply(this, arguments);\n      }\n      return createForDomain;\n    }())\n  }]);\n}();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@stellar/stellar-sdk/lib/federation/server.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@stellar/stellar-sdk/lib/friendbot/index.js":
/*!******************************************************************!*\
  !*** ./node_modules/@stellar/stellar-sdk/lib/friendbot/index.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.Api = void 0;\nvar Api;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHN0ZWxsYXIvc3RlbGxhci1zZGsvbGliL2ZyaWVuZGJvdC9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYiw4Q0FBNkM7QUFDN0M7QUFDQSxDQUFDLEVBQUM7QUFDRixXQUFXO0FBQ1giLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcVVNVQVJJT1xcRG9jdW1lbnRzXFxHaXRodWJcXEdhbGF4eUtKLXdhbGxldC0tLUhhY2tcXHdlYlxcbm9kZV9tb2R1bGVzXFxAc3RlbGxhclxcc3RlbGxhci1zZGtcXGxpYlxcZnJpZW5kYm90XFxpbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuQXBpID0gdm9pZCAwO1xudmFyIEFwaTsiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@stellar/stellar-sdk/lib/friendbot/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@stellar/stellar-sdk/lib/horizon/account_call_builder.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@stellar/stellar-sdk/lib/horizon/account_call_builder.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.AccountCallBuilder = void 0;\nvar _call_builder = __webpack_require__(/*! ./call_builder */ \"(ssr)/./node_modules/@stellar/stellar-sdk/lib/horizon/call_builder.js\");\nfunction _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\nfunction _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }\nfunction _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nfunction _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }\nfunction _possibleConstructorReturn(t, e) { if (e && (\"object\" == _typeof(e) || \"function\" == typeof e)) return e; if (void 0 !== e) throw new TypeError(\"Derived constructors may only return object or undefined\"); return _assertThisInitialized(t); }\nfunction _assertThisInitialized(e) { if (void 0 === e) throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); return e; }\nfunction _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }\nfunction _getPrototypeOf(t) { return _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function (t) { return t.__proto__ || Object.getPrototypeOf(t); }, _getPrototypeOf(t); }\nfunction _inherits(t, e) { if (\"function\" != typeof e && null !== e) throw new TypeError(\"Super expression must either be null or a function\"); t.prototype = Object.create(e && e.prototype, { constructor: { value: t, writable: !0, configurable: !0 } }), Object.defineProperty(t, \"prototype\", { writable: !1 }), e && _setPrototypeOf(t, e); }\nfunction _setPrototypeOf(t, e) { return _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function (t, e) { return t.__proto__ = e, t; }, _setPrototypeOf(t, e); }\nvar AccountCallBuilder = exports.AccountCallBuilder = function (_CallBuilder) {\n  function AccountCallBuilder(serverUrl) {\n    var _this;\n    _classCallCheck(this, AccountCallBuilder);\n    _this = _callSuper(this, AccountCallBuilder, [serverUrl]);\n    _this.url.segment(\"accounts\");\n    return _this;\n  }\n  _inherits(AccountCallBuilder, _CallBuilder);\n  return _createClass(AccountCallBuilder, [{\n    key: \"accountId\",\n    value: function accountId(id) {\n      var builder = new _call_builder.CallBuilder(this.url.clone());\n      builder.filter.push([id]);\n      return builder;\n    }\n  }, {\n    key: \"forSigner\",\n    value: function forSigner(id) {\n      this.url.setQuery(\"signer\", id);\n      return this;\n    }\n  }, {\n    key: \"forAsset\",\n    value: function forAsset(asset) {\n      this.url.setQuery(\"asset\", \"\".concat(asset));\n      return this;\n    }\n  }, {\n    key: \"sponsor\",\n    value: function sponsor(id) {\n      this.url.setQuery(\"sponsor\", id);\n      return this;\n    }\n  }, {\n    key: \"forLiquidityPool\",\n    value: function forLiquidityPool(id) {\n      this.url.setQuery(\"liquidity_pool\", id);\n      return this;\n    }\n  }]);\n}(_call_builder.CallBuilder);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHN0ZWxsYXIvc3RlbGxhci1zZGsvbGliL2hvcml6b24vYWNjb3VudF9jYWxsX2J1aWxkZXIuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsc0JBQXNCLDJCQUEyQixvR0FBb0csbUJBQW1CLGlCQUFpQixzSEFBc0g7QUFDL1MsOENBQTZDO0FBQzdDO0FBQ0EsQ0FBQyxFQUFDO0FBQ0YsMEJBQTBCO0FBQzFCLG9CQUFvQixtQkFBTyxDQUFDLDZGQUFnQjtBQUM1QyxpQ0FBaUM7QUFDakMsbUNBQW1DLGdCQUFnQixjQUFjLE9BQU8sY0FBYztBQUN0RixpQ0FBaUMscUhBQXFILGNBQWM7QUFDcEssNkJBQTZCLG1DQUFtQztBQUNoRSw4QkFBOEIsNENBQTRDLCtCQUErQixvQkFBb0IsbUNBQW1DLHNDQUFzQyx1RUFBdUU7QUFDN1EsK0JBQStCO0FBQy9CLDRDQUE0Qyx1RUFBdUUsbUdBQW1HO0FBQ3ROLHFDQUFxQyx5R0FBeUc7QUFDOUksdUNBQXVDLE1BQU0scUZBQXFGLE1BQU0sYUFBYSwyRUFBMkUsYUFBYTtBQUM3Tyw4QkFBOEIsK0ZBQStGLGlEQUFpRDtBQUM5SywyQkFBMkIscUhBQXFILGdEQUFnRCxlQUFlLDRDQUE0QywyQ0FBMkMsY0FBYztBQUNwVCxpQ0FBaUMsa0dBQWtHLDRCQUE0QjtBQUMvSix5QkFBeUIsMEJBQTBCO0FBQ25EO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNILENBQUMiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcVVNVQVJJT1xcRG9jdW1lbnRzXFxHaXRodWJcXEdhbGF4eUtKLXdhbGxldC0tLUhhY2tcXHdlYlxcbm9kZV9tb2R1bGVzXFxAc3RlbGxhclxcc3RlbGxhci1zZGtcXGxpYlxcaG9yaXpvblxcYWNjb3VudF9jYWxsX2J1aWxkZXIuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmZ1bmN0aW9uIF90eXBlb2YobykgeyBcIkBiYWJlbC9oZWxwZXJzIC0gdHlwZW9mXCI7IHJldHVybiBfdHlwZW9mID0gXCJmdW5jdGlvblwiID09IHR5cGVvZiBTeW1ib2wgJiYgXCJzeW1ib2xcIiA9PSB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID8gZnVuY3Rpb24gKG8pIHsgcmV0dXJuIHR5cGVvZiBvOyB9IDogZnVuY3Rpb24gKG8pIHsgcmV0dXJuIG8gJiYgXCJmdW5jdGlvblwiID09IHR5cGVvZiBTeW1ib2wgJiYgby5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG8gIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG87IH0sIF90eXBlb2Yobyk7IH1cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLkFjY291bnRDYWxsQnVpbGRlciA9IHZvaWQgMDtcbnZhciBfY2FsbF9idWlsZGVyID0gcmVxdWlyZShcIi4vY2FsbF9idWlsZGVyXCIpO1xuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGEsIG4pIHsgaWYgKCEoYSBpbnN0YW5jZW9mIG4pKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9XG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyhlLCByKSB7IGZvciAodmFyIHQgPSAwOyB0IDwgci5sZW5ndGg7IHQrKykgeyB2YXIgbyA9IHJbdF07IG8uZW51bWVyYWJsZSA9IG8uZW51bWVyYWJsZSB8fCAhMSwgby5jb25maWd1cmFibGUgPSAhMCwgXCJ2YWx1ZVwiIGluIG8gJiYgKG8ud3JpdGFibGUgPSAhMCksIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLCBfdG9Qcm9wZXJ0eUtleShvLmtleSksIG8pOyB9IH1cbmZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhlLCByLCB0KSB7IHJldHVybiByICYmIF9kZWZpbmVQcm9wZXJ0aWVzKGUucHJvdG90eXBlLCByKSwgdCAmJiBfZGVmaW5lUHJvcGVydGllcyhlLCB0KSwgT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsIFwicHJvdG90eXBlXCIsIHsgd3JpdGFibGU6ICExIH0pLCBlOyB9XG5mdW5jdGlvbiBfdG9Qcm9wZXJ0eUtleSh0KSB7IHZhciBpID0gX3RvUHJpbWl0aXZlKHQsIFwic3RyaW5nXCIpOyByZXR1cm4gXCJzeW1ib2xcIiA9PSBfdHlwZW9mKGkpID8gaSA6IGkgKyBcIlwiOyB9XG5mdW5jdGlvbiBfdG9QcmltaXRpdmUodCwgcikgeyBpZiAoXCJvYmplY3RcIiAhPSBfdHlwZW9mKHQpIHx8ICF0KSByZXR1cm4gdDsgdmFyIGUgPSB0W1N5bWJvbC50b1ByaW1pdGl2ZV07IGlmICh2b2lkIDAgIT09IGUpIHsgdmFyIGkgPSBlLmNhbGwodCwgciB8fCBcImRlZmF1bHRcIik7IGlmIChcIm9iamVjdFwiICE9IF90eXBlb2YoaSkpIHJldHVybiBpOyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQEB0b1ByaW1pdGl2ZSBtdXN0IHJldHVybiBhIHByaW1pdGl2ZSB2YWx1ZS5cIik7IH0gcmV0dXJuIChcInN0cmluZ1wiID09PSByID8gU3RyaW5nIDogTnVtYmVyKSh0KTsgfVxuZnVuY3Rpb24gX2NhbGxTdXBlcih0LCBvLCBlKSB7IHJldHVybiBvID0gX2dldFByb3RvdHlwZU9mKG8pLCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0LCBfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KCkgPyBSZWZsZWN0LmNvbnN0cnVjdChvLCBlIHx8IFtdLCBfZ2V0UHJvdG90eXBlT2YodCkuY29uc3RydWN0b3IpIDogby5hcHBseSh0LCBlKSk7IH1cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHQsIGUpIHsgaWYgKGUgJiYgKFwib2JqZWN0XCIgPT0gX3R5cGVvZihlKSB8fCBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIGUpKSByZXR1cm4gZTsgaWYgKHZvaWQgMCAhPT0gZSkgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkRlcml2ZWQgY29uc3RydWN0b3JzIG1heSBvbmx5IHJldHVybiBvYmplY3Qgb3IgdW5kZWZpbmVkXCIpOyByZXR1cm4gX2Fzc2VydFRoaXNJbml0aWFsaXplZCh0KTsgfVxuZnVuY3Rpb24gX2Fzc2VydFRoaXNJbml0aWFsaXplZChlKSB7IGlmICh2b2lkIDAgPT09IGUpIHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgcmV0dXJuIGU7IH1cbmZ1bmN0aW9uIF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKSB7IHRyeSB7IHZhciB0ID0gIUJvb2xlYW4ucHJvdG90eXBlLnZhbHVlT2YuY2FsbChSZWZsZWN0LmNvbnN0cnVjdChCb29sZWFuLCBbXSwgZnVuY3Rpb24gKCkge30pKTsgfSBjYXRjaCAodCkge30gcmV0dXJuIChfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0ID0gZnVuY3Rpb24gX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpIHsgcmV0dXJuICEhdDsgfSkoKTsgfVxuZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKHQpIHsgcmV0dXJuIF9nZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5nZXRQcm90b3R5cGVPZi5iaW5kKCkgOiBmdW5jdGlvbiAodCkgeyByZXR1cm4gdC5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKHQpOyB9LCBfZ2V0UHJvdG90eXBlT2YodCk7IH1cbmZ1bmN0aW9uIF9pbmhlcml0cyh0LCBlKSB7IGlmIChcImZ1bmN0aW9uXCIgIT0gdHlwZW9mIGUgJiYgbnVsbCAhPT0gZSkgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uXCIpOyB0LnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoZSAmJiBlLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogdCwgd3JpdGFibGU6ICEwLCBjb25maWd1cmFibGU6ICEwIH0gfSksIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LCBcInByb3RvdHlwZVwiLCB7IHdyaXRhYmxlOiAhMSB9KSwgZSAmJiBfc2V0UHJvdG90eXBlT2YodCwgZSk7IH1cbmZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZih0LCBlKSB7IHJldHVybiBfc2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2YuYmluZCgpIDogZnVuY3Rpb24gKHQsIGUpIHsgcmV0dXJuIHQuX19wcm90b19fID0gZSwgdDsgfSwgX3NldFByb3RvdHlwZU9mKHQsIGUpOyB9XG52YXIgQWNjb3VudENhbGxCdWlsZGVyID0gZXhwb3J0cy5BY2NvdW50Q2FsbEJ1aWxkZXIgPSBmdW5jdGlvbiAoX0NhbGxCdWlsZGVyKSB7XG4gIGZ1bmN0aW9uIEFjY291bnRDYWxsQnVpbGRlcihzZXJ2ZXJVcmwpIHtcbiAgICB2YXIgX3RoaXM7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEFjY291bnRDYWxsQnVpbGRlcik7XG4gICAgX3RoaXMgPSBfY2FsbFN1cGVyKHRoaXMsIEFjY291bnRDYWxsQnVpbGRlciwgW3NlcnZlclVybF0pO1xuICAgIF90aGlzLnVybC5zZWdtZW50KFwiYWNjb3VudHNcIik7XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG4gIF9pbmhlcml0cyhBY2NvdW50Q2FsbEJ1aWxkZXIsIF9DYWxsQnVpbGRlcik7XG4gIHJldHVybiBfY3JlYXRlQ2xhc3MoQWNjb3VudENhbGxCdWlsZGVyLCBbe1xuICAgIGtleTogXCJhY2NvdW50SWRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gYWNjb3VudElkKGlkKSB7XG4gICAgICB2YXIgYnVpbGRlciA9IG5ldyBfY2FsbF9idWlsZGVyLkNhbGxCdWlsZGVyKHRoaXMudXJsLmNsb25lKCkpO1xuICAgICAgYnVpbGRlci5maWx0ZXIucHVzaChbaWRdKTtcbiAgICAgIHJldHVybiBidWlsZGVyO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJmb3JTaWduZXJcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZm9yU2lnbmVyKGlkKSB7XG4gICAgICB0aGlzLnVybC5zZXRRdWVyeShcInNpZ25lclwiLCBpZCk7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiZm9yQXNzZXRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZm9yQXNzZXQoYXNzZXQpIHtcbiAgICAgIHRoaXMudXJsLnNldFF1ZXJ5KFwiYXNzZXRcIiwgXCJcIi5jb25jYXQoYXNzZXQpKTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJzcG9uc29yXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHNwb25zb3IoaWQpIHtcbiAgICAgIHRoaXMudXJsLnNldFF1ZXJ5KFwic3BvbnNvclwiLCBpZCk7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiZm9yTGlxdWlkaXR5UG9vbFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBmb3JMaXF1aWRpdHlQb29sKGlkKSB7XG4gICAgICB0aGlzLnVybC5zZXRRdWVyeShcImxpcXVpZGl0eV9wb29sXCIsIGlkKTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgfV0pO1xufShfY2FsbF9idWlsZGVyLkNhbGxCdWlsZGVyKTsiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@stellar/stellar-sdk/lib/horizon/account_call_builder.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@stellar/stellar-sdk/lib/horizon/account_response.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@stellar/stellar-sdk/lib/horizon/account_response.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.AccountResponse = void 0;\nvar _stellarBase = __webpack_require__(/*! @stellar/stellar-base */ \"(ssr)/./node_modules/@stellar/stellar-base/lib/index.js\");\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _slicedToArray(r, e) { return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest(); }\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _unsupportedIterableToArray(r, a) { if (r) { if (\"string\" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return \"Object\" === t && r.constructor && (t = r.constructor.name), \"Map\" === t || \"Set\" === t ? Array.from(r) : \"Arguments\" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }\nfunction _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }\nfunction _iterableToArrayLimit(r, l) { var t = null == r ? null : \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t.return && (u = t.return(), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }\nfunction _arrayWithHoles(r) { if (Array.isArray(r)) return r; }\nfunction _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\nfunction _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }\nfunction _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nvar AccountResponse = exports.AccountResponse = function () {\n  function AccountResponse(response) {\n    var _this = this;\n    _classCallCheck(this, AccountResponse);\n    this._baseAccount = new _stellarBase.Account(response.account_id, response.sequence);\n    Object.entries(response).forEach(function (_ref) {\n      var _ref2 = _slicedToArray(_ref, 2),\n        key = _ref2[0],\n        value = _ref2[1];\n      _this[key] = value;\n    });\n  }\n  return _createClass(AccountResponse, [{\n    key: \"accountId\",\n    value: function accountId() {\n      return this._baseAccount.accountId();\n    }\n  }, {\n    key: \"sequenceNumber\",\n    value: function sequenceNumber() {\n      return this._baseAccount.sequenceNumber();\n    }\n  }, {\n    key: \"incrementSequenceNumber\",\n    value: function incrementSequenceNumber() {\n      this._baseAccount.incrementSequenceNumber();\n      this.sequence = this._baseAccount.sequenceNumber();\n    }\n  }]);\n}();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHN0ZWxsYXIvc3RlbGxhci1zZGsvbGliL2hvcml6b24vYWNjb3VudF9yZXNwb25zZS5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYiw4Q0FBNkM7QUFDN0M7QUFDQSxDQUFDLEVBQUM7QUFDRix1QkFBdUI7QUFDdkIsbUJBQW1CLG1CQUFPLENBQUMsc0ZBQXVCO0FBQ2xELHNCQUFzQiwyQkFBMkIsb0dBQW9HLG1CQUFtQixpQkFBaUIsc0hBQXNIO0FBQy9TLGdDQUFnQztBQUNoQyw4QkFBOEI7QUFDOUIsNkNBQTZDLFNBQVMsMERBQTBELFVBQVUsZ0NBQWdDO0FBQzFKLG1DQUFtQywrQ0FBK0MsOEJBQThCLE9BQU8sa0JBQWtCO0FBQ3pJLHVDQUF1QyxrR0FBa0csaUJBQWlCLHdDQUF3QyxNQUFNLHlDQUF5Qyw2QkFBNkIsVUFBVSxZQUFZLGtFQUFrRSxXQUFXLFlBQVksaUJBQWlCLFVBQVUsTUFBTSwyRUFBMkUsVUFBVSxvQkFBb0I7QUFDdmdCLDhCQUE4QjtBQUM5QixpQ0FBaUM7QUFDakMsbUNBQW1DLGdCQUFnQixjQUFjLE9BQU8sY0FBYztBQUN0RixpQ0FBaUMscUhBQXFILGNBQWM7QUFDcEssNkJBQTZCLG1DQUFtQztBQUNoRSw4QkFBOEIsNENBQTRDLCtCQUErQixvQkFBb0IsbUNBQW1DLHNDQUFzQyx1RUFBdUU7QUFDN1Esc0JBQXNCLHVCQUF1QjtBQUM3QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0gsQ0FBQyIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxVU1VBUklPXFxEb2N1bWVudHNcXEdpdGh1YlxcR2FsYXh5S0otd2FsbGV0LS0tSGFja1xcd2ViXFxub2RlX21vZHVsZXNcXEBzdGVsbGFyXFxzdGVsbGFyLXNka1xcbGliXFxob3Jpem9uXFxhY2NvdW50X3Jlc3BvbnNlLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5BY2NvdW50UmVzcG9uc2UgPSB2b2lkIDA7XG52YXIgX3N0ZWxsYXJCYXNlID0gcmVxdWlyZShcIkBzdGVsbGFyL3N0ZWxsYXItYmFzZVwiKTtcbmZ1bmN0aW9uIF90eXBlb2YobykgeyBcIkBiYWJlbC9oZWxwZXJzIC0gdHlwZW9mXCI7IHJldHVybiBfdHlwZW9mID0gXCJmdW5jdGlvblwiID09IHR5cGVvZiBTeW1ib2wgJiYgXCJzeW1ib2xcIiA9PSB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID8gZnVuY3Rpb24gKG8pIHsgcmV0dXJuIHR5cGVvZiBvOyB9IDogZnVuY3Rpb24gKG8pIHsgcmV0dXJuIG8gJiYgXCJmdW5jdGlvblwiID09IHR5cGVvZiBTeW1ib2wgJiYgby5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG8gIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG87IH0sIF90eXBlb2Yobyk7IH1cbmZ1bmN0aW9uIF9zbGljZWRUb0FycmF5KHIsIGUpIHsgcmV0dXJuIF9hcnJheVdpdGhIb2xlcyhyKSB8fCBfaXRlcmFibGVUb0FycmF5TGltaXQociwgZSkgfHwgX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5KHIsIGUpIHx8IF9ub25JdGVyYWJsZVJlc3QoKTsgfVxuZnVuY3Rpb24gX25vbkl0ZXJhYmxlUmVzdCgpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkludmFsaWQgYXR0ZW1wdCB0byBkZXN0cnVjdHVyZSBub24taXRlcmFibGUgaW5zdGFuY2UuXFxuSW4gb3JkZXIgdG8gYmUgaXRlcmFibGUsIG5vbi1hcnJheSBvYmplY3RzIG11c3QgaGF2ZSBhIFtTeW1ib2wuaXRlcmF0b3JdKCkgbWV0aG9kLlwiKTsgfVxuZnVuY3Rpb24gX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5KHIsIGEpIHsgaWYgKHIpIHsgaWYgKFwic3RyaW5nXCIgPT0gdHlwZW9mIHIpIHJldHVybiBfYXJyYXlMaWtlVG9BcnJheShyLCBhKTsgdmFyIHQgPSB7fS50b1N0cmluZy5jYWxsKHIpLnNsaWNlKDgsIC0xKTsgcmV0dXJuIFwiT2JqZWN0XCIgPT09IHQgJiYgci5jb25zdHJ1Y3RvciAmJiAodCA9IHIuY29uc3RydWN0b3IubmFtZSksIFwiTWFwXCIgPT09IHQgfHwgXCJTZXRcIiA9PT0gdCA/IEFycmF5LmZyb20ocikgOiBcIkFyZ3VtZW50c1wiID09PSB0IHx8IC9eKD86VWl8SSludCg/Ojh8MTZ8MzIpKD86Q2xhbXBlZCk/QXJyYXkkLy50ZXN0KHQpID8gX2FycmF5TGlrZVRvQXJyYXkociwgYSkgOiB2b2lkIDA7IH0gfVxuZnVuY3Rpb24gX2FycmF5TGlrZVRvQXJyYXkociwgYSkgeyAobnVsbCA9PSBhIHx8IGEgPiByLmxlbmd0aCkgJiYgKGEgPSByLmxlbmd0aCk7IGZvciAodmFyIGUgPSAwLCBuID0gQXJyYXkoYSk7IGUgPCBhOyBlKyspIG5bZV0gPSByW2VdOyByZXR1cm4gbjsgfVxuZnVuY3Rpb24gX2l0ZXJhYmxlVG9BcnJheUxpbWl0KHIsIGwpIHsgdmFyIHQgPSBudWxsID09IHIgPyBudWxsIDogXCJ1bmRlZmluZWRcIiAhPSB0eXBlb2YgU3ltYm9sICYmIHJbU3ltYm9sLml0ZXJhdG9yXSB8fCByW1wiQEBpdGVyYXRvclwiXTsgaWYgKG51bGwgIT0gdCkgeyB2YXIgZSwgbiwgaSwgdSwgYSA9IFtdLCBmID0gITAsIG8gPSAhMTsgdHJ5IHsgaWYgKGkgPSAodCA9IHQuY2FsbChyKSkubmV4dCwgMCA9PT0gbCkgeyBpZiAoT2JqZWN0KHQpICE9PSB0KSByZXR1cm47IGYgPSAhMTsgfSBlbHNlIGZvciAoOyAhKGYgPSAoZSA9IGkuY2FsbCh0KSkuZG9uZSkgJiYgKGEucHVzaChlLnZhbHVlKSwgYS5sZW5ndGggIT09IGwpOyBmID0gITApOyB9IGNhdGNoIChyKSB7IG8gPSAhMCwgbiA9IHI7IH0gZmluYWxseSB7IHRyeSB7IGlmICghZiAmJiBudWxsICE9IHQucmV0dXJuICYmICh1ID0gdC5yZXR1cm4oKSwgT2JqZWN0KHUpICE9PSB1KSkgcmV0dXJuOyB9IGZpbmFsbHkgeyBpZiAobykgdGhyb3cgbjsgfSB9IHJldHVybiBhOyB9IH1cbmZ1bmN0aW9uIF9hcnJheVdpdGhIb2xlcyhyKSB7IGlmIChBcnJheS5pc0FycmF5KHIpKSByZXR1cm4gcjsgfVxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGEsIG4pIHsgaWYgKCEoYSBpbnN0YW5jZW9mIG4pKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9XG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyhlLCByKSB7IGZvciAodmFyIHQgPSAwOyB0IDwgci5sZW5ndGg7IHQrKykgeyB2YXIgbyA9IHJbdF07IG8uZW51bWVyYWJsZSA9IG8uZW51bWVyYWJsZSB8fCAhMSwgby5jb25maWd1cmFibGUgPSAhMCwgXCJ2YWx1ZVwiIGluIG8gJiYgKG8ud3JpdGFibGUgPSAhMCksIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLCBfdG9Qcm9wZXJ0eUtleShvLmtleSksIG8pOyB9IH1cbmZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhlLCByLCB0KSB7IHJldHVybiByICYmIF9kZWZpbmVQcm9wZXJ0aWVzKGUucHJvdG90eXBlLCByKSwgdCAmJiBfZGVmaW5lUHJvcGVydGllcyhlLCB0KSwgT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsIFwicHJvdG90eXBlXCIsIHsgd3JpdGFibGU6ICExIH0pLCBlOyB9XG5mdW5jdGlvbiBfdG9Qcm9wZXJ0eUtleSh0KSB7IHZhciBpID0gX3RvUHJpbWl0aXZlKHQsIFwic3RyaW5nXCIpOyByZXR1cm4gXCJzeW1ib2xcIiA9PSBfdHlwZW9mKGkpID8gaSA6IGkgKyBcIlwiOyB9XG5mdW5jdGlvbiBfdG9QcmltaXRpdmUodCwgcikgeyBpZiAoXCJvYmplY3RcIiAhPSBfdHlwZW9mKHQpIHx8ICF0KSByZXR1cm4gdDsgdmFyIGUgPSB0W1N5bWJvbC50b1ByaW1pdGl2ZV07IGlmICh2b2lkIDAgIT09IGUpIHsgdmFyIGkgPSBlLmNhbGwodCwgciB8fCBcImRlZmF1bHRcIik7IGlmIChcIm9iamVjdFwiICE9IF90eXBlb2YoaSkpIHJldHVybiBpOyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQEB0b1ByaW1pdGl2ZSBtdXN0IHJldHVybiBhIHByaW1pdGl2ZSB2YWx1ZS5cIik7IH0gcmV0dXJuIChcInN0cmluZ1wiID09PSByID8gU3RyaW5nIDogTnVtYmVyKSh0KTsgfVxudmFyIEFjY291bnRSZXNwb25zZSA9IGV4cG9ydHMuQWNjb3VudFJlc3BvbnNlID0gZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBBY2NvdW50UmVzcG9uc2UocmVzcG9uc2UpIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBBY2NvdW50UmVzcG9uc2UpO1xuICAgIHRoaXMuX2Jhc2VBY2NvdW50ID0gbmV3IF9zdGVsbGFyQmFzZS5BY2NvdW50KHJlc3BvbnNlLmFjY291bnRfaWQsIHJlc3BvbnNlLnNlcXVlbmNlKTtcbiAgICBPYmplY3QuZW50cmllcyhyZXNwb25zZSkuZm9yRWFjaChmdW5jdGlvbiAoX3JlZikge1xuICAgICAgdmFyIF9yZWYyID0gX3NsaWNlZFRvQXJyYXkoX3JlZiwgMiksXG4gICAgICAgIGtleSA9IF9yZWYyWzBdLFxuICAgICAgICB2YWx1ZSA9IF9yZWYyWzFdO1xuICAgICAgX3RoaXNba2V5XSA9IHZhbHVlO1xuICAgIH0pO1xuICB9XG4gIHJldHVybiBfY3JlYXRlQ2xhc3MoQWNjb3VudFJlc3BvbnNlLCBbe1xuICAgIGtleTogXCJhY2NvdW50SWRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gYWNjb3VudElkKCkge1xuICAgICAgcmV0dXJuIHRoaXMuX2Jhc2VBY2NvdW50LmFjY291bnRJZCgpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJzZXF1ZW5jZU51bWJlclwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzZXF1ZW5jZU51bWJlcigpIHtcbiAgICAgIHJldHVybiB0aGlzLl9iYXNlQWNjb3VudC5zZXF1ZW5jZU51bWJlcigpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJpbmNyZW1lbnRTZXF1ZW5jZU51bWJlclwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBpbmNyZW1lbnRTZXF1ZW5jZU51bWJlcigpIHtcbiAgICAgIHRoaXMuX2Jhc2VBY2NvdW50LmluY3JlbWVudFNlcXVlbmNlTnVtYmVyKCk7XG4gICAgICB0aGlzLnNlcXVlbmNlID0gdGhpcy5fYmFzZUFjY291bnQuc2VxdWVuY2VOdW1iZXIoKTtcbiAgICB9XG4gIH1dKTtcbn0oKTsiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@stellar/stellar-sdk/lib/horizon/account_response.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@stellar/stellar-sdk/lib/horizon/assets_call_builder.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@stellar/stellar-sdk/lib/horizon/assets_call_builder.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.AssetsCallBuilder = void 0;\nvar _call_builder = __webpack_require__(/*! ./call_builder */ \"(ssr)/./node_modules/@stellar/stellar-sdk/lib/horizon/call_builder.js\");\nfunction _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\nfunction _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }\nfunction _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nfunction _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }\nfunction _possibleConstructorReturn(t, e) { if (e && (\"object\" == _typeof(e) || \"function\" == typeof e)) return e; if (void 0 !== e) throw new TypeError(\"Derived constructors may only return object or undefined\"); return _assertThisInitialized(t); }\nfunction _assertThisInitialized(e) { if (void 0 === e) throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); return e; }\nfunction _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }\nfunction _getPrototypeOf(t) { return _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function (t) { return t.__proto__ || Object.getPrototypeOf(t); }, _getPrototypeOf(t); }\nfunction _inherits(t, e) { if (\"function\" != typeof e && null !== e) throw new TypeError(\"Super expression must either be null or a function\"); t.prototype = Object.create(e && e.prototype, { constructor: { value: t, writable: !0, configurable: !0 } }), Object.defineProperty(t, \"prototype\", { writable: !1 }), e && _setPrototypeOf(t, e); }\nfunction _setPrototypeOf(t, e) { return _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function (t, e) { return t.__proto__ = e, t; }, _setPrototypeOf(t, e); }\nvar AssetsCallBuilder = exports.AssetsCallBuilder = function (_CallBuilder) {\n  function AssetsCallBuilder(serverUrl) {\n    var _this;\n    _classCallCheck(this, AssetsCallBuilder);\n    _this = _callSuper(this, AssetsCallBuilder, [serverUrl]);\n    _this.url.segment(\"assets\");\n    return _this;\n  }\n  _inherits(AssetsCallBuilder, _CallBuilder);\n  return _createClass(AssetsCallBuilder, [{\n    key: \"forCode\",\n    value: function forCode(value) {\n      this.url.setQuery(\"asset_code\", value);\n      return this;\n    }\n  }, {\n    key: \"forIssuer\",\n    value: function forIssuer(value) {\n      this.url.setQuery(\"asset_issuer\", value);\n      return this;\n    }\n  }]);\n}(_call_builder.CallBuilder);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHN0ZWxsYXIvc3RlbGxhci1zZGsvbGliL2hvcml6b24vYXNzZXRzX2NhbGxfYnVpbGRlci5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYixzQkFBc0IsMkJBQTJCLG9HQUFvRyxtQkFBbUIsaUJBQWlCLHNIQUFzSDtBQUMvUyw4Q0FBNkM7QUFDN0M7QUFDQSxDQUFDLEVBQUM7QUFDRix5QkFBeUI7QUFDekIsb0JBQW9CLG1CQUFPLENBQUMsNkZBQWdCO0FBQzVDLGlDQUFpQztBQUNqQyxtQ0FBbUMsZ0JBQWdCLGNBQWMsT0FBTyxjQUFjO0FBQ3RGLGlDQUFpQyxxSEFBcUgsY0FBYztBQUNwSyw2QkFBNkIsbUNBQW1DO0FBQ2hFLDhCQUE4Qiw0Q0FBNEMsK0JBQStCLG9CQUFvQixtQ0FBbUMsc0NBQXNDLHVFQUF1RTtBQUM3USwrQkFBK0I7QUFDL0IsNENBQTRDLHVFQUF1RSxtR0FBbUc7QUFDdE4scUNBQXFDLHlHQUF5RztBQUM5SSx1Q0FBdUMsTUFBTSxxRkFBcUYsTUFBTSxhQUFhLDJFQUEyRSxhQUFhO0FBQzdPLDhCQUE4QiwrRkFBK0YsaURBQWlEO0FBQzlLLDJCQUEyQixxSEFBcUgsZ0RBQWdELGVBQWUsNENBQTRDLDJDQUEyQyxjQUFjO0FBQ3BULGlDQUFpQyxrR0FBa0csNEJBQTRCO0FBQy9KLHdCQUF3Qix5QkFBeUI7QUFDakQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNILENBQUMiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcVVNVQVJJT1xcRG9jdW1lbnRzXFxHaXRodWJcXEdhbGF4eUtKLXdhbGxldC0tLUhhY2tcXHdlYlxcbm9kZV9tb2R1bGVzXFxAc3RlbGxhclxcc3RlbGxhci1zZGtcXGxpYlxcaG9yaXpvblxcYXNzZXRzX2NhbGxfYnVpbGRlci5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuZnVuY3Rpb24gX3R5cGVvZihvKSB7IFwiQGJhYmVsL2hlbHBlcnMgLSB0eXBlb2ZcIjsgcmV0dXJuIF90eXBlb2YgPSBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIFN5bWJvbCAmJiBcInN5bWJvbFwiID09IHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPyBmdW5jdGlvbiAobykgeyByZXR1cm4gdHlwZW9mIG87IH0gOiBmdW5jdGlvbiAobykgeyByZXR1cm4gbyAmJiBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIFN5bWJvbCAmJiBvLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgbyAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2YgbzsgfSwgX3R5cGVvZihvKTsgfVxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuQXNzZXRzQ2FsbEJ1aWxkZXIgPSB2b2lkIDA7XG52YXIgX2NhbGxfYnVpbGRlciA9IHJlcXVpcmUoXCIuL2NhbGxfYnVpbGRlclwiKTtcbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhhLCBuKSB7IGlmICghKGEgaW5zdGFuY2VvZiBuKSkgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfVxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXMoZSwgcikgeyBmb3IgKHZhciB0ID0gMDsgdCA8IHIubGVuZ3RoOyB0KyspIHsgdmFyIG8gPSByW3RdOyBvLmVudW1lcmFibGUgPSBvLmVudW1lcmFibGUgfHwgITEsIG8uY29uZmlndXJhYmxlID0gITAsIFwidmFsdWVcIiBpbiBvICYmIChvLndyaXRhYmxlID0gITApLCBPYmplY3QuZGVmaW5lUHJvcGVydHkoZSwgX3RvUHJvcGVydHlLZXkoby5rZXkpLCBvKTsgfSB9XG5mdW5jdGlvbiBfY3JlYXRlQ2xhc3MoZSwgciwgdCkgeyByZXR1cm4gciAmJiBfZGVmaW5lUHJvcGVydGllcyhlLnByb3RvdHlwZSwgciksIHQgJiYgX2RlZmluZVByb3BlcnRpZXMoZSwgdCksIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLCBcInByb3RvdHlwZVwiLCB7IHdyaXRhYmxlOiAhMSB9KSwgZTsgfVxuZnVuY3Rpb24gX3RvUHJvcGVydHlLZXkodCkgeyB2YXIgaSA9IF90b1ByaW1pdGl2ZSh0LCBcInN0cmluZ1wiKTsgcmV0dXJuIFwic3ltYm9sXCIgPT0gX3R5cGVvZihpKSA/IGkgOiBpICsgXCJcIjsgfVxuZnVuY3Rpb24gX3RvUHJpbWl0aXZlKHQsIHIpIHsgaWYgKFwib2JqZWN0XCIgIT0gX3R5cGVvZih0KSB8fCAhdCkgcmV0dXJuIHQ7IHZhciBlID0gdFtTeW1ib2wudG9QcmltaXRpdmVdOyBpZiAodm9pZCAwICE9PSBlKSB7IHZhciBpID0gZS5jYWxsKHQsIHIgfHwgXCJkZWZhdWx0XCIpOyBpZiAoXCJvYmplY3RcIiAhPSBfdHlwZW9mKGkpKSByZXR1cm4gaTsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkBAdG9QcmltaXRpdmUgbXVzdCByZXR1cm4gYSBwcmltaXRpdmUgdmFsdWUuXCIpOyB9IHJldHVybiAoXCJzdHJpbmdcIiA9PT0gciA/IFN0cmluZyA6IE51bWJlcikodCk7IH1cbmZ1bmN0aW9uIF9jYWxsU3VwZXIodCwgbywgZSkgeyByZXR1cm4gbyA9IF9nZXRQcm90b3R5cGVPZihvKSwgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odCwgX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpID8gUmVmbGVjdC5jb25zdHJ1Y3QobywgZSB8fCBbXSwgX2dldFByb3RvdHlwZU9mKHQpLmNvbnN0cnVjdG9yKSA6IG8uYXBwbHkodCwgZSkpOyB9XG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0LCBlKSB7IGlmIChlICYmIChcIm9iamVjdFwiID09IF90eXBlb2YoZSkgfHwgXCJmdW5jdGlvblwiID09IHR5cGVvZiBlKSkgcmV0dXJuIGU7IGlmICh2b2lkIDAgIT09IGUpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJEZXJpdmVkIGNvbnN0cnVjdG9ycyBtYXkgb25seSByZXR1cm4gb2JqZWN0IG9yIHVuZGVmaW5lZFwiKTsgcmV0dXJuIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQodCk7IH1cbmZ1bmN0aW9uIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoZSkgeyBpZiAodm9pZCAwID09PSBlKSB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IHJldHVybiBlOyB9XG5mdW5jdGlvbiBfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KCkgeyB0cnkgeyB2YXIgdCA9ICFCb29sZWFuLnByb3RvdHlwZS52YWx1ZU9mLmNhbGwoUmVmbGVjdC5jb25zdHJ1Y3QoQm9vbGVhbiwgW10sIGZ1bmN0aW9uICgpIHt9KSk7IH0gY2F0Y2ggKHQpIHt9IHJldHVybiAoX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCA9IGZ1bmN0aW9uIF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKSB7IHJldHVybiAhIXQ7IH0pKCk7IH1cbmZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZih0KSB7IHJldHVybiBfZ2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3QuZ2V0UHJvdG90eXBlT2YuYmluZCgpIDogZnVuY3Rpb24gKHQpIHsgcmV0dXJuIHQuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZih0KTsgfSwgX2dldFByb3RvdHlwZU9mKHQpOyB9XG5mdW5jdGlvbiBfaW5oZXJpdHModCwgZSkgeyBpZiAoXCJmdW5jdGlvblwiICE9IHR5cGVvZiBlICYmIG51bGwgIT09IGUpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvblwiKTsgdC5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKGUgJiYgZS5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHQsIHdyaXRhYmxlOiAhMCwgY29uZmlndXJhYmxlOiAhMCB9IH0pLCBPYmplY3QuZGVmaW5lUHJvcGVydHkodCwgXCJwcm90b3R5cGVcIiwgeyB3cml0YWJsZTogITEgfSksIGUgJiYgX3NldFByb3RvdHlwZU9mKHQsIGUpOyB9XG5mdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YodCwgZSkgeyByZXR1cm4gX3NldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mLmJpbmQoKSA6IGZ1bmN0aW9uICh0LCBlKSB7IHJldHVybiB0Ll9fcHJvdG9fXyA9IGUsIHQ7IH0sIF9zZXRQcm90b3R5cGVPZih0LCBlKTsgfVxudmFyIEFzc2V0c0NhbGxCdWlsZGVyID0gZXhwb3J0cy5Bc3NldHNDYWxsQnVpbGRlciA9IGZ1bmN0aW9uIChfQ2FsbEJ1aWxkZXIpIHtcbiAgZnVuY3Rpb24gQXNzZXRzQ2FsbEJ1aWxkZXIoc2VydmVyVXJsKSB7XG4gICAgdmFyIF90aGlzO1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBBc3NldHNDYWxsQnVpbGRlcik7XG4gICAgX3RoaXMgPSBfY2FsbFN1cGVyKHRoaXMsIEFzc2V0c0NhbGxCdWlsZGVyLCBbc2VydmVyVXJsXSk7XG4gICAgX3RoaXMudXJsLnNlZ21lbnQoXCJhc3NldHNcIik7XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG4gIF9pbmhlcml0cyhBc3NldHNDYWxsQnVpbGRlciwgX0NhbGxCdWlsZGVyKTtcbiAgcmV0dXJuIF9jcmVhdGVDbGFzcyhBc3NldHNDYWxsQnVpbGRlciwgW3tcbiAgICBrZXk6IFwiZm9yQ29kZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBmb3JDb2RlKHZhbHVlKSB7XG4gICAgICB0aGlzLnVybC5zZXRRdWVyeShcImFzc2V0X2NvZGVcIiwgdmFsdWUpO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImZvcklzc3VlclwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBmb3JJc3N1ZXIodmFsdWUpIHtcbiAgICAgIHRoaXMudXJsLnNldFF1ZXJ5KFwiYXNzZXRfaXNzdWVyXCIsIHZhbHVlKTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgfV0pO1xufShfY2FsbF9idWlsZGVyLkNhbGxCdWlsZGVyKTsiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@stellar/stellar-sdk/lib/horizon/assets_call_builder.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@stellar/stellar-sdk/lib/horizon/call_builder.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@stellar/stellar-sdk/lib/horizon/call_builder.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.CallBuilder = void 0;\nvar _urijs = _interopRequireDefault(__webpack_require__(/*! urijs */ \"(ssr)/./node_modules/urijs/src/URI.js\"));\nvar _URITemplate = _interopRequireDefault(__webpack_require__(/*! urijs/src/URITemplate */ \"(ssr)/./node_modules/urijs/src/URITemplate.js\"));\nvar _errors = __webpack_require__(/*! ../errors */ \"(ssr)/./node_modules/@stellar/stellar-sdk/lib/errors/index.js\");\nvar _horizon_axios_client = __webpack_require__(/*! ./horizon_axios_client */ \"(ssr)/./node_modules/@stellar/stellar-sdk/lib/horizon/horizon_axios_client.js\");\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _regeneratorRuntime() { \"use strict\"; _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = \"function\" == typeof Symbol ? Symbol : {}, a = i.iterator || \"@@iterator\", c = i.asyncIterator || \"@@asyncIterator\", u = i.toStringTag || \"@@toStringTag\"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, \"\"); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, \"_invoke\", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: \"normal\", arg: t.call(e, r) }; } catch (t) { return { type: \"throw\", arg: t }; } } e.wrap = wrap; var h = \"suspendedStart\", l = \"suspendedYield\", f = \"executing\", s = \"completed\", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { [\"next\", \"throw\", \"return\"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if (\"throw\" !== c.type) { var u = c.arg, h = u.value; return h && \"object\" == _typeof(h) && n.call(h, \"__await\") ? e.resolve(h.__await).then(function (t) { invoke(\"next\", t, i, a); }, function (t) { invoke(\"throw\", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke(\"throw\", t, i, a); }); } a(c.arg); } var r; o(this, \"_invoke\", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw Error(\"Generator is already running\"); if (o === s) { if (\"throw\" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if (\"next\" === n.method) n.sent = n._sent = n.arg;else if (\"throw\" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else \"return\" === n.method && n.abrupt(\"return\", n.arg); o = f; var p = tryCatch(e, r, n); if (\"normal\" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } \"throw\" === p.type && (o = s, n.method = \"throw\", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, \"throw\" === n && e.iterator.return && (r.method = \"return\", r.arg = t, maybeInvokeDelegate(e, r), \"throw\" === r.method) || \"return\" !== n && (r.method = \"throw\", r.arg = new TypeError(\"The iterator does not provide a '\" + n + \"' method\")), y; var i = tryCatch(o, e.iterator, r.arg); if (\"throw\" === i.type) return r.method = \"throw\", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, \"return\" !== r.method && (r.method = \"next\", r.arg = t), r.delegate = null, y) : a : (r.method = \"throw\", r.arg = new TypeError(\"iterator result is not an object\"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = \"normal\", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: \"root\" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || \"\" === e) { var r = e[a]; if (r) return r.call(e); if (\"function\" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(_typeof(e) + \" is not iterable\"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, \"constructor\", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, \"constructor\", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, \"GeneratorFunction\"), e.isGeneratorFunction = function (t) { var e = \"function\" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || \"GeneratorFunction\" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, \"GeneratorFunction\")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, \"Generator\"), define(g, a, function () { return this; }), define(g, \"toString\", function () { return \"[object Generator]\"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) \"t\" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if (\"throw\" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = \"throw\", a.arg = e, r.next = n, o && (r.method = \"next\", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if (\"root\" === i.tryLoc) return handle(\"end\"); if (i.tryLoc <= this.prev) { var c = n.call(i, \"catchLoc\"), u = n.call(i, \"finallyLoc\"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw Error(\"try statement without catch or finally\"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, \"finallyLoc\") && this.prev < o.finallyLoc) { var i = o; break; } } i && (\"break\" === t || \"continue\" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = \"next\", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if (\"throw\" === t.type) throw t.arg; return \"break\" === t.type || \"continue\" === t.type ? this.next = t.arg : \"return\" === t.type ? (this.rval = this.arg = t.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, catch: function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if (\"throw\" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, \"next\" === this.method && (this.arg = t), y; } }, e; }\nfunction asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }\nfunction _asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, \"next\", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, \"throw\", n); } _next(void 0); }); }; }\nfunction _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\nfunction _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }\nfunction _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nvar JOINABLE = [\"transaction\"];\nvar anyGlobal = global;\nvar EventSource;\nif (true) {\n  var _ref, _anyGlobal$EventSourc, _anyGlobal$window;\n  EventSource = (_ref = (_anyGlobal$EventSourc = anyGlobal.EventSource) !== null && _anyGlobal$EventSourc !== void 0 ? _anyGlobal$EventSourc : (_anyGlobal$window = anyGlobal.window) === null || _anyGlobal$window === void 0 ? void 0 : _anyGlobal$window.EventSource) !== null && _ref !== void 0 ? _ref : __webpack_require__(/*! eventsource */ \"(ssr)/./node_modules/eventsource/lib/eventsource.js\");\n}\nvar CallBuilder = exports.CallBuilder = function () {\n  function CallBuilder(serverUrl) {\n    var neighborRoot = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"\";\n    _classCallCheck(this, CallBuilder);\n    this.url = serverUrl.clone();\n    this.filter = [];\n    this.originalSegments = this.url.segment() || [];\n    this.neighborRoot = neighborRoot;\n  }\n  return _createClass(CallBuilder, [{\n    key: \"call\",\n    value: function call() {\n      var _this = this;\n      this.checkFilter();\n      return this._sendNormalRequest(this.url).then(function (r) {\n        return _this._parseResponse(r);\n      });\n    }\n  }, {\n    key: \"stream\",\n    value: function stream() {\n      var _this2 = this;\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      if (EventSource === undefined) {\n        throw new Error(\"Streaming requires eventsource to be enabled. If you need this functionality, compile with USE_EVENTSOURCE=true.\");\n      }\n      this.checkFilter();\n      this.url.setQuery(\"X-Client-Name\", \"js-stellar-sdk\");\n      this.url.setQuery(\"X-Client-Version\", _horizon_axios_client.version);\n      var es;\n      var timeout;\n      var createTimeout = function createTimeout() {\n        timeout = setTimeout(function () {\n          var _es;\n          (_es = es) === null || _es === void 0 || _es.close();\n          es = _createEventSource();\n        }, options.reconnectTimeout || 15 * 1000);\n      };\n      var _createEventSource = function createEventSource() {\n        try {\n          es = new EventSource(_this2.url.toString());\n        } catch (err) {\n          if (options.onerror) {\n            options.onerror(err);\n          }\n        }\n        createTimeout();\n        if (!es) {\n          return es;\n        }\n        var closed = false;\n        var onClose = function onClose() {\n          if (closed) {\n            return;\n          }\n          clearTimeout(timeout);\n          es.close();\n          _createEventSource();\n          closed = true;\n        };\n        var onMessage = function onMessage(message) {\n          if (message.type === \"close\") {\n            onClose();\n            return;\n          }\n          var result = message.data ? _this2._parseRecord(JSON.parse(message.data)) : message;\n          if (result.paging_token) {\n            _this2.url.setQuery(\"cursor\", result.paging_token);\n          }\n          clearTimeout(timeout);\n          createTimeout();\n          if (typeof options.onmessage !== \"undefined\") {\n            options.onmessage(result);\n          }\n        };\n        var onError = function onError(error) {\n          if (options.onerror) {\n            options.onerror(error);\n          }\n        };\n        if (es.addEventListener) {\n          es.addEventListener(\"message\", onMessage.bind(_this2));\n          es.addEventListener(\"error\", onError.bind(_this2));\n          es.addEventListener(\"close\", onClose.bind(_this2));\n        } else {\n          es.onmessage = onMessage.bind(_this2);\n          es.onerror = onError.bind(_this2);\n        }\n        return es;\n      };\n      _createEventSource();\n      return function () {\n        var _es2;\n        clearTimeout(timeout);\n        (_es2 = es) === null || _es2 === void 0 || _es2.close();\n      };\n    }\n  }, {\n    key: \"cursor\",\n    value: function cursor(_cursor) {\n      this.url.setQuery(\"cursor\", _cursor);\n      return this;\n    }\n  }, {\n    key: \"limit\",\n    value: function limit(recordsNumber) {\n      this.url.setQuery(\"limit\", recordsNumber.toString());\n      return this;\n    }\n  }, {\n    key: \"order\",\n    value: function order(direction) {\n      this.url.setQuery(\"order\", direction);\n      return this;\n    }\n  }, {\n    key: \"join\",\n    value: function join(include) {\n      this.url.setQuery(\"join\", include);\n      return this;\n    }\n  }, {\n    key: \"forEndpoint\",\n    value: function forEndpoint(endpoint, param) {\n      if (this.neighborRoot === \"\") {\n        throw new Error(\"Invalid usage: neighborRoot not set in constructor\");\n      }\n      this.filter.push([endpoint, param, this.neighborRoot]);\n      return this;\n    }\n  }, {\n    key: \"checkFilter\",\n    value: function checkFilter() {\n      if (this.filter.length >= 2) {\n        throw new _errors.BadRequestError(\"Too many filters specified\", this.filter);\n      }\n      if (this.filter.length === 1) {\n        var newSegment = this.originalSegments.concat(this.filter[0]);\n        this.url.segment(newSegment);\n      }\n    }\n  }, {\n    key: \"_requestFnForLink\",\n    value: function _requestFnForLink(link) {\n      var _this3 = this;\n      return _asyncToGenerator(_regeneratorRuntime().mark(function _callee() {\n        var opts,\n          uri,\n          template,\n          r,\n          _args = arguments;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              opts = _args.length > 0 && _args[0] !== undefined ? _args[0] : {};\n              if (link.templated) {\n                template = (0, _URITemplate.default)(link.href);\n                uri = (0, _urijs.default)(template.expand(opts));\n              } else {\n                uri = (0, _urijs.default)(link.href);\n              }\n              _context.next = 4;\n              return _this3._sendNormalRequest(uri);\n            case 4:\n              r = _context.sent;\n              return _context.abrupt(\"return\", _this3._parseResponse(r));\n            case 6:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee);\n      }));\n    }\n  }, {\n    key: \"_parseRecord\",\n    value: function _parseRecord(json) {\n      var _this4 = this;\n      if (!json._links) {\n        return json;\n      }\n      Object.keys(json._links).forEach(function (key) {\n        var n = json._links[key];\n        var included = false;\n        if (typeof json[key] !== \"undefined\") {\n          json[\"\".concat(key, \"_attr\")] = json[key];\n          included = true;\n        }\n        if (included && JOINABLE.indexOf(key) >= 0) {\n          var record = _this4._parseRecord(json[key]);\n          json[key] = _asyncToGenerator(_regeneratorRuntime().mark(function _callee2() {\n            return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n              while (1) switch (_context2.prev = _context2.next) {\n                case 0:\n                  return _context2.abrupt(\"return\", record);\n                case 1:\n                case \"end\":\n                  return _context2.stop();\n              }\n            }, _callee2);\n          }));\n        } else {\n          json[key] = _this4._requestFnForLink(n);\n        }\n      });\n      return json;\n    }\n  }, {\n    key: \"_sendNormalRequest\",\n    value: function () {\n      var _sendNormalRequest2 = _asyncToGenerator(_regeneratorRuntime().mark(function _callee3(initialUrl) {\n        var url;\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) switch (_context3.prev = _context3.next) {\n            case 0:\n              url = initialUrl;\n              if (url.authority() === \"\") {\n                url = url.authority(this.url.authority());\n              }\n              if (url.protocol() === \"\") {\n                url = url.protocol(this.url.protocol());\n              }\n              return _context3.abrupt(\"return\", _horizon_axios_client.AxiosClient.get(url.toString()).then(function (response) {\n                return response.data;\n              }).catch(this._handleNetworkError));\n            case 4:\n            case \"end\":\n              return _context3.stop();\n          }\n        }, _callee3, this);\n      }));\n      function _sendNormalRequest(_x) {\n        return _sendNormalRequest2.apply(this, arguments);\n      }\n      return _sendNormalRequest;\n    }()\n  }, {\n    key: \"_parseResponse\",\n    value: function _parseResponse(json) {\n      if (json._embedded && json._embedded.records) {\n        return this._toCollectionPage(json);\n      }\n      return this._parseRecord(json);\n    }\n  }, {\n    key: \"_toCollectionPage\",\n    value: function _toCollectionPage(json) {\n      var _this5 = this;\n      for (var i = 0; i < json._embedded.records.length; i += 1) {\n        json._embedded.records[i] = this._parseRecord(json._embedded.records[i]);\n      }\n      return {\n        records: json._embedded.records,\n        next: function () {\n          var _next2 = _asyncToGenerator(_regeneratorRuntime().mark(function _callee4() {\n            var r;\n            return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n              while (1) switch (_context4.prev = _context4.next) {\n                case 0:\n                  _context4.next = 2;\n                  return _this5._sendNormalRequest((0, _urijs.default)(json._links.next.href));\n                case 2:\n                  r = _context4.sent;\n                  return _context4.abrupt(\"return\", _this5._toCollectionPage(r));\n                case 4:\n                case \"end\":\n                  return _context4.stop();\n              }\n            }, _callee4);\n          }));\n          function next() {\n            return _next2.apply(this, arguments);\n          }\n          return next;\n        }(),\n        prev: function () {\n          var _prev = _asyncToGenerator(_regeneratorRuntime().mark(function _callee5() {\n            var r;\n            return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n              while (1) switch (_context5.prev = _context5.next) {\n                case 0:\n                  _context5.next = 2;\n                  return _this5._sendNormalRequest((0, _urijs.default)(json._links.prev.href));\n                case 2:\n                  r = _context5.sent;\n                  return _context5.abrupt(\"return\", _this5._toCollectionPage(r));\n                case 4:\n                case \"end\":\n                  return _context5.stop();\n              }\n            }, _callee5);\n          }));\n          function prev() {\n            return _prev.apply(this, arguments);\n          }\n          return prev;\n        }()\n      };\n    }\n  }, {\n    key: \"_handleNetworkError\",\n    value: (function () {\n      var _handleNetworkError2 = _asyncToGenerator(_regeneratorRuntime().mark(function _callee6(error) {\n        var _error$response$statu, _error$response$statu2;\n        return _regeneratorRuntime().wrap(function _callee6$(_context6) {\n          while (1) switch (_context6.prev = _context6.next) {\n            case 0:\n              if (!(error.response && error.response.status)) {\n                _context6.next = 8;\n                break;\n              }\n              _context6.t0 = error.response.status;\n              _context6.next = _context6.t0 === 404 ? 4 : 5;\n              break;\n            case 4:\n              return _context6.abrupt(\"return\", Promise.reject(new _errors.NotFoundError((_error$response$statu = error.response.statusText) !== null && _error$response$statu !== void 0 ? _error$response$statu : \"Not Found\", error.response.data)));\n            case 5:\n              return _context6.abrupt(\"return\", Promise.reject(new _errors.NetworkError((_error$response$statu2 = error.response.statusText) !== null && _error$response$statu2 !== void 0 ? _error$response$statu2 : \"Unknown\", error.response.data)));\n            case 6:\n              _context6.next = 9;\n              break;\n            case 8:\n              return _context6.abrupt(\"return\", Promise.reject(new Error(error.message)));\n            case 9:\n            case \"end\":\n              return _context6.stop();\n          }\n        }, _callee6);\n      }));\n      function _handleNetworkError(_x2) {\n        return _handleNetworkError2.apply(this, arguments);\n      }\n      return _handleNetworkError;\n    }())\n  }]);\n}();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@stellar/stellar-sdk/lib/horizon/call_builder.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@stellar/stellar-sdk/lib/horizon/claimable_balances_call_builder.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/@stellar/stellar-sdk/lib/horizon/claimable_balances_call_builder.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.ClaimableBalanceCallBuilder = void 0;\nvar _call_builder = __webpack_require__(/*! ./call_builder */ \"(ssr)/./node_modules/@stellar/stellar-sdk/lib/horizon/call_builder.js\");\nfunction _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\nfunction _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }\nfunction _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nfunction _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }\nfunction _possibleConstructorReturn(t, e) { if (e && (\"object\" == _typeof(e) || \"function\" == typeof e)) return e; if (void 0 !== e) throw new TypeError(\"Derived constructors may only return object or undefined\"); return _assertThisInitialized(t); }\nfunction _assertThisInitialized(e) { if (void 0 === e) throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); return e; }\nfunction _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }\nfunction _getPrototypeOf(t) { return _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function (t) { return t.__proto__ || Object.getPrototypeOf(t); }, _getPrototypeOf(t); }\nfunction _inherits(t, e) { if (\"function\" != typeof e && null !== e) throw new TypeError(\"Super expression must either be null or a function\"); t.prototype = Object.create(e && e.prototype, { constructor: { value: t, writable: !0, configurable: !0 } }), Object.defineProperty(t, \"prototype\", { writable: !1 }), e && _setPrototypeOf(t, e); }\nfunction _setPrototypeOf(t, e) { return _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function (t, e) { return t.__proto__ = e, t; }, _setPrototypeOf(t, e); }\nvar ClaimableBalanceCallBuilder = exports.ClaimableBalanceCallBuilder = function (_CallBuilder) {\n  function ClaimableBalanceCallBuilder(serverUrl) {\n    var _this;\n    _classCallCheck(this, ClaimableBalanceCallBuilder);\n    _this = _callSuper(this, ClaimableBalanceCallBuilder, [serverUrl]);\n    _this.url.segment(\"claimable_balances\");\n    return _this;\n  }\n  _inherits(ClaimableBalanceCallBuilder, _CallBuilder);\n  return _createClass(ClaimableBalanceCallBuilder, [{\n    key: \"claimableBalance\",\n    value: function claimableBalance(claimableBalanceId) {\n      var builder = new _call_builder.CallBuilder(this.url.clone());\n      builder.filter.push([claimableBalanceId]);\n      return builder;\n    }\n  }, {\n    key: \"sponsor\",\n    value: function sponsor(_sponsor) {\n      this.url.setQuery(\"sponsor\", _sponsor);\n      return this;\n    }\n  }, {\n    key: \"claimant\",\n    value: function claimant(_claimant) {\n      this.url.setQuery(\"claimant\", _claimant);\n      return this;\n    }\n  }, {\n    key: \"asset\",\n    value: function asset(_asset) {\n      this.url.setQuery(\"asset\", _asset.toString());\n      return this;\n    }\n  }]);\n}(_call_builder.CallBuilder);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHN0ZWxsYXIvc3RlbGxhci1zZGsvbGliL2hvcml6b24vY2xhaW1hYmxlX2JhbGFuY2VzX2NhbGxfYnVpbGRlci5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYixzQkFBc0IsMkJBQTJCLG9HQUFvRyxtQkFBbUIsaUJBQWlCLHNIQUFzSDtBQUMvUyw4Q0FBNkM7QUFDN0M7QUFDQSxDQUFDLEVBQUM7QUFDRixtQ0FBbUM7QUFDbkMsb0JBQW9CLG1CQUFPLENBQUMsNkZBQWdCO0FBQzVDLGlDQUFpQztBQUNqQyxtQ0FBbUMsZ0JBQWdCLGNBQWMsT0FBTyxjQUFjO0FBQ3RGLGlDQUFpQyxxSEFBcUgsY0FBYztBQUNwSyw2QkFBNkIsbUNBQW1DO0FBQ2hFLDhCQUE4Qiw0Q0FBNEMsK0JBQStCLG9CQUFvQixtQ0FBbUMsc0NBQXNDLHVFQUF1RTtBQUM3USwrQkFBK0I7QUFDL0IsNENBQTRDLHVFQUF1RSxtR0FBbUc7QUFDdE4scUNBQXFDLHlHQUF5RztBQUM5SSx1Q0FBdUMsTUFBTSxxRkFBcUYsTUFBTSxhQUFhLDJFQUEyRSxhQUFhO0FBQzdPLDhCQUE4QiwrRkFBK0YsaURBQWlEO0FBQzlLLDJCQUEyQixxSEFBcUgsZ0RBQWdELGVBQWUsNENBQTRDLDJDQUEyQyxjQUFjO0FBQ3BULGlDQUFpQyxrR0FBa0csNEJBQTRCO0FBQy9KLGtDQUFrQyxtQ0FBbUM7QUFDckU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNILENBQUMiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcVVNVQVJJT1xcRG9jdW1lbnRzXFxHaXRodWJcXEdhbGF4eUtKLXdhbGxldC0tLUhhY2tcXHdlYlxcbm9kZV9tb2R1bGVzXFxAc3RlbGxhclxcc3RlbGxhci1zZGtcXGxpYlxcaG9yaXpvblxcY2xhaW1hYmxlX2JhbGFuY2VzX2NhbGxfYnVpbGRlci5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuZnVuY3Rpb24gX3R5cGVvZihvKSB7IFwiQGJhYmVsL2hlbHBlcnMgLSB0eXBlb2ZcIjsgcmV0dXJuIF90eXBlb2YgPSBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIFN5bWJvbCAmJiBcInN5bWJvbFwiID09IHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPyBmdW5jdGlvbiAobykgeyByZXR1cm4gdHlwZW9mIG87IH0gOiBmdW5jdGlvbiAobykgeyByZXR1cm4gbyAmJiBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIFN5bWJvbCAmJiBvLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgbyAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2YgbzsgfSwgX3R5cGVvZihvKTsgfVxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuQ2xhaW1hYmxlQmFsYW5jZUNhbGxCdWlsZGVyID0gdm9pZCAwO1xudmFyIF9jYWxsX2J1aWxkZXIgPSByZXF1aXJlKFwiLi9jYWxsX2J1aWxkZXJcIik7XG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soYSwgbikgeyBpZiAoIShhIGluc3RhbmNlb2YgbikpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH1cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKGUsIHIpIHsgZm9yICh2YXIgdCA9IDA7IHQgPCByLmxlbmd0aDsgdCsrKSB7IHZhciBvID0gclt0XTsgby5lbnVtZXJhYmxlID0gby5lbnVtZXJhYmxlIHx8ICExLCBvLmNvbmZpZ3VyYWJsZSA9ICEwLCBcInZhbHVlXCIgaW4gbyAmJiAoby53cml0YWJsZSA9ICEwKSwgT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsIF90b1Byb3BlcnR5S2V5KG8ua2V5KSwgbyk7IH0gfVxuZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKGUsIHIsIHQpIHsgcmV0dXJuIHIgJiYgX2RlZmluZVByb3BlcnRpZXMoZS5wcm90b3R5cGUsIHIpLCB0ICYmIF9kZWZpbmVQcm9wZXJ0aWVzKGUsIHQpLCBPYmplY3QuZGVmaW5lUHJvcGVydHkoZSwgXCJwcm90b3R5cGVcIiwgeyB3cml0YWJsZTogITEgfSksIGU7IH1cbmZ1bmN0aW9uIF90b1Byb3BlcnR5S2V5KHQpIHsgdmFyIGkgPSBfdG9QcmltaXRpdmUodCwgXCJzdHJpbmdcIik7IHJldHVybiBcInN5bWJvbFwiID09IF90eXBlb2YoaSkgPyBpIDogaSArIFwiXCI7IH1cbmZ1bmN0aW9uIF90b1ByaW1pdGl2ZSh0LCByKSB7IGlmIChcIm9iamVjdFwiICE9IF90eXBlb2YodCkgfHwgIXQpIHJldHVybiB0OyB2YXIgZSA9IHRbU3ltYm9sLnRvUHJpbWl0aXZlXTsgaWYgKHZvaWQgMCAhPT0gZSkgeyB2YXIgaSA9IGUuY2FsbCh0LCByIHx8IFwiZGVmYXVsdFwiKTsgaWYgKFwib2JqZWN0XCIgIT0gX3R5cGVvZihpKSkgcmV0dXJuIGk7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJAQHRvUHJpbWl0aXZlIG11c3QgcmV0dXJuIGEgcHJpbWl0aXZlIHZhbHVlLlwiKTsgfSByZXR1cm4gKFwic3RyaW5nXCIgPT09IHIgPyBTdHJpbmcgOiBOdW1iZXIpKHQpOyB9XG5mdW5jdGlvbiBfY2FsbFN1cGVyKHQsIG8sIGUpIHsgcmV0dXJuIG8gPSBfZ2V0UHJvdG90eXBlT2YobyksIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHQsIF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKSA/IFJlZmxlY3QuY29uc3RydWN0KG8sIGUgfHwgW10sIF9nZXRQcm90b3R5cGVPZih0KS5jb25zdHJ1Y3RvcikgOiBvLmFwcGx5KHQsIGUpKTsgfVxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odCwgZSkgeyBpZiAoZSAmJiAoXCJvYmplY3RcIiA9PSBfdHlwZW9mKGUpIHx8IFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgZSkpIHJldHVybiBlOyBpZiAodm9pZCAwICE9PSBlKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiRGVyaXZlZCBjb25zdHJ1Y3RvcnMgbWF5IG9ubHkgcmV0dXJuIG9iamVjdCBvciB1bmRlZmluZWRcIik7IHJldHVybiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHQpOyB9XG5mdW5jdGlvbiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKGUpIHsgaWYgKHZvaWQgMCA9PT0gZSkgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyByZXR1cm4gZTsgfVxuZnVuY3Rpb24gX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpIHsgdHJ5IHsgdmFyIHQgPSAhQm9vbGVhbi5wcm90b3R5cGUudmFsdWVPZi5jYWxsKFJlZmxlY3QuY29uc3RydWN0KEJvb2xlYW4sIFtdLCBmdW5jdGlvbiAoKSB7fSkpOyB9IGNhdGNoICh0KSB7fSByZXR1cm4gKF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QgPSBmdW5jdGlvbiBfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KCkgeyByZXR1cm4gISF0OyB9KSgpOyB9XG5mdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2YodCkgeyByZXR1cm4gX2dldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LmdldFByb3RvdHlwZU9mLmJpbmQoKSA6IGZ1bmN0aW9uICh0KSB7IHJldHVybiB0Ll9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YodCk7IH0sIF9nZXRQcm90b3R5cGVPZih0KTsgfVxuZnVuY3Rpb24gX2luaGVyaXRzKHQsIGUpIHsgaWYgKFwiZnVuY3Rpb25cIiAhPSB0eXBlb2YgZSAmJiBudWxsICE9PSBlKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb25cIik7IHQucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShlICYmIGUucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiB0LCB3cml0YWJsZTogITAsIGNvbmZpZ3VyYWJsZTogITAgfSB9KSwgT2JqZWN0LmRlZmluZVByb3BlcnR5KHQsIFwicHJvdG90eXBlXCIsIHsgd3JpdGFibGU6ICExIH0pLCBlICYmIF9zZXRQcm90b3R5cGVPZih0LCBlKTsgfVxuZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKHQsIGUpIHsgcmV0dXJuIF9zZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZi5iaW5kKCkgOiBmdW5jdGlvbiAodCwgZSkgeyByZXR1cm4gdC5fX3Byb3RvX18gPSBlLCB0OyB9LCBfc2V0UHJvdG90eXBlT2YodCwgZSk7IH1cbnZhciBDbGFpbWFibGVCYWxhbmNlQ2FsbEJ1aWxkZXIgPSBleHBvcnRzLkNsYWltYWJsZUJhbGFuY2VDYWxsQnVpbGRlciA9IGZ1bmN0aW9uIChfQ2FsbEJ1aWxkZXIpIHtcbiAgZnVuY3Rpb24gQ2xhaW1hYmxlQmFsYW5jZUNhbGxCdWlsZGVyKHNlcnZlclVybCkge1xuICAgIHZhciBfdGhpcztcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgQ2xhaW1hYmxlQmFsYW5jZUNhbGxCdWlsZGVyKTtcbiAgICBfdGhpcyA9IF9jYWxsU3VwZXIodGhpcywgQ2xhaW1hYmxlQmFsYW5jZUNhbGxCdWlsZGVyLCBbc2VydmVyVXJsXSk7XG4gICAgX3RoaXMudXJsLnNlZ21lbnQoXCJjbGFpbWFibGVfYmFsYW5jZXNcIik7XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG4gIF9pbmhlcml0cyhDbGFpbWFibGVCYWxhbmNlQ2FsbEJ1aWxkZXIsIF9DYWxsQnVpbGRlcik7XG4gIHJldHVybiBfY3JlYXRlQ2xhc3MoQ2xhaW1hYmxlQmFsYW5jZUNhbGxCdWlsZGVyLCBbe1xuICAgIGtleTogXCJjbGFpbWFibGVCYWxhbmNlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNsYWltYWJsZUJhbGFuY2UoY2xhaW1hYmxlQmFsYW5jZUlkKSB7XG4gICAgICB2YXIgYnVpbGRlciA9IG5ldyBfY2FsbF9idWlsZGVyLkNhbGxCdWlsZGVyKHRoaXMudXJsLmNsb25lKCkpO1xuICAgICAgYnVpbGRlci5maWx0ZXIucHVzaChbY2xhaW1hYmxlQmFsYW5jZUlkXSk7XG4gICAgICByZXR1cm4gYnVpbGRlcjtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwic3BvbnNvclwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzcG9uc29yKF9zcG9uc29yKSB7XG4gICAgICB0aGlzLnVybC5zZXRRdWVyeShcInNwb25zb3JcIiwgX3Nwb25zb3IpO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImNsYWltYW50XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNsYWltYW50KF9jbGFpbWFudCkge1xuICAgICAgdGhpcy51cmwuc2V0UXVlcnkoXCJjbGFpbWFudFwiLCBfY2xhaW1hbnQpO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImFzc2V0XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGFzc2V0KF9hc3NldCkge1xuICAgICAgdGhpcy51cmwuc2V0UXVlcnkoXCJhc3NldFwiLCBfYXNzZXQudG9TdHJpbmcoKSk7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gIH1dKTtcbn0oX2NhbGxfYnVpbGRlci5DYWxsQnVpbGRlcik7Il0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@stellar/stellar-sdk/lib/horizon/claimable_balances_call_builder.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@stellar/stellar-sdk/lib/horizon/effect_call_builder.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@stellar/stellar-sdk/lib/horizon/effect_call_builder.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.EffectCallBuilder = void 0;\nvar _call_builder = __webpack_require__(/*! ./call_builder */ \"(ssr)/./node_modules/@stellar/stellar-sdk/lib/horizon/call_builder.js\");\nfunction _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\nfunction _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }\nfunction _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nfunction _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }\nfunction _possibleConstructorReturn(t, e) { if (e && (\"object\" == _typeof(e) || \"function\" == typeof e)) return e; if (void 0 !== e) throw new TypeError(\"Derived constructors may only return object or undefined\"); return _assertThisInitialized(t); }\nfunction _assertThisInitialized(e) { if (void 0 === e) throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); return e; }\nfunction _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }\nfunction _getPrototypeOf(t) { return _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function (t) { return t.__proto__ || Object.getPrototypeOf(t); }, _getPrototypeOf(t); }\nfunction _inherits(t, e) { if (\"function\" != typeof e && null !== e) throw new TypeError(\"Super expression must either be null or a function\"); t.prototype = Object.create(e && e.prototype, { constructor: { value: t, writable: !0, configurable: !0 } }), Object.defineProperty(t, \"prototype\", { writable: !1 }), e && _setPrototypeOf(t, e); }\nfunction _setPrototypeOf(t, e) { return _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function (t, e) { return t.__proto__ = e, t; }, _setPrototypeOf(t, e); }\nvar EffectCallBuilder = exports.EffectCallBuilder = function (_CallBuilder) {\n  function EffectCallBuilder(serverUrl) {\n    var _this;\n    _classCallCheck(this, EffectCallBuilder);\n    _this = _callSuper(this, EffectCallBuilder, [serverUrl, \"effects\"]);\n    _this.url.segment(\"effects\");\n    return _this;\n  }\n  _inherits(EffectCallBuilder, _CallBuilder);\n  return _createClass(EffectCallBuilder, [{\n    key: \"forAccount\",\n    value: function forAccount(accountId) {\n      return this.forEndpoint(\"accounts\", accountId);\n    }\n  }, {\n    key: \"forLedger\",\n    value: function forLedger(sequence) {\n      return this.forEndpoint(\"ledgers\", sequence.toString());\n    }\n  }, {\n    key: \"forTransaction\",\n    value: function forTransaction(transactionId) {\n      return this.forEndpoint(\"transactions\", transactionId);\n    }\n  }, {\n    key: \"forOperation\",\n    value: function forOperation(operationId) {\n      return this.forEndpoint(\"operations\", operationId);\n    }\n  }, {\n    key: \"forLiquidityPool\",\n    value: function forLiquidityPool(poolId) {\n      return this.forEndpoint(\"liquidity_pools\", poolId);\n    }\n  }]);\n}(_call_builder.CallBuilder);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHN0ZWxsYXIvc3RlbGxhci1zZGsvbGliL2hvcml6b24vZWZmZWN0X2NhbGxfYnVpbGRlci5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYixzQkFBc0IsMkJBQTJCLG9HQUFvRyxtQkFBbUIsaUJBQWlCLHNIQUFzSDtBQUMvUyw4Q0FBNkM7QUFDN0M7QUFDQSxDQUFDLEVBQUM7QUFDRix5QkFBeUI7QUFDekIsb0JBQW9CLG1CQUFPLENBQUMsNkZBQWdCO0FBQzVDLGlDQUFpQztBQUNqQyxtQ0FBbUMsZ0JBQWdCLGNBQWMsT0FBTyxjQUFjO0FBQ3RGLGlDQUFpQyxxSEFBcUgsY0FBYztBQUNwSyw2QkFBNkIsbUNBQW1DO0FBQ2hFLDhCQUE4Qiw0Q0FBNEMsK0JBQStCLG9CQUFvQixtQ0FBbUMsc0NBQXNDLHVFQUF1RTtBQUM3USwrQkFBK0I7QUFDL0IsNENBQTRDLHVFQUF1RSxtR0FBbUc7QUFDdE4scUNBQXFDLHlHQUF5RztBQUM5SSx1Q0FBdUMsTUFBTSxxRkFBcUYsTUFBTSxhQUFhLDJFQUEyRSxhQUFhO0FBQzdPLDhCQUE4QiwrRkFBK0YsaURBQWlEO0FBQzlLLDJCQUEyQixxSEFBcUgsZ0RBQWdELGVBQWUsNENBQTRDLDJDQUEyQyxjQUFjO0FBQ3BULGlDQUFpQyxrR0FBa0csNEJBQTRCO0FBQy9KLHdCQUF3Qix5QkFBeUI7QUFDakQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0gsQ0FBQyIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxVU1VBUklPXFxEb2N1bWVudHNcXEdpdGh1YlxcR2FsYXh5S0otd2FsbGV0LS0tSGFja1xcd2ViXFxub2RlX21vZHVsZXNcXEBzdGVsbGFyXFxzdGVsbGFyLXNka1xcbGliXFxob3Jpem9uXFxlZmZlY3RfY2FsbF9idWlsZGVyLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5mdW5jdGlvbiBfdHlwZW9mKG8pIHsgXCJAYmFiZWwvaGVscGVycyAtIHR5cGVvZlwiOyByZXR1cm4gX3R5cGVvZiA9IFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgU3ltYm9sICYmIFwic3ltYm9sXCIgPT0gdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA/IGZ1bmN0aW9uIChvKSB7IHJldHVybiB0eXBlb2YgbzsgfSA6IGZ1bmN0aW9uIChvKSB7IHJldHVybiBvICYmIFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgU3ltYm9sICYmIG8uY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvOyB9LCBfdHlwZW9mKG8pOyB9XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5FZmZlY3RDYWxsQnVpbGRlciA9IHZvaWQgMDtcbnZhciBfY2FsbF9idWlsZGVyID0gcmVxdWlyZShcIi4vY2FsbF9idWlsZGVyXCIpO1xuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGEsIG4pIHsgaWYgKCEoYSBpbnN0YW5jZW9mIG4pKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9XG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyhlLCByKSB7IGZvciAodmFyIHQgPSAwOyB0IDwgci5sZW5ndGg7IHQrKykgeyB2YXIgbyA9IHJbdF07IG8uZW51bWVyYWJsZSA9IG8uZW51bWVyYWJsZSB8fCAhMSwgby5jb25maWd1cmFibGUgPSAhMCwgXCJ2YWx1ZVwiIGluIG8gJiYgKG8ud3JpdGFibGUgPSAhMCksIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLCBfdG9Qcm9wZXJ0eUtleShvLmtleSksIG8pOyB9IH1cbmZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhlLCByLCB0KSB7IHJldHVybiByICYmIF9kZWZpbmVQcm9wZXJ0aWVzKGUucHJvdG90eXBlLCByKSwgdCAmJiBfZGVmaW5lUHJvcGVydGllcyhlLCB0KSwgT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsIFwicHJvdG90eXBlXCIsIHsgd3JpdGFibGU6ICExIH0pLCBlOyB9XG5mdW5jdGlvbiBfdG9Qcm9wZXJ0eUtleSh0KSB7IHZhciBpID0gX3RvUHJpbWl0aXZlKHQsIFwic3RyaW5nXCIpOyByZXR1cm4gXCJzeW1ib2xcIiA9PSBfdHlwZW9mKGkpID8gaSA6IGkgKyBcIlwiOyB9XG5mdW5jdGlvbiBfdG9QcmltaXRpdmUodCwgcikgeyBpZiAoXCJvYmplY3RcIiAhPSBfdHlwZW9mKHQpIHx8ICF0KSByZXR1cm4gdDsgdmFyIGUgPSB0W1N5bWJvbC50b1ByaW1pdGl2ZV07IGlmICh2b2lkIDAgIT09IGUpIHsgdmFyIGkgPSBlLmNhbGwodCwgciB8fCBcImRlZmF1bHRcIik7IGlmIChcIm9iamVjdFwiICE9IF90eXBlb2YoaSkpIHJldHVybiBpOyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQEB0b1ByaW1pdGl2ZSBtdXN0IHJldHVybiBhIHByaW1pdGl2ZSB2YWx1ZS5cIik7IH0gcmV0dXJuIChcInN0cmluZ1wiID09PSByID8gU3RyaW5nIDogTnVtYmVyKSh0KTsgfVxuZnVuY3Rpb24gX2NhbGxTdXBlcih0LCBvLCBlKSB7IHJldHVybiBvID0gX2dldFByb3RvdHlwZU9mKG8pLCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0LCBfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KCkgPyBSZWZsZWN0LmNvbnN0cnVjdChvLCBlIHx8IFtdLCBfZ2V0UHJvdG90eXBlT2YodCkuY29uc3RydWN0b3IpIDogby5hcHBseSh0LCBlKSk7IH1cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHQsIGUpIHsgaWYgKGUgJiYgKFwib2JqZWN0XCIgPT0gX3R5cGVvZihlKSB8fCBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIGUpKSByZXR1cm4gZTsgaWYgKHZvaWQgMCAhPT0gZSkgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkRlcml2ZWQgY29uc3RydWN0b3JzIG1heSBvbmx5IHJldHVybiBvYmplY3Qgb3IgdW5kZWZpbmVkXCIpOyByZXR1cm4gX2Fzc2VydFRoaXNJbml0aWFsaXplZCh0KTsgfVxuZnVuY3Rpb24gX2Fzc2VydFRoaXNJbml0aWFsaXplZChlKSB7IGlmICh2b2lkIDAgPT09IGUpIHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgcmV0dXJuIGU7IH1cbmZ1bmN0aW9uIF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKSB7IHRyeSB7IHZhciB0ID0gIUJvb2xlYW4ucHJvdG90eXBlLnZhbHVlT2YuY2FsbChSZWZsZWN0LmNvbnN0cnVjdChCb29sZWFuLCBbXSwgZnVuY3Rpb24gKCkge30pKTsgfSBjYXRjaCAodCkge30gcmV0dXJuIChfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0ID0gZnVuY3Rpb24gX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpIHsgcmV0dXJuICEhdDsgfSkoKTsgfVxuZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKHQpIHsgcmV0dXJuIF9nZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5nZXRQcm90b3R5cGVPZi5iaW5kKCkgOiBmdW5jdGlvbiAodCkgeyByZXR1cm4gdC5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKHQpOyB9LCBfZ2V0UHJvdG90eXBlT2YodCk7IH1cbmZ1bmN0aW9uIF9pbmhlcml0cyh0LCBlKSB7IGlmIChcImZ1bmN0aW9uXCIgIT0gdHlwZW9mIGUgJiYgbnVsbCAhPT0gZSkgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uXCIpOyB0LnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoZSAmJiBlLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogdCwgd3JpdGFibGU6ICEwLCBjb25maWd1cmFibGU6ICEwIH0gfSksIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LCBcInByb3RvdHlwZVwiLCB7IHdyaXRhYmxlOiAhMSB9KSwgZSAmJiBfc2V0UHJvdG90eXBlT2YodCwgZSk7IH1cbmZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZih0LCBlKSB7IHJldHVybiBfc2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2YuYmluZCgpIDogZnVuY3Rpb24gKHQsIGUpIHsgcmV0dXJuIHQuX19wcm90b19fID0gZSwgdDsgfSwgX3NldFByb3RvdHlwZU9mKHQsIGUpOyB9XG52YXIgRWZmZWN0Q2FsbEJ1aWxkZXIgPSBleHBvcnRzLkVmZmVjdENhbGxCdWlsZGVyID0gZnVuY3Rpb24gKF9DYWxsQnVpbGRlcikge1xuICBmdW5jdGlvbiBFZmZlY3RDYWxsQnVpbGRlcihzZXJ2ZXJVcmwpIHtcbiAgICB2YXIgX3RoaXM7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEVmZmVjdENhbGxCdWlsZGVyKTtcbiAgICBfdGhpcyA9IF9jYWxsU3VwZXIodGhpcywgRWZmZWN0Q2FsbEJ1aWxkZXIsIFtzZXJ2ZXJVcmwsIFwiZWZmZWN0c1wiXSk7XG4gICAgX3RoaXMudXJsLnNlZ21lbnQoXCJlZmZlY3RzXCIpO1xuICAgIHJldHVybiBfdGhpcztcbiAgfVxuICBfaW5oZXJpdHMoRWZmZWN0Q2FsbEJ1aWxkZXIsIF9DYWxsQnVpbGRlcik7XG4gIHJldHVybiBfY3JlYXRlQ2xhc3MoRWZmZWN0Q2FsbEJ1aWxkZXIsIFt7XG4gICAga2V5OiBcImZvckFjY291bnRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZm9yQWNjb3VudChhY2NvdW50SWQpIHtcbiAgICAgIHJldHVybiB0aGlzLmZvckVuZHBvaW50KFwiYWNjb3VudHNcIiwgYWNjb3VudElkKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiZm9yTGVkZ2VyXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGZvckxlZGdlcihzZXF1ZW5jZSkge1xuICAgICAgcmV0dXJuIHRoaXMuZm9yRW5kcG9pbnQoXCJsZWRnZXJzXCIsIHNlcXVlbmNlLnRvU3RyaW5nKCkpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJmb3JUcmFuc2FjdGlvblwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBmb3JUcmFuc2FjdGlvbih0cmFuc2FjdGlvbklkKSB7XG4gICAgICByZXR1cm4gdGhpcy5mb3JFbmRwb2ludChcInRyYW5zYWN0aW9uc1wiLCB0cmFuc2FjdGlvbklkKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiZm9yT3BlcmF0aW9uXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGZvck9wZXJhdGlvbihvcGVyYXRpb25JZCkge1xuICAgICAgcmV0dXJuIHRoaXMuZm9yRW5kcG9pbnQoXCJvcGVyYXRpb25zXCIsIG9wZXJhdGlvbklkKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiZm9yTGlxdWlkaXR5UG9vbFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBmb3JMaXF1aWRpdHlQb29sKHBvb2xJZCkge1xuICAgICAgcmV0dXJuIHRoaXMuZm9yRW5kcG9pbnQoXCJsaXF1aWRpdHlfcG9vbHNcIiwgcG9vbElkKTtcbiAgICB9XG4gIH1dKTtcbn0oX2NhbGxfYnVpbGRlci5DYWxsQnVpbGRlcik7Il0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@stellar/stellar-sdk/lib/horizon/effect_call_builder.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@stellar/stellar-sdk/lib/horizon/friendbot_builder.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@stellar/stellar-sdk/lib/horizon/friendbot_builder.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.FriendbotBuilder = void 0;\nvar _call_builder = __webpack_require__(/*! ./call_builder */ \"(ssr)/./node_modules/@stellar/stellar-sdk/lib/horizon/call_builder.js\");\nfunction _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }\nfunction _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nfunction _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\nfunction _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }\nfunction _possibleConstructorReturn(t, e) { if (e && (\"object\" == _typeof(e) || \"function\" == typeof e)) return e; if (void 0 !== e) throw new TypeError(\"Derived constructors may only return object or undefined\"); return _assertThisInitialized(t); }\nfunction _assertThisInitialized(e) { if (void 0 === e) throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); return e; }\nfunction _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }\nfunction _getPrototypeOf(t) { return _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function (t) { return t.__proto__ || Object.getPrototypeOf(t); }, _getPrototypeOf(t); }\nfunction _inherits(t, e) { if (\"function\" != typeof e && null !== e) throw new TypeError(\"Super expression must either be null or a function\"); t.prototype = Object.create(e && e.prototype, { constructor: { value: t, writable: !0, configurable: !0 } }), Object.defineProperty(t, \"prototype\", { writable: !1 }), e && _setPrototypeOf(t, e); }\nfunction _setPrototypeOf(t, e) { return _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function (t, e) { return t.__proto__ = e, t; }, _setPrototypeOf(t, e); }\nvar FriendbotBuilder = exports.FriendbotBuilder = function (_CallBuilder) {\n  function FriendbotBuilder(serverUrl, address) {\n    var _this;\n    _classCallCheck(this, FriendbotBuilder);\n    _this = _callSuper(this, FriendbotBuilder, [serverUrl]);\n    _this.url.segment(\"friendbot\");\n    _this.url.setQuery(\"addr\", address);\n    return _this;\n  }\n  _inherits(FriendbotBuilder, _CallBuilder);\n  return _createClass(FriendbotBuilder);\n}(_call_builder.CallBuilder);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHN0ZWxsYXIvc3RlbGxhci1zZGsvbGliL2hvcml6b24vZnJpZW5kYm90X2J1aWxkZXIuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsc0JBQXNCLDJCQUEyQixvR0FBb0csbUJBQW1CLGlCQUFpQixzSEFBc0g7QUFDL1MsOENBQTZDO0FBQzdDO0FBQ0EsQ0FBQyxFQUFDO0FBQ0Ysd0JBQXdCO0FBQ3hCLG9CQUFvQixtQkFBTyxDQUFDLDZGQUFnQjtBQUM1QyxtQ0FBbUMsZ0JBQWdCLGNBQWMsT0FBTyxjQUFjO0FBQ3RGLGlDQUFpQyxxSEFBcUgsY0FBYztBQUNwSyw2QkFBNkIsbUNBQW1DO0FBQ2hFLDhCQUE4Qiw0Q0FBNEMsK0JBQStCLG9CQUFvQixtQ0FBbUMsc0NBQXNDLHVFQUF1RTtBQUM3USxpQ0FBaUM7QUFDakMsK0JBQStCO0FBQy9CLDRDQUE0Qyx1RUFBdUUsbUdBQW1HO0FBQ3ROLHFDQUFxQyx5R0FBeUc7QUFDOUksdUNBQXVDLE1BQU0scUZBQXFGLE1BQU0sYUFBYSwyRUFBMkUsYUFBYTtBQUM3Tyw4QkFBOEIsK0ZBQStGLGlEQUFpRDtBQUM5SywyQkFBMkIscUhBQXFILGdEQUFnRCxlQUFlLDRDQUE0QywyQ0FBMkMsY0FBYztBQUNwVCxpQ0FBaUMsa0dBQWtHLDRCQUE0QjtBQUMvSix1QkFBdUIsd0JBQXdCO0FBQy9DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQyIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxVU1VBUklPXFxEb2N1bWVudHNcXEdpdGh1YlxcR2FsYXh5S0otd2FsbGV0LS0tSGFja1xcd2ViXFxub2RlX21vZHVsZXNcXEBzdGVsbGFyXFxzdGVsbGFyLXNka1xcbGliXFxob3Jpem9uXFxmcmllbmRib3RfYnVpbGRlci5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuZnVuY3Rpb24gX3R5cGVvZihvKSB7IFwiQGJhYmVsL2hlbHBlcnMgLSB0eXBlb2ZcIjsgcmV0dXJuIF90eXBlb2YgPSBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIFN5bWJvbCAmJiBcInN5bWJvbFwiID09IHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPyBmdW5jdGlvbiAobykgeyByZXR1cm4gdHlwZW9mIG87IH0gOiBmdW5jdGlvbiAobykgeyByZXR1cm4gbyAmJiBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIFN5bWJvbCAmJiBvLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgbyAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2YgbzsgfSwgX3R5cGVvZihvKTsgfVxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuRnJpZW5kYm90QnVpbGRlciA9IHZvaWQgMDtcbnZhciBfY2FsbF9idWlsZGVyID0gcmVxdWlyZShcIi4vY2FsbF9idWlsZGVyXCIpO1xuZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXMoZSwgcikgeyBmb3IgKHZhciB0ID0gMDsgdCA8IHIubGVuZ3RoOyB0KyspIHsgdmFyIG8gPSByW3RdOyBvLmVudW1lcmFibGUgPSBvLmVudW1lcmFibGUgfHwgITEsIG8uY29uZmlndXJhYmxlID0gITAsIFwidmFsdWVcIiBpbiBvICYmIChvLndyaXRhYmxlID0gITApLCBPYmplY3QuZGVmaW5lUHJvcGVydHkoZSwgX3RvUHJvcGVydHlLZXkoby5rZXkpLCBvKTsgfSB9XG5mdW5jdGlvbiBfY3JlYXRlQ2xhc3MoZSwgciwgdCkgeyByZXR1cm4gciAmJiBfZGVmaW5lUHJvcGVydGllcyhlLnByb3RvdHlwZSwgciksIHQgJiYgX2RlZmluZVByb3BlcnRpZXMoZSwgdCksIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLCBcInByb3RvdHlwZVwiLCB7IHdyaXRhYmxlOiAhMSB9KSwgZTsgfVxuZnVuY3Rpb24gX3RvUHJvcGVydHlLZXkodCkgeyB2YXIgaSA9IF90b1ByaW1pdGl2ZSh0LCBcInN0cmluZ1wiKTsgcmV0dXJuIFwic3ltYm9sXCIgPT0gX3R5cGVvZihpKSA/IGkgOiBpICsgXCJcIjsgfVxuZnVuY3Rpb24gX3RvUHJpbWl0aXZlKHQsIHIpIHsgaWYgKFwib2JqZWN0XCIgIT0gX3R5cGVvZih0KSB8fCAhdCkgcmV0dXJuIHQ7IHZhciBlID0gdFtTeW1ib2wudG9QcmltaXRpdmVdOyBpZiAodm9pZCAwICE9PSBlKSB7IHZhciBpID0gZS5jYWxsKHQsIHIgfHwgXCJkZWZhdWx0XCIpOyBpZiAoXCJvYmplY3RcIiAhPSBfdHlwZW9mKGkpKSByZXR1cm4gaTsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkBAdG9QcmltaXRpdmUgbXVzdCByZXR1cm4gYSBwcmltaXRpdmUgdmFsdWUuXCIpOyB9IHJldHVybiAoXCJzdHJpbmdcIiA9PT0gciA/IFN0cmluZyA6IE51bWJlcikodCk7IH1cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhhLCBuKSB7IGlmICghKGEgaW5zdGFuY2VvZiBuKSkgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfVxuZnVuY3Rpb24gX2NhbGxTdXBlcih0LCBvLCBlKSB7IHJldHVybiBvID0gX2dldFByb3RvdHlwZU9mKG8pLCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0LCBfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KCkgPyBSZWZsZWN0LmNvbnN0cnVjdChvLCBlIHx8IFtdLCBfZ2V0UHJvdG90eXBlT2YodCkuY29uc3RydWN0b3IpIDogby5hcHBseSh0LCBlKSk7IH1cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHQsIGUpIHsgaWYgKGUgJiYgKFwib2JqZWN0XCIgPT0gX3R5cGVvZihlKSB8fCBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIGUpKSByZXR1cm4gZTsgaWYgKHZvaWQgMCAhPT0gZSkgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkRlcml2ZWQgY29uc3RydWN0b3JzIG1heSBvbmx5IHJldHVybiBvYmplY3Qgb3IgdW5kZWZpbmVkXCIpOyByZXR1cm4gX2Fzc2VydFRoaXNJbml0aWFsaXplZCh0KTsgfVxuZnVuY3Rpb24gX2Fzc2VydFRoaXNJbml0aWFsaXplZChlKSB7IGlmICh2b2lkIDAgPT09IGUpIHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgcmV0dXJuIGU7IH1cbmZ1bmN0aW9uIF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKSB7IHRyeSB7IHZhciB0ID0gIUJvb2xlYW4ucHJvdG90eXBlLnZhbHVlT2YuY2FsbChSZWZsZWN0LmNvbnN0cnVjdChCb29sZWFuLCBbXSwgZnVuY3Rpb24gKCkge30pKTsgfSBjYXRjaCAodCkge30gcmV0dXJuIChfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0ID0gZnVuY3Rpb24gX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpIHsgcmV0dXJuICEhdDsgfSkoKTsgfVxuZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKHQpIHsgcmV0dXJuIF9nZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5nZXRQcm90b3R5cGVPZi5iaW5kKCkgOiBmdW5jdGlvbiAodCkgeyByZXR1cm4gdC5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKHQpOyB9LCBfZ2V0UHJvdG90eXBlT2YodCk7IH1cbmZ1bmN0aW9uIF9pbmhlcml0cyh0LCBlKSB7IGlmIChcImZ1bmN0aW9uXCIgIT0gdHlwZW9mIGUgJiYgbnVsbCAhPT0gZSkgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uXCIpOyB0LnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoZSAmJiBlLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogdCwgd3JpdGFibGU6ICEwLCBjb25maWd1cmFibGU6ICEwIH0gfSksIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LCBcInByb3RvdHlwZVwiLCB7IHdyaXRhYmxlOiAhMSB9KSwgZSAmJiBfc2V0UHJvdG90eXBlT2YodCwgZSk7IH1cbmZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZih0LCBlKSB7IHJldHVybiBfc2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2YuYmluZCgpIDogZnVuY3Rpb24gKHQsIGUpIHsgcmV0dXJuIHQuX19wcm90b19fID0gZSwgdDsgfSwgX3NldFByb3RvdHlwZU9mKHQsIGUpOyB9XG52YXIgRnJpZW5kYm90QnVpbGRlciA9IGV4cG9ydHMuRnJpZW5kYm90QnVpbGRlciA9IGZ1bmN0aW9uIChfQ2FsbEJ1aWxkZXIpIHtcbiAgZnVuY3Rpb24gRnJpZW5kYm90QnVpbGRlcihzZXJ2ZXJVcmwsIGFkZHJlc3MpIHtcbiAgICB2YXIgX3RoaXM7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEZyaWVuZGJvdEJ1aWxkZXIpO1xuICAgIF90aGlzID0gX2NhbGxTdXBlcih0aGlzLCBGcmllbmRib3RCdWlsZGVyLCBbc2VydmVyVXJsXSk7XG4gICAgX3RoaXMudXJsLnNlZ21lbnQoXCJmcmllbmRib3RcIik7XG4gICAgX3RoaXMudXJsLnNldFF1ZXJ5KFwiYWRkclwiLCBhZGRyZXNzKTtcbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cbiAgX2luaGVyaXRzKEZyaWVuZGJvdEJ1aWxkZXIsIF9DYWxsQnVpbGRlcik7XG4gIHJldHVybiBfY3JlYXRlQ2xhc3MoRnJpZW5kYm90QnVpbGRlcik7XG59KF9jYWxsX2J1aWxkZXIuQ2FsbEJ1aWxkZXIpOyJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@stellar/stellar-sdk/lib/horizon/friendbot_builder.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@stellar/stellar-sdk/lib/horizon/horizon_api.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@stellar/stellar-sdk/lib/horizon/horizon_api.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.HorizonApi = void 0;\nvar HorizonApi;\n(function (_HorizonApi) {\n  var LiquidityPoolType = function (LiquidityPoolType) {\n    LiquidityPoolType[\"constantProduct\"] = \"constant_product\";\n    return LiquidityPoolType;\n  }({});\n  _HorizonApi.LiquidityPoolType = LiquidityPoolType;\n  var OperationResponseType = function (OperationResponseType) {\n    OperationResponseType[\"createAccount\"] = \"create_account\";\n    OperationResponseType[\"payment\"] = \"payment\";\n    OperationResponseType[\"pathPayment\"] = \"path_payment_strict_receive\";\n    OperationResponseType[\"createPassiveOffer\"] = \"create_passive_sell_offer\";\n    OperationResponseType[\"manageOffer\"] = \"manage_sell_offer\";\n    OperationResponseType[\"setOptions\"] = \"set_options\";\n    OperationResponseType[\"changeTrust\"] = \"change_trust\";\n    OperationResponseType[\"allowTrust\"] = \"allow_trust\";\n    OperationResponseType[\"accountMerge\"] = \"account_merge\";\n    OperationResponseType[\"inflation\"] = \"inflation\";\n    OperationResponseType[\"manageData\"] = \"manage_data\";\n    OperationResponseType[\"bumpSequence\"] = \"bump_sequence\";\n    OperationResponseType[\"manageBuyOffer\"] = \"manage_buy_offer\";\n    OperationResponseType[\"pathPaymentStrictSend\"] = \"path_payment_strict_send\";\n    OperationResponseType[\"createClaimableBalance\"] = \"create_claimable_balance\";\n    OperationResponseType[\"claimClaimableBalance\"] = \"claim_claimable_balance\";\n    OperationResponseType[\"beginSponsoringFutureReserves\"] = \"begin_sponsoring_future_reserves\";\n    OperationResponseType[\"endSponsoringFutureReserves\"] = \"end_sponsoring_future_reserves\";\n    OperationResponseType[\"revokeSponsorship\"] = \"revoke_sponsorship\";\n    OperationResponseType[\"clawback\"] = \"clawback\";\n    OperationResponseType[\"clawbackClaimableBalance\"] = \"clawback_claimable_balance\";\n    OperationResponseType[\"setTrustLineFlags\"] = \"set_trust_line_flags\";\n    OperationResponseType[\"liquidityPoolDeposit\"] = \"liquidity_pool_deposit\";\n    OperationResponseType[\"liquidityPoolWithdraw\"] = \"liquidity_pool_withdraw\";\n    OperationResponseType[\"invokeHostFunction\"] = \"invoke_host_function\";\n    OperationResponseType[\"bumpFootprintExpiration\"] = \"bump_footprint_expiration\";\n    OperationResponseType[\"restoreFootprint\"] = \"restore_footprint\";\n    return OperationResponseType;\n  }({});\n  _HorizonApi.OperationResponseType = OperationResponseType;\n  var OperationResponseTypeI = function (OperationResponseTypeI) {\n    OperationResponseTypeI[OperationResponseTypeI[\"createAccount\"] = 0] = \"createAccount\";\n    OperationResponseTypeI[OperationResponseTypeI[\"payment\"] = 1] = \"payment\";\n    OperationResponseTypeI[OperationResponseTypeI[\"pathPayment\"] = 2] = \"pathPayment\";\n    OperationResponseTypeI[OperationResponseTypeI[\"createPassiveOffer\"] = 3] = \"createPassiveOffer\";\n    OperationResponseTypeI[OperationResponseTypeI[\"manageOffer\"] = 4] = \"manageOffer\";\n    OperationResponseTypeI[OperationResponseTypeI[\"setOptions\"] = 5] = \"setOptions\";\n    OperationResponseTypeI[OperationResponseTypeI[\"changeTrust\"] = 6] = \"changeTrust\";\n    OperationResponseTypeI[OperationResponseTypeI[\"allowTrust\"] = 7] = \"allowTrust\";\n    OperationResponseTypeI[OperationResponseTypeI[\"accountMerge\"] = 8] = \"accountMerge\";\n    OperationResponseTypeI[OperationResponseTypeI[\"inflation\"] = 9] = \"inflation\";\n    OperationResponseTypeI[OperationResponseTypeI[\"manageData\"] = 10] = \"manageData\";\n    OperationResponseTypeI[OperationResponseTypeI[\"bumpSequence\"] = 11] = \"bumpSequence\";\n    OperationResponseTypeI[OperationResponseTypeI[\"manageBuyOffer\"] = 12] = \"manageBuyOffer\";\n    OperationResponseTypeI[OperationResponseTypeI[\"pathPaymentStrictSend\"] = 13] = \"pathPaymentStrictSend\";\n    OperationResponseTypeI[OperationResponseTypeI[\"createClaimableBalance\"] = 14] = \"createClaimableBalance\";\n    OperationResponseTypeI[OperationResponseTypeI[\"claimClaimableBalance\"] = 15] = \"claimClaimableBalance\";\n    OperationResponseTypeI[OperationResponseTypeI[\"beginSponsoringFutureReserves\"] = 16] = \"beginSponsoringFutureReserves\";\n    OperationResponseTypeI[OperationResponseTypeI[\"endSponsoringFutureReserves\"] = 17] = \"endSponsoringFutureReserves\";\n    OperationResponseTypeI[OperationResponseTypeI[\"revokeSponsorship\"] = 18] = \"revokeSponsorship\";\n    OperationResponseTypeI[OperationResponseTypeI[\"clawback\"] = 19] = \"clawback\";\n    OperationResponseTypeI[OperationResponseTypeI[\"clawbackClaimableBalance\"] = 20] = \"clawbackClaimableBalance\";\n    OperationResponseTypeI[OperationResponseTypeI[\"setTrustLineFlags\"] = 21] = \"setTrustLineFlags\";\n    OperationResponseTypeI[OperationResponseTypeI[\"liquidityPoolDeposit\"] = 22] = \"liquidityPoolDeposit\";\n    OperationResponseTypeI[OperationResponseTypeI[\"liquidityPoolWithdraw\"] = 23] = \"liquidityPoolWithdraw\";\n    OperationResponseTypeI[OperationResponseTypeI[\"invokeHostFunction\"] = 24] = \"invokeHostFunction\";\n    OperationResponseTypeI[OperationResponseTypeI[\"bumpFootprintExpiration\"] = 25] = \"bumpFootprintExpiration\";\n    OperationResponseTypeI[OperationResponseTypeI[\"restoreFootprint\"] = 26] = \"restoreFootprint\";\n    return OperationResponseTypeI;\n  }({});\n  _HorizonApi.OperationResponseTypeI = OperationResponseTypeI;\n  ;\n  var TransactionFailedResultCodes = function (TransactionFailedResultCodes) {\n    TransactionFailedResultCodes[\"TX_FAILED\"] = \"tx_failed\";\n    TransactionFailedResultCodes[\"TX_BAD_SEQ\"] = \"tx_bad_seq\";\n    TransactionFailedResultCodes[\"TX_BAD_AUTH\"] = \"tx_bad_auth\";\n    TransactionFailedResultCodes[\"TX_BAD_AUTH_EXTRA\"] = \"tx_bad_auth_extra\";\n    TransactionFailedResultCodes[\"TX_FEE_BUMP_INNER_SUCCESS\"] = \"tx_fee_bump_inner_success\";\n    TransactionFailedResultCodes[\"TX_FEE_BUMP_INNER_FAILED\"] = \"tx_fee_bump_inner_failed\";\n    TransactionFailedResultCodes[\"TX_NOT_SUPPORTED\"] = \"tx_not_supported\";\n    TransactionFailedResultCodes[\"TX_SUCCESS\"] = \"tx_success\";\n    TransactionFailedResultCodes[\"TX_TOO_EARLY\"] = \"tx_too_early\";\n    TransactionFailedResultCodes[\"TX_TOO_LATE\"] = \"tx_too_late\";\n    TransactionFailedResultCodes[\"TX_MISSING_OPERATION\"] = \"tx_missing_operation\";\n    TransactionFailedResultCodes[\"TX_INSUFFICIENT_BALANCE\"] = \"tx_insufficient_balance\";\n    TransactionFailedResultCodes[\"TX_NO_SOURCE_ACCOUNT\"] = \"tx_no_source_account\";\n    TransactionFailedResultCodes[\"TX_INSUFFICIENT_FEE\"] = \"tx_insufficient_fee\";\n    TransactionFailedResultCodes[\"TX_INTERNAL_ERROR\"] = \"tx_internal_error\";\n    return TransactionFailedResultCodes;\n  }({});\n  _HorizonApi.TransactionFailedResultCodes = TransactionFailedResultCodes;\n})(HorizonApi || (exports.HorizonApi = HorizonApi = {}));//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@stellar/stellar-sdk/lib/horizon/horizon_api.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@stellar/stellar-sdk/lib/horizon/horizon_axios_client.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@stellar/stellar-sdk/lib/horizon/horizon_axios_client.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports[\"default\"] = exports.SERVER_TIME_MAP = exports.AxiosClient = void 0;\nexports.getCurrentServerTime = getCurrentServerTime;\nexports.version = void 0;\nvar _urijs = _interopRequireDefault(__webpack_require__(/*! urijs */ \"(ssr)/./node_modules/urijs/src/URI.js\"));\nvar _httpClient = __webpack_require__(/*! ../http-client */ \"(ssr)/./node_modules/@stellar/stellar-sdk/lib/http-client/index.js\");\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nvar version = exports.version = \"13.3.0\";\nvar SERVER_TIME_MAP = exports.SERVER_TIME_MAP = {};\nvar AxiosClient = exports.AxiosClient = (0, _httpClient.create)({\n  headers: {\n    \"X-Client-Name\": \"js-stellar-sdk\",\n    \"X-Client-Version\": version\n  }\n});\nfunction toSeconds(ms) {\n  return Math.floor(ms / 1000);\n}\nAxiosClient.interceptors.response.use(function (response) {\n  var hostname = (0, _urijs.default)(response.config.url).hostname();\n  var serverTime = 0;\n  if (response.headers instanceof Headers) {\n    var dateHeader = response.headers.get('date');\n    if (dateHeader) {\n      serverTime = toSeconds(Date.parse(dateHeader));\n    }\n  } else if (_typeof(response.headers) === 'object' && 'date' in response.headers) {\n    var headers = response.headers;\n    if (typeof headers.date === 'string') {\n      serverTime = toSeconds(Date.parse(headers.date));\n    }\n  }\n  var localTimeRecorded = toSeconds(new Date().getTime());\n  if (!Number.isNaN(serverTime)) {\n    SERVER_TIME_MAP[hostname] = {\n      serverTime: serverTime,\n      localTimeRecorded: localTimeRecorded\n    };\n  }\n  return response;\n});\nvar _default = exports[\"default\"] = AxiosClient;\nfunction getCurrentServerTime(hostname) {\n  var entry = SERVER_TIME_MAP[hostname];\n  if (!entry || !entry.localTimeRecorded || !entry.serverTime) {\n    return null;\n  }\n  var serverTime = entry.serverTime,\n    localTimeRecorded = entry.localTimeRecorded;\n  var currentTime = toSeconds(new Date().getTime());\n  if (currentTime - localTimeRecorded > 60 * 5) {\n    return null;\n  }\n  return currentTime - localTimeRecorded + serverTime;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHN0ZWxsYXIvc3RlbGxhci1zZGsvbGliL2hvcml6b24vaG9yaXpvbl9heGlvc19jbGllbnQuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsOENBQTZDO0FBQzdDO0FBQ0EsQ0FBQyxFQUFDO0FBQ0Ysa0JBQWUsR0FBRyx1QkFBdUIsR0FBRyxtQkFBbUI7QUFDL0QsNEJBQTRCO0FBQzVCLGVBQWU7QUFDZixvQ0FBb0MsbUJBQU8sQ0FBQyxvREFBTztBQUNuRCxrQkFBa0IsbUJBQU8sQ0FBQywwRkFBZ0I7QUFDMUMscUNBQXFDLGlDQUFpQztBQUN0RSxzQkFBc0IsMkJBQTJCLG9HQUFvRyxtQkFBbUIsaUJBQWlCLHNIQUFzSDtBQUMvUyxjQUFjLGVBQWU7QUFDN0Isc0JBQXNCLHVCQUF1QjtBQUM3QyxrQkFBa0IsbUJBQW1CO0FBQ3JDO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0QsZUFBZSxrQkFBZTtBQUM5QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxVU1VBUklPXFxEb2N1bWVudHNcXEdpdGh1YlxcR2FsYXh5S0otd2FsbGV0LS0tSGFja1xcd2ViXFxub2RlX21vZHVsZXNcXEBzdGVsbGFyXFxzdGVsbGFyLXNka1xcbGliXFxob3Jpem9uXFxob3Jpem9uX2F4aW9zX2NsaWVudC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGV4cG9ydHMuU0VSVkVSX1RJTUVfTUFQID0gZXhwb3J0cy5BeGlvc0NsaWVudCA9IHZvaWQgMDtcbmV4cG9ydHMuZ2V0Q3VycmVudFNlcnZlclRpbWUgPSBnZXRDdXJyZW50U2VydmVyVGltZTtcbmV4cG9ydHMudmVyc2lvbiA9IHZvaWQgMDtcbnZhciBfdXJpanMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJ1cmlqc1wiKSk7XG52YXIgX2h0dHBDbGllbnQgPSByZXF1aXJlKFwiLi4vaHR0cC1jbGllbnRcIik7XG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KGUpIHsgcmV0dXJuIGUgJiYgZS5fX2VzTW9kdWxlID8gZSA6IHsgZGVmYXVsdDogZSB9OyB9XG5mdW5jdGlvbiBfdHlwZW9mKG8pIHsgXCJAYmFiZWwvaGVscGVycyAtIHR5cGVvZlwiOyByZXR1cm4gX3R5cGVvZiA9IFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgU3ltYm9sICYmIFwic3ltYm9sXCIgPT0gdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA/IGZ1bmN0aW9uIChvKSB7IHJldHVybiB0eXBlb2YgbzsgfSA6IGZ1bmN0aW9uIChvKSB7IHJldHVybiBvICYmIFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgU3ltYm9sICYmIG8uY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvOyB9LCBfdHlwZW9mKG8pOyB9XG52YXIgdmVyc2lvbiA9IGV4cG9ydHMudmVyc2lvbiA9IFwiMTMuMy4wXCI7XG52YXIgU0VSVkVSX1RJTUVfTUFQID0gZXhwb3J0cy5TRVJWRVJfVElNRV9NQVAgPSB7fTtcbnZhciBBeGlvc0NsaWVudCA9IGV4cG9ydHMuQXhpb3NDbGllbnQgPSAoMCwgX2h0dHBDbGllbnQuY3JlYXRlKSh7XG4gIGhlYWRlcnM6IHtcbiAgICBcIlgtQ2xpZW50LU5hbWVcIjogXCJqcy1zdGVsbGFyLXNka1wiLFxuICAgIFwiWC1DbGllbnQtVmVyc2lvblwiOiB2ZXJzaW9uXG4gIH1cbn0pO1xuZnVuY3Rpb24gdG9TZWNvbmRzKG1zKSB7XG4gIHJldHVybiBNYXRoLmZsb29yKG1zIC8gMTAwMCk7XG59XG5BeGlvc0NsaWVudC5pbnRlcmNlcHRvcnMucmVzcG9uc2UudXNlKGZ1bmN0aW9uIChyZXNwb25zZSkge1xuICB2YXIgaG9zdG5hbWUgPSAoMCwgX3VyaWpzLmRlZmF1bHQpKHJlc3BvbnNlLmNvbmZpZy51cmwpLmhvc3RuYW1lKCk7XG4gIHZhciBzZXJ2ZXJUaW1lID0gMDtcbiAgaWYgKHJlc3BvbnNlLmhlYWRlcnMgaW5zdGFuY2VvZiBIZWFkZXJzKSB7XG4gICAgdmFyIGRhdGVIZWFkZXIgPSByZXNwb25zZS5oZWFkZXJzLmdldCgnZGF0ZScpO1xuICAgIGlmIChkYXRlSGVhZGVyKSB7XG4gICAgICBzZXJ2ZXJUaW1lID0gdG9TZWNvbmRzKERhdGUucGFyc2UoZGF0ZUhlYWRlcikpO1xuICAgIH1cbiAgfSBlbHNlIGlmIChfdHlwZW9mKHJlc3BvbnNlLmhlYWRlcnMpID09PSAnb2JqZWN0JyAmJiAnZGF0ZScgaW4gcmVzcG9uc2UuaGVhZGVycykge1xuICAgIHZhciBoZWFkZXJzID0gcmVzcG9uc2UuaGVhZGVycztcbiAgICBpZiAodHlwZW9mIGhlYWRlcnMuZGF0ZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHNlcnZlclRpbWUgPSB0b1NlY29uZHMoRGF0ZS5wYXJzZShoZWFkZXJzLmRhdGUpKTtcbiAgICB9XG4gIH1cbiAgdmFyIGxvY2FsVGltZVJlY29yZGVkID0gdG9TZWNvbmRzKG5ldyBEYXRlKCkuZ2V0VGltZSgpKTtcbiAgaWYgKCFOdW1iZXIuaXNOYU4oc2VydmVyVGltZSkpIHtcbiAgICBTRVJWRVJfVElNRV9NQVBbaG9zdG5hbWVdID0ge1xuICAgICAgc2VydmVyVGltZTogc2VydmVyVGltZSxcbiAgICAgIGxvY2FsVGltZVJlY29yZGVkOiBsb2NhbFRpbWVSZWNvcmRlZFxuICAgIH07XG4gIH1cbiAgcmV0dXJuIHJlc3BvbnNlO1xufSk7XG52YXIgX2RlZmF1bHQgPSBleHBvcnRzLmRlZmF1bHQgPSBBeGlvc0NsaWVudDtcbmZ1bmN0aW9uIGdldEN1cnJlbnRTZXJ2ZXJUaW1lKGhvc3RuYW1lKSB7XG4gIHZhciBlbnRyeSA9IFNFUlZFUl9USU1FX01BUFtob3N0bmFtZV07XG4gIGlmICghZW50cnkgfHwgIWVudHJ5LmxvY2FsVGltZVJlY29yZGVkIHx8ICFlbnRyeS5zZXJ2ZXJUaW1lKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgdmFyIHNlcnZlclRpbWUgPSBlbnRyeS5zZXJ2ZXJUaW1lLFxuICAgIGxvY2FsVGltZVJlY29yZGVkID0gZW50cnkubG9jYWxUaW1lUmVjb3JkZWQ7XG4gIHZhciBjdXJyZW50VGltZSA9IHRvU2Vjb25kcyhuZXcgRGF0ZSgpLmdldFRpbWUoKSk7XG4gIGlmIChjdXJyZW50VGltZSAtIGxvY2FsVGltZVJlY29yZGVkID4gNjAgKiA1KSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgcmV0dXJuIGN1cnJlbnRUaW1lIC0gbG9jYWxUaW1lUmVjb3JkZWQgKyBzZXJ2ZXJUaW1lO1xufSJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@stellar/stellar-sdk/lib/horizon/horizon_axios_client.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@stellar/stellar-sdk/lib/horizon/index.js":
/*!****************************************************************!*\
  !*** ./node_modules/@stellar/stellar-sdk/lib/horizon/index.js ***!
  \****************************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("\n\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nvar _exportNames = {\n  Server: true,\n  AxiosClient: true,\n  SERVER_TIME_MAP: true,\n  getCurrentServerTime: true\n};\nObject.defineProperty(exports, \"AxiosClient\", ({\n  enumerable: true,\n  get: function get() {\n    return _horizon_axios_client.default;\n  }\n}));\nObject.defineProperty(exports, \"SERVER_TIME_MAP\", ({\n  enumerable: true,\n  get: function get() {\n    return _horizon_axios_client.SERVER_TIME_MAP;\n  }\n}));\nObject.defineProperty(exports, \"Server\", ({\n  enumerable: true,\n  get: function get() {\n    return _server.HorizonServer;\n  }\n}));\nexports[\"default\"] = void 0;\nObject.defineProperty(exports, \"getCurrentServerTime\", ({\n  enumerable: true,\n  get: function get() {\n    return _horizon_axios_client.getCurrentServerTime;\n  }\n}));\nvar _horizon_api = __webpack_require__(/*! ./horizon_api */ \"(ssr)/./node_modules/@stellar/stellar-sdk/lib/horizon/horizon_api.js\");\nObject.keys(_horizon_api).forEach(function (key) {\n  if (key === \"default\" || key === \"__esModule\") return;\n  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;\n  if (key in exports && exports[key] === _horizon_api[key]) return;\n  Object.defineProperty(exports, key, {\n    enumerable: true,\n    get: function get() {\n      return _horizon_api[key];\n    }\n  });\n});\nvar _server_api = __webpack_require__(/*! ./server_api */ \"(ssr)/./node_modules/@stellar/stellar-sdk/lib/horizon/server_api.js\");\nObject.keys(_server_api).forEach(function (key) {\n  if (key === \"default\" || key === \"__esModule\") return;\n  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;\n  if (key in exports && exports[key] === _server_api[key]) return;\n  Object.defineProperty(exports, key, {\n    enumerable: true,\n    get: function get() {\n      return _server_api[key];\n    }\n  });\n});\nvar _account_response = __webpack_require__(/*! ./account_response */ \"(ssr)/./node_modules/@stellar/stellar-sdk/lib/horizon/account_response.js\");\nObject.keys(_account_response).forEach(function (key) {\n  if (key === \"default\" || key === \"__esModule\") return;\n  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;\n  if (key in exports && exports[key] === _account_response[key]) return;\n  Object.defineProperty(exports, key, {\n    enumerable: true,\n    get: function get() {\n      return _account_response[key];\n    }\n  });\n});\nvar _server = __webpack_require__(/*! ./server */ \"(ssr)/./node_modules/@stellar/stellar-sdk/lib/horizon/server.js\");\nvar _horizon_axios_client = _interopRequireWildcard(__webpack_require__(/*! ./horizon_axios_client */ \"(ssr)/./node_modules/@stellar/stellar-sdk/lib/horizon/horizon_axios_client.js\"));\nfunction _getRequireWildcardCache(e) { if (\"function\" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }\nfunction _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || \"object\" != _typeof(e) && \"function\" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if (\"default\" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }\nvar _default = exports[\"default\"] = module.exports;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHN0ZWxsYXIvc3RlbGxhci1zZGsvbGliL2hvcml6b24vaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsc0JBQXNCLDJCQUEyQixvR0FBb0csbUJBQW1CLGlCQUFpQixzSEFBc0g7QUFDL1MsOENBQTZDO0FBQzdDO0FBQ0EsQ0FBQyxFQUFDO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0NBQThDO0FBQzlDO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQyxFQUFDO0FBQ0YsbURBQWtEO0FBQ2xEO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQyxFQUFDO0FBQ0YsMENBQXlDO0FBQ3pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQyxFQUFDO0FBQ0Ysa0JBQWU7QUFDZix3REFBdUQ7QUFDdkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRixtQkFBbUIsbUJBQU8sQ0FBQywyRkFBZTtBQUMxQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0gsQ0FBQztBQUNELGtCQUFrQixtQkFBTyxDQUFDLHlGQUFjO0FBQ3hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSCxDQUFDO0FBQ0Qsd0JBQXdCLG1CQUFPLENBQUMscUdBQW9CO0FBQ3BEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSCxDQUFDO0FBQ0QsY0FBYyxtQkFBTyxDQUFDLGlGQUFVO0FBQ2hDLG9EQUFvRCxtQkFBTyxDQUFDLDZHQUF3QjtBQUNwRix1Q0FBdUMsK0NBQStDLDBDQUEwQywwRUFBMEUsbUJBQW1CO0FBQzdOLHlDQUF5Qyx1Q0FBdUMsNkVBQTZFLGNBQWMscUNBQXFDLG9DQUFvQyxVQUFVLGlCQUFpQixnRUFBZ0UsMENBQTBDLDhCQUE4QiwwREFBMEQsd0VBQXdFO0FBQ3poQixlQUFlLGtCQUFlIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXFVTVUFSSU9cXERvY3VtZW50c1xcR2l0aHViXFxHYWxheHlLSi13YWxsZXQtLS1IYWNrXFx3ZWJcXG5vZGVfbW9kdWxlc1xcQHN0ZWxsYXJcXHN0ZWxsYXItc2RrXFxsaWJcXGhvcml6b25cXGluZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5mdW5jdGlvbiBfdHlwZW9mKG8pIHsgXCJAYmFiZWwvaGVscGVycyAtIHR5cGVvZlwiOyByZXR1cm4gX3R5cGVvZiA9IFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgU3ltYm9sICYmIFwic3ltYm9sXCIgPT0gdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA/IGZ1bmN0aW9uIChvKSB7IHJldHVybiB0eXBlb2YgbzsgfSA6IGZ1bmN0aW9uIChvKSB7IHJldHVybiBvICYmIFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgU3ltYm9sICYmIG8uY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvOyB9LCBfdHlwZW9mKG8pOyB9XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xudmFyIF9leHBvcnROYW1lcyA9IHtcbiAgU2VydmVyOiB0cnVlLFxuICBBeGlvc0NsaWVudDogdHJ1ZSxcbiAgU0VSVkVSX1RJTUVfTUFQOiB0cnVlLFxuICBnZXRDdXJyZW50U2VydmVyVGltZTogdHJ1ZVxufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIkF4aW9zQ2xpZW50XCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIF9ob3Jpem9uX2F4aW9zX2NsaWVudC5kZWZhdWx0O1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIlNFUlZFUl9USU1FX01BUFwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBfaG9yaXpvbl9heGlvc19jbGllbnQuU0VSVkVSX1RJTUVfTUFQO1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIlNlcnZlclwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBfc2VydmVyLkhvcml6b25TZXJ2ZXI7XG4gIH1cbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiZ2V0Q3VycmVudFNlcnZlclRpbWVcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gX2hvcml6b25fYXhpb3NfY2xpZW50LmdldEN1cnJlbnRTZXJ2ZXJUaW1lO1xuICB9XG59KTtcbnZhciBfaG9yaXpvbl9hcGkgPSByZXF1aXJlKFwiLi9ob3Jpem9uX2FwaVwiKTtcbk9iamVjdC5rZXlzKF9ob3Jpem9uX2FwaSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gIGlmIChrZXkgPT09IFwiZGVmYXVsdFwiIHx8IGtleSA9PT0gXCJfX2VzTW9kdWxlXCIpIHJldHVybjtcbiAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChfZXhwb3J0TmFtZXMsIGtleSkpIHJldHVybjtcbiAgaWYgKGtleSBpbiBleHBvcnRzICYmIGV4cG9ydHNba2V5XSA9PT0gX2hvcml6b25fYXBpW2tleV0pIHJldHVybjtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIGtleSwge1xuICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gX2hvcml6b25fYXBpW2tleV07XG4gICAgfVxuICB9KTtcbn0pO1xudmFyIF9zZXJ2ZXJfYXBpID0gcmVxdWlyZShcIi4vc2VydmVyX2FwaVwiKTtcbk9iamVjdC5rZXlzKF9zZXJ2ZXJfYXBpKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgaWYgKGtleSA9PT0gXCJkZWZhdWx0XCIgfHwga2V5ID09PSBcIl9fZXNNb2R1bGVcIikgcmV0dXJuO1xuICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKF9leHBvcnROYW1lcywga2V5KSkgcmV0dXJuO1xuICBpZiAoa2V5IGluIGV4cG9ydHMgJiYgZXhwb3J0c1trZXldID09PSBfc2VydmVyX2FwaVtrZXldKSByZXR1cm47XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBrZXksIHtcbiAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIF9zZXJ2ZXJfYXBpW2tleV07XG4gICAgfVxuICB9KTtcbn0pO1xudmFyIF9hY2NvdW50X3Jlc3BvbnNlID0gcmVxdWlyZShcIi4vYWNjb3VudF9yZXNwb25zZVwiKTtcbk9iamVjdC5rZXlzKF9hY2NvdW50X3Jlc3BvbnNlKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgaWYgKGtleSA9PT0gXCJkZWZhdWx0XCIgfHwga2V5ID09PSBcIl9fZXNNb2R1bGVcIikgcmV0dXJuO1xuICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKF9leHBvcnROYW1lcywga2V5KSkgcmV0dXJuO1xuICBpZiAoa2V5IGluIGV4cG9ydHMgJiYgZXhwb3J0c1trZXldID09PSBfYWNjb3VudF9yZXNwb25zZVtrZXldKSByZXR1cm47XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBrZXksIHtcbiAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIF9hY2NvdW50X3Jlc3BvbnNlW2tleV07XG4gICAgfVxuICB9KTtcbn0pO1xudmFyIF9zZXJ2ZXIgPSByZXF1aXJlKFwiLi9zZXJ2ZXJcIik7XG52YXIgX2hvcml6b25fYXhpb3NfY2xpZW50ID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQocmVxdWlyZShcIi4vaG9yaXpvbl9heGlvc19jbGllbnRcIikpO1xuZnVuY3Rpb24gX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlKGUpIHsgaWYgKFwiZnVuY3Rpb25cIiAhPSB0eXBlb2YgV2Vha01hcCkgcmV0dXJuIG51bGw7IHZhciByID0gbmV3IFdlYWtNYXAoKSwgdCA9IG5ldyBXZWFrTWFwKCk7IHJldHVybiAoX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlID0gZnVuY3Rpb24gX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlKGUpIHsgcmV0dXJuIGUgPyB0IDogcjsgfSkoZSk7IH1cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKGUsIHIpIHsgaWYgKCFyICYmIGUgJiYgZS5fX2VzTW9kdWxlKSByZXR1cm4gZTsgaWYgKG51bGwgPT09IGUgfHwgXCJvYmplY3RcIiAhPSBfdHlwZW9mKGUpICYmIFwiZnVuY3Rpb25cIiAhPSB0eXBlb2YgZSkgcmV0dXJuIHsgZGVmYXVsdDogZSB9OyB2YXIgdCA9IF9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZShyKTsgaWYgKHQgJiYgdC5oYXMoZSkpIHJldHVybiB0LmdldChlKTsgdmFyIG4gPSB7IF9fcHJvdG9fXzogbnVsbCB9LCBhID0gT2JqZWN0LmRlZmluZVByb3BlcnR5ICYmIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7IGZvciAodmFyIHUgaW4gZSkgaWYgKFwiZGVmYXVsdFwiICE9PSB1ICYmIHt9Lmhhc093blByb3BlcnR5LmNhbGwoZSwgdSkpIHsgdmFyIGkgPSBhID8gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihlLCB1KSA6IG51bGw7IGkgJiYgKGkuZ2V0IHx8IGkuc2V0KSA/IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShuLCB1LCBpKSA6IG5bdV0gPSBlW3VdOyB9IHJldHVybiBuLmRlZmF1bHQgPSBlLCB0ICYmIHQuc2V0KGUsIG4pLCBuOyB9XG52YXIgX2RlZmF1bHQgPSBleHBvcnRzLmRlZmF1bHQgPSBtb2R1bGUuZXhwb3J0czsiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@stellar/stellar-sdk/lib/horizon/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@stellar/stellar-sdk/lib/horizon/ledger_call_builder.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@stellar/stellar-sdk/lib/horizon/ledger_call_builder.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.LedgerCallBuilder = void 0;\nvar _call_builder = __webpack_require__(/*! ./call_builder */ \"(ssr)/./node_modules/@stellar/stellar-sdk/lib/horizon/call_builder.js\");\nfunction _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\nfunction _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }\nfunction _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nfunction _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }\nfunction _possibleConstructorReturn(t, e) { if (e && (\"object\" == _typeof(e) || \"function\" == typeof e)) return e; if (void 0 !== e) throw new TypeError(\"Derived constructors may only return object or undefined\"); return _assertThisInitialized(t); }\nfunction _assertThisInitialized(e) { if (void 0 === e) throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); return e; }\nfunction _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }\nfunction _getPrototypeOf(t) { return _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function (t) { return t.__proto__ || Object.getPrototypeOf(t); }, _getPrototypeOf(t); }\nfunction _inherits(t, e) { if (\"function\" != typeof e && null !== e) throw new TypeError(\"Super expression must either be null or a function\"); t.prototype = Object.create(e && e.prototype, { constructor: { value: t, writable: !0, configurable: !0 } }), Object.defineProperty(t, \"prototype\", { writable: !1 }), e && _setPrototypeOf(t, e); }\nfunction _setPrototypeOf(t, e) { return _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function (t, e) { return t.__proto__ = e, t; }, _setPrototypeOf(t, e); }\nvar LedgerCallBuilder = exports.LedgerCallBuilder = function (_CallBuilder) {\n  function LedgerCallBuilder(serverUrl) {\n    var _this;\n    _classCallCheck(this, LedgerCallBuilder);\n    _this = _callSuper(this, LedgerCallBuilder, [serverUrl]);\n    _this.url.segment(\"ledgers\");\n    return _this;\n  }\n  _inherits(LedgerCallBuilder, _CallBuilder);\n  return _createClass(LedgerCallBuilder, [{\n    key: \"ledger\",\n    value: function ledger(sequence) {\n      this.filter.push([\"ledgers\", sequence.toString()]);\n      return this;\n    }\n  }]);\n}(_call_builder.CallBuilder);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHN0ZWxsYXIvc3RlbGxhci1zZGsvbGliL2hvcml6b24vbGVkZ2VyX2NhbGxfYnVpbGRlci5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYixzQkFBc0IsMkJBQTJCLG9HQUFvRyxtQkFBbUIsaUJBQWlCLHNIQUFzSDtBQUMvUyw4Q0FBNkM7QUFDN0M7QUFDQSxDQUFDLEVBQUM7QUFDRix5QkFBeUI7QUFDekIsb0JBQW9CLG1CQUFPLENBQUMsNkZBQWdCO0FBQzVDLGlDQUFpQztBQUNqQyxtQ0FBbUMsZ0JBQWdCLGNBQWMsT0FBTyxjQUFjO0FBQ3RGLGlDQUFpQyxxSEFBcUgsY0FBYztBQUNwSyw2QkFBNkIsbUNBQW1DO0FBQ2hFLDhCQUE4Qiw0Q0FBNEMsK0JBQStCLG9CQUFvQixtQ0FBbUMsc0NBQXNDLHVFQUF1RTtBQUM3USwrQkFBK0I7QUFDL0IsNENBQTRDLHVFQUF1RSxtR0FBbUc7QUFDdE4scUNBQXFDLHlHQUF5RztBQUM5SSx1Q0FBdUMsTUFBTSxxRkFBcUYsTUFBTSxhQUFhLDJFQUEyRSxhQUFhO0FBQzdPLDhCQUE4QiwrRkFBK0YsaURBQWlEO0FBQzlLLDJCQUEyQixxSEFBcUgsZ0RBQWdELGVBQWUsNENBQTRDLDJDQUEyQyxjQUFjO0FBQ3BULGlDQUFpQyxrR0FBa0csNEJBQTRCO0FBQy9KLHdCQUF3Qix5QkFBeUI7QUFDakQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSCxDQUFDIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXFVTVUFSSU9cXERvY3VtZW50c1xcR2l0aHViXFxHYWxheHlLSi13YWxsZXQtLS1IYWNrXFx3ZWJcXG5vZGVfbW9kdWxlc1xcQHN0ZWxsYXJcXHN0ZWxsYXItc2RrXFxsaWJcXGhvcml6b25cXGxlZGdlcl9jYWxsX2J1aWxkZXIuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmZ1bmN0aW9uIF90eXBlb2YobykgeyBcIkBiYWJlbC9oZWxwZXJzIC0gdHlwZW9mXCI7IHJldHVybiBfdHlwZW9mID0gXCJmdW5jdGlvblwiID09IHR5cGVvZiBTeW1ib2wgJiYgXCJzeW1ib2xcIiA9PSB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID8gZnVuY3Rpb24gKG8pIHsgcmV0dXJuIHR5cGVvZiBvOyB9IDogZnVuY3Rpb24gKG8pIHsgcmV0dXJuIG8gJiYgXCJmdW5jdGlvblwiID09IHR5cGVvZiBTeW1ib2wgJiYgby5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG8gIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG87IH0sIF90eXBlb2Yobyk7IH1cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLkxlZGdlckNhbGxCdWlsZGVyID0gdm9pZCAwO1xudmFyIF9jYWxsX2J1aWxkZXIgPSByZXF1aXJlKFwiLi9jYWxsX2J1aWxkZXJcIik7XG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soYSwgbikgeyBpZiAoIShhIGluc3RhbmNlb2YgbikpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH1cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKGUsIHIpIHsgZm9yICh2YXIgdCA9IDA7IHQgPCByLmxlbmd0aDsgdCsrKSB7IHZhciBvID0gclt0XTsgby5lbnVtZXJhYmxlID0gby5lbnVtZXJhYmxlIHx8ICExLCBvLmNvbmZpZ3VyYWJsZSA9ICEwLCBcInZhbHVlXCIgaW4gbyAmJiAoby53cml0YWJsZSA9ICEwKSwgT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsIF90b1Byb3BlcnR5S2V5KG8ua2V5KSwgbyk7IH0gfVxuZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKGUsIHIsIHQpIHsgcmV0dXJuIHIgJiYgX2RlZmluZVByb3BlcnRpZXMoZS5wcm90b3R5cGUsIHIpLCB0ICYmIF9kZWZpbmVQcm9wZXJ0aWVzKGUsIHQpLCBPYmplY3QuZGVmaW5lUHJvcGVydHkoZSwgXCJwcm90b3R5cGVcIiwgeyB3cml0YWJsZTogITEgfSksIGU7IH1cbmZ1bmN0aW9uIF90b1Byb3BlcnR5S2V5KHQpIHsgdmFyIGkgPSBfdG9QcmltaXRpdmUodCwgXCJzdHJpbmdcIik7IHJldHVybiBcInN5bWJvbFwiID09IF90eXBlb2YoaSkgPyBpIDogaSArIFwiXCI7IH1cbmZ1bmN0aW9uIF90b1ByaW1pdGl2ZSh0LCByKSB7IGlmIChcIm9iamVjdFwiICE9IF90eXBlb2YodCkgfHwgIXQpIHJldHVybiB0OyB2YXIgZSA9IHRbU3ltYm9sLnRvUHJpbWl0aXZlXTsgaWYgKHZvaWQgMCAhPT0gZSkgeyB2YXIgaSA9IGUuY2FsbCh0LCByIHx8IFwiZGVmYXVsdFwiKTsgaWYgKFwib2JqZWN0XCIgIT0gX3R5cGVvZihpKSkgcmV0dXJuIGk7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJAQHRvUHJpbWl0aXZlIG11c3QgcmV0dXJuIGEgcHJpbWl0aXZlIHZhbHVlLlwiKTsgfSByZXR1cm4gKFwic3RyaW5nXCIgPT09IHIgPyBTdHJpbmcgOiBOdW1iZXIpKHQpOyB9XG5mdW5jdGlvbiBfY2FsbFN1cGVyKHQsIG8sIGUpIHsgcmV0dXJuIG8gPSBfZ2V0UHJvdG90eXBlT2YobyksIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHQsIF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKSA/IFJlZmxlY3QuY29uc3RydWN0KG8sIGUgfHwgW10sIF9nZXRQcm90b3R5cGVPZih0KS5jb25zdHJ1Y3RvcikgOiBvLmFwcGx5KHQsIGUpKTsgfVxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odCwgZSkgeyBpZiAoZSAmJiAoXCJvYmplY3RcIiA9PSBfdHlwZW9mKGUpIHx8IFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgZSkpIHJldHVybiBlOyBpZiAodm9pZCAwICE9PSBlKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiRGVyaXZlZCBjb25zdHJ1Y3RvcnMgbWF5IG9ubHkgcmV0dXJuIG9iamVjdCBvciB1bmRlZmluZWRcIik7IHJldHVybiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHQpOyB9XG5mdW5jdGlvbiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKGUpIHsgaWYgKHZvaWQgMCA9PT0gZSkgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyByZXR1cm4gZTsgfVxuZnVuY3Rpb24gX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpIHsgdHJ5IHsgdmFyIHQgPSAhQm9vbGVhbi5wcm90b3R5cGUudmFsdWVPZi5jYWxsKFJlZmxlY3QuY29uc3RydWN0KEJvb2xlYW4sIFtdLCBmdW5jdGlvbiAoKSB7fSkpOyB9IGNhdGNoICh0KSB7fSByZXR1cm4gKF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QgPSBmdW5jdGlvbiBfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KCkgeyByZXR1cm4gISF0OyB9KSgpOyB9XG5mdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2YodCkgeyByZXR1cm4gX2dldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LmdldFByb3RvdHlwZU9mLmJpbmQoKSA6IGZ1bmN0aW9uICh0KSB7IHJldHVybiB0Ll9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YodCk7IH0sIF9nZXRQcm90b3R5cGVPZih0KTsgfVxuZnVuY3Rpb24gX2luaGVyaXRzKHQsIGUpIHsgaWYgKFwiZnVuY3Rpb25cIiAhPSB0eXBlb2YgZSAmJiBudWxsICE9PSBlKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb25cIik7IHQucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShlICYmIGUucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiB0LCB3cml0YWJsZTogITAsIGNvbmZpZ3VyYWJsZTogITAgfSB9KSwgT2JqZWN0LmRlZmluZVByb3BlcnR5KHQsIFwicHJvdG90eXBlXCIsIHsgd3JpdGFibGU6ICExIH0pLCBlICYmIF9zZXRQcm90b3R5cGVPZih0LCBlKTsgfVxuZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKHQsIGUpIHsgcmV0dXJuIF9zZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZi5iaW5kKCkgOiBmdW5jdGlvbiAodCwgZSkgeyByZXR1cm4gdC5fX3Byb3RvX18gPSBlLCB0OyB9LCBfc2V0UHJvdG90eXBlT2YodCwgZSk7IH1cbnZhciBMZWRnZXJDYWxsQnVpbGRlciA9IGV4cG9ydHMuTGVkZ2VyQ2FsbEJ1aWxkZXIgPSBmdW5jdGlvbiAoX0NhbGxCdWlsZGVyKSB7XG4gIGZ1bmN0aW9uIExlZGdlckNhbGxCdWlsZGVyKHNlcnZlclVybCkge1xuICAgIHZhciBfdGhpcztcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgTGVkZ2VyQ2FsbEJ1aWxkZXIpO1xuICAgIF90aGlzID0gX2NhbGxTdXBlcih0aGlzLCBMZWRnZXJDYWxsQnVpbGRlciwgW3NlcnZlclVybF0pO1xuICAgIF90aGlzLnVybC5zZWdtZW50KFwibGVkZ2Vyc1wiKTtcbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cbiAgX2luaGVyaXRzKExlZGdlckNhbGxCdWlsZGVyLCBfQ2FsbEJ1aWxkZXIpO1xuICByZXR1cm4gX2NyZWF0ZUNsYXNzKExlZGdlckNhbGxCdWlsZGVyLCBbe1xuICAgIGtleTogXCJsZWRnZXJcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gbGVkZ2VyKHNlcXVlbmNlKSB7XG4gICAgICB0aGlzLmZpbHRlci5wdXNoKFtcImxlZGdlcnNcIiwgc2VxdWVuY2UudG9TdHJpbmcoKV0pO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICB9XSk7XG59KF9jYWxsX2J1aWxkZXIuQ2FsbEJ1aWxkZXIpOyJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@stellar/stellar-sdk/lib/horizon/ledger_call_builder.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@stellar/stellar-sdk/lib/horizon/liquidity_pool_call_builder.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/@stellar/stellar-sdk/lib/horizon/liquidity_pool_call_builder.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.LiquidityPoolCallBuilder = void 0;\nvar _call_builder = __webpack_require__(/*! ./call_builder */ \"(ssr)/./node_modules/@stellar/stellar-sdk/lib/horizon/call_builder.js\");\nfunction _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\nfunction _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }\nfunction _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nfunction _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }\nfunction _possibleConstructorReturn(t, e) { if (e && (\"object\" == _typeof(e) || \"function\" == typeof e)) return e; if (void 0 !== e) throw new TypeError(\"Derived constructors may only return object or undefined\"); return _assertThisInitialized(t); }\nfunction _assertThisInitialized(e) { if (void 0 === e) throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); return e; }\nfunction _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }\nfunction _getPrototypeOf(t) { return _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function (t) { return t.__proto__ || Object.getPrototypeOf(t); }, _getPrototypeOf(t); }\nfunction _inherits(t, e) { if (\"function\" != typeof e && null !== e) throw new TypeError(\"Super expression must either be null or a function\"); t.prototype = Object.create(e && e.prototype, { constructor: { value: t, writable: !0, configurable: !0 } }), Object.defineProperty(t, \"prototype\", { writable: !1 }), e && _setPrototypeOf(t, e); }\nfunction _setPrototypeOf(t, e) { return _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function (t, e) { return t.__proto__ = e, t; }, _setPrototypeOf(t, e); }\nvar LiquidityPoolCallBuilder = exports.LiquidityPoolCallBuilder = function (_CallBuilder) {\n  function LiquidityPoolCallBuilder(serverUrl) {\n    var _this;\n    _classCallCheck(this, LiquidityPoolCallBuilder);\n    _this = _callSuper(this, LiquidityPoolCallBuilder, [serverUrl]);\n    _this.url.segment(\"liquidity_pools\");\n    return _this;\n  }\n  _inherits(LiquidityPoolCallBuilder, _CallBuilder);\n  return _createClass(LiquidityPoolCallBuilder, [{\n    key: \"forAssets\",\n    value: function forAssets() {\n      for (var _len = arguments.length, assets = new Array(_len), _key = 0; _key < _len; _key++) {\n        assets[_key] = arguments[_key];\n      }\n      var assetList = assets.map(function (asset) {\n        return asset.toString();\n      }).join(\",\");\n      this.url.setQuery(\"reserves\", assetList);\n      return this;\n    }\n  }, {\n    key: \"forAccount\",\n    value: function forAccount(id) {\n      this.url.setQuery(\"account\", id);\n      return this;\n    }\n  }, {\n    key: \"liquidityPoolId\",\n    value: function liquidityPoolId(id) {\n      if (!id.match(/[a-fA-F0-9]{64}/)) {\n        throw new TypeError(\"\".concat(id, \" does not look like a liquidity pool ID\"));\n      }\n      var builder = new _call_builder.CallBuilder(this.url.clone());\n      builder.filter.push([id.toLowerCase()]);\n      return builder;\n    }\n  }]);\n}(_call_builder.CallBuilder);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHN0ZWxsYXIvc3RlbGxhci1zZGsvbGliL2hvcml6b24vbGlxdWlkaXR5X3Bvb2xfY2FsbF9idWlsZGVyLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLHNCQUFzQiwyQkFBMkIsb0dBQW9HLG1CQUFtQixpQkFBaUIsc0hBQXNIO0FBQy9TLDhDQUE2QztBQUM3QztBQUNBLENBQUMsRUFBQztBQUNGLGdDQUFnQztBQUNoQyxvQkFBb0IsbUJBQU8sQ0FBQyw2RkFBZ0I7QUFDNUMsaUNBQWlDO0FBQ2pDLG1DQUFtQyxnQkFBZ0IsY0FBYyxPQUFPLGNBQWM7QUFDdEYsaUNBQWlDLHFIQUFxSCxjQUFjO0FBQ3BLLDZCQUE2QixtQ0FBbUM7QUFDaEUsOEJBQThCLDRDQUE0QywrQkFBK0Isb0JBQW9CLG1DQUFtQyxzQ0FBc0MsdUVBQXVFO0FBQzdRLCtCQUErQjtBQUMvQiw0Q0FBNEMsdUVBQXVFLG1HQUFtRztBQUN0TixxQ0FBcUMseUdBQXlHO0FBQzlJLHVDQUF1QyxNQUFNLHFGQUFxRixNQUFNLGFBQWEsMkVBQTJFLGFBQWE7QUFDN08sOEJBQThCLCtGQUErRixpREFBaUQ7QUFDOUssMkJBQTJCLHFIQUFxSCxnREFBZ0QsZUFBZSw0Q0FBNEMsMkNBQTJDLGNBQWM7QUFDcFQsaUNBQWlDLGtHQUFrRyw0QkFBNEI7QUFDL0osK0JBQStCLGdDQUFnQztBQUMvRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNEVBQTRFLGFBQWE7QUFDekY7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBLGlDQUFpQyxHQUFHO0FBQ3BDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSCxDQUFDIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXFVTVUFSSU9cXERvY3VtZW50c1xcR2l0aHViXFxHYWxheHlLSi13YWxsZXQtLS1IYWNrXFx3ZWJcXG5vZGVfbW9kdWxlc1xcQHN0ZWxsYXJcXHN0ZWxsYXItc2RrXFxsaWJcXGhvcml6b25cXGxpcXVpZGl0eV9wb29sX2NhbGxfYnVpbGRlci5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuZnVuY3Rpb24gX3R5cGVvZihvKSB7IFwiQGJhYmVsL2hlbHBlcnMgLSB0eXBlb2ZcIjsgcmV0dXJuIF90eXBlb2YgPSBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIFN5bWJvbCAmJiBcInN5bWJvbFwiID09IHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPyBmdW5jdGlvbiAobykgeyByZXR1cm4gdHlwZW9mIG87IH0gOiBmdW5jdGlvbiAobykgeyByZXR1cm4gbyAmJiBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIFN5bWJvbCAmJiBvLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgbyAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2YgbzsgfSwgX3R5cGVvZihvKTsgfVxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuTGlxdWlkaXR5UG9vbENhbGxCdWlsZGVyID0gdm9pZCAwO1xudmFyIF9jYWxsX2J1aWxkZXIgPSByZXF1aXJlKFwiLi9jYWxsX2J1aWxkZXJcIik7XG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soYSwgbikgeyBpZiAoIShhIGluc3RhbmNlb2YgbikpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH1cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKGUsIHIpIHsgZm9yICh2YXIgdCA9IDA7IHQgPCByLmxlbmd0aDsgdCsrKSB7IHZhciBvID0gclt0XTsgby5lbnVtZXJhYmxlID0gby5lbnVtZXJhYmxlIHx8ICExLCBvLmNvbmZpZ3VyYWJsZSA9ICEwLCBcInZhbHVlXCIgaW4gbyAmJiAoby53cml0YWJsZSA9ICEwKSwgT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsIF90b1Byb3BlcnR5S2V5KG8ua2V5KSwgbyk7IH0gfVxuZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKGUsIHIsIHQpIHsgcmV0dXJuIHIgJiYgX2RlZmluZVByb3BlcnRpZXMoZS5wcm90b3R5cGUsIHIpLCB0ICYmIF9kZWZpbmVQcm9wZXJ0aWVzKGUsIHQpLCBPYmplY3QuZGVmaW5lUHJvcGVydHkoZSwgXCJwcm90b3R5cGVcIiwgeyB3cml0YWJsZTogITEgfSksIGU7IH1cbmZ1bmN0aW9uIF90b1Byb3BlcnR5S2V5KHQpIHsgdmFyIGkgPSBfdG9QcmltaXRpdmUodCwgXCJzdHJpbmdcIik7IHJldHVybiBcInN5bWJvbFwiID09IF90eXBlb2YoaSkgPyBpIDogaSArIFwiXCI7IH1cbmZ1bmN0aW9uIF90b1ByaW1pdGl2ZSh0LCByKSB7IGlmIChcIm9iamVjdFwiICE9IF90eXBlb2YodCkgfHwgIXQpIHJldHVybiB0OyB2YXIgZSA9IHRbU3ltYm9sLnRvUHJpbWl0aXZlXTsgaWYgKHZvaWQgMCAhPT0gZSkgeyB2YXIgaSA9IGUuY2FsbCh0LCByIHx8IFwiZGVmYXVsdFwiKTsgaWYgKFwib2JqZWN0XCIgIT0gX3R5cGVvZihpKSkgcmV0dXJuIGk7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJAQHRvUHJpbWl0aXZlIG11c3QgcmV0dXJuIGEgcHJpbWl0aXZlIHZhbHVlLlwiKTsgfSByZXR1cm4gKFwic3RyaW5nXCIgPT09IHIgPyBTdHJpbmcgOiBOdW1iZXIpKHQpOyB9XG5mdW5jdGlvbiBfY2FsbFN1cGVyKHQsIG8sIGUpIHsgcmV0dXJuIG8gPSBfZ2V0UHJvdG90eXBlT2YobyksIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHQsIF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKSA/IFJlZmxlY3QuY29uc3RydWN0KG8sIGUgfHwgW10sIF9nZXRQcm90b3R5cGVPZih0KS5jb25zdHJ1Y3RvcikgOiBvLmFwcGx5KHQsIGUpKTsgfVxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odCwgZSkgeyBpZiAoZSAmJiAoXCJvYmplY3RcIiA9PSBfdHlwZW9mKGUpIHx8IFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgZSkpIHJldHVybiBlOyBpZiAodm9pZCAwICE9PSBlKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiRGVyaXZlZCBjb25zdHJ1Y3RvcnMgbWF5IG9ubHkgcmV0dXJuIG9iamVjdCBvciB1bmRlZmluZWRcIik7IHJldHVybiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHQpOyB9XG5mdW5jdGlvbiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKGUpIHsgaWYgKHZvaWQgMCA9PT0gZSkgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyByZXR1cm4gZTsgfVxuZnVuY3Rpb24gX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpIHsgdHJ5IHsgdmFyIHQgPSAhQm9vbGVhbi5wcm90b3R5cGUudmFsdWVPZi5jYWxsKFJlZmxlY3QuY29uc3RydWN0KEJvb2xlYW4sIFtdLCBmdW5jdGlvbiAoKSB7fSkpOyB9IGNhdGNoICh0KSB7fSByZXR1cm4gKF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QgPSBmdW5jdGlvbiBfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KCkgeyByZXR1cm4gISF0OyB9KSgpOyB9XG5mdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2YodCkgeyByZXR1cm4gX2dldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LmdldFByb3RvdHlwZU9mLmJpbmQoKSA6IGZ1bmN0aW9uICh0KSB7IHJldHVybiB0Ll9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YodCk7IH0sIF9nZXRQcm90b3R5cGVPZih0KTsgfVxuZnVuY3Rpb24gX2luaGVyaXRzKHQsIGUpIHsgaWYgKFwiZnVuY3Rpb25cIiAhPSB0eXBlb2YgZSAmJiBudWxsICE9PSBlKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb25cIik7IHQucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShlICYmIGUucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiB0LCB3cml0YWJsZTogITAsIGNvbmZpZ3VyYWJsZTogITAgfSB9KSwgT2JqZWN0LmRlZmluZVByb3BlcnR5KHQsIFwicHJvdG90eXBlXCIsIHsgd3JpdGFibGU6ICExIH0pLCBlICYmIF9zZXRQcm90b3R5cGVPZih0LCBlKTsgfVxuZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKHQsIGUpIHsgcmV0dXJuIF9zZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZi5iaW5kKCkgOiBmdW5jdGlvbiAodCwgZSkgeyByZXR1cm4gdC5fX3Byb3RvX18gPSBlLCB0OyB9LCBfc2V0UHJvdG90eXBlT2YodCwgZSk7IH1cbnZhciBMaXF1aWRpdHlQb29sQ2FsbEJ1aWxkZXIgPSBleHBvcnRzLkxpcXVpZGl0eVBvb2xDYWxsQnVpbGRlciA9IGZ1bmN0aW9uIChfQ2FsbEJ1aWxkZXIpIHtcbiAgZnVuY3Rpb24gTGlxdWlkaXR5UG9vbENhbGxCdWlsZGVyKHNlcnZlclVybCkge1xuICAgIHZhciBfdGhpcztcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgTGlxdWlkaXR5UG9vbENhbGxCdWlsZGVyKTtcbiAgICBfdGhpcyA9IF9jYWxsU3VwZXIodGhpcywgTGlxdWlkaXR5UG9vbENhbGxCdWlsZGVyLCBbc2VydmVyVXJsXSk7XG4gICAgX3RoaXMudXJsLnNlZ21lbnQoXCJsaXF1aWRpdHlfcG9vbHNcIik7XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG4gIF9pbmhlcml0cyhMaXF1aWRpdHlQb29sQ2FsbEJ1aWxkZXIsIF9DYWxsQnVpbGRlcik7XG4gIHJldHVybiBfY3JlYXRlQ2xhc3MoTGlxdWlkaXR5UG9vbENhbGxCdWlsZGVyLCBbe1xuICAgIGtleTogXCJmb3JBc3NldHNcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZm9yQXNzZXRzKCkge1xuICAgICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFzc2V0cyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgICAgYXNzZXRzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgICAgfVxuICAgICAgdmFyIGFzc2V0TGlzdCA9IGFzc2V0cy5tYXAoZnVuY3Rpb24gKGFzc2V0KSB7XG4gICAgICAgIHJldHVybiBhc3NldC50b1N0cmluZygpO1xuICAgICAgfSkuam9pbihcIixcIik7XG4gICAgICB0aGlzLnVybC5zZXRRdWVyeShcInJlc2VydmVzXCIsIGFzc2V0TGlzdCk7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiZm9yQWNjb3VudFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBmb3JBY2NvdW50KGlkKSB7XG4gICAgICB0aGlzLnVybC5zZXRRdWVyeShcImFjY291bnRcIiwgaWQpO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImxpcXVpZGl0eVBvb2xJZFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBsaXF1aWRpdHlQb29sSWQoaWQpIHtcbiAgICAgIGlmICghaWQubWF0Y2goL1thLWZBLUYwLTldezY0fS8pKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJcIi5jb25jYXQoaWQsIFwiIGRvZXMgbm90IGxvb2sgbGlrZSBhIGxpcXVpZGl0eSBwb29sIElEXCIpKTtcbiAgICAgIH1cbiAgICAgIHZhciBidWlsZGVyID0gbmV3IF9jYWxsX2J1aWxkZXIuQ2FsbEJ1aWxkZXIodGhpcy51cmwuY2xvbmUoKSk7XG4gICAgICBidWlsZGVyLmZpbHRlci5wdXNoKFtpZC50b0xvd2VyQ2FzZSgpXSk7XG4gICAgICByZXR1cm4gYnVpbGRlcjtcbiAgICB9XG4gIH1dKTtcbn0oX2NhbGxfYnVpbGRlci5DYWxsQnVpbGRlcik7Il0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@stellar/stellar-sdk/lib/horizon/liquidity_pool_call_builder.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@stellar/stellar-sdk/lib/horizon/offer_call_builder.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@stellar/stellar-sdk/lib/horizon/offer_call_builder.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.OfferCallBuilder = void 0;\nvar _call_builder = __webpack_require__(/*! ./call_builder */ \"(ssr)/./node_modules/@stellar/stellar-sdk/lib/horizon/call_builder.js\");\nfunction _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\nfunction _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }\nfunction _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nfunction _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }\nfunction _possibleConstructorReturn(t, e) { if (e && (\"object\" == _typeof(e) || \"function\" == typeof e)) return e; if (void 0 !== e) throw new TypeError(\"Derived constructors may only return object or undefined\"); return _assertThisInitialized(t); }\nfunction _assertThisInitialized(e) { if (void 0 === e) throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); return e; }\nfunction _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }\nfunction _getPrototypeOf(t) { return _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function (t) { return t.__proto__ || Object.getPrototypeOf(t); }, _getPrototypeOf(t); }\nfunction _inherits(t, e) { if (\"function\" != typeof e && null !== e) throw new TypeError(\"Super expression must either be null or a function\"); t.prototype = Object.create(e && e.prototype, { constructor: { value: t, writable: !0, configurable: !0 } }), Object.defineProperty(t, \"prototype\", { writable: !1 }), e && _setPrototypeOf(t, e); }\nfunction _setPrototypeOf(t, e) { return _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function (t, e) { return t.__proto__ = e, t; }, _setPrototypeOf(t, e); }\nvar OfferCallBuilder = exports.OfferCallBuilder = function (_CallBuilder) {\n  function OfferCallBuilder(serverUrl) {\n    var _this;\n    _classCallCheck(this, OfferCallBuilder);\n    _this = _callSuper(this, OfferCallBuilder, [serverUrl, \"offers\"]);\n    _this.url.segment(\"offers\");\n    return _this;\n  }\n  _inherits(OfferCallBuilder, _CallBuilder);\n  return _createClass(OfferCallBuilder, [{\n    key: \"offer\",\n    value: function offer(offerId) {\n      var builder = new _call_builder.CallBuilder(this.url.clone());\n      builder.filter.push([offerId]);\n      return builder;\n    }\n  }, {\n    key: \"forAccount\",\n    value: function forAccount(id) {\n      return this.forEndpoint(\"accounts\", id);\n    }\n  }, {\n    key: \"buying\",\n    value: function buying(asset) {\n      if (!asset.isNative()) {\n        this.url.setQuery(\"buying_asset_type\", asset.getAssetType());\n        this.url.setQuery(\"buying_asset_code\", asset.getCode());\n        this.url.setQuery(\"buying_asset_issuer\", asset.getIssuer());\n      } else {\n        this.url.setQuery(\"buying_asset_type\", \"native\");\n      }\n      return this;\n    }\n  }, {\n    key: \"selling\",\n    value: function selling(asset) {\n      if (!asset.isNative()) {\n        this.url.setQuery(\"selling_asset_type\", asset.getAssetType());\n        this.url.setQuery(\"selling_asset_code\", asset.getCode());\n        this.url.setQuery(\"selling_asset_issuer\", asset.getIssuer());\n      } else {\n        this.url.setQuery(\"selling_asset_type\", \"native\");\n      }\n      return this;\n    }\n  }, {\n    key: \"sponsor\",\n    value: function sponsor(id) {\n      this.url.setQuery(\"sponsor\", id);\n      return this;\n    }\n  }, {\n    key: \"seller\",\n    value: function seller(_seller) {\n      this.url.setQuery(\"seller\", _seller);\n      return this;\n    }\n  }]);\n}(_call_builder.CallBuilder);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@stellar/stellar-sdk/lib/horizon/offer_call_builder.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@stellar/stellar-sdk/lib/horizon/operation_call_builder.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@stellar/stellar-sdk/lib/horizon/operation_call_builder.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.OperationCallBuilder = void 0;\nvar _call_builder = __webpack_require__(/*! ./call_builder */ \"(ssr)/./node_modules/@stellar/stellar-sdk/lib/horizon/call_builder.js\");\nfunction _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\nfunction _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }\nfunction _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nfunction _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }\nfunction _possibleConstructorReturn(t, e) { if (e && (\"object\" == _typeof(e) || \"function\" == typeof e)) return e; if (void 0 !== e) throw new TypeError(\"Derived constructors may only return object or undefined\"); return _assertThisInitialized(t); }\nfunction _assertThisInitialized(e) { if (void 0 === e) throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); return e; }\nfunction _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }\nfunction _getPrototypeOf(t) { return _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function (t) { return t.__proto__ || Object.getPrototypeOf(t); }, _getPrototypeOf(t); }\nfunction _inherits(t, e) { if (\"function\" != typeof e && null !== e) throw new TypeError(\"Super expression must either be null or a function\"); t.prototype = Object.create(e && e.prototype, { constructor: { value: t, writable: !0, configurable: !0 } }), Object.defineProperty(t, \"prototype\", { writable: !1 }), e && _setPrototypeOf(t, e); }\nfunction _setPrototypeOf(t, e) { return _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function (t, e) { return t.__proto__ = e, t; }, _setPrototypeOf(t, e); }\nvar OperationCallBuilder = exports.OperationCallBuilder = function (_CallBuilder) {\n  function OperationCallBuilder(serverUrl) {\n    var _this;\n    _classCallCheck(this, OperationCallBuilder);\n    _this = _callSuper(this, OperationCallBuilder, [serverUrl, \"operations\"]);\n    _this.url.segment(\"operations\");\n    return _this;\n  }\n  _inherits(OperationCallBuilder, _CallBuilder);\n  return _createClass(OperationCallBuilder, [{\n    key: \"operation\",\n    value: function operation(operationId) {\n      var builder = new _call_builder.CallBuilder(this.url.clone());\n      builder.filter.push([operationId]);\n      return builder;\n    }\n  }, {\n    key: \"forAccount\",\n    value: function forAccount(accountId) {\n      return this.forEndpoint(\"accounts\", accountId);\n    }\n  }, {\n    key: \"forClaimableBalance\",\n    value: function forClaimableBalance(claimableBalanceId) {\n      return this.forEndpoint(\"claimable_balances\", claimableBalanceId);\n    }\n  }, {\n    key: \"forLedger\",\n    value: function forLedger(sequence) {\n      return this.forEndpoint(\"ledgers\", sequence.toString());\n    }\n  }, {\n    key: \"forTransaction\",\n    value: function forTransaction(transactionId) {\n      return this.forEndpoint(\"transactions\", transactionId);\n    }\n  }, {\n    key: \"forLiquidityPool\",\n    value: function forLiquidityPool(poolId) {\n      return this.forEndpoint(\"liquidity_pools\", poolId);\n    }\n  }, {\n    key: \"includeFailed\",\n    value: function includeFailed(value) {\n      this.url.setQuery(\"include_failed\", value.toString());\n      return this;\n    }\n  }]);\n}(_call_builder.CallBuilder);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHN0ZWxsYXIvc3RlbGxhci1zZGsvbGliL2hvcml6b24vb3BlcmF0aW9uX2NhbGxfYnVpbGRlci5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYixzQkFBc0IsMkJBQTJCLG9HQUFvRyxtQkFBbUIsaUJBQWlCLHNIQUFzSDtBQUMvUyw4Q0FBNkM7QUFDN0M7QUFDQSxDQUFDLEVBQUM7QUFDRiw0QkFBNEI7QUFDNUIsb0JBQW9CLG1CQUFPLENBQUMsNkZBQWdCO0FBQzVDLGlDQUFpQztBQUNqQyxtQ0FBbUMsZ0JBQWdCLGNBQWMsT0FBTyxjQUFjO0FBQ3RGLGlDQUFpQyxxSEFBcUgsY0FBYztBQUNwSyw2QkFBNkIsbUNBQW1DO0FBQ2hFLDhCQUE4Qiw0Q0FBNEMsK0JBQStCLG9CQUFvQixtQ0FBbUMsc0NBQXNDLHVFQUF1RTtBQUM3USwrQkFBK0I7QUFDL0IsNENBQTRDLHVFQUF1RSxtR0FBbUc7QUFDdE4scUNBQXFDLHlHQUF5RztBQUM5SSx1Q0FBdUMsTUFBTSxxRkFBcUYsTUFBTSxhQUFhLDJFQUEyRSxhQUFhO0FBQzdPLDhCQUE4QiwrRkFBK0YsaURBQWlEO0FBQzlLLDJCQUEyQixxSEFBcUgsZ0RBQWdELGVBQWUsNENBQTRDLDJDQUEyQyxjQUFjO0FBQ3BULGlDQUFpQyxrR0FBa0csNEJBQTRCO0FBQy9KLDJCQUEyQiw0QkFBNEI7QUFDdkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0gsQ0FBQyIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxVU1VBUklPXFxEb2N1bWVudHNcXEdpdGh1YlxcR2FsYXh5S0otd2FsbGV0LS0tSGFja1xcd2ViXFxub2RlX21vZHVsZXNcXEBzdGVsbGFyXFxzdGVsbGFyLXNka1xcbGliXFxob3Jpem9uXFxvcGVyYXRpb25fY2FsbF9idWlsZGVyLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5mdW5jdGlvbiBfdHlwZW9mKG8pIHsgXCJAYmFiZWwvaGVscGVycyAtIHR5cGVvZlwiOyByZXR1cm4gX3R5cGVvZiA9IFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgU3ltYm9sICYmIFwic3ltYm9sXCIgPT0gdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA/IGZ1bmN0aW9uIChvKSB7IHJldHVybiB0eXBlb2YgbzsgfSA6IGZ1bmN0aW9uIChvKSB7IHJldHVybiBvICYmIFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgU3ltYm9sICYmIG8uY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvOyB9LCBfdHlwZW9mKG8pOyB9XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5PcGVyYXRpb25DYWxsQnVpbGRlciA9IHZvaWQgMDtcbnZhciBfY2FsbF9idWlsZGVyID0gcmVxdWlyZShcIi4vY2FsbF9idWlsZGVyXCIpO1xuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGEsIG4pIHsgaWYgKCEoYSBpbnN0YW5jZW9mIG4pKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9XG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyhlLCByKSB7IGZvciAodmFyIHQgPSAwOyB0IDwgci5sZW5ndGg7IHQrKykgeyB2YXIgbyA9IHJbdF07IG8uZW51bWVyYWJsZSA9IG8uZW51bWVyYWJsZSB8fCAhMSwgby5jb25maWd1cmFibGUgPSAhMCwgXCJ2YWx1ZVwiIGluIG8gJiYgKG8ud3JpdGFibGUgPSAhMCksIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLCBfdG9Qcm9wZXJ0eUtleShvLmtleSksIG8pOyB9IH1cbmZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhlLCByLCB0KSB7IHJldHVybiByICYmIF9kZWZpbmVQcm9wZXJ0aWVzKGUucHJvdG90eXBlLCByKSwgdCAmJiBfZGVmaW5lUHJvcGVydGllcyhlLCB0KSwgT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsIFwicHJvdG90eXBlXCIsIHsgd3JpdGFibGU6ICExIH0pLCBlOyB9XG5mdW5jdGlvbiBfdG9Qcm9wZXJ0eUtleSh0KSB7IHZhciBpID0gX3RvUHJpbWl0aXZlKHQsIFwic3RyaW5nXCIpOyByZXR1cm4gXCJzeW1ib2xcIiA9PSBfdHlwZW9mKGkpID8gaSA6IGkgKyBcIlwiOyB9XG5mdW5jdGlvbiBfdG9QcmltaXRpdmUodCwgcikgeyBpZiAoXCJvYmplY3RcIiAhPSBfdHlwZW9mKHQpIHx8ICF0KSByZXR1cm4gdDsgdmFyIGUgPSB0W1N5bWJvbC50b1ByaW1pdGl2ZV07IGlmICh2b2lkIDAgIT09IGUpIHsgdmFyIGkgPSBlLmNhbGwodCwgciB8fCBcImRlZmF1bHRcIik7IGlmIChcIm9iamVjdFwiICE9IF90eXBlb2YoaSkpIHJldHVybiBpOyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQEB0b1ByaW1pdGl2ZSBtdXN0IHJldHVybiBhIHByaW1pdGl2ZSB2YWx1ZS5cIik7IH0gcmV0dXJuIChcInN0cmluZ1wiID09PSByID8gU3RyaW5nIDogTnVtYmVyKSh0KTsgfVxuZnVuY3Rpb24gX2NhbGxTdXBlcih0LCBvLCBlKSB7IHJldHVybiBvID0gX2dldFByb3RvdHlwZU9mKG8pLCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0LCBfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KCkgPyBSZWZsZWN0LmNvbnN0cnVjdChvLCBlIHx8IFtdLCBfZ2V0UHJvdG90eXBlT2YodCkuY29uc3RydWN0b3IpIDogby5hcHBseSh0LCBlKSk7IH1cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHQsIGUpIHsgaWYgKGUgJiYgKFwib2JqZWN0XCIgPT0gX3R5cGVvZihlKSB8fCBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIGUpKSByZXR1cm4gZTsgaWYgKHZvaWQgMCAhPT0gZSkgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkRlcml2ZWQgY29uc3RydWN0b3JzIG1heSBvbmx5IHJldHVybiBvYmplY3Qgb3IgdW5kZWZpbmVkXCIpOyByZXR1cm4gX2Fzc2VydFRoaXNJbml0aWFsaXplZCh0KTsgfVxuZnVuY3Rpb24gX2Fzc2VydFRoaXNJbml0aWFsaXplZChlKSB7IGlmICh2b2lkIDAgPT09IGUpIHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgcmV0dXJuIGU7IH1cbmZ1bmN0aW9uIF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKSB7IHRyeSB7IHZhciB0ID0gIUJvb2xlYW4ucHJvdG90eXBlLnZhbHVlT2YuY2FsbChSZWZsZWN0LmNvbnN0cnVjdChCb29sZWFuLCBbXSwgZnVuY3Rpb24gKCkge30pKTsgfSBjYXRjaCAodCkge30gcmV0dXJuIChfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0ID0gZnVuY3Rpb24gX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpIHsgcmV0dXJuICEhdDsgfSkoKTsgfVxuZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKHQpIHsgcmV0dXJuIF9nZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5nZXRQcm90b3R5cGVPZi5iaW5kKCkgOiBmdW5jdGlvbiAodCkgeyByZXR1cm4gdC5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKHQpOyB9LCBfZ2V0UHJvdG90eXBlT2YodCk7IH1cbmZ1bmN0aW9uIF9pbmhlcml0cyh0LCBlKSB7IGlmIChcImZ1bmN0aW9uXCIgIT0gdHlwZW9mIGUgJiYgbnVsbCAhPT0gZSkgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uXCIpOyB0LnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoZSAmJiBlLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogdCwgd3JpdGFibGU6ICEwLCBjb25maWd1cmFibGU6ICEwIH0gfSksIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LCBcInByb3RvdHlwZVwiLCB7IHdyaXRhYmxlOiAhMSB9KSwgZSAmJiBfc2V0UHJvdG90eXBlT2YodCwgZSk7IH1cbmZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZih0LCBlKSB7IHJldHVybiBfc2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2YuYmluZCgpIDogZnVuY3Rpb24gKHQsIGUpIHsgcmV0dXJuIHQuX19wcm90b19fID0gZSwgdDsgfSwgX3NldFByb3RvdHlwZU9mKHQsIGUpOyB9XG52YXIgT3BlcmF0aW9uQ2FsbEJ1aWxkZXIgPSBleHBvcnRzLk9wZXJhdGlvbkNhbGxCdWlsZGVyID0gZnVuY3Rpb24gKF9DYWxsQnVpbGRlcikge1xuICBmdW5jdGlvbiBPcGVyYXRpb25DYWxsQnVpbGRlcihzZXJ2ZXJVcmwpIHtcbiAgICB2YXIgX3RoaXM7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIE9wZXJhdGlvbkNhbGxCdWlsZGVyKTtcbiAgICBfdGhpcyA9IF9jYWxsU3VwZXIodGhpcywgT3BlcmF0aW9uQ2FsbEJ1aWxkZXIsIFtzZXJ2ZXJVcmwsIFwib3BlcmF0aW9uc1wiXSk7XG4gICAgX3RoaXMudXJsLnNlZ21lbnQoXCJvcGVyYXRpb25zXCIpO1xuICAgIHJldHVybiBfdGhpcztcbiAgfVxuICBfaW5oZXJpdHMoT3BlcmF0aW9uQ2FsbEJ1aWxkZXIsIF9DYWxsQnVpbGRlcik7XG4gIHJldHVybiBfY3JlYXRlQ2xhc3MoT3BlcmF0aW9uQ2FsbEJ1aWxkZXIsIFt7XG4gICAga2V5OiBcIm9wZXJhdGlvblwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBvcGVyYXRpb24ob3BlcmF0aW9uSWQpIHtcbiAgICAgIHZhciBidWlsZGVyID0gbmV3IF9jYWxsX2J1aWxkZXIuQ2FsbEJ1aWxkZXIodGhpcy51cmwuY2xvbmUoKSk7XG4gICAgICBidWlsZGVyLmZpbHRlci5wdXNoKFtvcGVyYXRpb25JZF0pO1xuICAgICAgcmV0dXJuIGJ1aWxkZXI7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImZvckFjY291bnRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZm9yQWNjb3VudChhY2NvdW50SWQpIHtcbiAgICAgIHJldHVybiB0aGlzLmZvckVuZHBvaW50KFwiYWNjb3VudHNcIiwgYWNjb3VudElkKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiZm9yQ2xhaW1hYmxlQmFsYW5jZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBmb3JDbGFpbWFibGVCYWxhbmNlKGNsYWltYWJsZUJhbGFuY2VJZCkge1xuICAgICAgcmV0dXJuIHRoaXMuZm9yRW5kcG9pbnQoXCJjbGFpbWFibGVfYmFsYW5jZXNcIiwgY2xhaW1hYmxlQmFsYW5jZUlkKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiZm9yTGVkZ2VyXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGZvckxlZGdlcihzZXF1ZW5jZSkge1xuICAgICAgcmV0dXJuIHRoaXMuZm9yRW5kcG9pbnQoXCJsZWRnZXJzXCIsIHNlcXVlbmNlLnRvU3RyaW5nKCkpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJmb3JUcmFuc2FjdGlvblwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBmb3JUcmFuc2FjdGlvbih0cmFuc2FjdGlvbklkKSB7XG4gICAgICByZXR1cm4gdGhpcy5mb3JFbmRwb2ludChcInRyYW5zYWN0aW9uc1wiLCB0cmFuc2FjdGlvbklkKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiZm9yTGlxdWlkaXR5UG9vbFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBmb3JMaXF1aWRpdHlQb29sKHBvb2xJZCkge1xuICAgICAgcmV0dXJuIHRoaXMuZm9yRW5kcG9pbnQoXCJsaXF1aWRpdHlfcG9vbHNcIiwgcG9vbElkKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiaW5jbHVkZUZhaWxlZFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBpbmNsdWRlRmFpbGVkKHZhbHVlKSB7XG4gICAgICB0aGlzLnVybC5zZXRRdWVyeShcImluY2x1ZGVfZmFpbGVkXCIsIHZhbHVlLnRvU3RyaW5nKCkpO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICB9XSk7XG59KF9jYWxsX2J1aWxkZXIuQ2FsbEJ1aWxkZXIpOyJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@stellar/stellar-sdk/lib/horizon/operation_call_builder.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@stellar/stellar-sdk/lib/horizon/orderbook_call_builder.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@stellar/stellar-sdk/lib/horizon/orderbook_call_builder.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.OrderbookCallBuilder = void 0;\nvar _call_builder = __webpack_require__(/*! ./call_builder */ \"(ssr)/./node_modules/@stellar/stellar-sdk/lib/horizon/call_builder.js\");\nfunction _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }\nfunction _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nfunction _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\nfunction _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }\nfunction _possibleConstructorReturn(t, e) { if (e && (\"object\" == _typeof(e) || \"function\" == typeof e)) return e; if (void 0 !== e) throw new TypeError(\"Derived constructors may only return object or undefined\"); return _assertThisInitialized(t); }\nfunction _assertThisInitialized(e) { if (void 0 === e) throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); return e; }\nfunction _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }\nfunction _getPrototypeOf(t) { return _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function (t) { return t.__proto__ || Object.getPrototypeOf(t); }, _getPrototypeOf(t); }\nfunction _inherits(t, e) { if (\"function\" != typeof e && null !== e) throw new TypeError(\"Super expression must either be null or a function\"); t.prototype = Object.create(e && e.prototype, { constructor: { value: t, writable: !0, configurable: !0 } }), Object.defineProperty(t, \"prototype\", { writable: !1 }), e && _setPrototypeOf(t, e); }\nfunction _setPrototypeOf(t, e) { return _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function (t, e) { return t.__proto__ = e, t; }, _setPrototypeOf(t, e); }\nvar OrderbookCallBuilder = exports.OrderbookCallBuilder = function (_CallBuilder) {\n  function OrderbookCallBuilder(serverUrl, selling, buying) {\n    var _this;\n    _classCallCheck(this, OrderbookCallBuilder);\n    _this = _callSuper(this, OrderbookCallBuilder, [serverUrl]);\n    _this.url.segment(\"order_book\");\n    if (!selling.isNative()) {\n      _this.url.setQuery(\"selling_asset_type\", selling.getAssetType());\n      _this.url.setQuery(\"selling_asset_code\", selling.getCode());\n      _this.url.setQuery(\"selling_asset_issuer\", selling.getIssuer());\n    } else {\n      _this.url.setQuery(\"selling_asset_type\", \"native\");\n    }\n    if (!buying.isNative()) {\n      _this.url.setQuery(\"buying_asset_type\", buying.getAssetType());\n      _this.url.setQuery(\"buying_asset_code\", buying.getCode());\n      _this.url.setQuery(\"buying_asset_issuer\", buying.getIssuer());\n    } else {\n      _this.url.setQuery(\"buying_asset_type\", \"native\");\n    }\n    return _this;\n  }\n  _inherits(OrderbookCallBuilder, _CallBuilder);\n  return _createClass(OrderbookCallBuilder);\n}(_call_builder.CallBuilder);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHN0ZWxsYXIvc3RlbGxhci1zZGsvbGliL2hvcml6b24vb3JkZXJib29rX2NhbGxfYnVpbGRlci5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYixzQkFBc0IsMkJBQTJCLG9HQUFvRyxtQkFBbUIsaUJBQWlCLHNIQUFzSDtBQUMvUyw4Q0FBNkM7QUFDN0M7QUFDQSxDQUFDLEVBQUM7QUFDRiw0QkFBNEI7QUFDNUIsb0JBQW9CLG1CQUFPLENBQUMsNkZBQWdCO0FBQzVDLG1DQUFtQyxnQkFBZ0IsY0FBYyxPQUFPLGNBQWM7QUFDdEYsaUNBQWlDLHFIQUFxSCxjQUFjO0FBQ3BLLDZCQUE2QixtQ0FBbUM7QUFDaEUsOEJBQThCLDRDQUE0QywrQkFBK0Isb0JBQW9CLG1DQUFtQyxzQ0FBc0MsdUVBQXVFO0FBQzdRLGlDQUFpQztBQUNqQywrQkFBK0I7QUFDL0IsNENBQTRDLHVFQUF1RSxtR0FBbUc7QUFDdE4scUNBQXFDLHlHQUF5RztBQUM5SSx1Q0FBdUMsTUFBTSxxRkFBcUYsTUFBTSxhQUFhLDJFQUEyRSxhQUFhO0FBQzdPLDhCQUE4QiwrRkFBK0YsaURBQWlEO0FBQzlLLDJCQUEyQixxSEFBcUgsZ0RBQWdELGVBQWUsNENBQTRDLDJDQUEyQyxjQUFjO0FBQ3BULGlDQUFpQyxrR0FBa0csNEJBQTRCO0FBQy9KLDJCQUEyQiw0QkFBNEI7QUFDdkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXFVTVUFSSU9cXERvY3VtZW50c1xcR2l0aHViXFxHYWxheHlLSi13YWxsZXQtLS1IYWNrXFx3ZWJcXG5vZGVfbW9kdWxlc1xcQHN0ZWxsYXJcXHN0ZWxsYXItc2RrXFxsaWJcXGhvcml6b25cXG9yZGVyYm9va19jYWxsX2J1aWxkZXIuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmZ1bmN0aW9uIF90eXBlb2YobykgeyBcIkBiYWJlbC9oZWxwZXJzIC0gdHlwZW9mXCI7IHJldHVybiBfdHlwZW9mID0gXCJmdW5jdGlvblwiID09IHR5cGVvZiBTeW1ib2wgJiYgXCJzeW1ib2xcIiA9PSB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID8gZnVuY3Rpb24gKG8pIHsgcmV0dXJuIHR5cGVvZiBvOyB9IDogZnVuY3Rpb24gKG8pIHsgcmV0dXJuIG8gJiYgXCJmdW5jdGlvblwiID09IHR5cGVvZiBTeW1ib2wgJiYgby5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG8gIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG87IH0sIF90eXBlb2Yobyk7IH1cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLk9yZGVyYm9va0NhbGxCdWlsZGVyID0gdm9pZCAwO1xudmFyIF9jYWxsX2J1aWxkZXIgPSByZXF1aXJlKFwiLi9jYWxsX2J1aWxkZXJcIik7XG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyhlLCByKSB7IGZvciAodmFyIHQgPSAwOyB0IDwgci5sZW5ndGg7IHQrKykgeyB2YXIgbyA9IHJbdF07IG8uZW51bWVyYWJsZSA9IG8uZW51bWVyYWJsZSB8fCAhMSwgby5jb25maWd1cmFibGUgPSAhMCwgXCJ2YWx1ZVwiIGluIG8gJiYgKG8ud3JpdGFibGUgPSAhMCksIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLCBfdG9Qcm9wZXJ0eUtleShvLmtleSksIG8pOyB9IH1cbmZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhlLCByLCB0KSB7IHJldHVybiByICYmIF9kZWZpbmVQcm9wZXJ0aWVzKGUucHJvdG90eXBlLCByKSwgdCAmJiBfZGVmaW5lUHJvcGVydGllcyhlLCB0KSwgT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsIFwicHJvdG90eXBlXCIsIHsgd3JpdGFibGU6ICExIH0pLCBlOyB9XG5mdW5jdGlvbiBfdG9Qcm9wZXJ0eUtleSh0KSB7IHZhciBpID0gX3RvUHJpbWl0aXZlKHQsIFwic3RyaW5nXCIpOyByZXR1cm4gXCJzeW1ib2xcIiA9PSBfdHlwZW9mKGkpID8gaSA6IGkgKyBcIlwiOyB9XG5mdW5jdGlvbiBfdG9QcmltaXRpdmUodCwgcikgeyBpZiAoXCJvYmplY3RcIiAhPSBfdHlwZW9mKHQpIHx8ICF0KSByZXR1cm4gdDsgdmFyIGUgPSB0W1N5bWJvbC50b1ByaW1pdGl2ZV07IGlmICh2b2lkIDAgIT09IGUpIHsgdmFyIGkgPSBlLmNhbGwodCwgciB8fCBcImRlZmF1bHRcIik7IGlmIChcIm9iamVjdFwiICE9IF90eXBlb2YoaSkpIHJldHVybiBpOyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQEB0b1ByaW1pdGl2ZSBtdXN0IHJldHVybiBhIHByaW1pdGl2ZSB2YWx1ZS5cIik7IH0gcmV0dXJuIChcInN0cmluZ1wiID09PSByID8gU3RyaW5nIDogTnVtYmVyKSh0KTsgfVxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGEsIG4pIHsgaWYgKCEoYSBpbnN0YW5jZW9mIG4pKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9XG5mdW5jdGlvbiBfY2FsbFN1cGVyKHQsIG8sIGUpIHsgcmV0dXJuIG8gPSBfZ2V0UHJvdG90eXBlT2YobyksIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHQsIF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKSA/IFJlZmxlY3QuY29uc3RydWN0KG8sIGUgfHwgW10sIF9nZXRQcm90b3R5cGVPZih0KS5jb25zdHJ1Y3RvcikgOiBvLmFwcGx5KHQsIGUpKTsgfVxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odCwgZSkgeyBpZiAoZSAmJiAoXCJvYmplY3RcIiA9PSBfdHlwZW9mKGUpIHx8IFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgZSkpIHJldHVybiBlOyBpZiAodm9pZCAwICE9PSBlKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiRGVyaXZlZCBjb25zdHJ1Y3RvcnMgbWF5IG9ubHkgcmV0dXJuIG9iamVjdCBvciB1bmRlZmluZWRcIik7IHJldHVybiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHQpOyB9XG5mdW5jdGlvbiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKGUpIHsgaWYgKHZvaWQgMCA9PT0gZSkgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyByZXR1cm4gZTsgfVxuZnVuY3Rpb24gX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpIHsgdHJ5IHsgdmFyIHQgPSAhQm9vbGVhbi5wcm90b3R5cGUudmFsdWVPZi5jYWxsKFJlZmxlY3QuY29uc3RydWN0KEJvb2xlYW4sIFtdLCBmdW5jdGlvbiAoKSB7fSkpOyB9IGNhdGNoICh0KSB7fSByZXR1cm4gKF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QgPSBmdW5jdGlvbiBfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KCkgeyByZXR1cm4gISF0OyB9KSgpOyB9XG5mdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2YodCkgeyByZXR1cm4gX2dldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LmdldFByb3RvdHlwZU9mLmJpbmQoKSA6IGZ1bmN0aW9uICh0KSB7IHJldHVybiB0Ll9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YodCk7IH0sIF9nZXRQcm90b3R5cGVPZih0KTsgfVxuZnVuY3Rpb24gX2luaGVyaXRzKHQsIGUpIHsgaWYgKFwiZnVuY3Rpb25cIiAhPSB0eXBlb2YgZSAmJiBudWxsICE9PSBlKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb25cIik7IHQucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShlICYmIGUucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiB0LCB3cml0YWJsZTogITAsIGNvbmZpZ3VyYWJsZTogITAgfSB9KSwgT2JqZWN0LmRlZmluZVByb3BlcnR5KHQsIFwicHJvdG90eXBlXCIsIHsgd3JpdGFibGU6ICExIH0pLCBlICYmIF9zZXRQcm90b3R5cGVPZih0LCBlKTsgfVxuZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKHQsIGUpIHsgcmV0dXJuIF9zZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZi5iaW5kKCkgOiBmdW5jdGlvbiAodCwgZSkgeyByZXR1cm4gdC5fX3Byb3RvX18gPSBlLCB0OyB9LCBfc2V0UHJvdG90eXBlT2YodCwgZSk7IH1cbnZhciBPcmRlcmJvb2tDYWxsQnVpbGRlciA9IGV4cG9ydHMuT3JkZXJib29rQ2FsbEJ1aWxkZXIgPSBmdW5jdGlvbiAoX0NhbGxCdWlsZGVyKSB7XG4gIGZ1bmN0aW9uIE9yZGVyYm9va0NhbGxCdWlsZGVyKHNlcnZlclVybCwgc2VsbGluZywgYnV5aW5nKSB7XG4gICAgdmFyIF90aGlzO1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBPcmRlcmJvb2tDYWxsQnVpbGRlcik7XG4gICAgX3RoaXMgPSBfY2FsbFN1cGVyKHRoaXMsIE9yZGVyYm9va0NhbGxCdWlsZGVyLCBbc2VydmVyVXJsXSk7XG4gICAgX3RoaXMudXJsLnNlZ21lbnQoXCJvcmRlcl9ib29rXCIpO1xuICAgIGlmICghc2VsbGluZy5pc05hdGl2ZSgpKSB7XG4gICAgICBfdGhpcy51cmwuc2V0UXVlcnkoXCJzZWxsaW5nX2Fzc2V0X3R5cGVcIiwgc2VsbGluZy5nZXRBc3NldFR5cGUoKSk7XG4gICAgICBfdGhpcy51cmwuc2V0UXVlcnkoXCJzZWxsaW5nX2Fzc2V0X2NvZGVcIiwgc2VsbGluZy5nZXRDb2RlKCkpO1xuICAgICAgX3RoaXMudXJsLnNldFF1ZXJ5KFwic2VsbGluZ19hc3NldF9pc3N1ZXJcIiwgc2VsbGluZy5nZXRJc3N1ZXIoKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIF90aGlzLnVybC5zZXRRdWVyeShcInNlbGxpbmdfYXNzZXRfdHlwZVwiLCBcIm5hdGl2ZVwiKTtcbiAgICB9XG4gICAgaWYgKCFidXlpbmcuaXNOYXRpdmUoKSkge1xuICAgICAgX3RoaXMudXJsLnNldFF1ZXJ5KFwiYnV5aW5nX2Fzc2V0X3R5cGVcIiwgYnV5aW5nLmdldEFzc2V0VHlwZSgpKTtcbiAgICAgIF90aGlzLnVybC5zZXRRdWVyeShcImJ1eWluZ19hc3NldF9jb2RlXCIsIGJ1eWluZy5nZXRDb2RlKCkpO1xuICAgICAgX3RoaXMudXJsLnNldFF1ZXJ5KFwiYnV5aW5nX2Fzc2V0X2lzc3VlclwiLCBidXlpbmcuZ2V0SXNzdWVyKCkpO1xuICAgIH0gZWxzZSB7XG4gICAgICBfdGhpcy51cmwuc2V0UXVlcnkoXCJidXlpbmdfYXNzZXRfdHlwZVwiLCBcIm5hdGl2ZVwiKTtcbiAgICB9XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG4gIF9pbmhlcml0cyhPcmRlcmJvb2tDYWxsQnVpbGRlciwgX0NhbGxCdWlsZGVyKTtcbiAgcmV0dXJuIF9jcmVhdGVDbGFzcyhPcmRlcmJvb2tDYWxsQnVpbGRlcik7XG59KF9jYWxsX2J1aWxkZXIuQ2FsbEJ1aWxkZXIpOyJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@stellar/stellar-sdk/lib/horizon/orderbook_call_builder.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@stellar/stellar-sdk/lib/horizon/payment_call_builder.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@stellar/stellar-sdk/lib/horizon/payment_call_builder.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.PaymentCallBuilder = void 0;\nvar _call_builder = __webpack_require__(/*! ./call_builder */ \"(ssr)/./node_modules/@stellar/stellar-sdk/lib/horizon/call_builder.js\");\nfunction _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\nfunction _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }\nfunction _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nfunction _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }\nfunction _possibleConstructorReturn(t, e) { if (e && (\"object\" == _typeof(e) || \"function\" == typeof e)) return e; if (void 0 !== e) throw new TypeError(\"Derived constructors may only return object or undefined\"); return _assertThisInitialized(t); }\nfunction _assertThisInitialized(e) { if (void 0 === e) throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); return e; }\nfunction _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }\nfunction _getPrototypeOf(t) { return _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function (t) { return t.__proto__ || Object.getPrototypeOf(t); }, _getPrototypeOf(t); }\nfunction _inherits(t, e) { if (\"function\" != typeof e && null !== e) throw new TypeError(\"Super expression must either be null or a function\"); t.prototype = Object.create(e && e.prototype, { constructor: { value: t, writable: !0, configurable: !0 } }), Object.defineProperty(t, \"prototype\", { writable: !1 }), e && _setPrototypeOf(t, e); }\nfunction _setPrototypeOf(t, e) { return _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function (t, e) { return t.__proto__ = e, t; }, _setPrototypeOf(t, e); }\nvar PaymentCallBuilder = exports.PaymentCallBuilder = function (_CallBuilder) {\n  function PaymentCallBuilder(serverUrl) {\n    var _this;\n    _classCallCheck(this, PaymentCallBuilder);\n    _this = _callSuper(this, PaymentCallBuilder, [serverUrl, \"payments\"]);\n    _this.url.segment(\"payments\");\n    return _this;\n  }\n  _inherits(PaymentCallBuilder, _CallBuilder);\n  return _createClass(PaymentCallBuilder, [{\n    key: \"forAccount\",\n    value: function forAccount(accountId) {\n      return this.forEndpoint(\"accounts\", accountId);\n    }\n  }, {\n    key: \"forLedger\",\n    value: function forLedger(sequence) {\n      return this.forEndpoint(\"ledgers\", sequence.toString());\n    }\n  }, {\n    key: \"forTransaction\",\n    value: function forTransaction(transactionId) {\n      return this.forEndpoint(\"transactions\", transactionId);\n    }\n  }, {\n    key: \"includeFailed\",\n    value: function includeFailed(value) {\n      this.url.setQuery(\"include_failed\", value.toString());\n      return this;\n    }\n  }]);\n}(_call_builder.CallBuilder);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHN0ZWxsYXIvc3RlbGxhci1zZGsvbGliL2hvcml6b24vcGF5bWVudF9jYWxsX2J1aWxkZXIuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsc0JBQXNCLDJCQUEyQixvR0FBb0csbUJBQW1CLGlCQUFpQixzSEFBc0g7QUFDL1MsOENBQTZDO0FBQzdDO0FBQ0EsQ0FBQyxFQUFDO0FBQ0YsMEJBQTBCO0FBQzFCLG9CQUFvQixtQkFBTyxDQUFDLDZGQUFnQjtBQUM1QyxpQ0FBaUM7QUFDakMsbUNBQW1DLGdCQUFnQixjQUFjLE9BQU8sY0FBYztBQUN0RixpQ0FBaUMscUhBQXFILGNBQWM7QUFDcEssNkJBQTZCLG1DQUFtQztBQUNoRSw4QkFBOEIsNENBQTRDLCtCQUErQixvQkFBb0IsbUNBQW1DLHNDQUFzQyx1RUFBdUU7QUFDN1EsK0JBQStCO0FBQy9CLDRDQUE0Qyx1RUFBdUUsbUdBQW1HO0FBQ3ROLHFDQUFxQyx5R0FBeUc7QUFDOUksdUNBQXVDLE1BQU0scUZBQXFGLE1BQU0sYUFBYSwyRUFBMkUsYUFBYTtBQUM3Tyw4QkFBOEIsK0ZBQStGLGlEQUFpRDtBQUM5SywyQkFBMkIscUhBQXFILGdEQUFnRCxlQUFlLDRDQUE0QywyQ0FBMkMsY0FBYztBQUNwVCxpQ0FBaUMsa0dBQWtHLDRCQUE0QjtBQUMvSix5QkFBeUIsMEJBQTBCO0FBQ25EO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0gsQ0FBQyIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxVU1VBUklPXFxEb2N1bWVudHNcXEdpdGh1YlxcR2FsYXh5S0otd2FsbGV0LS0tSGFja1xcd2ViXFxub2RlX21vZHVsZXNcXEBzdGVsbGFyXFxzdGVsbGFyLXNka1xcbGliXFxob3Jpem9uXFxwYXltZW50X2NhbGxfYnVpbGRlci5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuZnVuY3Rpb24gX3R5cGVvZihvKSB7IFwiQGJhYmVsL2hlbHBlcnMgLSB0eXBlb2ZcIjsgcmV0dXJuIF90eXBlb2YgPSBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIFN5bWJvbCAmJiBcInN5bWJvbFwiID09IHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPyBmdW5jdGlvbiAobykgeyByZXR1cm4gdHlwZW9mIG87IH0gOiBmdW5jdGlvbiAobykgeyByZXR1cm4gbyAmJiBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIFN5bWJvbCAmJiBvLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgbyAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2YgbzsgfSwgX3R5cGVvZihvKTsgfVxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuUGF5bWVudENhbGxCdWlsZGVyID0gdm9pZCAwO1xudmFyIF9jYWxsX2J1aWxkZXIgPSByZXF1aXJlKFwiLi9jYWxsX2J1aWxkZXJcIik7XG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soYSwgbikgeyBpZiAoIShhIGluc3RhbmNlb2YgbikpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH1cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKGUsIHIpIHsgZm9yICh2YXIgdCA9IDA7IHQgPCByLmxlbmd0aDsgdCsrKSB7IHZhciBvID0gclt0XTsgby5lbnVtZXJhYmxlID0gby5lbnVtZXJhYmxlIHx8ICExLCBvLmNvbmZpZ3VyYWJsZSA9ICEwLCBcInZhbHVlXCIgaW4gbyAmJiAoby53cml0YWJsZSA9ICEwKSwgT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsIF90b1Byb3BlcnR5S2V5KG8ua2V5KSwgbyk7IH0gfVxuZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKGUsIHIsIHQpIHsgcmV0dXJuIHIgJiYgX2RlZmluZVByb3BlcnRpZXMoZS5wcm90b3R5cGUsIHIpLCB0ICYmIF9kZWZpbmVQcm9wZXJ0aWVzKGUsIHQpLCBPYmplY3QuZGVmaW5lUHJvcGVydHkoZSwgXCJwcm90b3R5cGVcIiwgeyB3cml0YWJsZTogITEgfSksIGU7IH1cbmZ1bmN0aW9uIF90b1Byb3BlcnR5S2V5KHQpIHsgdmFyIGkgPSBfdG9QcmltaXRpdmUodCwgXCJzdHJpbmdcIik7IHJldHVybiBcInN5bWJvbFwiID09IF90eXBlb2YoaSkgPyBpIDogaSArIFwiXCI7IH1cbmZ1bmN0aW9uIF90b1ByaW1pdGl2ZSh0LCByKSB7IGlmIChcIm9iamVjdFwiICE9IF90eXBlb2YodCkgfHwgIXQpIHJldHVybiB0OyB2YXIgZSA9IHRbU3ltYm9sLnRvUHJpbWl0aXZlXTsgaWYgKHZvaWQgMCAhPT0gZSkgeyB2YXIgaSA9IGUuY2FsbCh0LCByIHx8IFwiZGVmYXVsdFwiKTsgaWYgKFwib2JqZWN0XCIgIT0gX3R5cGVvZihpKSkgcmV0dXJuIGk7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJAQHRvUHJpbWl0aXZlIG11c3QgcmV0dXJuIGEgcHJpbWl0aXZlIHZhbHVlLlwiKTsgfSByZXR1cm4gKFwic3RyaW5nXCIgPT09IHIgPyBTdHJpbmcgOiBOdW1iZXIpKHQpOyB9XG5mdW5jdGlvbiBfY2FsbFN1cGVyKHQsIG8sIGUpIHsgcmV0dXJuIG8gPSBfZ2V0UHJvdG90eXBlT2YobyksIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHQsIF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKSA/IFJlZmxlY3QuY29uc3RydWN0KG8sIGUgfHwgW10sIF9nZXRQcm90b3R5cGVPZih0KS5jb25zdHJ1Y3RvcikgOiBvLmFwcGx5KHQsIGUpKTsgfVxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odCwgZSkgeyBpZiAoZSAmJiAoXCJvYmplY3RcIiA9PSBfdHlwZW9mKGUpIHx8IFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgZSkpIHJldHVybiBlOyBpZiAodm9pZCAwICE9PSBlKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiRGVyaXZlZCBjb25zdHJ1Y3RvcnMgbWF5IG9ubHkgcmV0dXJuIG9iamVjdCBvciB1bmRlZmluZWRcIik7IHJldHVybiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHQpOyB9XG5mdW5jdGlvbiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKGUpIHsgaWYgKHZvaWQgMCA9PT0gZSkgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyByZXR1cm4gZTsgfVxuZnVuY3Rpb24gX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpIHsgdHJ5IHsgdmFyIHQgPSAhQm9vbGVhbi5wcm90b3R5cGUudmFsdWVPZi5jYWxsKFJlZmxlY3QuY29uc3RydWN0KEJvb2xlYW4sIFtdLCBmdW5jdGlvbiAoKSB7fSkpOyB9IGNhdGNoICh0KSB7fSByZXR1cm4gKF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QgPSBmdW5jdGlvbiBfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KCkgeyByZXR1cm4gISF0OyB9KSgpOyB9XG5mdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2YodCkgeyByZXR1cm4gX2dldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LmdldFByb3RvdHlwZU9mLmJpbmQoKSA6IGZ1bmN0aW9uICh0KSB7IHJldHVybiB0Ll9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YodCk7IH0sIF9nZXRQcm90b3R5cGVPZih0KTsgfVxuZnVuY3Rpb24gX2luaGVyaXRzKHQsIGUpIHsgaWYgKFwiZnVuY3Rpb25cIiAhPSB0eXBlb2YgZSAmJiBudWxsICE9PSBlKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb25cIik7IHQucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShlICYmIGUucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiB0LCB3cml0YWJsZTogITAsIGNvbmZpZ3VyYWJsZTogITAgfSB9KSwgT2JqZWN0LmRlZmluZVByb3BlcnR5KHQsIFwicHJvdG90eXBlXCIsIHsgd3JpdGFibGU6ICExIH0pLCBlICYmIF9zZXRQcm90b3R5cGVPZih0LCBlKTsgfVxuZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKHQsIGUpIHsgcmV0dXJuIF9zZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZi5iaW5kKCkgOiBmdW5jdGlvbiAodCwgZSkgeyByZXR1cm4gdC5fX3Byb3RvX18gPSBlLCB0OyB9LCBfc2V0UHJvdG90eXBlT2YodCwgZSk7IH1cbnZhciBQYXltZW50Q2FsbEJ1aWxkZXIgPSBleHBvcnRzLlBheW1lbnRDYWxsQnVpbGRlciA9IGZ1bmN0aW9uIChfQ2FsbEJ1aWxkZXIpIHtcbiAgZnVuY3Rpb24gUGF5bWVudENhbGxCdWlsZGVyKHNlcnZlclVybCkge1xuICAgIHZhciBfdGhpcztcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgUGF5bWVudENhbGxCdWlsZGVyKTtcbiAgICBfdGhpcyA9IF9jYWxsU3VwZXIodGhpcywgUGF5bWVudENhbGxCdWlsZGVyLCBbc2VydmVyVXJsLCBcInBheW1lbnRzXCJdKTtcbiAgICBfdGhpcy51cmwuc2VnbWVudChcInBheW1lbnRzXCIpO1xuICAgIHJldHVybiBfdGhpcztcbiAgfVxuICBfaW5oZXJpdHMoUGF5bWVudENhbGxCdWlsZGVyLCBfQ2FsbEJ1aWxkZXIpO1xuICByZXR1cm4gX2NyZWF0ZUNsYXNzKFBheW1lbnRDYWxsQnVpbGRlciwgW3tcbiAgICBrZXk6IFwiZm9yQWNjb3VudFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBmb3JBY2NvdW50KGFjY291bnRJZCkge1xuICAgICAgcmV0dXJuIHRoaXMuZm9yRW5kcG9pbnQoXCJhY2NvdW50c1wiLCBhY2NvdW50SWQpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJmb3JMZWRnZXJcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZm9yTGVkZ2VyKHNlcXVlbmNlKSB7XG4gICAgICByZXR1cm4gdGhpcy5mb3JFbmRwb2ludChcImxlZGdlcnNcIiwgc2VxdWVuY2UudG9TdHJpbmcoKSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImZvclRyYW5zYWN0aW9uXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGZvclRyYW5zYWN0aW9uKHRyYW5zYWN0aW9uSWQpIHtcbiAgICAgIHJldHVybiB0aGlzLmZvckVuZHBvaW50KFwidHJhbnNhY3Rpb25zXCIsIHRyYW5zYWN0aW9uSWQpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJpbmNsdWRlRmFpbGVkXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGluY2x1ZGVGYWlsZWQodmFsdWUpIHtcbiAgICAgIHRoaXMudXJsLnNldFF1ZXJ5KFwiaW5jbHVkZV9mYWlsZWRcIiwgdmFsdWUudG9TdHJpbmcoKSk7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gIH1dKTtcbn0oX2NhbGxfYnVpbGRlci5DYWxsQnVpbGRlcik7Il0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@stellar/stellar-sdk/lib/horizon/payment_call_builder.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@stellar/stellar-sdk/lib/horizon/server.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@stellar/stellar-sdk/lib/horizon/server.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.SUBMIT_TRANSACTION_TIMEOUT = exports.HorizonServer = void 0;\nvar _bignumber = _interopRequireDefault(__webpack_require__(/*! bignumber.js */ \"(ssr)/./node_modules/bignumber.js/bignumber.js\"));\nvar _stellarBase = __webpack_require__(/*! @stellar/stellar-base */ \"(ssr)/./node_modules/@stellar/stellar-base/lib/index.js\");\nvar _urijs = _interopRequireDefault(__webpack_require__(/*! urijs */ \"(ssr)/./node_modules/urijs/src/URI.js\"));\nvar _call_builder = __webpack_require__(/*! ./call_builder */ \"(ssr)/./node_modules/@stellar/stellar-sdk/lib/horizon/call_builder.js\");\nvar _config = __webpack_require__(/*! ../config */ \"(ssr)/./node_modules/@stellar/stellar-sdk/lib/config.js\");\nvar _errors = __webpack_require__(/*! ../errors */ \"(ssr)/./node_modules/@stellar/stellar-sdk/lib/errors/index.js\");\nvar _account_call_builder = __webpack_require__(/*! ./account_call_builder */ \"(ssr)/./node_modules/@stellar/stellar-sdk/lib/horizon/account_call_builder.js\");\nvar _account_response = __webpack_require__(/*! ./account_response */ \"(ssr)/./node_modules/@stellar/stellar-sdk/lib/horizon/account_response.js\");\nvar _assets_call_builder = __webpack_require__(/*! ./assets_call_builder */ \"(ssr)/./node_modules/@stellar/stellar-sdk/lib/horizon/assets_call_builder.js\");\nvar _claimable_balances_call_builder = __webpack_require__(/*! ./claimable_balances_call_builder */ \"(ssr)/./node_modules/@stellar/stellar-sdk/lib/horizon/claimable_balances_call_builder.js\");\nvar _effect_call_builder = __webpack_require__(/*! ./effect_call_builder */ \"(ssr)/./node_modules/@stellar/stellar-sdk/lib/horizon/effect_call_builder.js\");\nvar _friendbot_builder = __webpack_require__(/*! ./friendbot_builder */ \"(ssr)/./node_modules/@stellar/stellar-sdk/lib/horizon/friendbot_builder.js\");\nvar _ledger_call_builder = __webpack_require__(/*! ./ledger_call_builder */ \"(ssr)/./node_modules/@stellar/stellar-sdk/lib/horizon/ledger_call_builder.js\");\nvar _liquidity_pool_call_builder = __webpack_require__(/*! ./liquidity_pool_call_builder */ \"(ssr)/./node_modules/@stellar/stellar-sdk/lib/horizon/liquidity_pool_call_builder.js\");\nvar _offer_call_builder = __webpack_require__(/*! ./offer_call_builder */ \"(ssr)/./node_modules/@stellar/stellar-sdk/lib/horizon/offer_call_builder.js\");\nvar _operation_call_builder = __webpack_require__(/*! ./operation_call_builder */ \"(ssr)/./node_modules/@stellar/stellar-sdk/lib/horizon/operation_call_builder.js\");\nvar _orderbook_call_builder = __webpack_require__(/*! ./orderbook_call_builder */ \"(ssr)/./node_modules/@stellar/stellar-sdk/lib/horizon/orderbook_call_builder.js\");\nvar _payment_call_builder = __webpack_require__(/*! ./payment_call_builder */ \"(ssr)/./node_modules/@stellar/stellar-sdk/lib/horizon/payment_call_builder.js\");\nvar _strict_receive_path_call_builder = __webpack_require__(/*! ./strict_receive_path_call_builder */ \"(ssr)/./node_modules/@stellar/stellar-sdk/lib/horizon/strict_receive_path_call_builder.js\");\nvar _strict_send_path_call_builder = __webpack_require__(/*! ./strict_send_path_call_builder */ \"(ssr)/./node_modules/@stellar/stellar-sdk/lib/horizon/strict_send_path_call_builder.js\");\nvar _trade_aggregation_call_builder = __webpack_require__(/*! ./trade_aggregation_call_builder */ \"(ssr)/./node_modules/@stellar/stellar-sdk/lib/horizon/trade_aggregation_call_builder.js\");\nvar _trades_call_builder = __webpack_require__(/*! ./trades_call_builder */ \"(ssr)/./node_modules/@stellar/stellar-sdk/lib/horizon/trades_call_builder.js\");\nvar _transaction_call_builder = __webpack_require__(/*! ./transaction_call_builder */ \"(ssr)/./node_modules/@stellar/stellar-sdk/lib/horizon/transaction_call_builder.js\");\nvar _horizon_axios_client = _interopRequireWildcard(__webpack_require__(/*! ./horizon_axios_client */ \"(ssr)/./node_modules/@stellar/stellar-sdk/lib/horizon/horizon_axios_client.js\"));\nfunction _getRequireWildcardCache(e) { if (\"function\" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }\nfunction _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || \"object\" != _typeof(e) && \"function\" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if (\"default\" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }\nfunction _regeneratorRuntime() { \"use strict\"; _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = \"function\" == typeof Symbol ? Symbol : {}, a = i.iterator || \"@@iterator\", c = i.asyncIterator || \"@@asyncIterator\", u = i.toStringTag || \"@@toStringTag\"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, \"\"); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, \"_invoke\", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: \"normal\", arg: t.call(e, r) }; } catch (t) { return { type: \"throw\", arg: t }; } } e.wrap = wrap; var h = \"suspendedStart\", l = \"suspendedYield\", f = \"executing\", s = \"completed\", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { [\"next\", \"throw\", \"return\"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if (\"throw\" !== c.type) { var u = c.arg, h = u.value; return h && \"object\" == _typeof(h) && n.call(h, \"__await\") ? e.resolve(h.__await).then(function (t) { invoke(\"next\", t, i, a); }, function (t) { invoke(\"throw\", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke(\"throw\", t, i, a); }); } a(c.arg); } var r; o(this, \"_invoke\", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw Error(\"Generator is already running\"); if (o === s) { if (\"throw\" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if (\"next\" === n.method) n.sent = n._sent = n.arg;else if (\"throw\" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else \"return\" === n.method && n.abrupt(\"return\", n.arg); o = f; var p = tryCatch(e, r, n); if (\"normal\" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } \"throw\" === p.type && (o = s, n.method = \"throw\", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, \"throw\" === n && e.iterator.return && (r.method = \"return\", r.arg = t, maybeInvokeDelegate(e, r), \"throw\" === r.method) || \"return\" !== n && (r.method = \"throw\", r.arg = new TypeError(\"The iterator does not provide a '\" + n + \"' method\")), y; var i = tryCatch(o, e.iterator, r.arg); if (\"throw\" === i.type) return r.method = \"throw\", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, \"return\" !== r.method && (r.method = \"next\", r.arg = t), r.delegate = null, y) : a : (r.method = \"throw\", r.arg = new TypeError(\"iterator result is not an object\"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = \"normal\", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: \"root\" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || \"\" === e) { var r = e[a]; if (r) return r.call(e); if (\"function\" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(_typeof(e) + \" is not iterable\"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, \"constructor\", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, \"constructor\", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, \"GeneratorFunction\"), e.isGeneratorFunction = function (t) { var e = \"function\" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || \"GeneratorFunction\" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, \"GeneratorFunction\")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, \"Generator\"), define(g, a, function () { return this; }), define(g, \"toString\", function () { return \"[object Generator]\"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) \"t\" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if (\"throw\" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = \"throw\", a.arg = e, r.next = n, o && (r.method = \"next\", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if (\"root\" === i.tryLoc) return handle(\"end\"); if (i.tryLoc <= this.prev) { var c = n.call(i, \"catchLoc\"), u = n.call(i, \"finallyLoc\"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw Error(\"try statement without catch or finally\"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, \"finallyLoc\") && this.prev < o.finallyLoc) { var i = o; break; } } i && (\"break\" === t || \"continue\" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = \"next\", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if (\"throw\" === t.type) throw t.arg; return \"break\" === t.type || \"continue\" === t.type ? this.next = t.arg : \"return\" === t.type ? (this.rval = this.arg = t.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, catch: function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if (\"throw\" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, \"next\" === this.method && (this.arg = t), y; } }, e; }\nfunction asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }\nfunction _asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, \"next\", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, \"throw\", n); } _next(void 0); }); }; }\nfunction _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\nfunction _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }\nfunction _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nvar SUBMIT_TRANSACTION_TIMEOUT = exports.SUBMIT_TRANSACTION_TIMEOUT = 60 * 1000;\nvar STROOPS_IN_LUMEN = 10000000;\nvar ACCOUNT_REQUIRES_MEMO = \"MQ==\";\nfunction getAmountInLumens(amt) {\n  return new _bignumber.default(amt).div(STROOPS_IN_LUMEN).toString();\n}\nvar HorizonServer = exports.HorizonServer = function () {\n  function HorizonServer(serverURL) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    _classCallCheck(this, HorizonServer);\n    this.serverURL = (0, _urijs.default)(serverURL);\n    var allowHttp = typeof opts.allowHttp === \"undefined\" ? _config.Config.isAllowHttp() : opts.allowHttp;\n    var customHeaders = {};\n    if (opts.appName) {\n      customHeaders[\"X-App-Name\"] = opts.appName;\n    }\n    if (opts.appVersion) {\n      customHeaders[\"X-App-Version\"] = opts.appVersion;\n    }\n    if (opts.authToken) {\n      customHeaders[\"X-Auth-Token\"] = opts.authToken;\n    }\n    if (opts.headers) {\n      Object.assign(customHeaders, opts.headers);\n    }\n    if (Object.keys(customHeaders).length > 0) {\n      _horizon_axios_client.default.interceptors.request.use(function (config) {\n        config.headers = config.headers || {};\n        config.headers = Object.assign(config.headers, customHeaders);\n        return config;\n      });\n    }\n    if (this.serverURL.protocol() !== \"https\" && !allowHttp) {\n      throw new Error(\"Cannot connect to insecure horizon server\");\n    }\n  }\n  return _createClass(HorizonServer, [{\n    key: \"fetchTimebounds\",\n    value: (function () {\n      var _fetchTimebounds = _asyncToGenerator(_regeneratorRuntime().mark(function _callee(seconds) {\n        var _isRetry,\n          currentTime,\n          _args = arguments;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              _isRetry = _args.length > 1 && _args[1] !== undefined ? _args[1] : false;\n              currentTime = (0, _horizon_axios_client.getCurrentServerTime)(this.serverURL.hostname());\n              if (!currentTime) {\n                _context.next = 4;\n                break;\n              }\n              return _context.abrupt(\"return\", {\n                minTime: 0,\n                maxTime: currentTime + seconds\n              });\n            case 4:\n              if (!_isRetry) {\n                _context.next = 6;\n                break;\n              }\n              return _context.abrupt(\"return\", {\n                minTime: 0,\n                maxTime: Math.floor(new Date().getTime() / 1000) + seconds\n              });\n            case 6:\n              _context.next = 8;\n              return _horizon_axios_client.default.get((0, _urijs.default)(this.serverURL).toString());\n            case 8:\n              return _context.abrupt(\"return\", this.fetchTimebounds(seconds, true));\n            case 9:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this);\n      }));\n      function fetchTimebounds(_x) {\n        return _fetchTimebounds.apply(this, arguments);\n      }\n      return fetchTimebounds;\n    }())\n  }, {\n    key: \"fetchBaseFee\",\n    value: (function () {\n      var _fetchBaseFee = _asyncToGenerator(_regeneratorRuntime().mark(function _callee2() {\n        var response;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return this.feeStats();\n            case 2:\n              response = _context2.sent;\n              return _context2.abrupt(\"return\", parseInt(response.last_ledger_base_fee, 10) || 100);\n            case 4:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2, this);\n      }));\n      function fetchBaseFee() {\n        return _fetchBaseFee.apply(this, arguments);\n      }\n      return fetchBaseFee;\n    }())\n  }, {\n    key: \"feeStats\",\n    value: (function () {\n      var _feeStats = _asyncToGenerator(_regeneratorRuntime().mark(function _callee3() {\n        var cb;\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) switch (_context3.prev = _context3.next) {\n            case 0:\n              cb = new _call_builder.CallBuilder((0, _urijs.default)(this.serverURL));\n              cb.filter.push([\"fee_stats\"]);\n              return _context3.abrupt(\"return\", cb.call());\n            case 3:\n            case \"end\":\n              return _context3.stop();\n          }\n        }, _callee3, this);\n      }));\n      function feeStats() {\n        return _feeStats.apply(this, arguments);\n      }\n      return feeStats;\n    }())\n  }, {\n    key: \"root\",\n    value: (function () {\n      var _root = _asyncToGenerator(_regeneratorRuntime().mark(function _callee4() {\n        var cb;\n        return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) switch (_context4.prev = _context4.next) {\n            case 0:\n              cb = new _call_builder.CallBuilder((0, _urijs.default)(this.serverURL));\n              return _context4.abrupt(\"return\", cb.call());\n            case 2:\n            case \"end\":\n              return _context4.stop();\n          }\n        }, _callee4, this);\n      }));\n      function root() {\n        return _root.apply(this, arguments);\n      }\n      return root;\n    }())\n  }, {\n    key: \"submitTransaction\",\n    value: (function () {\n      var _submitTransaction = _asyncToGenerator(_regeneratorRuntime().mark(function _callee5(transaction) {\n        var opts,\n          tx,\n          _args5 = arguments;\n        return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n          while (1) switch (_context5.prev = _context5.next) {\n            case 0:\n              opts = _args5.length > 1 && _args5[1] !== undefined ? _args5[1] : {\n                skipMemoRequiredCheck: false\n              };\n              if (opts.skipMemoRequiredCheck) {\n                _context5.next = 4;\n                break;\n              }\n              _context5.next = 4;\n              return this.checkMemoRequired(transaction);\n            case 4:\n              tx = encodeURIComponent(transaction.toEnvelope().toXDR().toString(\"base64\"));\n              return _context5.abrupt(\"return\", _horizon_axios_client.default.post((0, _urijs.default)(this.serverURL).segment(\"transactions\").toString(), \"tx=\".concat(tx), {\n                timeout: SUBMIT_TRANSACTION_TIMEOUT\n              }).then(function (response) {\n                if (!response.data.result_xdr) {\n                  return response.data;\n                }\n                var responseXDR = _stellarBase.xdr.TransactionResult.fromXDR(response.data.result_xdr, \"base64\");\n                var results = responseXDR.result().value();\n                var offerResults;\n                var hasManageOffer;\n                if (results.length) {\n                  offerResults = results.map(function (result, i) {\n                    if (result.value().switch().name !== \"manageBuyOffer\" && result.value().switch().name !== \"manageSellOffer\") {\n                      return null;\n                    }\n                    hasManageOffer = true;\n                    var amountBought = new _bignumber.default(0);\n                    var amountSold = new _bignumber.default(0);\n                    var offerSuccess = result.value().value().success();\n                    var offersClaimed = offerSuccess.offersClaimed().map(function (offerClaimedAtom) {\n                      var offerClaimed = offerClaimedAtom.value();\n                      var sellerId = \"\";\n                      switch (offerClaimedAtom.switch()) {\n                        case _stellarBase.xdr.ClaimAtomType.claimAtomTypeV0():\n                          sellerId = _stellarBase.StrKey.encodeEd25519PublicKey(offerClaimed.sellerEd25519());\n                          break;\n                        case _stellarBase.xdr.ClaimAtomType.claimAtomTypeOrderBook():\n                          sellerId = _stellarBase.StrKey.encodeEd25519PublicKey(offerClaimed.sellerId().ed25519());\n                          break;\n                        default:\n                          throw new Error(\"Invalid offer result type: \".concat(offerClaimedAtom.switch()));\n                      }\n                      var claimedOfferAmountBought = new _bignumber.default(offerClaimed.amountBought().toString());\n                      var claimedOfferAmountSold = new _bignumber.default(offerClaimed.amountSold().toString());\n                      amountBought = amountBought.plus(claimedOfferAmountSold);\n                      amountSold = amountSold.plus(claimedOfferAmountBought);\n                      var sold = _stellarBase.Asset.fromOperation(offerClaimed.assetSold());\n                      var bought = _stellarBase.Asset.fromOperation(offerClaimed.assetBought());\n                      var assetSold = {\n                        type: sold.getAssetType(),\n                        assetCode: sold.getCode(),\n                        issuer: sold.getIssuer()\n                      };\n                      var assetBought = {\n                        type: bought.getAssetType(),\n                        assetCode: bought.getCode(),\n                        issuer: bought.getIssuer()\n                      };\n                      return {\n                        sellerId: sellerId,\n                        offerId: offerClaimed.offerId().toString(),\n                        assetSold: assetSold,\n                        amountSold: getAmountInLumens(claimedOfferAmountSold),\n                        assetBought: assetBought,\n                        amountBought: getAmountInLumens(claimedOfferAmountBought)\n                      };\n                    });\n                    var effect = offerSuccess.offer().switch().name;\n                    var currentOffer;\n                    if (typeof offerSuccess.offer().value === \"function\" && offerSuccess.offer().value()) {\n                      var offerXDR = offerSuccess.offer().value();\n                      currentOffer = {\n                        offerId: offerXDR.offerId().toString(),\n                        selling: {},\n                        buying: {},\n                        amount: getAmountInLumens(offerXDR.amount().toString()),\n                        price: {\n                          n: offerXDR.price().n(),\n                          d: offerXDR.price().d()\n                        }\n                      };\n                      var selling = _stellarBase.Asset.fromOperation(offerXDR.selling());\n                      currentOffer.selling = {\n                        type: selling.getAssetType(),\n                        assetCode: selling.getCode(),\n                        issuer: selling.getIssuer()\n                      };\n                      var buying = _stellarBase.Asset.fromOperation(offerXDR.buying());\n                      currentOffer.buying = {\n                        type: buying.getAssetType(),\n                        assetCode: buying.getCode(),\n                        issuer: buying.getIssuer()\n                      };\n                    }\n                    return {\n                      offersClaimed: offersClaimed,\n                      effect: effect,\n                      operationIndex: i,\n                      currentOffer: currentOffer,\n                      amountBought: getAmountInLumens(amountBought),\n                      amountSold: getAmountInLumens(amountSold),\n                      isFullyOpen: !offersClaimed.length && effect !== \"manageOfferDeleted\",\n                      wasPartiallyFilled: !!offersClaimed.length && effect !== \"manageOfferDeleted\",\n                      wasImmediatelyFilled: !!offersClaimed.length && effect === \"manageOfferDeleted\",\n                      wasImmediatelyDeleted: !offersClaimed.length && effect === \"manageOfferDeleted\"\n                    };\n                  }).filter(function (result) {\n                    return !!result;\n                  });\n                }\n                return _objectSpread(_objectSpread({}, response.data), {}, {\n                  offerResults: hasManageOffer ? offerResults : undefined\n                });\n              }).catch(function (response) {\n                if (response instanceof Error) {\n                  return Promise.reject(response);\n                }\n                return Promise.reject(new _errors.BadResponseError(\"Transaction submission failed. Server responded: \".concat(response.status, \" \").concat(response.statusText), response.data));\n              }));\n            case 6:\n            case \"end\":\n              return _context5.stop();\n          }\n        }, _callee5, this);\n      }));\n      function submitTransaction(_x2) {\n        return _submitTransaction.apply(this, arguments);\n      }\n      return submitTransaction;\n    }())\n  }, {\n    key: \"submitAsyncTransaction\",\n    value: (function () {\n      var _submitAsyncTransaction = _asyncToGenerator(_regeneratorRuntime().mark(function _callee6(transaction) {\n        var opts,\n          tx,\n          _args6 = arguments;\n        return _regeneratorRuntime().wrap(function _callee6$(_context6) {\n          while (1) switch (_context6.prev = _context6.next) {\n            case 0:\n              opts = _args6.length > 1 && _args6[1] !== undefined ? _args6[1] : {\n                skipMemoRequiredCheck: false\n              };\n              if (opts.skipMemoRequiredCheck) {\n                _context6.next = 4;\n                break;\n              }\n              _context6.next = 4;\n              return this.checkMemoRequired(transaction);\n            case 4:\n              tx = encodeURIComponent(transaction.toEnvelope().toXDR().toString(\"base64\"));\n              return _context6.abrupt(\"return\", _horizon_axios_client.default.post((0, _urijs.default)(this.serverURL).segment(\"transactions_async\").toString(), \"tx=\".concat(tx)).then(function (response) {\n                return response.data;\n              }).catch(function (response) {\n                if (response instanceof Error) {\n                  return Promise.reject(response);\n                }\n                return Promise.reject(new _errors.BadResponseError(\"Transaction submission failed. Server responded: \".concat(response.status, \" \").concat(response.statusText), response.data));\n              }));\n            case 6:\n            case \"end\":\n              return _context6.stop();\n          }\n        }, _callee6, this);\n      }));\n      function submitAsyncTransaction(_x3) {\n        return _submitAsyncTransaction.apply(this, arguments);\n      }\n      return submitAsyncTransaction;\n    }())\n  }, {\n    key: \"accounts\",\n    value: function accounts() {\n      return new _account_call_builder.AccountCallBuilder((0, _urijs.default)(this.serverURL));\n    }\n  }, {\n    key: \"claimableBalances\",\n    value: function claimableBalances() {\n      return new _claimable_balances_call_builder.ClaimableBalanceCallBuilder((0, _urijs.default)(this.serverURL));\n    }\n  }, {\n    key: \"ledgers\",\n    value: function ledgers() {\n      return new _ledger_call_builder.LedgerCallBuilder((0, _urijs.default)(this.serverURL));\n    }\n  }, {\n    key: \"transactions\",\n    value: function transactions() {\n      return new _transaction_call_builder.TransactionCallBuilder((0, _urijs.default)(this.serverURL));\n    }\n  }, {\n    key: \"offers\",\n    value: function offers() {\n      return new _offer_call_builder.OfferCallBuilder((0, _urijs.default)(this.serverURL));\n    }\n  }, {\n    key: \"orderbook\",\n    value: function orderbook(selling, buying) {\n      return new _orderbook_call_builder.OrderbookCallBuilder((0, _urijs.default)(this.serverURL), selling, buying);\n    }\n  }, {\n    key: \"trades\",\n    value: function trades() {\n      return new _trades_call_builder.TradesCallBuilder((0, _urijs.default)(this.serverURL));\n    }\n  }, {\n    key: \"operations\",\n    value: function operations() {\n      return new _operation_call_builder.OperationCallBuilder((0, _urijs.default)(this.serverURL));\n    }\n  }, {\n    key: \"liquidityPools\",\n    value: function liquidityPools() {\n      return new _liquidity_pool_call_builder.LiquidityPoolCallBuilder((0, _urijs.default)(this.serverURL));\n    }\n  }, {\n    key: \"strictReceivePaths\",\n    value: function strictReceivePaths(source, destinationAsset, destinationAmount) {\n      return new _strict_receive_path_call_builder.StrictReceivePathCallBuilder((0, _urijs.default)(this.serverURL), source, destinationAsset, destinationAmount);\n    }\n  }, {\n    key: \"strictSendPaths\",\n    value: function strictSendPaths(sourceAsset, sourceAmount, destination) {\n      return new _strict_send_path_call_builder.StrictSendPathCallBuilder((0, _urijs.default)(this.serverURL), sourceAsset, sourceAmount, destination);\n    }\n  }, {\n    key: \"payments\",\n    value: function payments() {\n      return new _payment_call_builder.PaymentCallBuilder((0, _urijs.default)(this.serverURL));\n    }\n  }, {\n    key: \"effects\",\n    value: function effects() {\n      return new _effect_call_builder.EffectCallBuilder((0, _urijs.default)(this.serverURL));\n    }\n  }, {\n    key: \"friendbot\",\n    value: function friendbot(address) {\n      return new _friendbot_builder.FriendbotBuilder((0, _urijs.default)(this.serverURL), address);\n    }\n  }, {\n    key: \"assets\",\n    value: function assets() {\n      return new _assets_call_builder.AssetsCallBuilder((0, _urijs.default)(this.serverURL));\n    }\n  }, {\n    key: \"loadAccount\",\n    value: (function () {\n      var _loadAccount = _asyncToGenerator(_regeneratorRuntime().mark(function _callee7(accountId) {\n        var res;\n        return _regeneratorRuntime().wrap(function _callee7$(_context7) {\n          while (1) switch (_context7.prev = _context7.next) {\n            case 0:\n              _context7.next = 2;\n              return this.accounts().accountId(accountId).call();\n            case 2:\n              res = _context7.sent;\n              return _context7.abrupt(\"return\", new _account_response.AccountResponse(res));\n            case 4:\n            case \"end\":\n              return _context7.stop();\n          }\n        }, _callee7, this);\n      }));\n      function loadAccount(_x4) {\n        return _loadAccount.apply(this, arguments);\n      }\n      return loadAccount;\n    }())\n  }, {\n    key: \"tradeAggregation\",\n    value: function tradeAggregation(base, counter, start_time, end_time, resolution, offset) {\n      return new _trade_aggregation_call_builder.TradeAggregationCallBuilder((0, _urijs.default)(this.serverURL), base, counter, start_time, end_time, resolution, offset);\n    }\n  }, {\n    key: \"checkMemoRequired\",\n    value: (function () {\n      var _checkMemoRequired = _asyncToGenerator(_regeneratorRuntime().mark(function _callee8(transaction) {\n        var destinations, i, operation, destination, account;\n        return _regeneratorRuntime().wrap(function _callee8$(_context8) {\n          while (1) switch (_context8.prev = _context8.next) {\n            case 0:\n              if (transaction instanceof _stellarBase.FeeBumpTransaction) {\n                transaction = transaction.innerTransaction;\n              }\n              if (!(transaction.memo.type !== \"none\")) {\n                _context8.next = 3;\n                break;\n              }\n              return _context8.abrupt(\"return\");\n            case 3:\n              destinations = new Set();\n              i = 0;\n            case 5:\n              if (!(i < transaction.operations.length)) {\n                _context8.next = 36;\n                break;\n              }\n              operation = transaction.operations[i];\n              _context8.t0 = operation.type;\n              _context8.next = _context8.t0 === \"payment\" ? 10 : _context8.t0 === \"pathPaymentStrictReceive\" ? 10 : _context8.t0 === \"pathPaymentStrictSend\" ? 10 : _context8.t0 === \"accountMerge\" ? 10 : 11;\n              break;\n            case 10:\n              return _context8.abrupt(\"break\", 12);\n            case 11:\n              return _context8.abrupt(\"continue\", 33);\n            case 12:\n              destination = operation.destination;\n              if (!destinations.has(destination)) {\n                _context8.next = 15;\n                break;\n              }\n              return _context8.abrupt(\"continue\", 33);\n            case 15:\n              destinations.add(destination);\n              if (!destination.startsWith(\"M\")) {\n                _context8.next = 18;\n                break;\n              }\n              return _context8.abrupt(\"continue\", 33);\n            case 18:\n              _context8.prev = 18;\n              _context8.next = 21;\n              return this.loadAccount(destination);\n            case 21:\n              account = _context8.sent;\n              if (!(account.data_attr[\"config.memo_required\"] === ACCOUNT_REQUIRES_MEMO)) {\n                _context8.next = 24;\n                break;\n              }\n              throw new _errors.AccountRequiresMemoError(\"account requires memo\", destination, i);\n            case 24:\n              _context8.next = 33;\n              break;\n            case 26:\n              _context8.prev = 26;\n              _context8.t1 = _context8[\"catch\"](18);\n              if (!(_context8.t1 instanceof _errors.AccountRequiresMemoError)) {\n                _context8.next = 30;\n                break;\n              }\n              throw _context8.t1;\n            case 30:\n              if (_context8.t1 instanceof _errors.NotFoundError) {\n                _context8.next = 32;\n                break;\n              }\n              throw _context8.t1;\n            case 32:\n              return _context8.abrupt(\"continue\", 33);\n            case 33:\n              i += 1;\n              _context8.next = 5;\n              break;\n            case 36:\n            case \"end\":\n              return _context8.stop();\n          }\n        }, _callee8, this, [[18, 26]]);\n      }));\n      function checkMemoRequired(_x5) {\n        return _checkMemoRequired.apply(this, arguments);\n      }\n      return checkMemoRequired;\n    }())\n  }]);\n}();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@stellar/stellar-sdk/lib/horizon/server.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@stellar/stellar-sdk/lib/horizon/server_api.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@stellar/stellar-sdk/lib/horizon/server_api.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.ServerApi = void 0;\nvar _horizon_api = __webpack_require__(/*! ./horizon_api */ \"(ssr)/./node_modules/@stellar/stellar-sdk/lib/horizon/horizon_api.js\");\nvar Effects = _interopRequireWildcard(__webpack_require__(/*! ./types/effects */ \"(ssr)/./node_modules/@stellar/stellar-sdk/lib/horizon/types/effects.js\"));\nfunction _getRequireWildcardCache(e) { if (\"function\" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }\nfunction _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || \"object\" != _typeof(e) && \"function\" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if (\"default\" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }\nvar ServerApi;\n(function (_ServerApi) {\n  var EffectType = _ServerApi.EffectType = Effects.EffectType;\n  var TradeType = function (TradeType) {\n    TradeType[\"all\"] = \"all\";\n    TradeType[\"liquidityPools\"] = \"liquidity_pool\";\n    TradeType[\"orderbook\"] = \"orderbook\";\n    return TradeType;\n  }({});\n  _ServerApi.TradeType = TradeType;\n  var OperationResponseType = _horizon_api.HorizonApi.OperationResponseType;\n  var OperationResponseTypeI = _horizon_api.HorizonApi.OperationResponseTypeI;\n})(ServerApi || (exports.ServerApi = ServerApi = {}));//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHN0ZWxsYXIvc3RlbGxhci1zZGsvbGliL2hvcml6b24vc2VydmVyX2FwaS5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYixzQkFBc0IsMkJBQTJCLG9HQUFvRyxtQkFBbUIsaUJBQWlCLHNIQUFzSDtBQUMvUyw4Q0FBNkM7QUFDN0M7QUFDQSxDQUFDLEVBQUM7QUFDRixpQkFBaUI7QUFDakIsbUJBQW1CLG1CQUFPLENBQUMsMkZBQWU7QUFDMUMsc0NBQXNDLG1CQUFPLENBQUMsK0ZBQWlCO0FBQy9ELHVDQUF1QywrQ0FBK0MsMENBQTBDLDBFQUEwRSxtQkFBbUI7QUFDN04seUNBQXlDLHVDQUF1Qyw2RUFBNkUsY0FBYyxxQ0FBcUMsb0NBQW9DLFVBQVUsaUJBQWlCLGdFQUFnRSwwQ0FBMEMsOEJBQThCLDBEQUEwRCx3RUFBd0U7QUFDemhCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHLEdBQUc7QUFDTjtBQUNBO0FBQ0E7QUFDQSxDQUFDLGdCQUFnQixpQkFBaUIsaUJBQWlCIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXFVTVUFSSU9cXERvY3VtZW50c1xcR2l0aHViXFxHYWxheHlLSi13YWxsZXQtLS1IYWNrXFx3ZWJcXG5vZGVfbW9kdWxlc1xcQHN0ZWxsYXJcXHN0ZWxsYXItc2RrXFxsaWJcXGhvcml6b25cXHNlcnZlcl9hcGkuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmZ1bmN0aW9uIF90eXBlb2YobykgeyBcIkBiYWJlbC9oZWxwZXJzIC0gdHlwZW9mXCI7IHJldHVybiBfdHlwZW9mID0gXCJmdW5jdGlvblwiID09IHR5cGVvZiBTeW1ib2wgJiYgXCJzeW1ib2xcIiA9PSB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID8gZnVuY3Rpb24gKG8pIHsgcmV0dXJuIHR5cGVvZiBvOyB9IDogZnVuY3Rpb24gKG8pIHsgcmV0dXJuIG8gJiYgXCJmdW5jdGlvblwiID09IHR5cGVvZiBTeW1ib2wgJiYgby5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG8gIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG87IH0sIF90eXBlb2Yobyk7IH1cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLlNlcnZlckFwaSA9IHZvaWQgMDtcbnZhciBfaG9yaXpvbl9hcGkgPSByZXF1aXJlKFwiLi9ob3Jpem9uX2FwaVwiKTtcbnZhciBFZmZlY3RzID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQocmVxdWlyZShcIi4vdHlwZXMvZWZmZWN0c1wiKSk7XG5mdW5jdGlvbiBfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUoZSkgeyBpZiAoXCJmdW5jdGlvblwiICE9IHR5cGVvZiBXZWFrTWFwKSByZXR1cm4gbnVsbDsgdmFyIHIgPSBuZXcgV2Vha01hcCgpLCB0ID0gbmV3IFdlYWtNYXAoKTsgcmV0dXJuIChfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUgPSBmdW5jdGlvbiBfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUoZSkgeyByZXR1cm4gZSA/IHQgOiByOyB9KShlKTsgfVxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQoZSwgcikgeyBpZiAoIXIgJiYgZSAmJiBlLl9fZXNNb2R1bGUpIHJldHVybiBlOyBpZiAobnVsbCA9PT0gZSB8fCBcIm9iamVjdFwiICE9IF90eXBlb2YoZSkgJiYgXCJmdW5jdGlvblwiICE9IHR5cGVvZiBlKSByZXR1cm4geyBkZWZhdWx0OiBlIH07IHZhciB0ID0gX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlKHIpOyBpZiAodCAmJiB0LmhhcyhlKSkgcmV0dXJuIHQuZ2V0KGUpOyB2YXIgbiA9IHsgX19wcm90b19fOiBudWxsIH0sIGEgPSBPYmplY3QuZGVmaW5lUHJvcGVydHkgJiYgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjsgZm9yICh2YXIgdSBpbiBlKSBpZiAoXCJkZWZhdWx0XCIgIT09IHUgJiYge30uaGFzT3duUHJvcGVydHkuY2FsbChlLCB1KSkgeyB2YXIgaSA9IGEgPyBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGUsIHUpIDogbnVsbDsgaSAmJiAoaS5nZXQgfHwgaS5zZXQpID8gT2JqZWN0LmRlZmluZVByb3BlcnR5KG4sIHUsIGkpIDogblt1XSA9IGVbdV07IH0gcmV0dXJuIG4uZGVmYXVsdCA9IGUsIHQgJiYgdC5zZXQoZSwgbiksIG47IH1cbnZhciBTZXJ2ZXJBcGk7XG4oZnVuY3Rpb24gKF9TZXJ2ZXJBcGkpIHtcbiAgdmFyIEVmZmVjdFR5cGUgPSBfU2VydmVyQXBpLkVmZmVjdFR5cGUgPSBFZmZlY3RzLkVmZmVjdFR5cGU7XG4gIHZhciBUcmFkZVR5cGUgPSBmdW5jdGlvbiAoVHJhZGVUeXBlKSB7XG4gICAgVHJhZGVUeXBlW1wiYWxsXCJdID0gXCJhbGxcIjtcbiAgICBUcmFkZVR5cGVbXCJsaXF1aWRpdHlQb29sc1wiXSA9IFwibGlxdWlkaXR5X3Bvb2xcIjtcbiAgICBUcmFkZVR5cGVbXCJvcmRlcmJvb2tcIl0gPSBcIm9yZGVyYm9va1wiO1xuICAgIHJldHVybiBUcmFkZVR5cGU7XG4gIH0oe30pO1xuICBfU2VydmVyQXBpLlRyYWRlVHlwZSA9IFRyYWRlVHlwZTtcbiAgdmFyIE9wZXJhdGlvblJlc3BvbnNlVHlwZSA9IF9ob3Jpem9uX2FwaS5Ib3Jpem9uQXBpLk9wZXJhdGlvblJlc3BvbnNlVHlwZTtcbiAgdmFyIE9wZXJhdGlvblJlc3BvbnNlVHlwZUkgPSBfaG9yaXpvbl9hcGkuSG9yaXpvbkFwaS5PcGVyYXRpb25SZXNwb25zZVR5cGVJO1xufSkoU2VydmVyQXBpIHx8IChleHBvcnRzLlNlcnZlckFwaSA9IFNlcnZlckFwaSA9IHt9KSk7Il0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@stellar/stellar-sdk/lib/horizon/server_api.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@stellar/stellar-sdk/lib/horizon/strict_receive_path_call_builder.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/@stellar/stellar-sdk/lib/horizon/strict_receive_path_call_builder.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.StrictReceivePathCallBuilder = void 0;\nvar _call_builder = __webpack_require__(/*! ./call_builder */ \"(ssr)/./node_modules/@stellar/stellar-sdk/lib/horizon/call_builder.js\");\nfunction _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }\nfunction _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nfunction _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\nfunction _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }\nfunction _possibleConstructorReturn(t, e) { if (e && (\"object\" == _typeof(e) || \"function\" == typeof e)) return e; if (void 0 !== e) throw new TypeError(\"Derived constructors may only return object or undefined\"); return _assertThisInitialized(t); }\nfunction _assertThisInitialized(e) { if (void 0 === e) throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); return e; }\nfunction _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }\nfunction _getPrototypeOf(t) { return _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function (t) { return t.__proto__ || Object.getPrototypeOf(t); }, _getPrototypeOf(t); }\nfunction _inherits(t, e) { if (\"function\" != typeof e && null !== e) throw new TypeError(\"Super expression must either be null or a function\"); t.prototype = Object.create(e && e.prototype, { constructor: { value: t, writable: !0, configurable: !0 } }), Object.defineProperty(t, \"prototype\", { writable: !1 }), e && _setPrototypeOf(t, e); }\nfunction _setPrototypeOf(t, e) { return _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function (t, e) { return t.__proto__ = e, t; }, _setPrototypeOf(t, e); }\nvar StrictReceivePathCallBuilder = exports.StrictReceivePathCallBuilder = function (_CallBuilder) {\n  function StrictReceivePathCallBuilder(serverUrl, source, destinationAsset, destinationAmount) {\n    var _this;\n    _classCallCheck(this, StrictReceivePathCallBuilder);\n    _this = _callSuper(this, StrictReceivePathCallBuilder, [serverUrl]);\n    _this.url.segment(\"paths/strict-receive\");\n    if (typeof source === \"string\") {\n      _this.url.setQuery(\"source_account\", source);\n    } else {\n      var assets = source.map(function (asset) {\n        if (asset.isNative()) {\n          return \"native\";\n        }\n        return \"\".concat(asset.getCode(), \":\").concat(asset.getIssuer());\n      }).join(\",\");\n      _this.url.setQuery(\"source_assets\", assets);\n    }\n    _this.url.setQuery(\"destination_amount\", destinationAmount);\n    if (!destinationAsset.isNative()) {\n      _this.url.setQuery(\"destination_asset_type\", destinationAsset.getAssetType());\n      _this.url.setQuery(\"destination_asset_code\", destinationAsset.getCode());\n      _this.url.setQuery(\"destination_asset_issuer\", destinationAsset.getIssuer());\n    } else {\n      _this.url.setQuery(\"destination_asset_type\", \"native\");\n    }\n    return _this;\n  }\n  _inherits(StrictReceivePathCallBuilder, _CallBuilder);\n  return _createClass(StrictReceivePathCallBuilder);\n}(_call_builder.CallBuilder);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHN0ZWxsYXIvc3RlbGxhci1zZGsvbGliL2hvcml6b24vc3RyaWN0X3JlY2VpdmVfcGF0aF9jYWxsX2J1aWxkZXIuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsc0JBQXNCLDJCQUEyQixvR0FBb0csbUJBQW1CLGlCQUFpQixzSEFBc0g7QUFDL1MsOENBQTZDO0FBQzdDO0FBQ0EsQ0FBQyxFQUFDO0FBQ0Ysb0NBQW9DO0FBQ3BDLG9CQUFvQixtQkFBTyxDQUFDLDZGQUFnQjtBQUM1QyxtQ0FBbUMsZ0JBQWdCLGNBQWMsT0FBTyxjQUFjO0FBQ3RGLGlDQUFpQyxxSEFBcUgsY0FBYztBQUNwSyw2QkFBNkIsbUNBQW1DO0FBQ2hFLDhCQUE4Qiw0Q0FBNEMsK0JBQStCLG9CQUFvQixtQ0FBbUMsc0NBQXNDLHVFQUF1RTtBQUM3USxpQ0FBaUM7QUFDakMsK0JBQStCO0FBQy9CLDRDQUE0Qyx1RUFBdUUsbUdBQW1HO0FBQ3ROLHFDQUFxQyx5R0FBeUc7QUFDOUksdUNBQXVDLE1BQU0scUZBQXFGLE1BQU0sYUFBYSwyRUFBMkUsYUFBYTtBQUM3Tyw4QkFBOEIsK0ZBQStGLGlEQUFpRDtBQUM5SywyQkFBMkIscUhBQXFILGdEQUFnRCxlQUFlLDRDQUE0QywyQ0FBMkMsY0FBYztBQUNwVCxpQ0FBaUMsa0dBQWtHLDRCQUE0QjtBQUMvSixtQ0FBbUMsb0NBQW9DO0FBQ3ZFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQyIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxVU1VBUklPXFxEb2N1bWVudHNcXEdpdGh1YlxcR2FsYXh5S0otd2FsbGV0LS0tSGFja1xcd2ViXFxub2RlX21vZHVsZXNcXEBzdGVsbGFyXFxzdGVsbGFyLXNka1xcbGliXFxob3Jpem9uXFxzdHJpY3RfcmVjZWl2ZV9wYXRoX2NhbGxfYnVpbGRlci5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuZnVuY3Rpb24gX3R5cGVvZihvKSB7IFwiQGJhYmVsL2hlbHBlcnMgLSB0eXBlb2ZcIjsgcmV0dXJuIF90eXBlb2YgPSBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIFN5bWJvbCAmJiBcInN5bWJvbFwiID09IHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPyBmdW5jdGlvbiAobykgeyByZXR1cm4gdHlwZW9mIG87IH0gOiBmdW5jdGlvbiAobykgeyByZXR1cm4gbyAmJiBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIFN5bWJvbCAmJiBvLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgbyAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2YgbzsgfSwgX3R5cGVvZihvKTsgfVxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuU3RyaWN0UmVjZWl2ZVBhdGhDYWxsQnVpbGRlciA9IHZvaWQgMDtcbnZhciBfY2FsbF9idWlsZGVyID0gcmVxdWlyZShcIi4vY2FsbF9idWlsZGVyXCIpO1xuZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXMoZSwgcikgeyBmb3IgKHZhciB0ID0gMDsgdCA8IHIubGVuZ3RoOyB0KyspIHsgdmFyIG8gPSByW3RdOyBvLmVudW1lcmFibGUgPSBvLmVudW1lcmFibGUgfHwgITEsIG8uY29uZmlndXJhYmxlID0gITAsIFwidmFsdWVcIiBpbiBvICYmIChvLndyaXRhYmxlID0gITApLCBPYmplY3QuZGVmaW5lUHJvcGVydHkoZSwgX3RvUHJvcGVydHlLZXkoby5rZXkpLCBvKTsgfSB9XG5mdW5jdGlvbiBfY3JlYXRlQ2xhc3MoZSwgciwgdCkgeyByZXR1cm4gciAmJiBfZGVmaW5lUHJvcGVydGllcyhlLnByb3RvdHlwZSwgciksIHQgJiYgX2RlZmluZVByb3BlcnRpZXMoZSwgdCksIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLCBcInByb3RvdHlwZVwiLCB7IHdyaXRhYmxlOiAhMSB9KSwgZTsgfVxuZnVuY3Rpb24gX3RvUHJvcGVydHlLZXkodCkgeyB2YXIgaSA9IF90b1ByaW1pdGl2ZSh0LCBcInN0cmluZ1wiKTsgcmV0dXJuIFwic3ltYm9sXCIgPT0gX3R5cGVvZihpKSA/IGkgOiBpICsgXCJcIjsgfVxuZnVuY3Rpb24gX3RvUHJpbWl0aXZlKHQsIHIpIHsgaWYgKFwib2JqZWN0XCIgIT0gX3R5cGVvZih0KSB8fCAhdCkgcmV0dXJuIHQ7IHZhciBlID0gdFtTeW1ib2wudG9QcmltaXRpdmVdOyBpZiAodm9pZCAwICE9PSBlKSB7IHZhciBpID0gZS5jYWxsKHQsIHIgfHwgXCJkZWZhdWx0XCIpOyBpZiAoXCJvYmplY3RcIiAhPSBfdHlwZW9mKGkpKSByZXR1cm4gaTsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkBAdG9QcmltaXRpdmUgbXVzdCByZXR1cm4gYSBwcmltaXRpdmUgdmFsdWUuXCIpOyB9IHJldHVybiAoXCJzdHJpbmdcIiA9PT0gciA/IFN0cmluZyA6IE51bWJlcikodCk7IH1cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhhLCBuKSB7IGlmICghKGEgaW5zdGFuY2VvZiBuKSkgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfVxuZnVuY3Rpb24gX2NhbGxTdXBlcih0LCBvLCBlKSB7IHJldHVybiBvID0gX2dldFByb3RvdHlwZU9mKG8pLCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0LCBfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KCkgPyBSZWZsZWN0LmNvbnN0cnVjdChvLCBlIHx8IFtdLCBfZ2V0UHJvdG90eXBlT2YodCkuY29uc3RydWN0b3IpIDogby5hcHBseSh0LCBlKSk7IH1cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHQsIGUpIHsgaWYgKGUgJiYgKFwib2JqZWN0XCIgPT0gX3R5cGVvZihlKSB8fCBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIGUpKSByZXR1cm4gZTsgaWYgKHZvaWQgMCAhPT0gZSkgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkRlcml2ZWQgY29uc3RydWN0b3JzIG1heSBvbmx5IHJldHVybiBvYmplY3Qgb3IgdW5kZWZpbmVkXCIpOyByZXR1cm4gX2Fzc2VydFRoaXNJbml0aWFsaXplZCh0KTsgfVxuZnVuY3Rpb24gX2Fzc2VydFRoaXNJbml0aWFsaXplZChlKSB7IGlmICh2b2lkIDAgPT09IGUpIHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgcmV0dXJuIGU7IH1cbmZ1bmN0aW9uIF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKSB7IHRyeSB7IHZhciB0ID0gIUJvb2xlYW4ucHJvdG90eXBlLnZhbHVlT2YuY2FsbChSZWZsZWN0LmNvbnN0cnVjdChCb29sZWFuLCBbXSwgZnVuY3Rpb24gKCkge30pKTsgfSBjYXRjaCAodCkge30gcmV0dXJuIChfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0ID0gZnVuY3Rpb24gX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpIHsgcmV0dXJuICEhdDsgfSkoKTsgfVxuZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKHQpIHsgcmV0dXJuIF9nZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5nZXRQcm90b3R5cGVPZi5iaW5kKCkgOiBmdW5jdGlvbiAodCkgeyByZXR1cm4gdC5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKHQpOyB9LCBfZ2V0UHJvdG90eXBlT2YodCk7IH1cbmZ1bmN0aW9uIF9pbmhlcml0cyh0LCBlKSB7IGlmIChcImZ1bmN0aW9uXCIgIT0gdHlwZW9mIGUgJiYgbnVsbCAhPT0gZSkgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uXCIpOyB0LnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoZSAmJiBlLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogdCwgd3JpdGFibGU6ICEwLCBjb25maWd1cmFibGU6ICEwIH0gfSksIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LCBcInByb3RvdHlwZVwiLCB7IHdyaXRhYmxlOiAhMSB9KSwgZSAmJiBfc2V0UHJvdG90eXBlT2YodCwgZSk7IH1cbmZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZih0LCBlKSB7IHJldHVybiBfc2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2YuYmluZCgpIDogZnVuY3Rpb24gKHQsIGUpIHsgcmV0dXJuIHQuX19wcm90b19fID0gZSwgdDsgfSwgX3NldFByb3RvdHlwZU9mKHQsIGUpOyB9XG52YXIgU3RyaWN0UmVjZWl2ZVBhdGhDYWxsQnVpbGRlciA9IGV4cG9ydHMuU3RyaWN0UmVjZWl2ZVBhdGhDYWxsQnVpbGRlciA9IGZ1bmN0aW9uIChfQ2FsbEJ1aWxkZXIpIHtcbiAgZnVuY3Rpb24gU3RyaWN0UmVjZWl2ZVBhdGhDYWxsQnVpbGRlcihzZXJ2ZXJVcmwsIHNvdXJjZSwgZGVzdGluYXRpb25Bc3NldCwgZGVzdGluYXRpb25BbW91bnQpIHtcbiAgICB2YXIgX3RoaXM7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFN0cmljdFJlY2VpdmVQYXRoQ2FsbEJ1aWxkZXIpO1xuICAgIF90aGlzID0gX2NhbGxTdXBlcih0aGlzLCBTdHJpY3RSZWNlaXZlUGF0aENhbGxCdWlsZGVyLCBbc2VydmVyVXJsXSk7XG4gICAgX3RoaXMudXJsLnNlZ21lbnQoXCJwYXRocy9zdHJpY3QtcmVjZWl2ZVwiKTtcbiAgICBpZiAodHlwZW9mIHNvdXJjZSA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgX3RoaXMudXJsLnNldFF1ZXJ5KFwic291cmNlX2FjY291bnRcIiwgc291cmNlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIGFzc2V0cyA9IHNvdXJjZS5tYXAoZnVuY3Rpb24gKGFzc2V0KSB7XG4gICAgICAgIGlmIChhc3NldC5pc05hdGl2ZSgpKSB7XG4gICAgICAgICAgcmV0dXJuIFwibmF0aXZlXCI7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIFwiXCIuY29uY2F0KGFzc2V0LmdldENvZGUoKSwgXCI6XCIpLmNvbmNhdChhc3NldC5nZXRJc3N1ZXIoKSk7XG4gICAgICB9KS5qb2luKFwiLFwiKTtcbiAgICAgIF90aGlzLnVybC5zZXRRdWVyeShcInNvdXJjZV9hc3NldHNcIiwgYXNzZXRzKTtcbiAgICB9XG4gICAgX3RoaXMudXJsLnNldFF1ZXJ5KFwiZGVzdGluYXRpb25fYW1vdW50XCIsIGRlc3RpbmF0aW9uQW1vdW50KTtcbiAgICBpZiAoIWRlc3RpbmF0aW9uQXNzZXQuaXNOYXRpdmUoKSkge1xuICAgICAgX3RoaXMudXJsLnNldFF1ZXJ5KFwiZGVzdGluYXRpb25fYXNzZXRfdHlwZVwiLCBkZXN0aW5hdGlvbkFzc2V0LmdldEFzc2V0VHlwZSgpKTtcbiAgICAgIF90aGlzLnVybC5zZXRRdWVyeShcImRlc3RpbmF0aW9uX2Fzc2V0X2NvZGVcIiwgZGVzdGluYXRpb25Bc3NldC5nZXRDb2RlKCkpO1xuICAgICAgX3RoaXMudXJsLnNldFF1ZXJ5KFwiZGVzdGluYXRpb25fYXNzZXRfaXNzdWVyXCIsIGRlc3RpbmF0aW9uQXNzZXQuZ2V0SXNzdWVyKCkpO1xuICAgIH0gZWxzZSB7XG4gICAgICBfdGhpcy51cmwuc2V0UXVlcnkoXCJkZXN0aW5hdGlvbl9hc3NldF90eXBlXCIsIFwibmF0aXZlXCIpO1xuICAgIH1cbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cbiAgX2luaGVyaXRzKFN0cmljdFJlY2VpdmVQYXRoQ2FsbEJ1aWxkZXIsIF9DYWxsQnVpbGRlcik7XG4gIHJldHVybiBfY3JlYXRlQ2xhc3MoU3RyaWN0UmVjZWl2ZVBhdGhDYWxsQnVpbGRlcik7XG59KF9jYWxsX2J1aWxkZXIuQ2FsbEJ1aWxkZXIpOyJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@stellar/stellar-sdk/lib/horizon/strict_receive_path_call_builder.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@stellar/stellar-sdk/lib/horizon/strict_send_path_call_builder.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/@stellar/stellar-sdk/lib/horizon/strict_send_path_call_builder.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.StrictSendPathCallBuilder = void 0;\nvar _call_builder = __webpack_require__(/*! ./call_builder */ \"(ssr)/./node_modules/@stellar/stellar-sdk/lib/horizon/call_builder.js\");\nfunction _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }\nfunction _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nfunction _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\nfunction _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }\nfunction _possibleConstructorReturn(t, e) { if (e && (\"object\" == _typeof(e) || \"function\" == typeof e)) return e; if (void 0 !== e) throw new TypeError(\"Derived constructors may only return object or undefined\"); return _assertThisInitialized(t); }\nfunction _assertThisInitialized(e) { if (void 0 === e) throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); return e; }\nfunction _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }\nfunction _getPrototypeOf(t) { return _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function (t) { return t.__proto__ || Object.getPrototypeOf(t); }, _getPrototypeOf(t); }\nfunction _inherits(t, e) { if (\"function\" != typeof e && null !== e) throw new TypeError(\"Super expression must either be null or a function\"); t.prototype = Object.create(e && e.prototype, { constructor: { value: t, writable: !0, configurable: !0 } }), Object.defineProperty(t, \"prototype\", { writable: !1 }), e && _setPrototypeOf(t, e); }\nfunction _setPrototypeOf(t, e) { return _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function (t, e) { return t.__proto__ = e, t; }, _setPrototypeOf(t, e); }\nvar StrictSendPathCallBuilder = exports.StrictSendPathCallBuilder = function (_CallBuilder) {\n  function StrictSendPathCallBuilder(serverUrl, sourceAsset, sourceAmount, destination) {\n    var _this;\n    _classCallCheck(this, StrictSendPathCallBuilder);\n    _this = _callSuper(this, StrictSendPathCallBuilder, [serverUrl]);\n    _this.url.segment(\"paths/strict-send\");\n    if (sourceAsset.isNative()) {\n      _this.url.setQuery(\"source_asset_type\", \"native\");\n    } else {\n      _this.url.setQuery(\"source_asset_type\", sourceAsset.getAssetType());\n      _this.url.setQuery(\"source_asset_code\", sourceAsset.getCode());\n      _this.url.setQuery(\"source_asset_issuer\", sourceAsset.getIssuer());\n    }\n    _this.url.setQuery(\"source_amount\", sourceAmount);\n    if (typeof destination === \"string\") {\n      _this.url.setQuery(\"destination_account\", destination);\n    } else {\n      var assets = destination.map(function (asset) {\n        if (asset.isNative()) {\n          return \"native\";\n        }\n        return \"\".concat(asset.getCode(), \":\").concat(asset.getIssuer());\n      }).join(\",\");\n      _this.url.setQuery(\"destination_assets\", assets);\n    }\n    return _this;\n  }\n  _inherits(StrictSendPathCallBuilder, _CallBuilder);\n  return _createClass(StrictSendPathCallBuilder);\n}(_call_builder.CallBuilder);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHN0ZWxsYXIvc3RlbGxhci1zZGsvbGliL2hvcml6b24vc3RyaWN0X3NlbmRfcGF0aF9jYWxsX2J1aWxkZXIuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsc0JBQXNCLDJCQUEyQixvR0FBb0csbUJBQW1CLGlCQUFpQixzSEFBc0g7QUFDL1MsOENBQTZDO0FBQzdDO0FBQ0EsQ0FBQyxFQUFDO0FBQ0YsaUNBQWlDO0FBQ2pDLG9CQUFvQixtQkFBTyxDQUFDLDZGQUFnQjtBQUM1QyxtQ0FBbUMsZ0JBQWdCLGNBQWMsT0FBTyxjQUFjO0FBQ3RGLGlDQUFpQyxxSEFBcUgsY0FBYztBQUNwSyw2QkFBNkIsbUNBQW1DO0FBQ2hFLDhCQUE4Qiw0Q0FBNEMsK0JBQStCLG9CQUFvQixtQ0FBbUMsc0NBQXNDLHVFQUF1RTtBQUM3USxpQ0FBaUM7QUFDakMsK0JBQStCO0FBQy9CLDRDQUE0Qyx1RUFBdUUsbUdBQW1HO0FBQ3ROLHFDQUFxQyx5R0FBeUc7QUFDOUksdUNBQXVDLE1BQU0scUZBQXFGLE1BQU0sYUFBYSwyRUFBMkUsYUFBYTtBQUM3Tyw4QkFBOEIsK0ZBQStGLGlEQUFpRDtBQUM5SywyQkFBMkIscUhBQXFILGdEQUFnRCxlQUFlLDRDQUE0QywyQ0FBMkMsY0FBYztBQUNwVCxpQ0FBaUMsa0dBQWtHLDRCQUE0QjtBQUMvSixnQ0FBZ0MsaUNBQWlDO0FBQ2pFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQyIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxVU1VBUklPXFxEb2N1bWVudHNcXEdpdGh1YlxcR2FsYXh5S0otd2FsbGV0LS0tSGFja1xcd2ViXFxub2RlX21vZHVsZXNcXEBzdGVsbGFyXFxzdGVsbGFyLXNka1xcbGliXFxob3Jpem9uXFxzdHJpY3Rfc2VuZF9wYXRoX2NhbGxfYnVpbGRlci5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuZnVuY3Rpb24gX3R5cGVvZihvKSB7IFwiQGJhYmVsL2hlbHBlcnMgLSB0eXBlb2ZcIjsgcmV0dXJuIF90eXBlb2YgPSBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIFN5bWJvbCAmJiBcInN5bWJvbFwiID09IHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPyBmdW5jdGlvbiAobykgeyByZXR1cm4gdHlwZW9mIG87IH0gOiBmdW5jdGlvbiAobykgeyByZXR1cm4gbyAmJiBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIFN5bWJvbCAmJiBvLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgbyAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2YgbzsgfSwgX3R5cGVvZihvKTsgfVxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuU3RyaWN0U2VuZFBhdGhDYWxsQnVpbGRlciA9IHZvaWQgMDtcbnZhciBfY2FsbF9idWlsZGVyID0gcmVxdWlyZShcIi4vY2FsbF9idWlsZGVyXCIpO1xuZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXMoZSwgcikgeyBmb3IgKHZhciB0ID0gMDsgdCA8IHIubGVuZ3RoOyB0KyspIHsgdmFyIG8gPSByW3RdOyBvLmVudW1lcmFibGUgPSBvLmVudW1lcmFibGUgfHwgITEsIG8uY29uZmlndXJhYmxlID0gITAsIFwidmFsdWVcIiBpbiBvICYmIChvLndyaXRhYmxlID0gITApLCBPYmplY3QuZGVmaW5lUHJvcGVydHkoZSwgX3RvUHJvcGVydHlLZXkoby5rZXkpLCBvKTsgfSB9XG5mdW5jdGlvbiBfY3JlYXRlQ2xhc3MoZSwgciwgdCkgeyByZXR1cm4gciAmJiBfZGVmaW5lUHJvcGVydGllcyhlLnByb3RvdHlwZSwgciksIHQgJiYgX2RlZmluZVByb3BlcnRpZXMoZSwgdCksIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLCBcInByb3RvdHlwZVwiLCB7IHdyaXRhYmxlOiAhMSB9KSwgZTsgfVxuZnVuY3Rpb24gX3RvUHJvcGVydHlLZXkodCkgeyB2YXIgaSA9IF90b1ByaW1pdGl2ZSh0LCBcInN0cmluZ1wiKTsgcmV0dXJuIFwic3ltYm9sXCIgPT0gX3R5cGVvZihpKSA/IGkgOiBpICsgXCJcIjsgfVxuZnVuY3Rpb24gX3RvUHJpbWl0aXZlKHQsIHIpIHsgaWYgKFwib2JqZWN0XCIgIT0gX3R5cGVvZih0KSB8fCAhdCkgcmV0dXJuIHQ7IHZhciBlID0gdFtTeW1ib2wudG9QcmltaXRpdmVdOyBpZiAodm9pZCAwICE9PSBlKSB7IHZhciBpID0gZS5jYWxsKHQsIHIgfHwgXCJkZWZhdWx0XCIpOyBpZiAoXCJvYmplY3RcIiAhPSBfdHlwZW9mKGkpKSByZXR1cm4gaTsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkBAdG9QcmltaXRpdmUgbXVzdCByZXR1cm4gYSBwcmltaXRpdmUgdmFsdWUuXCIpOyB9IHJldHVybiAoXCJzdHJpbmdcIiA9PT0gciA/IFN0cmluZyA6IE51bWJlcikodCk7IH1cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhhLCBuKSB7IGlmICghKGEgaW5zdGFuY2VvZiBuKSkgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfVxuZnVuY3Rpb24gX2NhbGxTdXBlcih0LCBvLCBlKSB7IHJldHVybiBvID0gX2dldFByb3RvdHlwZU9mKG8pLCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0LCBfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KCkgPyBSZWZsZWN0LmNvbnN0cnVjdChvLCBlIHx8IFtdLCBfZ2V0UHJvdG90eXBlT2YodCkuY29uc3RydWN0b3IpIDogby5hcHBseSh0LCBlKSk7IH1cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHQsIGUpIHsgaWYgKGUgJiYgKFwib2JqZWN0XCIgPT0gX3R5cGVvZihlKSB8fCBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIGUpKSByZXR1cm4gZTsgaWYgKHZvaWQgMCAhPT0gZSkgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkRlcml2ZWQgY29uc3RydWN0b3JzIG1heSBvbmx5IHJldHVybiBvYmplY3Qgb3IgdW5kZWZpbmVkXCIpOyByZXR1cm4gX2Fzc2VydFRoaXNJbml0aWFsaXplZCh0KTsgfVxuZnVuY3Rpb24gX2Fzc2VydFRoaXNJbml0aWFsaXplZChlKSB7IGlmICh2b2lkIDAgPT09IGUpIHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgcmV0dXJuIGU7IH1cbmZ1bmN0aW9uIF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKSB7IHRyeSB7IHZhciB0ID0gIUJvb2xlYW4ucHJvdG90eXBlLnZhbHVlT2YuY2FsbChSZWZsZWN0LmNvbnN0cnVjdChCb29sZWFuLCBbXSwgZnVuY3Rpb24gKCkge30pKTsgfSBjYXRjaCAodCkge30gcmV0dXJuIChfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0ID0gZnVuY3Rpb24gX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpIHsgcmV0dXJuICEhdDsgfSkoKTsgfVxuZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKHQpIHsgcmV0dXJuIF9nZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5nZXRQcm90b3R5cGVPZi5iaW5kKCkgOiBmdW5jdGlvbiAodCkgeyByZXR1cm4gdC5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKHQpOyB9LCBfZ2V0UHJvdG90eXBlT2YodCk7IH1cbmZ1bmN0aW9uIF9pbmhlcml0cyh0LCBlKSB7IGlmIChcImZ1bmN0aW9uXCIgIT0gdHlwZW9mIGUgJiYgbnVsbCAhPT0gZSkgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uXCIpOyB0LnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoZSAmJiBlLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogdCwgd3JpdGFibGU6ICEwLCBjb25maWd1cmFibGU6ICEwIH0gfSksIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LCBcInByb3RvdHlwZVwiLCB7IHdyaXRhYmxlOiAhMSB9KSwgZSAmJiBfc2V0UHJvdG90eXBlT2YodCwgZSk7IH1cbmZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZih0LCBlKSB7IHJldHVybiBfc2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2YuYmluZCgpIDogZnVuY3Rpb24gKHQsIGUpIHsgcmV0dXJuIHQuX19wcm90b19fID0gZSwgdDsgfSwgX3NldFByb3RvdHlwZU9mKHQsIGUpOyB9XG52YXIgU3RyaWN0U2VuZFBhdGhDYWxsQnVpbGRlciA9IGV4cG9ydHMuU3RyaWN0U2VuZFBhdGhDYWxsQnVpbGRlciA9IGZ1bmN0aW9uIChfQ2FsbEJ1aWxkZXIpIHtcbiAgZnVuY3Rpb24gU3RyaWN0U2VuZFBhdGhDYWxsQnVpbGRlcihzZXJ2ZXJVcmwsIHNvdXJjZUFzc2V0LCBzb3VyY2VBbW91bnQsIGRlc3RpbmF0aW9uKSB7XG4gICAgdmFyIF90aGlzO1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBTdHJpY3RTZW5kUGF0aENhbGxCdWlsZGVyKTtcbiAgICBfdGhpcyA9IF9jYWxsU3VwZXIodGhpcywgU3RyaWN0U2VuZFBhdGhDYWxsQnVpbGRlciwgW3NlcnZlclVybF0pO1xuICAgIF90aGlzLnVybC5zZWdtZW50KFwicGF0aHMvc3RyaWN0LXNlbmRcIik7XG4gICAgaWYgKHNvdXJjZUFzc2V0LmlzTmF0aXZlKCkpIHtcbiAgICAgIF90aGlzLnVybC5zZXRRdWVyeShcInNvdXJjZV9hc3NldF90eXBlXCIsIFwibmF0aXZlXCIpO1xuICAgIH0gZWxzZSB7XG4gICAgICBfdGhpcy51cmwuc2V0UXVlcnkoXCJzb3VyY2VfYXNzZXRfdHlwZVwiLCBzb3VyY2VBc3NldC5nZXRBc3NldFR5cGUoKSk7XG4gICAgICBfdGhpcy51cmwuc2V0UXVlcnkoXCJzb3VyY2VfYXNzZXRfY29kZVwiLCBzb3VyY2VBc3NldC5nZXRDb2RlKCkpO1xuICAgICAgX3RoaXMudXJsLnNldFF1ZXJ5KFwic291cmNlX2Fzc2V0X2lzc3VlclwiLCBzb3VyY2VBc3NldC5nZXRJc3N1ZXIoKSk7XG4gICAgfVxuICAgIF90aGlzLnVybC5zZXRRdWVyeShcInNvdXJjZV9hbW91bnRcIiwgc291cmNlQW1vdW50KTtcbiAgICBpZiAodHlwZW9mIGRlc3RpbmF0aW9uID09PSBcInN0cmluZ1wiKSB7XG4gICAgICBfdGhpcy51cmwuc2V0UXVlcnkoXCJkZXN0aW5hdGlvbl9hY2NvdW50XCIsIGRlc3RpbmF0aW9uKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIGFzc2V0cyA9IGRlc3RpbmF0aW9uLm1hcChmdW5jdGlvbiAoYXNzZXQpIHtcbiAgICAgICAgaWYgKGFzc2V0LmlzTmF0aXZlKCkpIHtcbiAgICAgICAgICByZXR1cm4gXCJuYXRpdmVcIjtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gXCJcIi5jb25jYXQoYXNzZXQuZ2V0Q29kZSgpLCBcIjpcIikuY29uY2F0KGFzc2V0LmdldElzc3VlcigpKTtcbiAgICAgIH0pLmpvaW4oXCIsXCIpO1xuICAgICAgX3RoaXMudXJsLnNldFF1ZXJ5KFwiZGVzdGluYXRpb25fYXNzZXRzXCIsIGFzc2V0cyk7XG4gICAgfVxuICAgIHJldHVybiBfdGhpcztcbiAgfVxuICBfaW5oZXJpdHMoU3RyaWN0U2VuZFBhdGhDYWxsQnVpbGRlciwgX0NhbGxCdWlsZGVyKTtcbiAgcmV0dXJuIF9jcmVhdGVDbGFzcyhTdHJpY3RTZW5kUGF0aENhbGxCdWlsZGVyKTtcbn0oX2NhbGxfYnVpbGRlci5DYWxsQnVpbGRlcik7Il0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@stellar/stellar-sdk/lib/horizon/strict_send_path_call_builder.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@stellar/stellar-sdk/lib/horizon/trade_aggregation_call_builder.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/@stellar/stellar-sdk/lib/horizon/trade_aggregation_call_builder.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.TradeAggregationCallBuilder = void 0;\nvar _call_builder = __webpack_require__(/*! ./call_builder */ \"(ssr)/./node_modules/@stellar/stellar-sdk/lib/horizon/call_builder.js\");\nvar _errors = __webpack_require__(/*! ../errors */ \"(ssr)/./node_modules/@stellar/stellar-sdk/lib/errors/index.js\");\nfunction _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\nfunction _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }\nfunction _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nfunction _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }\nfunction _possibleConstructorReturn(t, e) { if (e && (\"object\" == _typeof(e) || \"function\" == typeof e)) return e; if (void 0 !== e) throw new TypeError(\"Derived constructors may only return object or undefined\"); return _assertThisInitialized(t); }\nfunction _assertThisInitialized(e) { if (void 0 === e) throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); return e; }\nfunction _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }\nfunction _getPrototypeOf(t) { return _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function (t) { return t.__proto__ || Object.getPrototypeOf(t); }, _getPrototypeOf(t); }\nfunction _inherits(t, e) { if (\"function\" != typeof e && null !== e) throw new TypeError(\"Super expression must either be null or a function\"); t.prototype = Object.create(e && e.prototype, { constructor: { value: t, writable: !0, configurable: !0 } }), Object.defineProperty(t, \"prototype\", { writable: !1 }), e && _setPrototypeOf(t, e); }\nfunction _setPrototypeOf(t, e) { return _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function (t, e) { return t.__proto__ = e, t; }, _setPrototypeOf(t, e); }\nvar allowedResolutions = [60000, 300000, 900000, 3600000, 86400000, 604800000];\nvar TradeAggregationCallBuilder = exports.TradeAggregationCallBuilder = function (_CallBuilder) {\n  function TradeAggregationCallBuilder(serverUrl, base, counter, start_time, end_time, resolution, offset) {\n    var _this;\n    _classCallCheck(this, TradeAggregationCallBuilder);\n    _this = _callSuper(this, TradeAggregationCallBuilder, [serverUrl]);\n    _this.url.segment(\"trade_aggregations\");\n    if (!base.isNative()) {\n      _this.url.setQuery(\"base_asset_type\", base.getAssetType());\n      _this.url.setQuery(\"base_asset_code\", base.getCode());\n      _this.url.setQuery(\"base_asset_issuer\", base.getIssuer());\n    } else {\n      _this.url.setQuery(\"base_asset_type\", \"native\");\n    }\n    if (!counter.isNative()) {\n      _this.url.setQuery(\"counter_asset_type\", counter.getAssetType());\n      _this.url.setQuery(\"counter_asset_code\", counter.getCode());\n      _this.url.setQuery(\"counter_asset_issuer\", counter.getIssuer());\n    } else {\n      _this.url.setQuery(\"counter_asset_type\", \"native\");\n    }\n    if (typeof start_time !== \"number\" || typeof end_time !== \"number\") {\n      throw new _errors.BadRequestError(\"Invalid time bounds\", [start_time, end_time]);\n    } else {\n      _this.url.setQuery(\"start_time\", start_time.toString());\n      _this.url.setQuery(\"end_time\", end_time.toString());\n    }\n    if (!_this.isValidResolution(resolution)) {\n      throw new _errors.BadRequestError(\"Invalid resolution\", resolution);\n    } else {\n      _this.url.setQuery(\"resolution\", resolution.toString());\n    }\n    if (!_this.isValidOffset(offset, resolution)) {\n      throw new _errors.BadRequestError(\"Invalid offset\", offset);\n    } else {\n      _this.url.setQuery(\"offset\", offset.toString());\n    }\n    return _this;\n  }\n  _inherits(TradeAggregationCallBuilder, _CallBuilder);\n  return _createClass(TradeAggregationCallBuilder, [{\n    key: \"isValidResolution\",\n    value: function isValidResolution(resolution) {\n      return allowedResolutions.some(function (allowed) {\n        return allowed === resolution;\n      });\n    }\n  }, {\n    key: \"isValidOffset\",\n    value: function isValidOffset(offset, resolution) {\n      var hour = 3600000;\n      return !(offset > resolution || offset >= 24 * hour || offset % hour !== 0);\n    }\n  }]);\n}(_call_builder.CallBuilder);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@stellar/stellar-sdk/lib/horizon/trade_aggregation_call_builder.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@stellar/stellar-sdk/lib/horizon/trades_call_builder.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@stellar/stellar-sdk/lib/horizon/trades_call_builder.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.TradesCallBuilder = void 0;\nvar _call_builder = __webpack_require__(/*! ./call_builder */ \"(ssr)/./node_modules/@stellar/stellar-sdk/lib/horizon/call_builder.js\");\nfunction _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\nfunction _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }\nfunction _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nfunction _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }\nfunction _possibleConstructorReturn(t, e) { if (e && (\"object\" == _typeof(e) || \"function\" == typeof e)) return e; if (void 0 !== e) throw new TypeError(\"Derived constructors may only return object or undefined\"); return _assertThisInitialized(t); }\nfunction _assertThisInitialized(e) { if (void 0 === e) throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); return e; }\nfunction _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }\nfunction _getPrototypeOf(t) { return _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function (t) { return t.__proto__ || Object.getPrototypeOf(t); }, _getPrototypeOf(t); }\nfunction _inherits(t, e) { if (\"function\" != typeof e && null !== e) throw new TypeError(\"Super expression must either be null or a function\"); t.prototype = Object.create(e && e.prototype, { constructor: { value: t, writable: !0, configurable: !0 } }), Object.defineProperty(t, \"prototype\", { writable: !1 }), e && _setPrototypeOf(t, e); }\nfunction _setPrototypeOf(t, e) { return _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function (t, e) { return t.__proto__ = e, t; }, _setPrototypeOf(t, e); }\nvar TradesCallBuilder = exports.TradesCallBuilder = function (_CallBuilder) {\n  function TradesCallBuilder(serverUrl) {\n    var _this;\n    _classCallCheck(this, TradesCallBuilder);\n    _this = _callSuper(this, TradesCallBuilder, [serverUrl, \"trades\"]);\n    _this.url.segment(\"trades\");\n    return _this;\n  }\n  _inherits(TradesCallBuilder, _CallBuilder);\n  return _createClass(TradesCallBuilder, [{\n    key: \"forAssetPair\",\n    value: function forAssetPair(base, counter) {\n      if (!base.isNative()) {\n        this.url.setQuery(\"base_asset_type\", base.getAssetType());\n        this.url.setQuery(\"base_asset_code\", base.getCode());\n        this.url.setQuery(\"base_asset_issuer\", base.getIssuer());\n      } else {\n        this.url.setQuery(\"base_asset_type\", \"native\");\n      }\n      if (!counter.isNative()) {\n        this.url.setQuery(\"counter_asset_type\", counter.getAssetType());\n        this.url.setQuery(\"counter_asset_code\", counter.getCode());\n        this.url.setQuery(\"counter_asset_issuer\", counter.getIssuer());\n      } else {\n        this.url.setQuery(\"counter_asset_type\", \"native\");\n      }\n      return this;\n    }\n  }, {\n    key: \"forOffer\",\n    value: function forOffer(offerId) {\n      this.url.setQuery(\"offer_id\", offerId);\n      return this;\n    }\n  }, {\n    key: \"forType\",\n    value: function forType(tradeType) {\n      this.url.setQuery(\"trade_type\", tradeType);\n      return this;\n    }\n  }, {\n    key: \"forAccount\",\n    value: function forAccount(accountId) {\n      return this.forEndpoint(\"accounts\", accountId);\n    }\n  }, {\n    key: \"forLiquidityPool\",\n    value: function forLiquidityPool(liquidityPoolId) {\n      return this.forEndpoint(\"liquidity_pools\", liquidityPoolId);\n    }\n  }]);\n}(_call_builder.CallBuilder);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@stellar/stellar-sdk/lib/horizon/trades_call_builder.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@stellar/stellar-sdk/lib/horizon/transaction_call_builder.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/@stellar/stellar-sdk/lib/horizon/transaction_call_builder.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.TransactionCallBuilder = void 0;\nvar _call_builder = __webpack_require__(/*! ./call_builder */ \"(ssr)/./node_modules/@stellar/stellar-sdk/lib/horizon/call_builder.js\");\nfunction _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\nfunction _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }\nfunction _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nfunction _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }\nfunction _possibleConstructorReturn(t, e) { if (e && (\"object\" == _typeof(e) || \"function\" == typeof e)) return e; if (void 0 !== e) throw new TypeError(\"Derived constructors may only return object or undefined\"); return _assertThisInitialized(t); }\nfunction _assertThisInitialized(e) { if (void 0 === e) throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); return e; }\nfunction _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }\nfunction _getPrototypeOf(t) { return _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function (t) { return t.__proto__ || Object.getPrototypeOf(t); }, _getPrototypeOf(t); }\nfunction _inherits(t, e) { if (\"function\" != typeof e && null !== e) throw new TypeError(\"Super expression must either be null or a function\"); t.prototype = Object.create(e && e.prototype, { constructor: { value: t, writable: !0, configurable: !0 } }), Object.defineProperty(t, \"prototype\", { writable: !1 }), e && _setPrototypeOf(t, e); }\nfunction _setPrototypeOf(t, e) { return _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function (t, e) { return t.__proto__ = e, t; }, _setPrototypeOf(t, e); }\nvar TransactionCallBuilder = exports.TransactionCallBuilder = function (_CallBuilder) {\n  function TransactionCallBuilder(serverUrl) {\n    var _this;\n    _classCallCheck(this, TransactionCallBuilder);\n    _this = _callSuper(this, TransactionCallBuilder, [serverUrl, \"transactions\"]);\n    _this.url.segment(\"transactions\");\n    return _this;\n  }\n  _inherits(TransactionCallBuilder, _CallBuilder);\n  return _createClass(TransactionCallBuilder, [{\n    key: \"transaction\",\n    value: function transaction(transactionId) {\n      var builder = new _call_builder.CallBuilder(this.url.clone());\n      builder.filter.push([transactionId]);\n      return builder;\n    }\n  }, {\n    key: \"forAccount\",\n    value: function forAccount(accountId) {\n      return this.forEndpoint(\"accounts\", accountId);\n    }\n  }, {\n    key: \"forClaimableBalance\",\n    value: function forClaimableBalance(claimableBalanceId) {\n      return this.forEndpoint(\"claimable_balances\", claimableBalanceId);\n    }\n  }, {\n    key: \"forLedger\",\n    value: function forLedger(sequence) {\n      return this.forEndpoint(\"ledgers\", sequence.toString());\n    }\n  }, {\n    key: \"forLiquidityPool\",\n    value: function forLiquidityPool(poolId) {\n      return this.forEndpoint(\"liquidity_pools\", poolId);\n    }\n  }, {\n    key: \"includeFailed\",\n    value: function includeFailed(value) {\n      this.url.setQuery(\"include_failed\", value.toString());\n      return this;\n    }\n  }]);\n}(_call_builder.CallBuilder);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHN0ZWxsYXIvc3RlbGxhci1zZGsvbGliL2hvcml6b24vdHJhbnNhY3Rpb25fY2FsbF9idWlsZGVyLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLHNCQUFzQiwyQkFBMkIsb0dBQW9HLG1CQUFtQixpQkFBaUIsc0hBQXNIO0FBQy9TLDhDQUE2QztBQUM3QztBQUNBLENBQUMsRUFBQztBQUNGLDhCQUE4QjtBQUM5QixvQkFBb0IsbUJBQU8sQ0FBQyw2RkFBZ0I7QUFDNUMsaUNBQWlDO0FBQ2pDLG1DQUFtQyxnQkFBZ0IsY0FBYyxPQUFPLGNBQWM7QUFDdEYsaUNBQWlDLHFIQUFxSCxjQUFjO0FBQ3BLLDZCQUE2QixtQ0FBbUM7QUFDaEUsOEJBQThCLDRDQUE0QywrQkFBK0Isb0JBQW9CLG1DQUFtQyxzQ0FBc0MsdUVBQXVFO0FBQzdRLCtCQUErQjtBQUMvQiw0Q0FBNEMsdUVBQXVFLG1HQUFtRztBQUN0TixxQ0FBcUMseUdBQXlHO0FBQzlJLHVDQUF1QyxNQUFNLHFGQUFxRixNQUFNLGFBQWEsMkVBQTJFLGFBQWE7QUFDN08sOEJBQThCLCtGQUErRixpREFBaUQ7QUFDOUssMkJBQTJCLHFIQUFxSCxnREFBZ0QsZUFBZSw0Q0FBNEMsMkNBQTJDLGNBQWM7QUFDcFQsaUNBQWlDLGtHQUFrRyw0QkFBNEI7QUFDL0osNkJBQTZCLDhCQUE4QjtBQUMzRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSCxDQUFDIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXFVTVUFSSU9cXERvY3VtZW50c1xcR2l0aHViXFxHYWxheHlLSi13YWxsZXQtLS1IYWNrXFx3ZWJcXG5vZGVfbW9kdWxlc1xcQHN0ZWxsYXJcXHN0ZWxsYXItc2RrXFxsaWJcXGhvcml6b25cXHRyYW5zYWN0aW9uX2NhbGxfYnVpbGRlci5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuZnVuY3Rpb24gX3R5cGVvZihvKSB7IFwiQGJhYmVsL2hlbHBlcnMgLSB0eXBlb2ZcIjsgcmV0dXJuIF90eXBlb2YgPSBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIFN5bWJvbCAmJiBcInN5bWJvbFwiID09IHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPyBmdW5jdGlvbiAobykgeyByZXR1cm4gdHlwZW9mIG87IH0gOiBmdW5jdGlvbiAobykgeyByZXR1cm4gbyAmJiBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIFN5bWJvbCAmJiBvLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgbyAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2YgbzsgfSwgX3R5cGVvZihvKTsgfVxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuVHJhbnNhY3Rpb25DYWxsQnVpbGRlciA9IHZvaWQgMDtcbnZhciBfY2FsbF9idWlsZGVyID0gcmVxdWlyZShcIi4vY2FsbF9idWlsZGVyXCIpO1xuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGEsIG4pIHsgaWYgKCEoYSBpbnN0YW5jZW9mIG4pKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9XG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyhlLCByKSB7IGZvciAodmFyIHQgPSAwOyB0IDwgci5sZW5ndGg7IHQrKykgeyB2YXIgbyA9IHJbdF07IG8uZW51bWVyYWJsZSA9IG8uZW51bWVyYWJsZSB8fCAhMSwgby5jb25maWd1cmFibGUgPSAhMCwgXCJ2YWx1ZVwiIGluIG8gJiYgKG8ud3JpdGFibGUgPSAhMCksIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLCBfdG9Qcm9wZXJ0eUtleShvLmtleSksIG8pOyB9IH1cbmZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhlLCByLCB0KSB7IHJldHVybiByICYmIF9kZWZpbmVQcm9wZXJ0aWVzKGUucHJvdG90eXBlLCByKSwgdCAmJiBfZGVmaW5lUHJvcGVydGllcyhlLCB0KSwgT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsIFwicHJvdG90eXBlXCIsIHsgd3JpdGFibGU6ICExIH0pLCBlOyB9XG5mdW5jdGlvbiBfdG9Qcm9wZXJ0eUtleSh0KSB7IHZhciBpID0gX3RvUHJpbWl0aXZlKHQsIFwic3RyaW5nXCIpOyByZXR1cm4gXCJzeW1ib2xcIiA9PSBfdHlwZW9mKGkpID8gaSA6IGkgKyBcIlwiOyB9XG5mdW5jdGlvbiBfdG9QcmltaXRpdmUodCwgcikgeyBpZiAoXCJvYmplY3RcIiAhPSBfdHlwZW9mKHQpIHx8ICF0KSByZXR1cm4gdDsgdmFyIGUgPSB0W1N5bWJvbC50b1ByaW1pdGl2ZV07IGlmICh2b2lkIDAgIT09IGUpIHsgdmFyIGkgPSBlLmNhbGwodCwgciB8fCBcImRlZmF1bHRcIik7IGlmIChcIm9iamVjdFwiICE9IF90eXBlb2YoaSkpIHJldHVybiBpOyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQEB0b1ByaW1pdGl2ZSBtdXN0IHJldHVybiBhIHByaW1pdGl2ZSB2YWx1ZS5cIik7IH0gcmV0dXJuIChcInN0cmluZ1wiID09PSByID8gU3RyaW5nIDogTnVtYmVyKSh0KTsgfVxuZnVuY3Rpb24gX2NhbGxTdXBlcih0LCBvLCBlKSB7IHJldHVybiBvID0gX2dldFByb3RvdHlwZU9mKG8pLCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0LCBfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KCkgPyBSZWZsZWN0LmNvbnN0cnVjdChvLCBlIHx8IFtdLCBfZ2V0UHJvdG90eXBlT2YodCkuY29uc3RydWN0b3IpIDogby5hcHBseSh0LCBlKSk7IH1cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHQsIGUpIHsgaWYgKGUgJiYgKFwib2JqZWN0XCIgPT0gX3R5cGVvZihlKSB8fCBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIGUpKSByZXR1cm4gZTsgaWYgKHZvaWQgMCAhPT0gZSkgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkRlcml2ZWQgY29uc3RydWN0b3JzIG1heSBvbmx5IHJldHVybiBvYmplY3Qgb3IgdW5kZWZpbmVkXCIpOyByZXR1cm4gX2Fzc2VydFRoaXNJbml0aWFsaXplZCh0KTsgfVxuZnVuY3Rpb24gX2Fzc2VydFRoaXNJbml0aWFsaXplZChlKSB7IGlmICh2b2lkIDAgPT09IGUpIHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgcmV0dXJuIGU7IH1cbmZ1bmN0aW9uIF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKSB7IHRyeSB7IHZhciB0ID0gIUJvb2xlYW4ucHJvdG90eXBlLnZhbHVlT2YuY2FsbChSZWZsZWN0LmNvbnN0cnVjdChCb29sZWFuLCBbXSwgZnVuY3Rpb24gKCkge30pKTsgfSBjYXRjaCAodCkge30gcmV0dXJuIChfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0ID0gZnVuY3Rpb24gX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpIHsgcmV0dXJuICEhdDsgfSkoKTsgfVxuZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKHQpIHsgcmV0dXJuIF9nZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5nZXRQcm90b3R5cGVPZi5iaW5kKCkgOiBmdW5jdGlvbiAodCkgeyByZXR1cm4gdC5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKHQpOyB9LCBfZ2V0UHJvdG90eXBlT2YodCk7IH1cbmZ1bmN0aW9uIF9pbmhlcml0cyh0LCBlKSB7IGlmIChcImZ1bmN0aW9uXCIgIT0gdHlwZW9mIGUgJiYgbnVsbCAhPT0gZSkgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uXCIpOyB0LnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoZSAmJiBlLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogdCwgd3JpdGFibGU6ICEwLCBjb25maWd1cmFibGU6ICEwIH0gfSksIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LCBcInByb3RvdHlwZVwiLCB7IHdyaXRhYmxlOiAhMSB9KSwgZSAmJiBfc2V0UHJvdG90eXBlT2YodCwgZSk7IH1cbmZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZih0LCBlKSB7IHJldHVybiBfc2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2YuYmluZCgpIDogZnVuY3Rpb24gKHQsIGUpIHsgcmV0dXJuIHQuX19wcm90b19fID0gZSwgdDsgfSwgX3NldFByb3RvdHlwZU9mKHQsIGUpOyB9XG52YXIgVHJhbnNhY3Rpb25DYWxsQnVpbGRlciA9IGV4cG9ydHMuVHJhbnNhY3Rpb25DYWxsQnVpbGRlciA9IGZ1bmN0aW9uIChfQ2FsbEJ1aWxkZXIpIHtcbiAgZnVuY3Rpb24gVHJhbnNhY3Rpb25DYWxsQnVpbGRlcihzZXJ2ZXJVcmwpIHtcbiAgICB2YXIgX3RoaXM7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFRyYW5zYWN0aW9uQ2FsbEJ1aWxkZXIpO1xuICAgIF90aGlzID0gX2NhbGxTdXBlcih0aGlzLCBUcmFuc2FjdGlvbkNhbGxCdWlsZGVyLCBbc2VydmVyVXJsLCBcInRyYW5zYWN0aW9uc1wiXSk7XG4gICAgX3RoaXMudXJsLnNlZ21lbnQoXCJ0cmFuc2FjdGlvbnNcIik7XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG4gIF9pbmhlcml0cyhUcmFuc2FjdGlvbkNhbGxCdWlsZGVyLCBfQ2FsbEJ1aWxkZXIpO1xuICByZXR1cm4gX2NyZWF0ZUNsYXNzKFRyYW5zYWN0aW9uQ2FsbEJ1aWxkZXIsIFt7XG4gICAga2V5OiBcInRyYW5zYWN0aW9uXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHRyYW5zYWN0aW9uKHRyYW5zYWN0aW9uSWQpIHtcbiAgICAgIHZhciBidWlsZGVyID0gbmV3IF9jYWxsX2J1aWxkZXIuQ2FsbEJ1aWxkZXIodGhpcy51cmwuY2xvbmUoKSk7XG4gICAgICBidWlsZGVyLmZpbHRlci5wdXNoKFt0cmFuc2FjdGlvbklkXSk7XG4gICAgICByZXR1cm4gYnVpbGRlcjtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiZm9yQWNjb3VudFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBmb3JBY2NvdW50KGFjY291bnRJZCkge1xuICAgICAgcmV0dXJuIHRoaXMuZm9yRW5kcG9pbnQoXCJhY2NvdW50c1wiLCBhY2NvdW50SWQpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJmb3JDbGFpbWFibGVCYWxhbmNlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGZvckNsYWltYWJsZUJhbGFuY2UoY2xhaW1hYmxlQmFsYW5jZUlkKSB7XG4gICAgICByZXR1cm4gdGhpcy5mb3JFbmRwb2ludChcImNsYWltYWJsZV9iYWxhbmNlc1wiLCBjbGFpbWFibGVCYWxhbmNlSWQpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJmb3JMZWRnZXJcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZm9yTGVkZ2VyKHNlcXVlbmNlKSB7XG4gICAgICByZXR1cm4gdGhpcy5mb3JFbmRwb2ludChcImxlZGdlcnNcIiwgc2VxdWVuY2UudG9TdHJpbmcoKSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImZvckxpcXVpZGl0eVBvb2xcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZm9yTGlxdWlkaXR5UG9vbChwb29sSWQpIHtcbiAgICAgIHJldHVybiB0aGlzLmZvckVuZHBvaW50KFwibGlxdWlkaXR5X3Bvb2xzXCIsIHBvb2xJZCk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImluY2x1ZGVGYWlsZWRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gaW5jbHVkZUZhaWxlZCh2YWx1ZSkge1xuICAgICAgdGhpcy51cmwuc2V0UXVlcnkoXCJpbmNsdWRlX2ZhaWxlZFwiLCB2YWx1ZS50b1N0cmluZygpKTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgfV0pO1xufShfY2FsbF9idWlsZGVyLkNhbGxCdWlsZGVyKTsiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@stellar/stellar-sdk/lib/horizon/transaction_call_builder.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@stellar/stellar-sdk/lib/horizon/types/effects.js":
/*!************************************************************************!*\
  !*** ./node_modules/@stellar/stellar-sdk/lib/horizon/types/effects.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.EffectType = void 0;\nvar EffectType = exports.EffectType = function (EffectType) {\n  EffectType[EffectType[\"account_created\"] = 0] = \"account_created\";\n  EffectType[EffectType[\"account_removed\"] = 1] = \"account_removed\";\n  EffectType[EffectType[\"account_credited\"] = 2] = \"account_credited\";\n  EffectType[EffectType[\"account_debited\"] = 3] = \"account_debited\";\n  EffectType[EffectType[\"account_thresholds_updated\"] = 4] = \"account_thresholds_updated\";\n  EffectType[EffectType[\"account_home_domain_updated\"] = 5] = \"account_home_domain_updated\";\n  EffectType[EffectType[\"account_flags_updated\"] = 6] = \"account_flags_updated\";\n  EffectType[EffectType[\"account_inflation_destination_updated\"] = 7] = \"account_inflation_destination_updated\";\n  EffectType[EffectType[\"signer_created\"] = 10] = \"signer_created\";\n  EffectType[EffectType[\"signer_removed\"] = 11] = \"signer_removed\";\n  EffectType[EffectType[\"signer_updated\"] = 12] = \"signer_updated\";\n  EffectType[EffectType[\"trustline_created\"] = 20] = \"trustline_created\";\n  EffectType[EffectType[\"trustline_removed\"] = 21] = \"trustline_removed\";\n  EffectType[EffectType[\"trustline_updated\"] = 22] = \"trustline_updated\";\n  EffectType[EffectType[\"trustline_authorized\"] = 23] = \"trustline_authorized\";\n  EffectType[EffectType[\"trustline_deauthorized\"] = 24] = \"trustline_deauthorized\";\n  EffectType[EffectType[\"trustline_authorized_to_maintain_liabilities\"] = 25] = \"trustline_authorized_to_maintain_liabilities\";\n  EffectType[EffectType[\"trustline_flags_updated\"] = 26] = \"trustline_flags_updated\";\n  EffectType[EffectType[\"offer_created\"] = 30] = \"offer_created\";\n  EffectType[EffectType[\"offer_removed\"] = 31] = \"offer_removed\";\n  EffectType[EffectType[\"offer_updated\"] = 32] = \"offer_updated\";\n  EffectType[EffectType[\"trade\"] = 33] = \"trade\";\n  EffectType[EffectType[\"data_created\"] = 40] = \"data_created\";\n  EffectType[EffectType[\"data_removed\"] = 41] = \"data_removed\";\n  EffectType[EffectType[\"data_updated\"] = 42] = \"data_updated\";\n  EffectType[EffectType[\"sequence_bumped\"] = 43] = \"sequence_bumped\";\n  EffectType[EffectType[\"claimable_balance_created\"] = 50] = \"claimable_balance_created\";\n  EffectType[EffectType[\"claimable_balance_claimant_created\"] = 51] = \"claimable_balance_claimant_created\";\n  EffectType[EffectType[\"claimable_balance_claimed\"] = 52] = \"claimable_balance_claimed\";\n  EffectType[EffectType[\"account_sponsorship_created\"] = 60] = \"account_sponsorship_created\";\n  EffectType[EffectType[\"account_sponsorship_updated\"] = 61] = \"account_sponsorship_updated\";\n  EffectType[EffectType[\"account_sponsorship_removed\"] = 62] = \"account_sponsorship_removed\";\n  EffectType[EffectType[\"trustline_sponsorship_created\"] = 63] = \"trustline_sponsorship_created\";\n  EffectType[EffectType[\"trustline_sponsorship_updated\"] = 64] = \"trustline_sponsorship_updated\";\n  EffectType[EffectType[\"trustline_sponsorship_removed\"] = 65] = \"trustline_sponsorship_removed\";\n  EffectType[EffectType[\"data_sponsorship_created\"] = 66] = \"data_sponsorship_created\";\n  EffectType[EffectType[\"data_sponsorship_updated\"] = 67] = \"data_sponsorship_updated\";\n  EffectType[EffectType[\"data_sponsorship_removed\"] = 68] = \"data_sponsorship_removed\";\n  EffectType[EffectType[\"claimable_balance_sponsorship_created\"] = 69] = \"claimable_balance_sponsorship_created\";\n  EffectType[EffectType[\"claimable_balance_sponsorship_updated\"] = 70] = \"claimable_balance_sponsorship_updated\";\n  EffectType[EffectType[\"claimable_balance_sponsorship_removed\"] = 71] = \"claimable_balance_sponsorship_removed\";\n  EffectType[EffectType[\"signer_sponsorship_created\"] = 72] = \"signer_sponsorship_created\";\n  EffectType[EffectType[\"signer_sponsorship_updated\"] = 73] = \"signer_sponsorship_updated\";\n  EffectType[EffectType[\"signer_sponsorship_removed\"] = 74] = \"signer_sponsorship_removed\";\n  EffectType[EffectType[\"claimable_balance_clawed_back\"] = 80] = \"claimable_balance_clawed_back\";\n  EffectType[EffectType[\"liquidity_pool_deposited\"] = 90] = \"liquidity_pool_deposited\";\n  EffectType[EffectType[\"liquidity_pool_withdrew\"] = 91] = \"liquidity_pool_withdrew\";\n  EffectType[EffectType[\"liquidity_pool_trade\"] = 92] = \"liquidity_pool_trade\";\n  EffectType[EffectType[\"liquidity_pool_created\"] = 93] = \"liquidity_pool_created\";\n  EffectType[EffectType[\"liquidity_pool_removed\"] = 94] = \"liquidity_pool_removed\";\n  EffectType[EffectType[\"liquidity_pool_revoked\"] = 95] = \"liquidity_pool_revoked\";\n  EffectType[EffectType[\"contract_credited\"] = 96] = \"contract_credited\";\n  EffectType[EffectType[\"contract_debited\"] = 97] = \"contract_debited\";\n  return EffectType;\n}({});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHN0ZWxsYXIvc3RlbGxhci1zZGsvbGliL2hvcml6b24vdHlwZXMvZWZmZWN0cy5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYiw4Q0FBNkM7QUFDN0M7QUFDQSxDQUFDLEVBQUM7QUFDRixrQkFBa0I7QUFDbEIsaUJBQWlCLGtCQUFrQjtBQUNuQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEdBQUciLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcVVNVQVJJT1xcRG9jdW1lbnRzXFxHaXRodWJcXEdhbGF4eUtKLXdhbGxldC0tLUhhY2tcXHdlYlxcbm9kZV9tb2R1bGVzXFxAc3RlbGxhclxcc3RlbGxhci1zZGtcXGxpYlxcaG9yaXpvblxcdHlwZXNcXGVmZmVjdHMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLkVmZmVjdFR5cGUgPSB2b2lkIDA7XG52YXIgRWZmZWN0VHlwZSA9IGV4cG9ydHMuRWZmZWN0VHlwZSA9IGZ1bmN0aW9uIChFZmZlY3RUeXBlKSB7XG4gIEVmZmVjdFR5cGVbRWZmZWN0VHlwZVtcImFjY291bnRfY3JlYXRlZFwiXSA9IDBdID0gXCJhY2NvdW50X2NyZWF0ZWRcIjtcbiAgRWZmZWN0VHlwZVtFZmZlY3RUeXBlW1wiYWNjb3VudF9yZW1vdmVkXCJdID0gMV0gPSBcImFjY291bnRfcmVtb3ZlZFwiO1xuICBFZmZlY3RUeXBlW0VmZmVjdFR5cGVbXCJhY2NvdW50X2NyZWRpdGVkXCJdID0gMl0gPSBcImFjY291bnRfY3JlZGl0ZWRcIjtcbiAgRWZmZWN0VHlwZVtFZmZlY3RUeXBlW1wiYWNjb3VudF9kZWJpdGVkXCJdID0gM10gPSBcImFjY291bnRfZGViaXRlZFwiO1xuICBFZmZlY3RUeXBlW0VmZmVjdFR5cGVbXCJhY2NvdW50X3RocmVzaG9sZHNfdXBkYXRlZFwiXSA9IDRdID0gXCJhY2NvdW50X3RocmVzaG9sZHNfdXBkYXRlZFwiO1xuICBFZmZlY3RUeXBlW0VmZmVjdFR5cGVbXCJhY2NvdW50X2hvbWVfZG9tYWluX3VwZGF0ZWRcIl0gPSA1XSA9IFwiYWNjb3VudF9ob21lX2RvbWFpbl91cGRhdGVkXCI7XG4gIEVmZmVjdFR5cGVbRWZmZWN0VHlwZVtcImFjY291bnRfZmxhZ3NfdXBkYXRlZFwiXSA9IDZdID0gXCJhY2NvdW50X2ZsYWdzX3VwZGF0ZWRcIjtcbiAgRWZmZWN0VHlwZVtFZmZlY3RUeXBlW1wiYWNjb3VudF9pbmZsYXRpb25fZGVzdGluYXRpb25fdXBkYXRlZFwiXSA9IDddID0gXCJhY2NvdW50X2luZmxhdGlvbl9kZXN0aW5hdGlvbl91cGRhdGVkXCI7XG4gIEVmZmVjdFR5cGVbRWZmZWN0VHlwZVtcInNpZ25lcl9jcmVhdGVkXCJdID0gMTBdID0gXCJzaWduZXJfY3JlYXRlZFwiO1xuICBFZmZlY3RUeXBlW0VmZmVjdFR5cGVbXCJzaWduZXJfcmVtb3ZlZFwiXSA9IDExXSA9IFwic2lnbmVyX3JlbW92ZWRcIjtcbiAgRWZmZWN0VHlwZVtFZmZlY3RUeXBlW1wic2lnbmVyX3VwZGF0ZWRcIl0gPSAxMl0gPSBcInNpZ25lcl91cGRhdGVkXCI7XG4gIEVmZmVjdFR5cGVbRWZmZWN0VHlwZVtcInRydXN0bGluZV9jcmVhdGVkXCJdID0gMjBdID0gXCJ0cnVzdGxpbmVfY3JlYXRlZFwiO1xuICBFZmZlY3RUeXBlW0VmZmVjdFR5cGVbXCJ0cnVzdGxpbmVfcmVtb3ZlZFwiXSA9IDIxXSA9IFwidHJ1c3RsaW5lX3JlbW92ZWRcIjtcbiAgRWZmZWN0VHlwZVtFZmZlY3RUeXBlW1widHJ1c3RsaW5lX3VwZGF0ZWRcIl0gPSAyMl0gPSBcInRydXN0bGluZV91cGRhdGVkXCI7XG4gIEVmZmVjdFR5cGVbRWZmZWN0VHlwZVtcInRydXN0bGluZV9hdXRob3JpemVkXCJdID0gMjNdID0gXCJ0cnVzdGxpbmVfYXV0aG9yaXplZFwiO1xuICBFZmZlY3RUeXBlW0VmZmVjdFR5cGVbXCJ0cnVzdGxpbmVfZGVhdXRob3JpemVkXCJdID0gMjRdID0gXCJ0cnVzdGxpbmVfZGVhdXRob3JpemVkXCI7XG4gIEVmZmVjdFR5cGVbRWZmZWN0VHlwZVtcInRydXN0bGluZV9hdXRob3JpemVkX3RvX21haW50YWluX2xpYWJpbGl0aWVzXCJdID0gMjVdID0gXCJ0cnVzdGxpbmVfYXV0aG9yaXplZF90b19tYWludGFpbl9saWFiaWxpdGllc1wiO1xuICBFZmZlY3RUeXBlW0VmZmVjdFR5cGVbXCJ0cnVzdGxpbmVfZmxhZ3NfdXBkYXRlZFwiXSA9IDI2XSA9IFwidHJ1c3RsaW5lX2ZsYWdzX3VwZGF0ZWRcIjtcbiAgRWZmZWN0VHlwZVtFZmZlY3RUeXBlW1wib2ZmZXJfY3JlYXRlZFwiXSA9IDMwXSA9IFwib2ZmZXJfY3JlYXRlZFwiO1xuICBFZmZlY3RUeXBlW0VmZmVjdFR5cGVbXCJvZmZlcl9yZW1vdmVkXCJdID0gMzFdID0gXCJvZmZlcl9yZW1vdmVkXCI7XG4gIEVmZmVjdFR5cGVbRWZmZWN0VHlwZVtcIm9mZmVyX3VwZGF0ZWRcIl0gPSAzMl0gPSBcIm9mZmVyX3VwZGF0ZWRcIjtcbiAgRWZmZWN0VHlwZVtFZmZlY3RUeXBlW1widHJhZGVcIl0gPSAzM10gPSBcInRyYWRlXCI7XG4gIEVmZmVjdFR5cGVbRWZmZWN0VHlwZVtcImRhdGFfY3JlYXRlZFwiXSA9IDQwXSA9IFwiZGF0YV9jcmVhdGVkXCI7XG4gIEVmZmVjdFR5cGVbRWZmZWN0VHlwZVtcImRhdGFfcmVtb3ZlZFwiXSA9IDQxXSA9IFwiZGF0YV9yZW1vdmVkXCI7XG4gIEVmZmVjdFR5cGVbRWZmZWN0VHlwZVtcImRhdGFfdXBkYXRlZFwiXSA9IDQyXSA9IFwiZGF0YV91cGRhdGVkXCI7XG4gIEVmZmVjdFR5cGVbRWZmZWN0VHlwZVtcInNlcXVlbmNlX2J1bXBlZFwiXSA9IDQzXSA9IFwic2VxdWVuY2VfYnVtcGVkXCI7XG4gIEVmZmVjdFR5cGVbRWZmZWN0VHlwZVtcImNsYWltYWJsZV9iYWxhbmNlX2NyZWF0ZWRcIl0gPSA1MF0gPSBcImNsYWltYWJsZV9iYWxhbmNlX2NyZWF0ZWRcIjtcbiAgRWZmZWN0VHlwZVtFZmZlY3RUeXBlW1wiY2xhaW1hYmxlX2JhbGFuY2VfY2xhaW1hbnRfY3JlYXRlZFwiXSA9IDUxXSA9IFwiY2xhaW1hYmxlX2JhbGFuY2VfY2xhaW1hbnRfY3JlYXRlZFwiO1xuICBFZmZlY3RUeXBlW0VmZmVjdFR5cGVbXCJjbGFpbWFibGVfYmFsYW5jZV9jbGFpbWVkXCJdID0gNTJdID0gXCJjbGFpbWFibGVfYmFsYW5jZV9jbGFpbWVkXCI7XG4gIEVmZmVjdFR5cGVbRWZmZWN0VHlwZVtcImFjY291bnRfc3BvbnNvcnNoaXBfY3JlYXRlZFwiXSA9IDYwXSA9IFwiYWNjb3VudF9zcG9uc29yc2hpcF9jcmVhdGVkXCI7XG4gIEVmZmVjdFR5cGVbRWZmZWN0VHlwZVtcImFjY291bnRfc3BvbnNvcnNoaXBfdXBkYXRlZFwiXSA9IDYxXSA9IFwiYWNjb3VudF9zcG9uc29yc2hpcF91cGRhdGVkXCI7XG4gIEVmZmVjdFR5cGVbRWZmZWN0VHlwZVtcImFjY291bnRfc3BvbnNvcnNoaXBfcmVtb3ZlZFwiXSA9IDYyXSA9IFwiYWNjb3VudF9zcG9uc29yc2hpcF9yZW1vdmVkXCI7XG4gIEVmZmVjdFR5cGVbRWZmZWN0VHlwZVtcInRydXN0bGluZV9zcG9uc29yc2hpcF9jcmVhdGVkXCJdID0gNjNdID0gXCJ0cnVzdGxpbmVfc3BvbnNvcnNoaXBfY3JlYXRlZFwiO1xuICBFZmZlY3RUeXBlW0VmZmVjdFR5cGVbXCJ0cnVzdGxpbmVfc3BvbnNvcnNoaXBfdXBkYXRlZFwiXSA9IDY0XSA9IFwidHJ1c3RsaW5lX3Nwb25zb3JzaGlwX3VwZGF0ZWRcIjtcbiAgRWZmZWN0VHlwZVtFZmZlY3RUeXBlW1widHJ1c3RsaW5lX3Nwb25zb3JzaGlwX3JlbW92ZWRcIl0gPSA2NV0gPSBcInRydXN0bGluZV9zcG9uc29yc2hpcF9yZW1vdmVkXCI7XG4gIEVmZmVjdFR5cGVbRWZmZWN0VHlwZVtcImRhdGFfc3BvbnNvcnNoaXBfY3JlYXRlZFwiXSA9IDY2XSA9IFwiZGF0YV9zcG9uc29yc2hpcF9jcmVhdGVkXCI7XG4gIEVmZmVjdFR5cGVbRWZmZWN0VHlwZVtcImRhdGFfc3BvbnNvcnNoaXBfdXBkYXRlZFwiXSA9IDY3XSA9IFwiZGF0YV9zcG9uc29yc2hpcF91cGRhdGVkXCI7XG4gIEVmZmVjdFR5cGVbRWZmZWN0VHlwZVtcImRhdGFfc3BvbnNvcnNoaXBfcmVtb3ZlZFwiXSA9IDY4XSA9IFwiZGF0YV9zcG9uc29yc2hpcF9yZW1vdmVkXCI7XG4gIEVmZmVjdFR5cGVbRWZmZWN0VHlwZVtcImNsYWltYWJsZV9iYWxhbmNlX3Nwb25zb3JzaGlwX2NyZWF0ZWRcIl0gPSA2OV0gPSBcImNsYWltYWJsZV9iYWxhbmNlX3Nwb25zb3JzaGlwX2NyZWF0ZWRcIjtcbiAgRWZmZWN0VHlwZVtFZmZlY3RUeXBlW1wiY2xhaW1hYmxlX2JhbGFuY2Vfc3BvbnNvcnNoaXBfdXBkYXRlZFwiXSA9IDcwXSA9IFwiY2xhaW1hYmxlX2JhbGFuY2Vfc3BvbnNvcnNoaXBfdXBkYXRlZFwiO1xuICBFZmZlY3RUeXBlW0VmZmVjdFR5cGVbXCJjbGFpbWFibGVfYmFsYW5jZV9zcG9uc29yc2hpcF9yZW1vdmVkXCJdID0gNzFdID0gXCJjbGFpbWFibGVfYmFsYW5jZV9zcG9uc29yc2hpcF9yZW1vdmVkXCI7XG4gIEVmZmVjdFR5cGVbRWZmZWN0VHlwZVtcInNpZ25lcl9zcG9uc29yc2hpcF9jcmVhdGVkXCJdID0gNzJdID0gXCJzaWduZXJfc3BvbnNvcnNoaXBfY3JlYXRlZFwiO1xuICBFZmZlY3RUeXBlW0VmZmVjdFR5cGVbXCJzaWduZXJfc3BvbnNvcnNoaXBfdXBkYXRlZFwiXSA9IDczXSA9IFwic2lnbmVyX3Nwb25zb3JzaGlwX3VwZGF0ZWRcIjtcbiAgRWZmZWN0VHlwZVtFZmZlY3RUeXBlW1wic2lnbmVyX3Nwb25zb3JzaGlwX3JlbW92ZWRcIl0gPSA3NF0gPSBcInNpZ25lcl9zcG9uc29yc2hpcF9yZW1vdmVkXCI7XG4gIEVmZmVjdFR5cGVbRWZmZWN0VHlwZVtcImNsYWltYWJsZV9iYWxhbmNlX2NsYXdlZF9iYWNrXCJdID0gODBdID0gXCJjbGFpbWFibGVfYmFsYW5jZV9jbGF3ZWRfYmFja1wiO1xuICBFZmZlY3RUeXBlW0VmZmVjdFR5cGVbXCJsaXF1aWRpdHlfcG9vbF9kZXBvc2l0ZWRcIl0gPSA5MF0gPSBcImxpcXVpZGl0eV9wb29sX2RlcG9zaXRlZFwiO1xuICBFZmZlY3RUeXBlW0VmZmVjdFR5cGVbXCJsaXF1aWRpdHlfcG9vbF93aXRoZHJld1wiXSA9IDkxXSA9IFwibGlxdWlkaXR5X3Bvb2xfd2l0aGRyZXdcIjtcbiAgRWZmZWN0VHlwZVtFZmZlY3RUeXBlW1wibGlxdWlkaXR5X3Bvb2xfdHJhZGVcIl0gPSA5Ml0gPSBcImxpcXVpZGl0eV9wb29sX3RyYWRlXCI7XG4gIEVmZmVjdFR5cGVbRWZmZWN0VHlwZVtcImxpcXVpZGl0eV9wb29sX2NyZWF0ZWRcIl0gPSA5M10gPSBcImxpcXVpZGl0eV9wb29sX2NyZWF0ZWRcIjtcbiAgRWZmZWN0VHlwZVtFZmZlY3RUeXBlW1wibGlxdWlkaXR5X3Bvb2xfcmVtb3ZlZFwiXSA9IDk0XSA9IFwibGlxdWlkaXR5X3Bvb2xfcmVtb3ZlZFwiO1xuICBFZmZlY3RUeXBlW0VmZmVjdFR5cGVbXCJsaXF1aWRpdHlfcG9vbF9yZXZva2VkXCJdID0gOTVdID0gXCJsaXF1aWRpdHlfcG9vbF9yZXZva2VkXCI7XG4gIEVmZmVjdFR5cGVbRWZmZWN0VHlwZVtcImNvbnRyYWN0X2NyZWRpdGVkXCJdID0gOTZdID0gXCJjb250cmFjdF9jcmVkaXRlZFwiO1xuICBFZmZlY3RUeXBlW0VmZmVjdFR5cGVbXCJjb250cmFjdF9kZWJpdGVkXCJdID0gOTddID0gXCJjb250cmFjdF9kZWJpdGVkXCI7XG4gIHJldHVybiBFZmZlY3RUeXBlO1xufSh7fSk7Il0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@stellar/stellar-sdk/lib/horizon/types/effects.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@stellar/stellar-sdk/lib/http-client/axios-client.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@stellar/stellar-sdk/lib/http-client/axios-client.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.create = exports.axiosClient = void 0;\nvar _axios = _interopRequireDefault(__webpack_require__(/*! axios */ \"(ssr)/./node_modules/axios/dist/node/axios.cjs\"));\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }\nvar axiosClient = exports.axiosClient = _axios.default;\nvar create = exports.create = _axios.default.create;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHN0ZWxsYXIvc3RlbGxhci1zZGsvbGliL2h0dHAtY2xpZW50L2F4aW9zLWNsaWVudC5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYiw4Q0FBNkM7QUFDN0M7QUFDQSxDQUFDLEVBQUM7QUFDRixjQUFjLEdBQUcsbUJBQW1CO0FBQ3BDLG9DQUFvQyxtQkFBTyxDQUFDLDZEQUFPO0FBQ25ELHFDQUFxQyxpQ0FBaUM7QUFDdEUsa0JBQWtCLG1CQUFtQjtBQUNyQyxhQUFhLGNBQWMiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcVVNVQVJJT1xcRG9jdW1lbnRzXFxHaXRodWJcXEdhbGF4eUtKLXdhbGxldC0tLUhhY2tcXHdlYlxcbm9kZV9tb2R1bGVzXFxAc3RlbGxhclxcc3RlbGxhci1zZGtcXGxpYlxcaHR0cC1jbGllbnRcXGF4aW9zLWNsaWVudC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuY3JlYXRlID0gZXhwb3J0cy5heGlvc0NsaWVudCA9IHZvaWQgMDtcbnZhciBfYXhpb3MgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJheGlvc1wiKSk7XG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KGUpIHsgcmV0dXJuIGUgJiYgZS5fX2VzTW9kdWxlID8gZSA6IHsgZGVmYXVsdDogZSB9OyB9XG52YXIgYXhpb3NDbGllbnQgPSBleHBvcnRzLmF4aW9zQ2xpZW50ID0gX2F4aW9zLmRlZmF1bHQ7XG52YXIgY3JlYXRlID0gZXhwb3J0cy5jcmVhdGUgPSBfYXhpb3MuZGVmYXVsdC5jcmVhdGU7Il0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@stellar/stellar-sdk/lib/http-client/axios-client.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@stellar/stellar-sdk/lib/http-client/index.js":
/*!********************************************************************!*\
  !*** ./node_modules/@stellar/stellar-sdk/lib/http-client/index.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nvar _exportNames = {\n  httpClient: true,\n  create: true\n};\nexports.httpClient = exports.create = void 0;\nvar _types = __webpack_require__(/*! ./types */ \"(ssr)/./node_modules/@stellar/stellar-sdk/lib/http-client/types.js\");\nObject.keys(_types).forEach(function (key) {\n  if (key === \"default\" || key === \"__esModule\") return;\n  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;\n  if (key in exports && exports[key] === _types[key]) return;\n  Object.defineProperty(exports, key, {\n    enumerable: true,\n    get: function get() {\n      return _types[key];\n    }\n  });\n});\nvar httpClient;\nvar create;\nif (true) {\n  var axiosModule = __webpack_require__(/*! ./axios-client */ \"(ssr)/./node_modules/@stellar/stellar-sdk/lib/http-client/axios-client.js\");\n  exports.httpClient = httpClient = axiosModule.axiosClient;\n  exports.create = create = axiosModule.create;\n} else { var fetchModule; }//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHN0ZWxsYXIvc3RlbGxhci1zZGsvbGliL2h0dHAtY2xpZW50L2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLDhDQUE2QztBQUM3QztBQUNBLENBQUMsRUFBQztBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCLEdBQUcsY0FBYztBQUNuQyxhQUFhLG1CQUFPLENBQUMsbUZBQVM7QUFDOUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNILENBQUM7QUFDRDtBQUNBO0FBQ0EsSUFBSSxJQUFJO0FBQ1Isb0JBQW9CLG1CQUFPLENBQUMsaUdBQWdCO0FBQzVDLEVBQUUsa0JBQWtCO0FBQ3BCLEVBQUUsY0FBYztBQUNoQixFQUFFLEtBQUsiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcVVNVQVJJT1xcRG9jdW1lbnRzXFxHaXRodWJcXEdhbGF4eUtKLXdhbGxldC0tLUhhY2tcXHdlYlxcbm9kZV9tb2R1bGVzXFxAc3RlbGxhclxcc3RlbGxhci1zZGtcXGxpYlxcaHR0cC1jbGllbnRcXGluZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xudmFyIF9leHBvcnROYW1lcyA9IHtcbiAgaHR0cENsaWVudDogdHJ1ZSxcbiAgY3JlYXRlOiB0cnVlXG59O1xuZXhwb3J0cy5odHRwQ2xpZW50ID0gZXhwb3J0cy5jcmVhdGUgPSB2b2lkIDA7XG52YXIgX3R5cGVzID0gcmVxdWlyZShcIi4vdHlwZXNcIik7XG5PYmplY3Qua2V5cyhfdHlwZXMpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICBpZiAoa2V5ID09PSBcImRlZmF1bHRcIiB8fCBrZXkgPT09IFwiX19lc01vZHVsZVwiKSByZXR1cm47XG4gIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoX2V4cG9ydE5hbWVzLCBrZXkpKSByZXR1cm47XG4gIGlmIChrZXkgaW4gZXhwb3J0cyAmJiBleHBvcnRzW2tleV0gPT09IF90eXBlc1trZXldKSByZXR1cm47XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBrZXksIHtcbiAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIF90eXBlc1trZXldO1xuICAgIH1cbiAgfSk7XG59KTtcbnZhciBodHRwQ2xpZW50O1xudmFyIGNyZWF0ZTtcbmlmICh0cnVlKSB7XG4gIHZhciBheGlvc01vZHVsZSA9IHJlcXVpcmUoJy4vYXhpb3MtY2xpZW50Jyk7XG4gIGV4cG9ydHMuaHR0cENsaWVudCA9IGh0dHBDbGllbnQgPSBheGlvc01vZHVsZS5heGlvc0NsaWVudDtcbiAgZXhwb3J0cy5jcmVhdGUgPSBjcmVhdGUgPSBheGlvc01vZHVsZS5jcmVhdGU7XG59IGVsc2Uge1xuICB2YXIgZmV0Y2hNb2R1bGUgPSByZXF1aXJlKCcuL2ZldGNoLWNsaWVudCcpO1xuICBleHBvcnRzLmh0dHBDbGllbnQgPSBodHRwQ2xpZW50ID0gZmV0Y2hNb2R1bGUuZmV0Y2hDbGllbnQ7XG4gIGV4cG9ydHMuY3JlYXRlID0gY3JlYXRlID0gZmV0Y2hNb2R1bGUuY3JlYXRlO1xufSJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@stellar/stellar-sdk/lib/http-client/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@stellar/stellar-sdk/lib/http-client/types.js":
/*!********************************************************************!*\
  !*** ./node_modules/@stellar/stellar-sdk/lib/http-client/types.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.CancelToken = void 0;\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\nfunction _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }\nfunction _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nvar CancelToken = exports.CancelToken = function () {\n  function CancelToken(executor) {\n    var _this = this;\n    _classCallCheck(this, CancelToken);\n    var resolvePromise;\n    this.promise = new Promise(function (resolve) {\n      resolvePromise = resolve;\n    });\n    executor(function (reason) {\n      _this.reason = reason;\n      resolvePromise();\n    });\n  }\n  return _createClass(CancelToken, [{\n    key: \"throwIfRequested\",\n    value: function throwIfRequested() {\n      if (this.reason) {\n        throw new Error(this.reason);\n      }\n    }\n  }]);\n}();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHN0ZWxsYXIvc3RlbGxhci1zZGsvbGliL2h0dHAtY2xpZW50L3R5cGVzLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLDhDQUE2QztBQUM3QztBQUNBLENBQUMsRUFBQztBQUNGLG1CQUFtQjtBQUNuQixzQkFBc0IsMkJBQTJCLG9HQUFvRyxtQkFBbUIsaUJBQWlCLHNIQUFzSDtBQUMvUyxpQ0FBaUM7QUFDakMsbUNBQW1DLGdCQUFnQixjQUFjLE9BQU8sY0FBYztBQUN0RixpQ0FBaUMscUhBQXFILGNBQWM7QUFDcEssNkJBQTZCLG1DQUFtQztBQUNoRSw4QkFBOEIsNENBQTRDLCtCQUErQixvQkFBb0IsbUNBQW1DLHNDQUFzQyx1RUFBdUU7QUFDN1Esa0JBQWtCLG1CQUFtQjtBQUNyQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0gsQ0FBQyIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxVU1VBUklPXFxEb2N1bWVudHNcXEdpdGh1YlxcR2FsYXh5S0otd2FsbGV0LS0tSGFja1xcd2ViXFxub2RlX21vZHVsZXNcXEBzdGVsbGFyXFxzdGVsbGFyLXNka1xcbGliXFxodHRwLWNsaWVudFxcdHlwZXMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLkNhbmNlbFRva2VuID0gdm9pZCAwO1xuZnVuY3Rpb24gX3R5cGVvZihvKSB7IFwiQGJhYmVsL2hlbHBlcnMgLSB0eXBlb2ZcIjsgcmV0dXJuIF90eXBlb2YgPSBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIFN5bWJvbCAmJiBcInN5bWJvbFwiID09IHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPyBmdW5jdGlvbiAobykgeyByZXR1cm4gdHlwZW9mIG87IH0gOiBmdW5jdGlvbiAobykgeyByZXR1cm4gbyAmJiBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIFN5bWJvbCAmJiBvLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgbyAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2YgbzsgfSwgX3R5cGVvZihvKTsgfVxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGEsIG4pIHsgaWYgKCEoYSBpbnN0YW5jZW9mIG4pKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9XG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyhlLCByKSB7IGZvciAodmFyIHQgPSAwOyB0IDwgci5sZW5ndGg7IHQrKykgeyB2YXIgbyA9IHJbdF07IG8uZW51bWVyYWJsZSA9IG8uZW51bWVyYWJsZSB8fCAhMSwgby5jb25maWd1cmFibGUgPSAhMCwgXCJ2YWx1ZVwiIGluIG8gJiYgKG8ud3JpdGFibGUgPSAhMCksIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLCBfdG9Qcm9wZXJ0eUtleShvLmtleSksIG8pOyB9IH1cbmZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhlLCByLCB0KSB7IHJldHVybiByICYmIF9kZWZpbmVQcm9wZXJ0aWVzKGUucHJvdG90eXBlLCByKSwgdCAmJiBfZGVmaW5lUHJvcGVydGllcyhlLCB0KSwgT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsIFwicHJvdG90eXBlXCIsIHsgd3JpdGFibGU6ICExIH0pLCBlOyB9XG5mdW5jdGlvbiBfdG9Qcm9wZXJ0eUtleSh0KSB7IHZhciBpID0gX3RvUHJpbWl0aXZlKHQsIFwic3RyaW5nXCIpOyByZXR1cm4gXCJzeW1ib2xcIiA9PSBfdHlwZW9mKGkpID8gaSA6IGkgKyBcIlwiOyB9XG5mdW5jdGlvbiBfdG9QcmltaXRpdmUodCwgcikgeyBpZiAoXCJvYmplY3RcIiAhPSBfdHlwZW9mKHQpIHx8ICF0KSByZXR1cm4gdDsgdmFyIGUgPSB0W1N5bWJvbC50b1ByaW1pdGl2ZV07IGlmICh2b2lkIDAgIT09IGUpIHsgdmFyIGkgPSBlLmNhbGwodCwgciB8fCBcImRlZmF1bHRcIik7IGlmIChcIm9iamVjdFwiICE9IF90eXBlb2YoaSkpIHJldHVybiBpOyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQEB0b1ByaW1pdGl2ZSBtdXN0IHJldHVybiBhIHByaW1pdGl2ZSB2YWx1ZS5cIik7IH0gcmV0dXJuIChcInN0cmluZ1wiID09PSByID8gU3RyaW5nIDogTnVtYmVyKSh0KTsgfVxudmFyIENhbmNlbFRva2VuID0gZXhwb3J0cy5DYW5jZWxUb2tlbiA9IGZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gQ2FuY2VsVG9rZW4oZXhlY3V0b3IpIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBDYW5jZWxUb2tlbik7XG4gICAgdmFyIHJlc29sdmVQcm9taXNlO1xuICAgIHRoaXMucHJvbWlzZSA9IG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlKSB7XG4gICAgICByZXNvbHZlUHJvbWlzZSA9IHJlc29sdmU7XG4gICAgfSk7XG4gICAgZXhlY3V0b3IoZnVuY3Rpb24gKHJlYXNvbikge1xuICAgICAgX3RoaXMucmVhc29uID0gcmVhc29uO1xuICAgICAgcmVzb2x2ZVByb21pc2UoKTtcbiAgICB9KTtcbiAgfVxuICByZXR1cm4gX2NyZWF0ZUNsYXNzKENhbmNlbFRva2VuLCBbe1xuICAgIGtleTogXCJ0aHJvd0lmUmVxdWVzdGVkXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHRocm93SWZSZXF1ZXN0ZWQoKSB7XG4gICAgICBpZiAodGhpcy5yZWFzb24pIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKHRoaXMucmVhc29uKTtcbiAgICAgIH1cbiAgICB9XG4gIH1dKTtcbn0oKTsiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@stellar/stellar-sdk/lib/http-client/types.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@stellar/stellar-sdk/lib/index.js":
/*!********************************************************!*\
  !*** ./node_modules/@stellar/stellar-sdk/lib/index.js ***!
  \********************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("\n\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nvar _exportNames = {\n  Config: true,\n  Utils: true,\n  StellarToml: true,\n  Federation: true,\n  WebAuth: true,\n  Friendbot: true,\n  Horizon: true,\n  rpc: true,\n  contract: true\n};\nObject.defineProperty(exports, \"Config\", ({\n  enumerable: true,\n  get: function get() {\n    return _config.Config;\n  }\n}));\nexports.StellarToml = exports.Horizon = exports.Friendbot = exports.Federation = void 0;\nObject.defineProperty(exports, \"Utils\", ({\n  enumerable: true,\n  get: function get() {\n    return _utils.Utils;\n  }\n}));\nexports.rpc = exports[\"default\"] = exports.contract = exports.WebAuth = void 0;\nvar _errors = __webpack_require__(/*! ./errors */ \"(ssr)/./node_modules/@stellar/stellar-sdk/lib/errors/index.js\");\nObject.keys(_errors).forEach(function (key) {\n  if (key === \"default\" || key === \"__esModule\") return;\n  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;\n  if (key in exports && exports[key] === _errors[key]) return;\n  Object.defineProperty(exports, key, {\n    enumerable: true,\n    get: function get() {\n      return _errors[key];\n    }\n  });\n});\nvar _config = __webpack_require__(/*! ./config */ \"(ssr)/./node_modules/@stellar/stellar-sdk/lib/config.js\");\nvar _utils = __webpack_require__(/*! ./utils */ \"(ssr)/./node_modules/@stellar/stellar-sdk/lib/utils.js\");\nvar _StellarToml = _interopRequireWildcard(__webpack_require__(/*! ./stellartoml */ \"(ssr)/./node_modules/@stellar/stellar-sdk/lib/stellartoml/index.js\"));\nexports.StellarToml = _StellarToml;\nvar _Federation = _interopRequireWildcard(__webpack_require__(/*! ./federation */ \"(ssr)/./node_modules/@stellar/stellar-sdk/lib/federation/index.js\"));\nexports.Federation = _Federation;\nvar _WebAuth = _interopRequireWildcard(__webpack_require__(/*! ./webauth */ \"(ssr)/./node_modules/@stellar/stellar-sdk/lib/webauth/index.js\"));\nexports.WebAuth = _WebAuth;\nvar _Friendbot = _interopRequireWildcard(__webpack_require__(/*! ./friendbot */ \"(ssr)/./node_modules/@stellar/stellar-sdk/lib/friendbot/index.js\"));\nexports.Friendbot = _Friendbot;\nvar _Horizon = _interopRequireWildcard(__webpack_require__(/*! ./horizon */ \"(ssr)/./node_modules/@stellar/stellar-sdk/lib/horizon/index.js\"));\nexports.Horizon = _Horizon;\nvar _rpc = _interopRequireWildcard(__webpack_require__(/*! ./rpc */ \"(ssr)/./node_modules/@stellar/stellar-sdk/lib/rpc/index.js\"));\nexports.rpc = _rpc;\nvar _contract = _interopRequireWildcard(__webpack_require__(/*! ./contract */ \"(ssr)/./node_modules/@stellar/stellar-sdk/lib/contract/index.js\"));\nexports.contract = _contract;\nvar _stellarBase = __webpack_require__(/*! @stellar/stellar-base */ \"(ssr)/./node_modules/@stellar/stellar-base/lib/index.js\");\nObject.keys(_stellarBase).forEach(function (key) {\n  if (key === \"default\" || key === \"__esModule\") return;\n  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;\n  if (key in exports && exports[key] === _stellarBase[key]) return;\n  Object.defineProperty(exports, key, {\n    enumerable: true,\n    get: function get() {\n      return _stellarBase[key];\n    }\n  });\n});\nfunction _getRequireWildcardCache(e) { if (\"function\" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }\nfunction _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || \"object\" != _typeof(e) && \"function\" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if (\"default\" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }\nvar _default = exports[\"default\"] = module.exports;\nif (typeof global.__USE_AXIOS__ === 'undefined') {\n  global.__USE_AXIOS__ = true;\n}\nif (typeof global.__USE_EVENTSOURCE__ === 'undefined') {\n  global.__USE_EVENTSOURCE__ = false;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHN0ZWxsYXIvc3RlbGxhci1zZGsvbGliL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLHNCQUFzQiwyQkFBMkIsb0dBQW9HLG1CQUFtQixpQkFBaUIsc0hBQXNIO0FBQy9TLDhDQUE2QztBQUM3QztBQUNBLENBQUMsRUFBQztBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQ0FBeUM7QUFDekM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRixtQkFBbUIsR0FBRyxlQUFlLEdBQUcsaUJBQWlCLEdBQUcsa0JBQWtCO0FBQzlFLHlDQUF3QztBQUN4QztBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsRUFBQztBQUNGLFdBQVcsR0FBRyxrQkFBZSxHQUFHLGdCQUFnQixHQUFHLGVBQWU7QUFDbEUsY0FBYyxtQkFBTyxDQUFDLCtFQUFVO0FBQ2hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSCxDQUFDO0FBQ0QsY0FBYyxtQkFBTyxDQUFDLHlFQUFVO0FBQ2hDLGFBQWEsbUJBQU8sQ0FBQyx1RUFBUztBQUM5QiwyQ0FBMkMsbUJBQU8sQ0FBQyx5RkFBZTtBQUNsRSxtQkFBbUI7QUFDbkIsMENBQTBDLG1CQUFPLENBQUMsdUZBQWM7QUFDaEUsa0JBQWtCO0FBQ2xCLHVDQUF1QyxtQkFBTyxDQUFDLGlGQUFXO0FBQzFELGVBQWU7QUFDZix5Q0FBeUMsbUJBQU8sQ0FBQyxxRkFBYTtBQUM5RCxpQkFBaUI7QUFDakIsdUNBQXVDLG1CQUFPLENBQUMsaUZBQVc7QUFDMUQsZUFBZTtBQUNmLG1DQUFtQyxtQkFBTyxDQUFDLHlFQUFPO0FBQ2xELFdBQVc7QUFDWCx3Q0FBd0MsbUJBQU8sQ0FBQyxtRkFBWTtBQUM1RCxnQkFBZ0I7QUFDaEIsbUJBQW1CLG1CQUFPLENBQUMsc0ZBQXVCO0FBQ2xEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSCxDQUFDO0FBQ0QsdUNBQXVDLCtDQUErQywwQ0FBMEMsMEVBQTBFLG1CQUFtQjtBQUM3Tix5Q0FBeUMsdUNBQXVDLDZFQUE2RSxjQUFjLHFDQUFxQyxvQ0FBb0MsVUFBVSxpQkFBaUIsZ0VBQWdFLDBDQUEwQyw4QkFBOEIsMERBQTBELHdFQUF3RTtBQUN6aEIsZUFBZSxrQkFBZTtBQUM5QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcVVNVQVJJT1xcRG9jdW1lbnRzXFxHaXRodWJcXEdhbGF4eUtKLXdhbGxldC0tLUhhY2tcXHdlYlxcbm9kZV9tb2R1bGVzXFxAc3RlbGxhclxcc3RlbGxhci1zZGtcXGxpYlxcaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmZ1bmN0aW9uIF90eXBlb2YobykgeyBcIkBiYWJlbC9oZWxwZXJzIC0gdHlwZW9mXCI7IHJldHVybiBfdHlwZW9mID0gXCJmdW5jdGlvblwiID09IHR5cGVvZiBTeW1ib2wgJiYgXCJzeW1ib2xcIiA9PSB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID8gZnVuY3Rpb24gKG8pIHsgcmV0dXJuIHR5cGVvZiBvOyB9IDogZnVuY3Rpb24gKG8pIHsgcmV0dXJuIG8gJiYgXCJmdW5jdGlvblwiID09IHR5cGVvZiBTeW1ib2wgJiYgby5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG8gIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG87IH0sIF90eXBlb2Yobyk7IH1cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG52YXIgX2V4cG9ydE5hbWVzID0ge1xuICBDb25maWc6IHRydWUsXG4gIFV0aWxzOiB0cnVlLFxuICBTdGVsbGFyVG9tbDogdHJ1ZSxcbiAgRmVkZXJhdGlvbjogdHJ1ZSxcbiAgV2ViQXV0aDogdHJ1ZSxcbiAgRnJpZW5kYm90OiB0cnVlLFxuICBIb3Jpem9uOiB0cnVlLFxuICBycGM6IHRydWUsXG4gIGNvbnRyYWN0OiB0cnVlXG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiQ29uZmlnXCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIF9jb25maWcuQ29uZmlnO1xuICB9XG59KTtcbmV4cG9ydHMuU3RlbGxhclRvbWwgPSBleHBvcnRzLkhvcml6b24gPSBleHBvcnRzLkZyaWVuZGJvdCA9IGV4cG9ydHMuRmVkZXJhdGlvbiA9IHZvaWQgMDtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIlV0aWxzXCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIF91dGlscy5VdGlscztcbiAgfVxufSk7XG5leHBvcnRzLnJwYyA9IGV4cG9ydHMuZGVmYXVsdCA9IGV4cG9ydHMuY29udHJhY3QgPSBleHBvcnRzLldlYkF1dGggPSB2b2lkIDA7XG52YXIgX2Vycm9ycyA9IHJlcXVpcmUoXCIuL2Vycm9yc1wiKTtcbk9iamVjdC5rZXlzKF9lcnJvcnMpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICBpZiAoa2V5ID09PSBcImRlZmF1bHRcIiB8fCBrZXkgPT09IFwiX19lc01vZHVsZVwiKSByZXR1cm47XG4gIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoX2V4cG9ydE5hbWVzLCBrZXkpKSByZXR1cm47XG4gIGlmIChrZXkgaW4gZXhwb3J0cyAmJiBleHBvcnRzW2tleV0gPT09IF9lcnJvcnNba2V5XSkgcmV0dXJuO1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywga2V5LCB7XG4gICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiBfZXJyb3JzW2tleV07XG4gICAgfVxuICB9KTtcbn0pO1xudmFyIF9jb25maWcgPSByZXF1aXJlKFwiLi9jb25maWdcIik7XG52YXIgX3V0aWxzID0gcmVxdWlyZShcIi4vdXRpbHNcIik7XG52YXIgX1N0ZWxsYXJUb21sID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQocmVxdWlyZShcIi4vc3RlbGxhcnRvbWxcIikpO1xuZXhwb3J0cy5TdGVsbGFyVG9tbCA9IF9TdGVsbGFyVG9tbDtcbnZhciBfRmVkZXJhdGlvbiA9IF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKHJlcXVpcmUoXCIuL2ZlZGVyYXRpb25cIikpO1xuZXhwb3J0cy5GZWRlcmF0aW9uID0gX0ZlZGVyYXRpb247XG52YXIgX1dlYkF1dGggPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChyZXF1aXJlKFwiLi93ZWJhdXRoXCIpKTtcbmV4cG9ydHMuV2ViQXV0aCA9IF9XZWJBdXRoO1xudmFyIF9GcmllbmRib3QgPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChyZXF1aXJlKFwiLi9mcmllbmRib3RcIikpO1xuZXhwb3J0cy5GcmllbmRib3QgPSBfRnJpZW5kYm90O1xudmFyIF9Ib3Jpem9uID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQocmVxdWlyZShcIi4vaG9yaXpvblwiKSk7XG5leHBvcnRzLkhvcml6b24gPSBfSG9yaXpvbjtcbnZhciBfcnBjID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQocmVxdWlyZShcIi4vcnBjXCIpKTtcbmV4cG9ydHMucnBjID0gX3JwYztcbnZhciBfY29udHJhY3QgPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChyZXF1aXJlKFwiLi9jb250cmFjdFwiKSk7XG5leHBvcnRzLmNvbnRyYWN0ID0gX2NvbnRyYWN0O1xudmFyIF9zdGVsbGFyQmFzZSA9IHJlcXVpcmUoXCJAc3RlbGxhci9zdGVsbGFyLWJhc2VcIik7XG5PYmplY3Qua2V5cyhfc3RlbGxhckJhc2UpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICBpZiAoa2V5ID09PSBcImRlZmF1bHRcIiB8fCBrZXkgPT09IFwiX19lc01vZHVsZVwiKSByZXR1cm47XG4gIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoX2V4cG9ydE5hbWVzLCBrZXkpKSByZXR1cm47XG4gIGlmIChrZXkgaW4gZXhwb3J0cyAmJiBleHBvcnRzW2tleV0gPT09IF9zdGVsbGFyQmFzZVtrZXldKSByZXR1cm47XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBrZXksIHtcbiAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIF9zdGVsbGFyQmFzZVtrZXldO1xuICAgIH1cbiAgfSk7XG59KTtcbmZ1bmN0aW9uIF9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZShlKSB7IGlmIChcImZ1bmN0aW9uXCIgIT0gdHlwZW9mIFdlYWtNYXApIHJldHVybiBudWxsOyB2YXIgciA9IG5ldyBXZWFrTWFwKCksIHQgPSBuZXcgV2Vha01hcCgpOyByZXR1cm4gKF9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSA9IGZ1bmN0aW9uIF9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZShlKSB7IHJldHVybiBlID8gdCA6IHI7IH0pKGUpOyB9XG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChlLCByKSB7IGlmICghciAmJiBlICYmIGUuX19lc01vZHVsZSkgcmV0dXJuIGU7IGlmIChudWxsID09PSBlIHx8IFwib2JqZWN0XCIgIT0gX3R5cGVvZihlKSAmJiBcImZ1bmN0aW9uXCIgIT0gdHlwZW9mIGUpIHJldHVybiB7IGRlZmF1bHQ6IGUgfTsgdmFyIHQgPSBfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUocik7IGlmICh0ICYmIHQuaGFzKGUpKSByZXR1cm4gdC5nZXQoZSk7IHZhciBuID0geyBfX3Byb3RvX186IG51bGwgfSwgYSA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSAmJiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yOyBmb3IgKHZhciB1IGluIGUpIGlmIChcImRlZmF1bHRcIiAhPT0gdSAmJiB7fS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsIHUpKSB7IHZhciBpID0gYSA/IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoZSwgdSkgOiBudWxsOyBpICYmIChpLmdldCB8fCBpLnNldCkgPyBPYmplY3QuZGVmaW5lUHJvcGVydHkobiwgdSwgaSkgOiBuW3VdID0gZVt1XTsgfSByZXR1cm4gbi5kZWZhdWx0ID0gZSwgdCAmJiB0LnNldChlLCBuKSwgbjsgfVxudmFyIF9kZWZhdWx0ID0gZXhwb3J0cy5kZWZhdWx0ID0gbW9kdWxlLmV4cG9ydHM7XG5pZiAodHlwZW9mIGdsb2JhbC5fX1VTRV9BWElPU19fID09PSAndW5kZWZpbmVkJykge1xuICBnbG9iYWwuX19VU0VfQVhJT1NfXyA9IHRydWU7XG59XG5pZiAodHlwZW9mIGdsb2JhbC5fX1VTRV9FVkVOVFNPVVJDRV9fID09PSAndW5kZWZpbmVkJykge1xuICBnbG9iYWwuX19VU0VfRVZFTlRTT1VSQ0VfXyA9IGZhbHNlO1xufSJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@stellar/stellar-sdk/lib/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@stellar/stellar-sdk/lib/rpc/api.js":
/*!**********************************************************!*\
  !*** ./node_modules/@stellar/stellar-sdk/lib/rpc/api.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.Api = void 0;\nvar Api;\n(function (_Api) {\n  var GetTransactionStatus = function (GetTransactionStatus) {\n    GetTransactionStatus[\"SUCCESS\"] = \"SUCCESS\";\n    GetTransactionStatus[\"NOT_FOUND\"] = \"NOT_FOUND\";\n    GetTransactionStatus[\"FAILED\"] = \"FAILED\";\n    return GetTransactionStatus;\n  }({});\n  _Api.GetTransactionStatus = GetTransactionStatus;\n  function isSimulationError(sim) {\n    return 'error' in sim;\n  }\n  _Api.isSimulationError = isSimulationError;\n  function isSimulationSuccess(sim) {\n    return 'transactionData' in sim;\n  }\n  _Api.isSimulationSuccess = isSimulationSuccess;\n  function isSimulationRestore(sim) {\n    return isSimulationSuccess(sim) && 'restorePreamble' in sim && !!sim.restorePreamble.transactionData;\n  }\n  _Api.isSimulationRestore = isSimulationRestore;\n  function isSimulationRaw(sim) {\n    return !sim._parsed;\n  }\n  _Api.isSimulationRaw = isSimulationRaw;\n})(Api || (exports.Api = Api = {}));//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHN0ZWxsYXIvc3RlbGxhci1zZGsvbGliL3JwYy9hcGkuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsOENBQTZDO0FBQzdDO0FBQ0EsQ0FBQyxFQUFDO0FBQ0YsV0FBVztBQUNYO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRyxHQUFHO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsVUFBVSxXQUFXLFdBQVciLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcVVNVQVJJT1xcRG9jdW1lbnRzXFxHaXRodWJcXEdhbGF4eUtKLXdhbGxldC0tLUhhY2tcXHdlYlxcbm9kZV9tb2R1bGVzXFxAc3RlbGxhclxcc3RlbGxhci1zZGtcXGxpYlxccnBjXFxhcGkuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLkFwaSA9IHZvaWQgMDtcbnZhciBBcGk7XG4oZnVuY3Rpb24gKF9BcGkpIHtcbiAgdmFyIEdldFRyYW5zYWN0aW9uU3RhdHVzID0gZnVuY3Rpb24gKEdldFRyYW5zYWN0aW9uU3RhdHVzKSB7XG4gICAgR2V0VHJhbnNhY3Rpb25TdGF0dXNbXCJTVUNDRVNTXCJdID0gXCJTVUNDRVNTXCI7XG4gICAgR2V0VHJhbnNhY3Rpb25TdGF0dXNbXCJOT1RfRk9VTkRcIl0gPSBcIk5PVF9GT1VORFwiO1xuICAgIEdldFRyYW5zYWN0aW9uU3RhdHVzW1wiRkFJTEVEXCJdID0gXCJGQUlMRURcIjtcbiAgICByZXR1cm4gR2V0VHJhbnNhY3Rpb25TdGF0dXM7XG4gIH0oe30pO1xuICBfQXBpLkdldFRyYW5zYWN0aW9uU3RhdHVzID0gR2V0VHJhbnNhY3Rpb25TdGF0dXM7XG4gIGZ1bmN0aW9uIGlzU2ltdWxhdGlvbkVycm9yKHNpbSkge1xuICAgIHJldHVybiAnZXJyb3InIGluIHNpbTtcbiAgfVxuICBfQXBpLmlzU2ltdWxhdGlvbkVycm9yID0gaXNTaW11bGF0aW9uRXJyb3I7XG4gIGZ1bmN0aW9uIGlzU2ltdWxhdGlvblN1Y2Nlc3Moc2ltKSB7XG4gICAgcmV0dXJuICd0cmFuc2FjdGlvbkRhdGEnIGluIHNpbTtcbiAgfVxuICBfQXBpLmlzU2ltdWxhdGlvblN1Y2Nlc3MgPSBpc1NpbXVsYXRpb25TdWNjZXNzO1xuICBmdW5jdGlvbiBpc1NpbXVsYXRpb25SZXN0b3JlKHNpbSkge1xuICAgIHJldHVybiBpc1NpbXVsYXRpb25TdWNjZXNzKHNpbSkgJiYgJ3Jlc3RvcmVQcmVhbWJsZScgaW4gc2ltICYmICEhc2ltLnJlc3RvcmVQcmVhbWJsZS50cmFuc2FjdGlvbkRhdGE7XG4gIH1cbiAgX0FwaS5pc1NpbXVsYXRpb25SZXN0b3JlID0gaXNTaW11bGF0aW9uUmVzdG9yZTtcbiAgZnVuY3Rpb24gaXNTaW11bGF0aW9uUmF3KHNpbSkge1xuICAgIHJldHVybiAhc2ltLl9wYXJzZWQ7XG4gIH1cbiAgX0FwaS5pc1NpbXVsYXRpb25SYXcgPSBpc1NpbXVsYXRpb25SYXc7XG59KShBcGkgfHwgKGV4cG9ydHMuQXBpID0gQXBpID0ge30pKTsiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@stellar/stellar-sdk/lib/rpc/api.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@stellar/stellar-sdk/lib/rpc/axios.js":
/*!************************************************************!*\
  !*** ./node_modules/@stellar/stellar-sdk/lib/rpc/axios.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.version = exports[\"default\"] = exports.AxiosClient = void 0;\nvar _httpClient = __webpack_require__(/*! ../http-client */ \"(ssr)/./node_modules/@stellar/stellar-sdk/lib/http-client/index.js\");\nvar version = exports.version = \"13.3.0\";\nvar AxiosClient = exports.AxiosClient = (0, _httpClient.create)({\n  headers: {\n    'X-Client-Name': 'js-soroban-client',\n    'X-Client-Version': version\n  }\n});\nvar _default = exports[\"default\"] = AxiosClient;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHN0ZWxsYXIvc3RlbGxhci1zZGsvbGliL3JwYy9heGlvcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYiw4Q0FBNkM7QUFDN0M7QUFDQSxDQUFDLEVBQUM7QUFDRixlQUFlLEdBQUcsa0JBQWUsR0FBRyxtQkFBbUI7QUFDdkQsa0JBQWtCLG1CQUFPLENBQUMsMEZBQWdCO0FBQzFDLGNBQWMsZUFBZTtBQUM3QixrQkFBa0IsbUJBQW1CO0FBQ3JDO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNELGVBQWUsa0JBQWUiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcVVNVQVJJT1xcRG9jdW1lbnRzXFxHaXRodWJcXEdhbGF4eUtKLXdhbGxldC0tLUhhY2tcXHdlYlxcbm9kZV9tb2R1bGVzXFxAc3RlbGxhclxcc3RlbGxhci1zZGtcXGxpYlxccnBjXFxheGlvcy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMudmVyc2lvbiA9IGV4cG9ydHMuZGVmYXVsdCA9IGV4cG9ydHMuQXhpb3NDbGllbnQgPSB2b2lkIDA7XG52YXIgX2h0dHBDbGllbnQgPSByZXF1aXJlKFwiLi4vaHR0cC1jbGllbnRcIik7XG52YXIgdmVyc2lvbiA9IGV4cG9ydHMudmVyc2lvbiA9IFwiMTMuMy4wXCI7XG52YXIgQXhpb3NDbGllbnQgPSBleHBvcnRzLkF4aW9zQ2xpZW50ID0gKDAsIF9odHRwQ2xpZW50LmNyZWF0ZSkoe1xuICBoZWFkZXJzOiB7XG4gICAgJ1gtQ2xpZW50LU5hbWUnOiAnanMtc29yb2Jhbi1jbGllbnQnLFxuICAgICdYLUNsaWVudC1WZXJzaW9uJzogdmVyc2lvblxuICB9XG59KTtcbnZhciBfZGVmYXVsdCA9IGV4cG9ydHMuZGVmYXVsdCA9IEF4aW9zQ2xpZW50OyJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@stellar/stellar-sdk/lib/rpc/axios.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@stellar/stellar-sdk/lib/rpc/index.js":
/*!************************************************************!*\
  !*** ./node_modules/@stellar/stellar-sdk/lib/rpc/index.js ***!
  \************************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nvar _exportNames = {\n  Server: true,\n  BasicSleepStrategy: true,\n  LinearSleepStrategy: true,\n  Durability: true,\n  AxiosClient: true,\n  parseRawSimulation: true,\n  parseRawEvents: true\n};\nObject.defineProperty(exports, \"AxiosClient\", ({\n  enumerable: true,\n  get: function get() {\n    return _axios.default;\n  }\n}));\nObject.defineProperty(exports, \"BasicSleepStrategy\", ({\n  enumerable: true,\n  get: function get() {\n    return _server.BasicSleepStrategy;\n  }\n}));\nObject.defineProperty(exports, \"Durability\", ({\n  enumerable: true,\n  get: function get() {\n    return _server.Durability;\n  }\n}));\nObject.defineProperty(exports, \"LinearSleepStrategy\", ({\n  enumerable: true,\n  get: function get() {\n    return _server.LinearSleepStrategy;\n  }\n}));\nObject.defineProperty(exports, \"Server\", ({\n  enumerable: true,\n  get: function get() {\n    return _server.RpcServer;\n  }\n}));\nexports[\"default\"] = void 0;\nObject.defineProperty(exports, \"parseRawEvents\", ({\n  enumerable: true,\n  get: function get() {\n    return _parsers.parseRawEvents;\n  }\n}));\nObject.defineProperty(exports, \"parseRawSimulation\", ({\n  enumerable: true,\n  get: function get() {\n    return _parsers.parseRawSimulation;\n  }\n}));\nvar _api = __webpack_require__(/*! ./api */ \"(ssr)/./node_modules/@stellar/stellar-sdk/lib/rpc/api.js\");\nObject.keys(_api).forEach(function (key) {\n  if (key === \"default\" || key === \"__esModule\") return;\n  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;\n  if (key in exports && exports[key] === _api[key]) return;\n  Object.defineProperty(exports, key, {\n    enumerable: true,\n    get: function get() {\n      return _api[key];\n    }\n  });\n});\nvar _server = __webpack_require__(/*! ./server */ \"(ssr)/./node_modules/@stellar/stellar-sdk/lib/rpc/server.js\");\nvar _axios = _interopRequireDefault(__webpack_require__(/*! ./axios */ \"(ssr)/./node_modules/@stellar/stellar-sdk/lib/rpc/axios.js\"));\nvar _parsers = __webpack_require__(/*! ./parsers */ \"(ssr)/./node_modules/@stellar/stellar-sdk/lib/rpc/parsers.js\");\nvar _transaction = __webpack_require__(/*! ./transaction */ \"(ssr)/./node_modules/@stellar/stellar-sdk/lib/rpc/transaction.js\");\nObject.keys(_transaction).forEach(function (key) {\n  if (key === \"default\" || key === \"__esModule\") return;\n  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;\n  if (key in exports && exports[key] === _transaction[key]) return;\n  Object.defineProperty(exports, key, {\n    enumerable: true,\n    get: function get() {\n      return _transaction[key];\n    }\n  });\n});\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }\nvar _default = exports[\"default\"] = module.exports;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHN0ZWxsYXIvc3RlbGxhci1zZGsvbGliL3JwYy9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYiw4Q0FBNkM7QUFDN0M7QUFDQSxDQUFDLEVBQUM7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrQ0FBOEM7QUFDOUM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRixzREFBcUQ7QUFDckQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRiw4Q0FBNkM7QUFDN0M7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRix1REFBc0Q7QUFDdEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRiwwQ0FBeUM7QUFDekM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRixrQkFBZTtBQUNmLGtEQUFpRDtBQUNqRDtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsRUFBQztBQUNGLHNEQUFxRDtBQUNyRDtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsRUFBQztBQUNGLFdBQVcsbUJBQU8sQ0FBQyx1RUFBTztBQUMxQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0gsQ0FBQztBQUNELGNBQWMsbUJBQU8sQ0FBQyw2RUFBVTtBQUNoQyxvQ0FBb0MsbUJBQU8sQ0FBQywyRUFBUztBQUNyRCxlQUFlLG1CQUFPLENBQUMsK0VBQVc7QUFDbEMsbUJBQW1CLG1CQUFPLENBQUMsdUZBQWU7QUFDMUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNILENBQUM7QUFDRCxxQ0FBcUMsaUNBQWlDO0FBQ3RFLGVBQWUsa0JBQWUiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcVVNVQVJJT1xcRG9jdW1lbnRzXFxHaXRodWJcXEdhbGF4eUtKLXdhbGxldC0tLUhhY2tcXHdlYlxcbm9kZV9tb2R1bGVzXFxAc3RlbGxhclxcc3RlbGxhci1zZGtcXGxpYlxccnBjXFxpbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbnZhciBfZXhwb3J0TmFtZXMgPSB7XG4gIFNlcnZlcjogdHJ1ZSxcbiAgQmFzaWNTbGVlcFN0cmF0ZWd5OiB0cnVlLFxuICBMaW5lYXJTbGVlcFN0cmF0ZWd5OiB0cnVlLFxuICBEdXJhYmlsaXR5OiB0cnVlLFxuICBBeGlvc0NsaWVudDogdHJ1ZSxcbiAgcGFyc2VSYXdTaW11bGF0aW9uOiB0cnVlLFxuICBwYXJzZVJhd0V2ZW50czogdHJ1ZVxufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIkF4aW9zQ2xpZW50XCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIF9heGlvcy5kZWZhdWx0O1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIkJhc2ljU2xlZXBTdHJhdGVneVwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBfc2VydmVyLkJhc2ljU2xlZXBTdHJhdGVneTtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJEdXJhYmlsaXR5XCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIF9zZXJ2ZXIuRHVyYWJpbGl0eTtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJMaW5lYXJTbGVlcFN0cmF0ZWd5XCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIF9zZXJ2ZXIuTGluZWFyU2xlZXBTdHJhdGVneTtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJTZXJ2ZXJcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gX3NlcnZlci5ScGNTZXJ2ZXI7XG4gIH1cbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwicGFyc2VSYXdFdmVudHNcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gX3BhcnNlcnMucGFyc2VSYXdFdmVudHM7XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwicGFyc2VSYXdTaW11bGF0aW9uXCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIF9wYXJzZXJzLnBhcnNlUmF3U2ltdWxhdGlvbjtcbiAgfVxufSk7XG52YXIgX2FwaSA9IHJlcXVpcmUoXCIuL2FwaVwiKTtcbk9iamVjdC5rZXlzKF9hcGkpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICBpZiAoa2V5ID09PSBcImRlZmF1bHRcIiB8fCBrZXkgPT09IFwiX19lc01vZHVsZVwiKSByZXR1cm47XG4gIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoX2V4cG9ydE5hbWVzLCBrZXkpKSByZXR1cm47XG4gIGlmIChrZXkgaW4gZXhwb3J0cyAmJiBleHBvcnRzW2tleV0gPT09IF9hcGlba2V5XSkgcmV0dXJuO1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywga2V5LCB7XG4gICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiBfYXBpW2tleV07XG4gICAgfVxuICB9KTtcbn0pO1xudmFyIF9zZXJ2ZXIgPSByZXF1aXJlKFwiLi9zZXJ2ZXJcIik7XG52YXIgX2F4aW9zID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9heGlvc1wiKSk7XG52YXIgX3BhcnNlcnMgPSByZXF1aXJlKFwiLi9wYXJzZXJzXCIpO1xudmFyIF90cmFuc2FjdGlvbiA9IHJlcXVpcmUoXCIuL3RyYW5zYWN0aW9uXCIpO1xuT2JqZWN0LmtleXMoX3RyYW5zYWN0aW9uKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgaWYgKGtleSA9PT0gXCJkZWZhdWx0XCIgfHwga2V5ID09PSBcIl9fZXNNb2R1bGVcIikgcmV0dXJuO1xuICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKF9leHBvcnROYW1lcywga2V5KSkgcmV0dXJuO1xuICBpZiAoa2V5IGluIGV4cG9ydHMgJiYgZXhwb3J0c1trZXldID09PSBfdHJhbnNhY3Rpb25ba2V5XSkgcmV0dXJuO1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywga2V5LCB7XG4gICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiBfdHJhbnNhY3Rpb25ba2V5XTtcbiAgICB9XG4gIH0pO1xufSk7XG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KGUpIHsgcmV0dXJuIGUgJiYgZS5fX2VzTW9kdWxlID8gZSA6IHsgZGVmYXVsdDogZSB9OyB9XG52YXIgX2RlZmF1bHQgPSBleHBvcnRzLmRlZmF1bHQgPSBtb2R1bGUuZXhwb3J0czsiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@stellar/stellar-sdk/lib/rpc/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@stellar/stellar-sdk/lib/rpc/jsonrpc.js":
/*!**************************************************************!*\
  !*** ./node_modules/@stellar/stellar-sdk/lib/rpc/jsonrpc.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.postObject = postObject;\nvar _axios = _interopRequireDefault(__webpack_require__(/*! ./axios */ \"(ssr)/./node_modules/@stellar/stellar-sdk/lib/rpc/axios.js\"));\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _regeneratorRuntime() { \"use strict\"; _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = \"function\" == typeof Symbol ? Symbol : {}, a = i.iterator || \"@@iterator\", c = i.asyncIterator || \"@@asyncIterator\", u = i.toStringTag || \"@@toStringTag\"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, \"\"); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, \"_invoke\", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: \"normal\", arg: t.call(e, r) }; } catch (t) { return { type: \"throw\", arg: t }; } } e.wrap = wrap; var h = \"suspendedStart\", l = \"suspendedYield\", f = \"executing\", s = \"completed\", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { [\"next\", \"throw\", \"return\"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if (\"throw\" !== c.type) { var u = c.arg, h = u.value; return h && \"object\" == _typeof(h) && n.call(h, \"__await\") ? e.resolve(h.__await).then(function (t) { invoke(\"next\", t, i, a); }, function (t) { invoke(\"throw\", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke(\"throw\", t, i, a); }); } a(c.arg); } var r; o(this, \"_invoke\", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw Error(\"Generator is already running\"); if (o === s) { if (\"throw\" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if (\"next\" === n.method) n.sent = n._sent = n.arg;else if (\"throw\" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else \"return\" === n.method && n.abrupt(\"return\", n.arg); o = f; var p = tryCatch(e, r, n); if (\"normal\" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } \"throw\" === p.type && (o = s, n.method = \"throw\", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, \"throw\" === n && e.iterator.return && (r.method = \"return\", r.arg = t, maybeInvokeDelegate(e, r), \"throw\" === r.method) || \"return\" !== n && (r.method = \"throw\", r.arg = new TypeError(\"The iterator does not provide a '\" + n + \"' method\")), y; var i = tryCatch(o, e.iterator, r.arg); if (\"throw\" === i.type) return r.method = \"throw\", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, \"return\" !== r.method && (r.method = \"next\", r.arg = t), r.delegate = null, y) : a : (r.method = \"throw\", r.arg = new TypeError(\"iterator result is not an object\"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = \"normal\", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: \"root\" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || \"\" === e) { var r = e[a]; if (r) return r.call(e); if (\"function\" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(_typeof(e) + \" is not iterable\"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, \"constructor\", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, \"constructor\", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, \"GeneratorFunction\"), e.isGeneratorFunction = function (t) { var e = \"function\" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || \"GeneratorFunction\" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, \"GeneratorFunction\")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, \"Generator\"), define(g, a, function () { return this; }), define(g, \"toString\", function () { return \"[object Generator]\"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) \"t\" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if (\"throw\" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = \"throw\", a.arg = e, r.next = n, o && (r.method = \"next\", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if (\"root\" === i.tryLoc) return handle(\"end\"); if (i.tryLoc <= this.prev) { var c = n.call(i, \"catchLoc\"), u = n.call(i, \"finallyLoc\"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw Error(\"try statement without catch or finally\"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, \"finallyLoc\") && this.prev < o.finallyLoc) { var i = o; break; } } i && (\"break\" === t || \"continue\" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = \"next\", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if (\"throw\" === t.type) throw t.arg; return \"break\" === t.type || \"continue\" === t.type ? this.next = t.arg : \"return\" === t.type ? (this.rval = this.arg = t.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, catch: function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if (\"throw\" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, \"next\" === this.method && (this.arg = t), y; } }, e; }\nfunction asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }\nfunction _asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, \"next\", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, \"throw\", n); } _next(void 0); }); }; }\nfunction hasOwnProperty(obj, prop) {\n  return obj.hasOwnProperty(prop);\n}\nfunction postObject(_x, _x2) {\n  return _postObject.apply(this, arguments);\n}\nfunction _postObject() {\n  _postObject = _asyncToGenerator(_regeneratorRuntime().mark(function _callee(url, method) {\n    var param,\n      response,\n      _response$data,\n      _args = arguments;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          param = _args.length > 2 && _args[2] !== undefined ? _args[2] : null;\n          _context.next = 3;\n          return _axios.default.post(url, {\n            jsonrpc: \"2.0\",\n            id: 1,\n            method: method,\n            params: param\n          });\n        case 3:\n          response = _context.sent;\n          if (!hasOwnProperty(response.data, \"error\")) {\n            _context.next = 8;\n            break;\n          }\n          throw response.data.error;\n        case 8:\n          return _context.abrupt(\"return\", (_response$data = response.data) === null || _response$data === void 0 ? void 0 : _response$data.result);\n        case 9:\n        case \"end\":\n          return _context.stop();\n      }\n    }, _callee);\n  }));\n  return _postObject.apply(this, arguments);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@stellar/stellar-sdk/lib/rpc/jsonrpc.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@stellar/stellar-sdk/lib/rpc/parsers.js":
/*!**************************************************************!*\
  !*** ./node_modules/@stellar/stellar-sdk/lib/rpc/parsers.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.parseRawEvents = parseRawEvents;\nexports.parseRawLedgerEntries = parseRawLedgerEntries;\nexports.parseRawSendTransaction = parseRawSendTransaction;\nexports.parseRawSimulation = parseRawSimulation;\nexports.parseRawTransactions = parseRawTransactions;\nexports.parseTransactionInfo = parseTransactionInfo;\nvar _stellarBase = __webpack_require__(/*! @stellar/stellar-base */ \"(ssr)/./node_modules/@stellar/stellar-base/lib/index.js\");\nvar _api = __webpack_require__(/*! ./api */ \"(ssr)/./node_modules/@stellar/stellar-sdk/lib/rpc/api.js\");\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nfunction parseRawSendTransaction(raw) {\n  var errorResultXdr = raw.errorResultXdr,\n    diagnosticEventsXdr = raw.diagnosticEventsXdr;\n  delete raw.errorResultXdr;\n  delete raw.diagnosticEventsXdr;\n  if (errorResultXdr) {\n    return _objectSpread(_objectSpread(_objectSpread({}, raw), diagnosticEventsXdr !== undefined && diagnosticEventsXdr.length > 0 && {\n      diagnosticEvents: diagnosticEventsXdr.map(function (evt) {\n        return _stellarBase.xdr.DiagnosticEvent.fromXDR(evt, 'base64');\n      })\n    }), {}, {\n      errorResult: _stellarBase.xdr.TransactionResult.fromXDR(errorResultXdr, 'base64')\n    });\n  }\n  return _objectSpread({}, raw);\n}\nfunction parseTransactionInfo(raw) {\n  var meta = _stellarBase.xdr.TransactionMeta.fromXDR(raw.resultMetaXdr, 'base64');\n  var info = {\n    ledger: raw.ledger,\n    createdAt: raw.createdAt,\n    applicationOrder: raw.applicationOrder,\n    feeBump: raw.feeBump,\n    envelopeXdr: _stellarBase.xdr.TransactionEnvelope.fromXDR(raw.envelopeXdr, 'base64'),\n    resultXdr: _stellarBase.xdr.TransactionResult.fromXDR(raw.resultXdr, 'base64'),\n    resultMetaXdr: meta\n  };\n  if (meta.switch() === 3 && meta.v3().sorobanMeta() !== null) {\n    var _meta$v3$sorobanMeta;\n    info.returnValue = (_meta$v3$sorobanMeta = meta.v3().sorobanMeta()) === null || _meta$v3$sorobanMeta === void 0 ? void 0 : _meta$v3$sorobanMeta.returnValue();\n  }\n  if ('diagnosticEventsXdr' in raw && raw.diagnosticEventsXdr) {\n    info.diagnosticEventsXdr = raw.diagnosticEventsXdr.map(function (diagnosticEvent) {\n      return _stellarBase.xdr.DiagnosticEvent.fromXDR(diagnosticEvent, 'base64');\n    });\n  }\n  return info;\n}\nfunction parseRawTransactions(r) {\n  return _objectSpread({\n    status: r.status,\n    txHash: r.txHash\n  }, parseTransactionInfo(r));\n}\nfunction parseRawEvents(raw) {\n  var _raw$events;\n  return {\n    latestLedger: raw.latestLedger,\n    cursor: raw.cursor,\n    events: ((_raw$events = raw.events) !== null && _raw$events !== void 0 ? _raw$events : []).map(function (evt) {\n      var clone = _objectSpread({}, evt);\n      delete clone.contractId;\n      return _objectSpread(_objectSpread(_objectSpread({}, clone), evt.contractId !== '' && {\n        contractId: new _stellarBase.Contract(evt.contractId)\n      }), {}, {\n        topic: evt.topic.map(function (topic) {\n          return _stellarBase.xdr.ScVal.fromXDR(topic, 'base64');\n        }),\n        value: _stellarBase.xdr.ScVal.fromXDR(evt.value, 'base64')\n      });\n    })\n  };\n}\nfunction parseRawLedgerEntries(raw) {\n  var _raw$entries;\n  return {\n    latestLedger: raw.latestLedger,\n    entries: ((_raw$entries = raw.entries) !== null && _raw$entries !== void 0 ? _raw$entries : []).map(function (rawEntry) {\n      if (!rawEntry.key || !rawEntry.xdr) {\n        throw new TypeError(\"invalid ledger entry: \".concat(JSON.stringify(rawEntry)));\n      }\n      return _objectSpread({\n        lastModifiedLedgerSeq: rawEntry.lastModifiedLedgerSeq,\n        key: _stellarBase.xdr.LedgerKey.fromXDR(rawEntry.key, 'base64'),\n        val: _stellarBase.xdr.LedgerEntryData.fromXDR(rawEntry.xdr, 'base64')\n      }, rawEntry.liveUntilLedgerSeq !== undefined && {\n        liveUntilLedgerSeq: rawEntry.liveUntilLedgerSeq\n      });\n    })\n  };\n}\nfunction parseSuccessful(sim, partial) {\n  var _sim$results$length, _sim$results, _sim$stateChanges$len, _sim$stateChanges, _sim$stateChanges2;\n  var success = _objectSpread(_objectSpread(_objectSpread({}, partial), {}, {\n    transactionData: new _stellarBase.SorobanDataBuilder(sim.transactionData),\n    minResourceFee: sim.minResourceFee\n  }, ((_sim$results$length = (_sim$results = sim.results) === null || _sim$results === void 0 ? void 0 : _sim$results.length) !== null && _sim$results$length !== void 0 ? _sim$results$length : 0 > 0) && {\n    result: sim.results.map(function (row) {\n      var _row$auth;\n      return {\n        auth: ((_row$auth = row.auth) !== null && _row$auth !== void 0 ? _row$auth : []).map(function (entry) {\n          return _stellarBase.xdr.SorobanAuthorizationEntry.fromXDR(entry, 'base64');\n        }),\n        retval: row.xdr ? _stellarBase.xdr.ScVal.fromXDR(row.xdr, 'base64') : _stellarBase.xdr.ScVal.scvVoid()\n      };\n    })[0]\n  }), ((_sim$stateChanges$len = (_sim$stateChanges = sim.stateChanges) === null || _sim$stateChanges === void 0 ? void 0 : _sim$stateChanges.length) !== null && _sim$stateChanges$len !== void 0 ? _sim$stateChanges$len : 0 > 0) && {\n    stateChanges: (_sim$stateChanges2 = sim.stateChanges) === null || _sim$stateChanges2 === void 0 ? void 0 : _sim$stateChanges2.map(function (entryChange) {\n      return {\n        type: entryChange.type,\n        key: _stellarBase.xdr.LedgerKey.fromXDR(entryChange.key, 'base64'),\n        before: entryChange.before ? _stellarBase.xdr.LedgerEntry.fromXDR(entryChange.before, 'base64') : null,\n        after: entryChange.after ? _stellarBase.xdr.LedgerEntry.fromXDR(entryChange.after, 'base64') : null\n      };\n    })\n  });\n  if (!sim.restorePreamble || sim.restorePreamble.transactionData === '') {\n    return success;\n  }\n  return _objectSpread(_objectSpread({}, success), {}, {\n    restorePreamble: {\n      minResourceFee: sim.restorePreamble.minResourceFee,\n      transactionData: new _stellarBase.SorobanDataBuilder(sim.restorePreamble.transactionData)\n    }\n  });\n}\nfunction parseRawSimulation(sim) {\n  var _sim$events$map, _sim$events;\n  var looksRaw = _api.Api.isSimulationRaw(sim);\n  if (!looksRaw) {\n    return sim;\n  }\n  var base = {\n    _parsed: true,\n    id: sim.id,\n    latestLedger: sim.latestLedger,\n    events: (_sim$events$map = (_sim$events = sim.events) === null || _sim$events === void 0 ? void 0 : _sim$events.map(function (evt) {\n      return _stellarBase.xdr.DiagnosticEvent.fromXDR(evt, 'base64');\n    })) !== null && _sim$events$map !== void 0 ? _sim$events$map : []\n  };\n  if (typeof sim.error === 'string') {\n    return _objectSpread(_objectSpread({}, base), {}, {\n      error: sim.error\n    });\n  }\n  return parseSuccessful(sim, base);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHN0ZWxsYXIvc3RlbGxhci1zZGsvbGliL3JwYy9wYXJzZXJzLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLDhDQUE2QztBQUM3QztBQUNBLENBQUMsRUFBQztBQUNGLHNCQUFzQjtBQUN0Qiw2QkFBNkI7QUFDN0IsK0JBQStCO0FBQy9CLDBCQUEwQjtBQUMxQiw0QkFBNEI7QUFDNUIsNEJBQTRCO0FBQzVCLG1CQUFtQixtQkFBTyxDQUFDLHNGQUF1QjtBQUNsRCxXQUFXLG1CQUFPLENBQUMsdUVBQU87QUFDMUIsc0JBQXNCLDJCQUEyQixvR0FBb0csbUJBQW1CLGlCQUFpQixzSEFBc0g7QUFDL1MseUJBQXlCLHdCQUF3QixvQ0FBb0MseUNBQXlDLGtDQUFrQywwREFBMEQsMEJBQTBCO0FBQ3BQLDRCQUE0QixnQkFBZ0Isc0JBQXNCLE9BQU8sa0RBQWtELHNEQUFzRCw4QkFBOEIsbUpBQW1KLHFFQUFxRSxLQUFLO0FBQzVhLG9DQUFvQyxvRUFBb0UsMERBQTBEO0FBQ2xLLDZCQUE2QixtQ0FBbUM7QUFDaEUsOEJBQThCLDRDQUE0QywrQkFBK0Isb0JBQW9CLG1DQUFtQyxzQ0FBc0MsdUVBQXVFO0FBQzdRO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVEQUF1RDtBQUN2RDtBQUNBO0FBQ0EsT0FBTztBQUNQLEtBQUssS0FBSztBQUNWO0FBQ0EsS0FBSztBQUNMO0FBQ0EseUJBQXlCO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0NBQWtDO0FBQ2xDO0FBQ0EseURBQXlEO0FBQ3pEO0FBQ0EsT0FBTyxLQUFLO0FBQ1o7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBLE9BQU87QUFDUCxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBLE9BQU87QUFDUCxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0REFBNEQsY0FBYztBQUMxRTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLEtBQUs7QUFDTCxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBLHVDQUF1QyxjQUFjO0FBQ3JEO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSx5Q0FBeUMsV0FBVztBQUNwRDtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcVVNVQVJJT1xcRG9jdW1lbnRzXFxHaXRodWJcXEdhbGF4eUtKLXdhbGxldC0tLUhhY2tcXHdlYlxcbm9kZV9tb2R1bGVzXFxAc3RlbGxhclxcc3RlbGxhci1zZGtcXGxpYlxccnBjXFxwYXJzZXJzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5wYXJzZVJhd0V2ZW50cyA9IHBhcnNlUmF3RXZlbnRzO1xuZXhwb3J0cy5wYXJzZVJhd0xlZGdlckVudHJpZXMgPSBwYXJzZVJhd0xlZGdlckVudHJpZXM7XG5leHBvcnRzLnBhcnNlUmF3U2VuZFRyYW5zYWN0aW9uID0gcGFyc2VSYXdTZW5kVHJhbnNhY3Rpb247XG5leHBvcnRzLnBhcnNlUmF3U2ltdWxhdGlvbiA9IHBhcnNlUmF3U2ltdWxhdGlvbjtcbmV4cG9ydHMucGFyc2VSYXdUcmFuc2FjdGlvbnMgPSBwYXJzZVJhd1RyYW5zYWN0aW9ucztcbmV4cG9ydHMucGFyc2VUcmFuc2FjdGlvbkluZm8gPSBwYXJzZVRyYW5zYWN0aW9uSW5mbztcbnZhciBfc3RlbGxhckJhc2UgPSByZXF1aXJlKFwiQHN0ZWxsYXIvc3RlbGxhci1iYXNlXCIpO1xudmFyIF9hcGkgPSByZXF1aXJlKFwiLi9hcGlcIik7XG5mdW5jdGlvbiBfdHlwZW9mKG8pIHsgXCJAYmFiZWwvaGVscGVycyAtIHR5cGVvZlwiOyByZXR1cm4gX3R5cGVvZiA9IFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgU3ltYm9sICYmIFwic3ltYm9sXCIgPT0gdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA/IGZ1bmN0aW9uIChvKSB7IHJldHVybiB0eXBlb2YgbzsgfSA6IGZ1bmN0aW9uIChvKSB7IHJldHVybiBvICYmIFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgU3ltYm9sICYmIG8uY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvOyB9LCBfdHlwZW9mKG8pOyB9XG5mdW5jdGlvbiBvd25LZXlzKGUsIHIpIHsgdmFyIHQgPSBPYmplY3Qua2V5cyhlKTsgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHsgdmFyIG8gPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKGUpOyByICYmIChvID0gby5maWx0ZXIoZnVuY3Rpb24gKHIpIHsgcmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoZSwgcikuZW51bWVyYWJsZTsgfSkpLCB0LnB1c2guYXBwbHkodCwgbyk7IH0gcmV0dXJuIHQ7IH1cbmZ1bmN0aW9uIF9vYmplY3RTcHJlYWQoZSkgeyBmb3IgKHZhciByID0gMTsgciA8IGFyZ3VtZW50cy5sZW5ndGg7IHIrKykgeyB2YXIgdCA9IG51bGwgIT0gYXJndW1lbnRzW3JdID8gYXJndW1lbnRzW3JdIDoge307IHIgJSAyID8gb3duS2V5cyhPYmplY3QodCksICEwKS5mb3JFYWNoKGZ1bmN0aW9uIChyKSB7IF9kZWZpbmVQcm9wZXJ0eShlLCByLCB0W3JdKTsgfSkgOiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyA/IE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKGUsIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKHQpKSA6IG93bktleXMoT2JqZWN0KHQpKS5mb3JFYWNoKGZ1bmN0aW9uIChyKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLCByLCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHQsIHIpKTsgfSk7IH0gcmV0dXJuIGU7IH1cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShlLCByLCB0KSB7IHJldHVybiAociA9IF90b1Byb3BlcnR5S2V5KHIpKSBpbiBlID8gT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsIHIsIHsgdmFsdWU6IHQsIGVudW1lcmFibGU6ICEwLCBjb25maWd1cmFibGU6ICEwLCB3cml0YWJsZTogITAgfSkgOiBlW3JdID0gdCwgZTsgfVxuZnVuY3Rpb24gX3RvUHJvcGVydHlLZXkodCkgeyB2YXIgaSA9IF90b1ByaW1pdGl2ZSh0LCBcInN0cmluZ1wiKTsgcmV0dXJuIFwic3ltYm9sXCIgPT0gX3R5cGVvZihpKSA/IGkgOiBpICsgXCJcIjsgfVxuZnVuY3Rpb24gX3RvUHJpbWl0aXZlKHQsIHIpIHsgaWYgKFwib2JqZWN0XCIgIT0gX3R5cGVvZih0KSB8fCAhdCkgcmV0dXJuIHQ7IHZhciBlID0gdFtTeW1ib2wudG9QcmltaXRpdmVdOyBpZiAodm9pZCAwICE9PSBlKSB7IHZhciBpID0gZS5jYWxsKHQsIHIgfHwgXCJkZWZhdWx0XCIpOyBpZiAoXCJvYmplY3RcIiAhPSBfdHlwZW9mKGkpKSByZXR1cm4gaTsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkBAdG9QcmltaXRpdmUgbXVzdCByZXR1cm4gYSBwcmltaXRpdmUgdmFsdWUuXCIpOyB9IHJldHVybiAoXCJzdHJpbmdcIiA9PT0gciA/IFN0cmluZyA6IE51bWJlcikodCk7IH1cbmZ1bmN0aW9uIHBhcnNlUmF3U2VuZFRyYW5zYWN0aW9uKHJhdykge1xuICB2YXIgZXJyb3JSZXN1bHRYZHIgPSByYXcuZXJyb3JSZXN1bHRYZHIsXG4gICAgZGlhZ25vc3RpY0V2ZW50c1hkciA9IHJhdy5kaWFnbm9zdGljRXZlbnRzWGRyO1xuICBkZWxldGUgcmF3LmVycm9yUmVzdWx0WGRyO1xuICBkZWxldGUgcmF3LmRpYWdub3N0aWNFdmVudHNYZHI7XG4gIGlmIChlcnJvclJlc3VsdFhkcikge1xuICAgIHJldHVybiBfb2JqZWN0U3ByZWFkKF9vYmplY3RTcHJlYWQoX29iamVjdFNwcmVhZCh7fSwgcmF3KSwgZGlhZ25vc3RpY0V2ZW50c1hkciAhPT0gdW5kZWZpbmVkICYmIGRpYWdub3N0aWNFdmVudHNYZHIubGVuZ3RoID4gMCAmJiB7XG4gICAgICBkaWFnbm9zdGljRXZlbnRzOiBkaWFnbm9zdGljRXZlbnRzWGRyLm1hcChmdW5jdGlvbiAoZXZ0KSB7XG4gICAgICAgIHJldHVybiBfc3RlbGxhckJhc2UueGRyLkRpYWdub3N0aWNFdmVudC5mcm9tWERSKGV2dCwgJ2Jhc2U2NCcpO1xuICAgICAgfSlcbiAgICB9KSwge30sIHtcbiAgICAgIGVycm9yUmVzdWx0OiBfc3RlbGxhckJhc2UueGRyLlRyYW5zYWN0aW9uUmVzdWx0LmZyb21YRFIoZXJyb3JSZXN1bHRYZHIsICdiYXNlNjQnKVxuICAgIH0pO1xuICB9XG4gIHJldHVybiBfb2JqZWN0U3ByZWFkKHt9LCByYXcpO1xufVxuZnVuY3Rpb24gcGFyc2VUcmFuc2FjdGlvbkluZm8ocmF3KSB7XG4gIHZhciBtZXRhID0gX3N0ZWxsYXJCYXNlLnhkci5UcmFuc2FjdGlvbk1ldGEuZnJvbVhEUihyYXcucmVzdWx0TWV0YVhkciwgJ2Jhc2U2NCcpO1xuICB2YXIgaW5mbyA9IHtcbiAgICBsZWRnZXI6IHJhdy5sZWRnZXIsXG4gICAgY3JlYXRlZEF0OiByYXcuY3JlYXRlZEF0LFxuICAgIGFwcGxpY2F0aW9uT3JkZXI6IHJhdy5hcHBsaWNhdGlvbk9yZGVyLFxuICAgIGZlZUJ1bXA6IHJhdy5mZWVCdW1wLFxuICAgIGVudmVsb3BlWGRyOiBfc3RlbGxhckJhc2UueGRyLlRyYW5zYWN0aW9uRW52ZWxvcGUuZnJvbVhEUihyYXcuZW52ZWxvcGVYZHIsICdiYXNlNjQnKSxcbiAgICByZXN1bHRYZHI6IF9zdGVsbGFyQmFzZS54ZHIuVHJhbnNhY3Rpb25SZXN1bHQuZnJvbVhEUihyYXcucmVzdWx0WGRyLCAnYmFzZTY0JyksXG4gICAgcmVzdWx0TWV0YVhkcjogbWV0YVxuICB9O1xuICBpZiAobWV0YS5zd2l0Y2goKSA9PT0gMyAmJiBtZXRhLnYzKCkuc29yb2Jhbk1ldGEoKSAhPT0gbnVsbCkge1xuICAgIHZhciBfbWV0YSR2MyRzb3JvYmFuTWV0YTtcbiAgICBpbmZvLnJldHVyblZhbHVlID0gKF9tZXRhJHYzJHNvcm9iYW5NZXRhID0gbWV0YS52MygpLnNvcm9iYW5NZXRhKCkpID09PSBudWxsIHx8IF9tZXRhJHYzJHNvcm9iYW5NZXRhID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfbWV0YSR2MyRzb3JvYmFuTWV0YS5yZXR1cm5WYWx1ZSgpO1xuICB9XG4gIGlmICgnZGlhZ25vc3RpY0V2ZW50c1hkcicgaW4gcmF3ICYmIHJhdy5kaWFnbm9zdGljRXZlbnRzWGRyKSB7XG4gICAgaW5mby5kaWFnbm9zdGljRXZlbnRzWGRyID0gcmF3LmRpYWdub3N0aWNFdmVudHNYZHIubWFwKGZ1bmN0aW9uIChkaWFnbm9zdGljRXZlbnQpIHtcbiAgICAgIHJldHVybiBfc3RlbGxhckJhc2UueGRyLkRpYWdub3N0aWNFdmVudC5mcm9tWERSKGRpYWdub3N0aWNFdmVudCwgJ2Jhc2U2NCcpO1xuICAgIH0pO1xuICB9XG4gIHJldHVybiBpbmZvO1xufVxuZnVuY3Rpb24gcGFyc2VSYXdUcmFuc2FjdGlvbnMocikge1xuICByZXR1cm4gX29iamVjdFNwcmVhZCh7XG4gICAgc3RhdHVzOiByLnN0YXR1cyxcbiAgICB0eEhhc2g6IHIudHhIYXNoXG4gIH0sIHBhcnNlVHJhbnNhY3Rpb25JbmZvKHIpKTtcbn1cbmZ1bmN0aW9uIHBhcnNlUmF3RXZlbnRzKHJhdykge1xuICB2YXIgX3JhdyRldmVudHM7XG4gIHJldHVybiB7XG4gICAgbGF0ZXN0TGVkZ2VyOiByYXcubGF0ZXN0TGVkZ2VyLFxuICAgIGN1cnNvcjogcmF3LmN1cnNvcixcbiAgICBldmVudHM6ICgoX3JhdyRldmVudHMgPSByYXcuZXZlbnRzKSAhPT0gbnVsbCAmJiBfcmF3JGV2ZW50cyAhPT0gdm9pZCAwID8gX3JhdyRldmVudHMgOiBbXSkubWFwKGZ1bmN0aW9uIChldnQpIHtcbiAgICAgIHZhciBjbG9uZSA9IF9vYmplY3RTcHJlYWQoe30sIGV2dCk7XG4gICAgICBkZWxldGUgY2xvbmUuY29udHJhY3RJZDtcbiAgICAgIHJldHVybiBfb2JqZWN0U3ByZWFkKF9vYmplY3RTcHJlYWQoX29iamVjdFNwcmVhZCh7fSwgY2xvbmUpLCBldnQuY29udHJhY3RJZCAhPT0gJycgJiYge1xuICAgICAgICBjb250cmFjdElkOiBuZXcgX3N0ZWxsYXJCYXNlLkNvbnRyYWN0KGV2dC5jb250cmFjdElkKVxuICAgICAgfSksIHt9LCB7XG4gICAgICAgIHRvcGljOiBldnQudG9waWMubWFwKGZ1bmN0aW9uICh0b3BpYykge1xuICAgICAgICAgIHJldHVybiBfc3RlbGxhckJhc2UueGRyLlNjVmFsLmZyb21YRFIodG9waWMsICdiYXNlNjQnKTtcbiAgICAgICAgfSksXG4gICAgICAgIHZhbHVlOiBfc3RlbGxhckJhc2UueGRyLlNjVmFsLmZyb21YRFIoZXZ0LnZhbHVlLCAnYmFzZTY0JylcbiAgICAgIH0pO1xuICAgIH0pXG4gIH07XG59XG5mdW5jdGlvbiBwYXJzZVJhd0xlZGdlckVudHJpZXMocmF3KSB7XG4gIHZhciBfcmF3JGVudHJpZXM7XG4gIHJldHVybiB7XG4gICAgbGF0ZXN0TGVkZ2VyOiByYXcubGF0ZXN0TGVkZ2VyLFxuICAgIGVudHJpZXM6ICgoX3JhdyRlbnRyaWVzID0gcmF3LmVudHJpZXMpICE9PSBudWxsICYmIF9yYXckZW50cmllcyAhPT0gdm9pZCAwID8gX3JhdyRlbnRyaWVzIDogW10pLm1hcChmdW5jdGlvbiAocmF3RW50cnkpIHtcbiAgICAgIGlmICghcmF3RW50cnkua2V5IHx8ICFyYXdFbnRyeS54ZHIpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcImludmFsaWQgbGVkZ2VyIGVudHJ5OiBcIi5jb25jYXQoSlNPTi5zdHJpbmdpZnkocmF3RW50cnkpKSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gX29iamVjdFNwcmVhZCh7XG4gICAgICAgIGxhc3RNb2RpZmllZExlZGdlclNlcTogcmF3RW50cnkubGFzdE1vZGlmaWVkTGVkZ2VyU2VxLFxuICAgICAgICBrZXk6IF9zdGVsbGFyQmFzZS54ZHIuTGVkZ2VyS2V5LmZyb21YRFIocmF3RW50cnkua2V5LCAnYmFzZTY0JyksXG4gICAgICAgIHZhbDogX3N0ZWxsYXJCYXNlLnhkci5MZWRnZXJFbnRyeURhdGEuZnJvbVhEUihyYXdFbnRyeS54ZHIsICdiYXNlNjQnKVxuICAgICAgfSwgcmF3RW50cnkubGl2ZVVudGlsTGVkZ2VyU2VxICE9PSB1bmRlZmluZWQgJiYge1xuICAgICAgICBsaXZlVW50aWxMZWRnZXJTZXE6IHJhd0VudHJ5LmxpdmVVbnRpbExlZGdlclNlcVxuICAgICAgfSk7XG4gICAgfSlcbiAgfTtcbn1cbmZ1bmN0aW9uIHBhcnNlU3VjY2Vzc2Z1bChzaW0sIHBhcnRpYWwpIHtcbiAgdmFyIF9zaW0kcmVzdWx0cyRsZW5ndGgsIF9zaW0kcmVzdWx0cywgX3NpbSRzdGF0ZUNoYW5nZXMkbGVuLCBfc2ltJHN0YXRlQ2hhbmdlcywgX3NpbSRzdGF0ZUNoYW5nZXMyO1xuICB2YXIgc3VjY2VzcyA9IF9vYmplY3RTcHJlYWQoX29iamVjdFNwcmVhZChfb2JqZWN0U3ByZWFkKHt9LCBwYXJ0aWFsKSwge30sIHtcbiAgICB0cmFuc2FjdGlvbkRhdGE6IG5ldyBfc3RlbGxhckJhc2UuU29yb2JhbkRhdGFCdWlsZGVyKHNpbS50cmFuc2FjdGlvbkRhdGEpLFxuICAgIG1pblJlc291cmNlRmVlOiBzaW0ubWluUmVzb3VyY2VGZWVcbiAgfSwgKChfc2ltJHJlc3VsdHMkbGVuZ3RoID0gKF9zaW0kcmVzdWx0cyA9IHNpbS5yZXN1bHRzKSA9PT0gbnVsbCB8fCBfc2ltJHJlc3VsdHMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9zaW0kcmVzdWx0cy5sZW5ndGgpICE9PSBudWxsICYmIF9zaW0kcmVzdWx0cyRsZW5ndGggIT09IHZvaWQgMCA/IF9zaW0kcmVzdWx0cyRsZW5ndGggOiAwID4gMCkgJiYge1xuICAgIHJlc3VsdDogc2ltLnJlc3VsdHMubWFwKGZ1bmN0aW9uIChyb3cpIHtcbiAgICAgIHZhciBfcm93JGF1dGg7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBhdXRoOiAoKF9yb3ckYXV0aCA9IHJvdy5hdXRoKSAhPT0gbnVsbCAmJiBfcm93JGF1dGggIT09IHZvaWQgMCA/IF9yb3ckYXV0aCA6IFtdKS5tYXAoZnVuY3Rpb24gKGVudHJ5KSB7XG4gICAgICAgICAgcmV0dXJuIF9zdGVsbGFyQmFzZS54ZHIuU29yb2JhbkF1dGhvcml6YXRpb25FbnRyeS5mcm9tWERSKGVudHJ5LCAnYmFzZTY0Jyk7XG4gICAgICAgIH0pLFxuICAgICAgICByZXR2YWw6IHJvdy54ZHIgPyBfc3RlbGxhckJhc2UueGRyLlNjVmFsLmZyb21YRFIocm93LnhkciwgJ2Jhc2U2NCcpIDogX3N0ZWxsYXJCYXNlLnhkci5TY1ZhbC5zY3ZWb2lkKClcbiAgICAgIH07XG4gICAgfSlbMF1cbiAgfSksICgoX3NpbSRzdGF0ZUNoYW5nZXMkbGVuID0gKF9zaW0kc3RhdGVDaGFuZ2VzID0gc2ltLnN0YXRlQ2hhbmdlcykgPT09IG51bGwgfHwgX3NpbSRzdGF0ZUNoYW5nZXMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9zaW0kc3RhdGVDaGFuZ2VzLmxlbmd0aCkgIT09IG51bGwgJiYgX3NpbSRzdGF0ZUNoYW5nZXMkbGVuICE9PSB2b2lkIDAgPyBfc2ltJHN0YXRlQ2hhbmdlcyRsZW4gOiAwID4gMCkgJiYge1xuICAgIHN0YXRlQ2hhbmdlczogKF9zaW0kc3RhdGVDaGFuZ2VzMiA9IHNpbS5zdGF0ZUNoYW5nZXMpID09PSBudWxsIHx8IF9zaW0kc3RhdGVDaGFuZ2VzMiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX3NpbSRzdGF0ZUNoYW5nZXMyLm1hcChmdW5jdGlvbiAoZW50cnlDaGFuZ2UpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHR5cGU6IGVudHJ5Q2hhbmdlLnR5cGUsXG4gICAgICAgIGtleTogX3N0ZWxsYXJCYXNlLnhkci5MZWRnZXJLZXkuZnJvbVhEUihlbnRyeUNoYW5nZS5rZXksICdiYXNlNjQnKSxcbiAgICAgICAgYmVmb3JlOiBlbnRyeUNoYW5nZS5iZWZvcmUgPyBfc3RlbGxhckJhc2UueGRyLkxlZGdlckVudHJ5LmZyb21YRFIoZW50cnlDaGFuZ2UuYmVmb3JlLCAnYmFzZTY0JykgOiBudWxsLFxuICAgICAgICBhZnRlcjogZW50cnlDaGFuZ2UuYWZ0ZXIgPyBfc3RlbGxhckJhc2UueGRyLkxlZGdlckVudHJ5LmZyb21YRFIoZW50cnlDaGFuZ2UuYWZ0ZXIsICdiYXNlNjQnKSA6IG51bGxcbiAgICAgIH07XG4gICAgfSlcbiAgfSk7XG4gIGlmICghc2ltLnJlc3RvcmVQcmVhbWJsZSB8fCBzaW0ucmVzdG9yZVByZWFtYmxlLnRyYW5zYWN0aW9uRGF0YSA9PT0gJycpIHtcbiAgICByZXR1cm4gc3VjY2VzcztcbiAgfVxuICByZXR1cm4gX29iamVjdFNwcmVhZChfb2JqZWN0U3ByZWFkKHt9LCBzdWNjZXNzKSwge30sIHtcbiAgICByZXN0b3JlUHJlYW1ibGU6IHtcbiAgICAgIG1pblJlc291cmNlRmVlOiBzaW0ucmVzdG9yZVByZWFtYmxlLm1pblJlc291cmNlRmVlLFxuICAgICAgdHJhbnNhY3Rpb25EYXRhOiBuZXcgX3N0ZWxsYXJCYXNlLlNvcm9iYW5EYXRhQnVpbGRlcihzaW0ucmVzdG9yZVByZWFtYmxlLnRyYW5zYWN0aW9uRGF0YSlcbiAgICB9XG4gIH0pO1xufVxuZnVuY3Rpb24gcGFyc2VSYXdTaW11bGF0aW9uKHNpbSkge1xuICB2YXIgX3NpbSRldmVudHMkbWFwLCBfc2ltJGV2ZW50cztcbiAgdmFyIGxvb2tzUmF3ID0gX2FwaS5BcGkuaXNTaW11bGF0aW9uUmF3KHNpbSk7XG4gIGlmICghbG9va3NSYXcpIHtcbiAgICByZXR1cm4gc2ltO1xuICB9XG4gIHZhciBiYXNlID0ge1xuICAgIF9wYXJzZWQ6IHRydWUsXG4gICAgaWQ6IHNpbS5pZCxcbiAgICBsYXRlc3RMZWRnZXI6IHNpbS5sYXRlc3RMZWRnZXIsXG4gICAgZXZlbnRzOiAoX3NpbSRldmVudHMkbWFwID0gKF9zaW0kZXZlbnRzID0gc2ltLmV2ZW50cykgPT09IG51bGwgfHwgX3NpbSRldmVudHMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9zaW0kZXZlbnRzLm1hcChmdW5jdGlvbiAoZXZ0KSB7XG4gICAgICByZXR1cm4gX3N0ZWxsYXJCYXNlLnhkci5EaWFnbm9zdGljRXZlbnQuZnJvbVhEUihldnQsICdiYXNlNjQnKTtcbiAgICB9KSkgIT09IG51bGwgJiYgX3NpbSRldmVudHMkbWFwICE9PSB2b2lkIDAgPyBfc2ltJGV2ZW50cyRtYXAgOiBbXVxuICB9O1xuICBpZiAodHlwZW9mIHNpbS5lcnJvciA9PT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gX29iamVjdFNwcmVhZChfb2JqZWN0U3ByZWFkKHt9LCBiYXNlKSwge30sIHtcbiAgICAgIGVycm9yOiBzaW0uZXJyb3JcbiAgICB9KTtcbiAgfVxuICByZXR1cm4gcGFyc2VTdWNjZXNzZnVsKHNpbSwgYmFzZSk7XG59Il0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@stellar/stellar-sdk/lib/rpc/parsers.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@stellar/stellar-sdk/lib/rpc/server.js":
/*!*************************************************************!*\
  !*** ./node_modules/@stellar/stellar-sdk/lib/rpc/server.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.SUBMIT_TRANSACTION_TIMEOUT = exports.RpcServer = exports.LinearSleepStrategy = exports.Durability = exports.BasicSleepStrategy = void 0;\nvar _urijs = _interopRequireDefault(__webpack_require__(/*! urijs */ \"(ssr)/./node_modules/urijs/src/URI.js\"));\nvar _stellarBase = __webpack_require__(/*! @stellar/stellar-base */ \"(ssr)/./node_modules/@stellar/stellar-base/lib/index.js\");\nvar _axios = _interopRequireDefault(__webpack_require__(/*! ./axios */ \"(ssr)/./node_modules/@stellar/stellar-sdk/lib/rpc/axios.js\"));\nvar jsonrpc = _interopRequireWildcard(__webpack_require__(/*! ./jsonrpc */ \"(ssr)/./node_modules/@stellar/stellar-sdk/lib/rpc/jsonrpc.js\"));\nvar _api = __webpack_require__(/*! ./api */ \"(ssr)/./node_modules/@stellar/stellar-sdk/lib/rpc/api.js\");\nvar _transaction = __webpack_require__(/*! ./transaction */ \"(ssr)/./node_modules/@stellar/stellar-sdk/lib/rpc/transaction.js\");\nvar _parsers = __webpack_require__(/*! ./parsers */ \"(ssr)/./node_modules/@stellar/stellar-sdk/lib/rpc/parsers.js\");\nvar _utils = __webpack_require__(/*! ../utils */ \"(ssr)/./node_modules/@stellar/stellar-sdk/lib/utils.js\");\nfunction _getRequireWildcardCache(e) { if (\"function\" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }\nfunction _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || \"object\" != _typeof(e) && \"function\" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if (\"default\" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }\nfunction _regeneratorRuntime() { \"use strict\"; _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = \"function\" == typeof Symbol ? Symbol : {}, a = i.iterator || \"@@iterator\", c = i.asyncIterator || \"@@asyncIterator\", u = i.toStringTag || \"@@toStringTag\"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, \"\"); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, \"_invoke\", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: \"normal\", arg: t.call(e, r) }; } catch (t) { return { type: \"throw\", arg: t }; } } e.wrap = wrap; var h = \"suspendedStart\", l = \"suspendedYield\", f = \"executing\", s = \"completed\", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { [\"next\", \"throw\", \"return\"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if (\"throw\" !== c.type) { var u = c.arg, h = u.value; return h && \"object\" == _typeof(h) && n.call(h, \"__await\") ? e.resolve(h.__await).then(function (t) { invoke(\"next\", t, i, a); }, function (t) { invoke(\"throw\", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke(\"throw\", t, i, a); }); } a(c.arg); } var r; o(this, \"_invoke\", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw Error(\"Generator is already running\"); if (o === s) { if (\"throw\" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if (\"next\" === n.method) n.sent = n._sent = n.arg;else if (\"throw\" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else \"return\" === n.method && n.abrupt(\"return\", n.arg); o = f; var p = tryCatch(e, r, n); if (\"normal\" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } \"throw\" === p.type && (o = s, n.method = \"throw\", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, \"throw\" === n && e.iterator.return && (r.method = \"return\", r.arg = t, maybeInvokeDelegate(e, r), \"throw\" === r.method) || \"return\" !== n && (r.method = \"throw\", r.arg = new TypeError(\"The iterator does not provide a '\" + n + \"' method\")), y; var i = tryCatch(o, e.iterator, r.arg); if (\"throw\" === i.type) return r.method = \"throw\", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, \"return\" !== r.method && (r.method = \"next\", r.arg = t), r.delegate = null, y) : a : (r.method = \"throw\", r.arg = new TypeError(\"iterator result is not an object\"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = \"normal\", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: \"root\" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || \"\" === e) { var r = e[a]; if (r) return r.call(e); if (\"function\" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(_typeof(e) + \" is not iterable\"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, \"constructor\", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, \"constructor\", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, \"GeneratorFunction\"), e.isGeneratorFunction = function (t) { var e = \"function\" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || \"GeneratorFunction\" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, \"GeneratorFunction\")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, \"Generator\"), define(g, a, function () { return this; }), define(g, \"toString\", function () { return \"[object Generator]\"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) \"t\" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if (\"throw\" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = \"throw\", a.arg = e, r.next = n, o && (r.method = \"next\", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if (\"root\" === i.tryLoc) return handle(\"end\"); if (i.tryLoc <= this.prev) { var c = n.call(i, \"catchLoc\"), u = n.call(i, \"finallyLoc\"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw Error(\"try statement without catch or finally\"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, \"finallyLoc\") && this.prev < o.finallyLoc) { var i = o; break; } } i && (\"break\" === t || \"continue\" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = \"next\", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if (\"throw\" === t.type) throw t.arg; return \"break\" === t.type || \"continue\" === t.type ? this.next = t.arg : \"return\" === t.type ? (this.rval = this.arg = t.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, catch: function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if (\"throw\" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, \"next\" === this.method && (this.arg = t), y; } }, e; }\nfunction asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }\nfunction _asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, \"next\", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, \"throw\", n); } _next(void 0); }); }; }\nfunction _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\nfunction _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }\nfunction _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nvar SUBMIT_TRANSACTION_TIMEOUT = exports.SUBMIT_TRANSACTION_TIMEOUT = 60 * 1000;\nvar Durability = exports.Durability = function (Durability) {\n  Durability[\"Temporary\"] = \"temporary\";\n  Durability[\"Persistent\"] = \"persistent\";\n  return Durability;\n}({});\nvar DEFAULT_GET_TRANSACTION_TIMEOUT = 30;\nvar BasicSleepStrategy = exports.BasicSleepStrategy = function BasicSleepStrategy(_iter) {\n  return 1000;\n};\nvar LinearSleepStrategy = exports.LinearSleepStrategy = function LinearSleepStrategy(iter) {\n  return 1000 * iter;\n};\nfunction findCreatedAccountSequenceInTransactionMeta(meta) {\n  var _operations$flatMap$f;\n  var operations = [];\n  switch (meta.switch()) {\n    case 0:\n      operations = meta.operations();\n      break;\n    case 1:\n    case 2:\n    case 3:\n      operations = meta.value().operations();\n      break;\n    default:\n      throw new Error('Unexpected transaction meta switch value');\n  }\n  var sequenceNumber = (_operations$flatMap$f = operations.flatMap(function (op) {\n    return op.changes();\n  }).find(function (c) {\n    return c.switch() === _stellarBase.xdr.LedgerEntryChangeType.ledgerEntryCreated() && c.created().data().switch() === _stellarBase.xdr.LedgerEntryType.account();\n  })) === null || _operations$flatMap$f === void 0 || (_operations$flatMap$f = _operations$flatMap$f.created()) === null || _operations$flatMap$f === void 0 || (_operations$flatMap$f = _operations$flatMap$f.data()) === null || _operations$flatMap$f === void 0 || (_operations$flatMap$f = _operations$flatMap$f.account()) === null || _operations$flatMap$f === void 0 || (_operations$flatMap$f = _operations$flatMap$f.seqNum()) === null || _operations$flatMap$f === void 0 ? void 0 : _operations$flatMap$f.toString();\n  if (sequenceNumber) {\n    return sequenceNumber;\n  }\n  throw new Error('No account created in transaction');\n}\nvar RpcServer = exports.RpcServer = function () {\n  function RpcServer(serverURL) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    _classCallCheck(this, RpcServer);\n    this.serverURL = (0, _urijs.default)(serverURL);\n    if (opts.headers && Object.keys(opts.headers).length !== 0) {\n      _axios.default.interceptors.request.use(function (config) {\n        config.headers = Object.assign(config.headers, opts.headers);\n        return config;\n      });\n    }\n    if (this.serverURL.protocol() !== 'https' && !opts.allowHttp) {\n      throw new Error(\"Cannot connect to insecure Soroban RPC server if `allowHttp` isn't set\");\n    }\n  }\n  return _createClass(RpcServer, [{\n    key: \"getAccount\",\n    value: (function () {\n      var _getAccount = _asyncToGenerator(_regeneratorRuntime().mark(function _callee(address) {\n        var ledgerKey, resp, accountEntry;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              ledgerKey = _stellarBase.xdr.LedgerKey.account(new _stellarBase.xdr.LedgerKeyAccount({\n                accountId: _stellarBase.Keypair.fromPublicKey(address).xdrPublicKey()\n              }));\n              _context.next = 3;\n              return this.getLedgerEntries(ledgerKey);\n            case 3:\n              resp = _context.sent;\n              if (!(resp.entries.length === 0)) {\n                _context.next = 6;\n                break;\n              }\n              return _context.abrupt(\"return\", Promise.reject({\n                code: 404,\n                message: \"Account not found: \".concat(address)\n              }));\n            case 6:\n              accountEntry = resp.entries[0].val.account();\n              return _context.abrupt(\"return\", new _stellarBase.Account(address, accountEntry.seqNum().toString()));\n            case 8:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this);\n      }));\n      function getAccount(_x) {\n        return _getAccount.apply(this, arguments);\n      }\n      return getAccount;\n    }())\n  }, {\n    key: \"getHealth\",\n    value: (function () {\n      var _getHealth = _asyncToGenerator(_regeneratorRuntime().mark(function _callee2() {\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              return _context2.abrupt(\"return\", jsonrpc.postObject(this.serverURL.toString(), 'getHealth'));\n            case 1:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2, this);\n      }));\n      function getHealth() {\n        return _getHealth.apply(this, arguments);\n      }\n      return getHealth;\n    }())\n  }, {\n    key: \"getContractData\",\n    value: (function () {\n      var _getContractData = _asyncToGenerator(_regeneratorRuntime().mark(function _callee3(contract, key) {\n        var durability,\n          scAddress,\n          xdrDurability,\n          contractKey,\n          _args3 = arguments;\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) switch (_context3.prev = _context3.next) {\n            case 0:\n              durability = _args3.length > 2 && _args3[2] !== undefined ? _args3[2] : Durability.Persistent;\n              if (!(typeof contract === 'string')) {\n                _context3.next = 5;\n                break;\n              }\n              scAddress = new _stellarBase.Contract(contract).address().toScAddress();\n              _context3.next = 14;\n              break;\n            case 5:\n              if (!(contract instanceof _stellarBase.Address)) {\n                _context3.next = 9;\n                break;\n              }\n              scAddress = contract.toScAddress();\n              _context3.next = 14;\n              break;\n            case 9:\n              if (!(contract instanceof _stellarBase.Contract)) {\n                _context3.next = 13;\n                break;\n              }\n              scAddress = contract.address().toScAddress();\n              _context3.next = 14;\n              break;\n            case 13:\n              throw new TypeError(\"unknown contract type: \".concat(contract));\n            case 14:\n              _context3.t0 = durability;\n              _context3.next = _context3.t0 === Durability.Temporary ? 17 : _context3.t0 === Durability.Persistent ? 19 : 21;\n              break;\n            case 17:\n              xdrDurability = _stellarBase.xdr.ContractDataDurability.temporary();\n              return _context3.abrupt(\"break\", 22);\n            case 19:\n              xdrDurability = _stellarBase.xdr.ContractDataDurability.persistent();\n              return _context3.abrupt(\"break\", 22);\n            case 21:\n              throw new TypeError(\"invalid durability: \".concat(durability));\n            case 22:\n              contractKey = _stellarBase.xdr.LedgerKey.contractData(new _stellarBase.xdr.LedgerKeyContractData({\n                key: key,\n                contract: scAddress,\n                durability: xdrDurability\n              }));\n              return _context3.abrupt(\"return\", this.getLedgerEntries(contractKey).then(function (r) {\n                if (r.entries.length === 0) {\n                  return Promise.reject({\n                    code: 404,\n                    message: \"Contract data not found. Contract: \".concat(_stellarBase.Address.fromScAddress(scAddress).toString(), \", Key: \").concat(key.toXDR('base64'), \", Durability: \").concat(durability)\n                  });\n                }\n                return r.entries[0];\n              }));\n            case 24:\n            case \"end\":\n              return _context3.stop();\n          }\n        }, _callee3, this);\n      }));\n      function getContractData(_x2, _x3) {\n        return _getContractData.apply(this, arguments);\n      }\n      return getContractData;\n    }())\n  }, {\n    key: \"getContractWasmByContractId\",\n    value: (function () {\n      var _getContractWasmByContractId = _asyncToGenerator(_regeneratorRuntime().mark(function _callee4(contractId) {\n        var _response$entries$;\n        var contractLedgerKey, response, wasmHash;\n        return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) switch (_context4.prev = _context4.next) {\n            case 0:\n              contractLedgerKey = new _stellarBase.Contract(contractId).getFootprint();\n              _context4.next = 3;\n              return this.getLedgerEntries(contractLedgerKey);\n            case 3:\n              response = _context4.sent;\n              if (!(!response.entries.length || !((_response$entries$ = response.entries[0]) !== null && _response$entries$ !== void 0 && _response$entries$.val))) {\n                _context4.next = 6;\n                break;\n              }\n              return _context4.abrupt(\"return\", Promise.reject({\n                code: 404,\n                message: \"Could not obtain contract hash from server\"\n              }));\n            case 6:\n              wasmHash = response.entries[0].val.contractData().val().instance().executable().wasmHash();\n              return _context4.abrupt(\"return\", this.getContractWasmByHash(wasmHash));\n            case 8:\n            case \"end\":\n              return _context4.stop();\n          }\n        }, _callee4, this);\n      }));\n      function getContractWasmByContractId(_x4) {\n        return _getContractWasmByContractId.apply(this, arguments);\n      }\n      return getContractWasmByContractId;\n    }())\n  }, {\n    key: \"getContractWasmByHash\",\n    value: (function () {\n      var _getContractWasmByHash = _asyncToGenerator(_regeneratorRuntime().mark(function _callee5(wasmHash) {\n        var _responseWasm$entries;\n        var format,\n          wasmHashBuffer,\n          ledgerKeyWasmHash,\n          responseWasm,\n          wasmBuffer,\n          _args5 = arguments;\n        return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n          while (1) switch (_context5.prev = _context5.next) {\n            case 0:\n              format = _args5.length > 1 && _args5[1] !== undefined ? _args5[1] : undefined;\n              wasmHashBuffer = typeof wasmHash === \"string\" ? Buffer.from(wasmHash, format) : wasmHash;\n              ledgerKeyWasmHash = _stellarBase.xdr.LedgerKey.contractCode(new _stellarBase.xdr.LedgerKeyContractCode({\n                hash: wasmHashBuffer\n              }));\n              _context5.next = 5;\n              return this.getLedgerEntries(ledgerKeyWasmHash);\n            case 5:\n              responseWasm = _context5.sent;\n              if (!(!responseWasm.entries.length || !((_responseWasm$entries = responseWasm.entries[0]) !== null && _responseWasm$entries !== void 0 && _responseWasm$entries.val))) {\n                _context5.next = 8;\n                break;\n              }\n              return _context5.abrupt(\"return\", Promise.reject({\n                code: 404,\n                message: \"Could not obtain contract wasm from server\"\n              }));\n            case 8:\n              wasmBuffer = responseWasm.entries[0].val.contractCode().code();\n              return _context5.abrupt(\"return\", wasmBuffer);\n            case 10:\n            case \"end\":\n              return _context5.stop();\n          }\n        }, _callee5, this);\n      }));\n      function getContractWasmByHash(_x5) {\n        return _getContractWasmByHash.apply(this, arguments);\n      }\n      return getContractWasmByHash;\n    }())\n  }, {\n    key: \"getLedgerEntries\",\n    value: (function () {\n      var _getLedgerEntries2 = _asyncToGenerator(_regeneratorRuntime().mark(function _callee6() {\n        var _args6 = arguments;\n        return _regeneratorRuntime().wrap(function _callee6$(_context6) {\n          while (1) switch (_context6.prev = _context6.next) {\n            case 0:\n              return _context6.abrupt(\"return\", this._getLedgerEntries.apply(this, _args6).then(_parsers.parseRawLedgerEntries));\n            case 1:\n            case \"end\":\n              return _context6.stop();\n          }\n        }, _callee6, this);\n      }));\n      function getLedgerEntries() {\n        return _getLedgerEntries2.apply(this, arguments);\n      }\n      return getLedgerEntries;\n    }())\n  }, {\n    key: \"_getLedgerEntries\",\n    value: function () {\n      var _getLedgerEntries3 = _asyncToGenerator(_regeneratorRuntime().mark(function _callee7() {\n        var _len,\n          keys,\n          _key,\n          _args7 = arguments;\n        return _regeneratorRuntime().wrap(function _callee7$(_context7) {\n          while (1) switch (_context7.prev = _context7.next) {\n            case 0:\n              for (_len = _args7.length, keys = new Array(_len), _key = 0; _key < _len; _key++) {\n                keys[_key] = _args7[_key];\n              }\n              return _context7.abrupt(\"return\", jsonrpc.postObject(this.serverURL.toString(), 'getLedgerEntries', {\n                keys: keys.map(function (k) {\n                  return k.toXDR('base64');\n                })\n              }));\n            case 2:\n            case \"end\":\n              return _context7.stop();\n          }\n        }, _callee7, this);\n      }));\n      function _getLedgerEntries() {\n        return _getLedgerEntries3.apply(this, arguments);\n      }\n      return _getLedgerEntries;\n    }()\n  }, {\n    key: \"pollTransaction\",\n    value: (function () {\n      var _pollTransaction = _asyncToGenerator(_regeneratorRuntime().mark(function _callee8(hash, opts) {\n        var _opts$attempts, _opts$attempts2;\n        var maxAttempts, foundInfo, attempt, _opts$sleepStrategy;\n        return _regeneratorRuntime().wrap(function _callee8$(_context8) {\n          while (1) switch (_context8.prev = _context8.next) {\n            case 0:\n              maxAttempts = ((_opts$attempts = opts === null || opts === void 0 ? void 0 : opts.attempts) !== null && _opts$attempts !== void 0 ? _opts$attempts : 0) < 1 ? DEFAULT_GET_TRANSACTION_TIMEOUT : (_opts$attempts2 = opts === null || opts === void 0 ? void 0 : opts.attempts) !== null && _opts$attempts2 !== void 0 ? _opts$attempts2 : DEFAULT_GET_TRANSACTION_TIMEOUT;\n              attempt = 1;\n            case 2:\n              if (!(attempt < maxAttempts)) {\n                _context8.next = 13;\n                break;\n              }\n              _context8.next = 5;\n              return this.getTransaction(hash);\n            case 5:\n              foundInfo = _context8.sent;\n              if (!(foundInfo.status !== _api.Api.GetTransactionStatus.NOT_FOUND)) {\n                _context8.next = 8;\n                break;\n              }\n              return _context8.abrupt(\"return\", foundInfo);\n            case 8:\n              _context8.next = 10;\n              return _utils.Utils.sleep(((_opts$sleepStrategy = opts === null || opts === void 0 ? void 0 : opts.sleepStrategy) !== null && _opts$sleepStrategy !== void 0 ? _opts$sleepStrategy : BasicSleepStrategy)(attempt));\n            case 10:\n              attempt++;\n              _context8.next = 2;\n              break;\n            case 13:\n              return _context8.abrupt(\"return\", foundInfo);\n            case 14:\n            case \"end\":\n              return _context8.stop();\n          }\n        }, _callee8, this);\n      }));\n      function pollTransaction(_x6, _x7) {\n        return _pollTransaction.apply(this, arguments);\n      }\n      return pollTransaction;\n    }())\n  }, {\n    key: \"getTransaction\",\n    value: (function () {\n      var _getTransaction2 = _asyncToGenerator(_regeneratorRuntime().mark(function _callee9(hash) {\n        return _regeneratorRuntime().wrap(function _callee9$(_context9) {\n          while (1) switch (_context9.prev = _context9.next) {\n            case 0:\n              return _context9.abrupt(\"return\", this._getTransaction(hash).then(function (raw) {\n                var foundInfo = {};\n                if (raw.status !== _api.Api.GetTransactionStatus.NOT_FOUND) {\n                  Object.assign(foundInfo, (0, _parsers.parseTransactionInfo)(raw));\n                }\n                var result = _objectSpread({\n                  status: raw.status,\n                  txHash: hash,\n                  latestLedger: raw.latestLedger,\n                  latestLedgerCloseTime: raw.latestLedgerCloseTime,\n                  oldestLedger: raw.oldestLedger,\n                  oldestLedgerCloseTime: raw.oldestLedgerCloseTime\n                }, foundInfo);\n                return result;\n              }));\n            case 1:\n            case \"end\":\n              return _context9.stop();\n          }\n        }, _callee9, this);\n      }));\n      function getTransaction(_x8) {\n        return _getTransaction2.apply(this, arguments);\n      }\n      return getTransaction;\n    }())\n  }, {\n    key: \"_getTransaction\",\n    value: function () {\n      var _getTransaction3 = _asyncToGenerator(_regeneratorRuntime().mark(function _callee10(hash) {\n        return _regeneratorRuntime().wrap(function _callee10$(_context10) {\n          while (1) switch (_context10.prev = _context10.next) {\n            case 0:\n              return _context10.abrupt(\"return\", jsonrpc.postObject(this.serverURL.toString(), 'getTransaction', {\n                hash: hash\n              }));\n            case 1:\n            case \"end\":\n              return _context10.stop();\n          }\n        }, _callee10, this);\n      }));\n      function _getTransaction(_x9) {\n        return _getTransaction3.apply(this, arguments);\n      }\n      return _getTransaction;\n    }()\n  }, {\n    key: \"getTransactions\",\n    value: (function () {\n      var _getTransactions2 = _asyncToGenerator(_regeneratorRuntime().mark(function _callee11(request) {\n        return _regeneratorRuntime().wrap(function _callee11$(_context11) {\n          while (1) switch (_context11.prev = _context11.next) {\n            case 0:\n              return _context11.abrupt(\"return\", this._getTransactions(request).then(function (raw) {\n                var result = {\n                  transactions: (raw.transactions || []).map(_parsers.parseRawTransactions),\n                  latestLedger: raw.latestLedger,\n                  latestLedgerCloseTimestamp: raw.latestLedgerCloseTimestamp,\n                  oldestLedger: raw.oldestLedger,\n                  oldestLedgerCloseTimestamp: raw.oldestLedgerCloseTimestamp,\n                  cursor: raw.cursor\n                };\n                return result;\n              }));\n            case 1:\n            case \"end\":\n              return _context11.stop();\n          }\n        }, _callee11, this);\n      }));\n      function getTransactions(_x10) {\n        return _getTransactions2.apply(this, arguments);\n      }\n      return getTransactions;\n    }())\n  }, {\n    key: \"_getTransactions\",\n    value: function () {\n      var _getTransactions3 = _asyncToGenerator(_regeneratorRuntime().mark(function _callee12(request) {\n        return _regeneratorRuntime().wrap(function _callee12$(_context12) {\n          while (1) switch (_context12.prev = _context12.next) {\n            case 0:\n              return _context12.abrupt(\"return\", jsonrpc.postObject(this.serverURL.toString(), 'getTransactions', request));\n            case 1:\n            case \"end\":\n              return _context12.stop();\n          }\n        }, _callee12, this);\n      }));\n      function _getTransactions(_x11) {\n        return _getTransactions3.apply(this, arguments);\n      }\n      return _getTransactions;\n    }()\n  }, {\n    key: \"getEvents\",\n    value: (function () {\n      var _getEvents2 = _asyncToGenerator(_regeneratorRuntime().mark(function _callee13(request) {\n        return _regeneratorRuntime().wrap(function _callee13$(_context13) {\n          while (1) switch (_context13.prev = _context13.next) {\n            case 0:\n              return _context13.abrupt(\"return\", this._getEvents(request).then(_parsers.parseRawEvents));\n            case 1:\n            case \"end\":\n              return _context13.stop();\n          }\n        }, _callee13, this);\n      }));\n      function getEvents(_x12) {\n        return _getEvents2.apply(this, arguments);\n      }\n      return getEvents;\n    }())\n  }, {\n    key: \"_getEvents\",\n    value: function () {\n      var _getEvents3 = _asyncToGenerator(_regeneratorRuntime().mark(function _callee14(request) {\n        var _request$filters;\n        return _regeneratorRuntime().wrap(function _callee14$(_context14) {\n          while (1) switch (_context14.prev = _context14.next) {\n            case 0:\n              return _context14.abrupt(\"return\", jsonrpc.postObject(this.serverURL.toString(), 'getEvents', _objectSpread(_objectSpread({\n                filters: (_request$filters = request.filters) !== null && _request$filters !== void 0 ? _request$filters : [],\n                pagination: _objectSpread(_objectSpread({}, request.cursor && {\n                  cursor: request.cursor\n                }), request.limit && {\n                  limit: request.limit\n                })\n              }, request.startLedger && {\n                startLedger: request.startLedger\n              }), request.endLedger && {\n                endLedger: request.endLedger\n              })));\n            case 1:\n            case \"end\":\n              return _context14.stop();\n          }\n        }, _callee14, this);\n      }));\n      function _getEvents(_x13) {\n        return _getEvents3.apply(this, arguments);\n      }\n      return _getEvents;\n    }()\n  }, {\n    key: \"getNetwork\",\n    value: (function () {\n      var _getNetwork = _asyncToGenerator(_regeneratorRuntime().mark(function _callee15() {\n        return _regeneratorRuntime().wrap(function _callee15$(_context15) {\n          while (1) switch (_context15.prev = _context15.next) {\n            case 0:\n              return _context15.abrupt(\"return\", jsonrpc.postObject(this.serverURL.toString(), 'getNetwork'));\n            case 1:\n            case \"end\":\n              return _context15.stop();\n          }\n        }, _callee15, this);\n      }));\n      function getNetwork() {\n        return _getNetwork.apply(this, arguments);\n      }\n      return getNetwork;\n    }())\n  }, {\n    key: \"getLatestLedger\",\n    value: (function () {\n      var _getLatestLedger = _asyncToGenerator(_regeneratorRuntime().mark(function _callee16() {\n        return _regeneratorRuntime().wrap(function _callee16$(_context16) {\n          while (1) switch (_context16.prev = _context16.next) {\n            case 0:\n              return _context16.abrupt(\"return\", jsonrpc.postObject(this.serverURL.toString(), 'getLatestLedger'));\n            case 1:\n            case \"end\":\n              return _context16.stop();\n          }\n        }, _callee16, this);\n      }));\n      function getLatestLedger() {\n        return _getLatestLedger.apply(this, arguments);\n      }\n      return getLatestLedger;\n    }())\n  }, {\n    key: \"simulateTransaction\",\n    value: (function () {\n      var _simulateTransaction2 = _asyncToGenerator(_regeneratorRuntime().mark(function _callee17(tx, addlResources) {\n        return _regeneratorRuntime().wrap(function _callee17$(_context17) {\n          while (1) switch (_context17.prev = _context17.next) {\n            case 0:\n              return _context17.abrupt(\"return\", this._simulateTransaction(tx, addlResources).then(_parsers.parseRawSimulation));\n            case 1:\n            case \"end\":\n              return _context17.stop();\n          }\n        }, _callee17, this);\n      }));\n      function simulateTransaction(_x14, _x15) {\n        return _simulateTransaction2.apply(this, arguments);\n      }\n      return simulateTransaction;\n    }())\n  }, {\n    key: \"_simulateTransaction\",\n    value: function () {\n      var _simulateTransaction3 = _asyncToGenerator(_regeneratorRuntime().mark(function _callee18(transaction, addlResources) {\n        return _regeneratorRuntime().wrap(function _callee18$(_context18) {\n          while (1) switch (_context18.prev = _context18.next) {\n            case 0:\n              return _context18.abrupt(\"return\", jsonrpc.postObject(this.serverURL.toString(), 'simulateTransaction', _objectSpread({\n                transaction: transaction.toXDR()\n              }, addlResources !== undefined && {\n                resourceConfig: {\n                  instructionLeeway: addlResources.cpuInstructions\n                }\n              })));\n            case 1:\n            case \"end\":\n              return _context18.stop();\n          }\n        }, _callee18, this);\n      }));\n      function _simulateTransaction(_x16, _x17) {\n        return _simulateTransaction3.apply(this, arguments);\n      }\n      return _simulateTransaction;\n    }()\n  }, {\n    key: \"prepareTransaction\",\n    value: (function () {\n      var _prepareTransaction = _asyncToGenerator(_regeneratorRuntime().mark(function _callee19(tx) {\n        var simResponse;\n        return _regeneratorRuntime().wrap(function _callee19$(_context19) {\n          while (1) switch (_context19.prev = _context19.next) {\n            case 0:\n              _context19.next = 2;\n              return this.simulateTransaction(tx);\n            case 2:\n              simResponse = _context19.sent;\n              if (!_api.Api.isSimulationError(simResponse)) {\n                _context19.next = 5;\n                break;\n              }\n              throw new Error(simResponse.error);\n            case 5:\n              return _context19.abrupt(\"return\", (0, _transaction.assembleTransaction)(tx, simResponse).build());\n            case 6:\n            case \"end\":\n              return _context19.stop();\n          }\n        }, _callee19, this);\n      }));\n      function prepareTransaction(_x18) {\n        return _prepareTransaction.apply(this, arguments);\n      }\n      return prepareTransaction;\n    }())\n  }, {\n    key: \"sendTransaction\",\n    value: (function () {\n      var _sendTransaction2 = _asyncToGenerator(_regeneratorRuntime().mark(function _callee20(transaction) {\n        return _regeneratorRuntime().wrap(function _callee20$(_context20) {\n          while (1) switch (_context20.prev = _context20.next) {\n            case 0:\n              return _context20.abrupt(\"return\", this._sendTransaction(transaction).then(_parsers.parseRawSendTransaction));\n            case 1:\n            case \"end\":\n              return _context20.stop();\n          }\n        }, _callee20, this);\n      }));\n      function sendTransaction(_x19) {\n        return _sendTransaction2.apply(this, arguments);\n      }\n      return sendTransaction;\n    }())\n  }, {\n    key: \"_sendTransaction\",\n    value: function () {\n      var _sendTransaction3 = _asyncToGenerator(_regeneratorRuntime().mark(function _callee21(transaction) {\n        return _regeneratorRuntime().wrap(function _callee21$(_context21) {\n          while (1) switch (_context21.prev = _context21.next) {\n            case 0:\n              return _context21.abrupt(\"return\", jsonrpc.postObject(this.serverURL.toString(), 'sendTransaction', {\n                transaction: transaction.toXDR()\n              }));\n            case 1:\n            case \"end\":\n              return _context21.stop();\n          }\n        }, _callee21, this);\n      }));\n      function _sendTransaction(_x20) {\n        return _sendTransaction3.apply(this, arguments);\n      }\n      return _sendTransaction;\n    }()\n  }, {\n    key: \"requestAirdrop\",\n    value: (function () {\n      var _requestAirdrop = _asyncToGenerator(_regeneratorRuntime().mark(function _callee22(address, friendbotUrl) {\n        var account, response, meta, txMeta, sequence, _error$response, _error$response$detai;\n        return _regeneratorRuntime().wrap(function _callee22$(_context22) {\n          while (1) switch (_context22.prev = _context22.next) {\n            case 0:\n              account = typeof address === 'string' ? address : address.accountId();\n              _context22.t0 = friendbotUrl;\n              if (_context22.t0) {\n                _context22.next = 6;\n                break;\n              }\n              _context22.next = 5;\n              return this.getNetwork();\n            case 5:\n              _context22.t0 = _context22.sent.friendbotUrl;\n            case 6:\n              friendbotUrl = _context22.t0;\n              if (friendbotUrl) {\n                _context22.next = 9;\n                break;\n              }\n              throw new Error('No friendbot URL configured for current network');\n            case 9:\n              _context22.prev = 9;\n              _context22.next = 12;\n              return _axios.default.post(\"\".concat(friendbotUrl, \"?addr=\").concat(encodeURIComponent(account)));\n            case 12:\n              response = _context22.sent;\n              if (response.data.result_meta_xdr) {\n                _context22.next = 22;\n                break;\n              }\n              _context22.next = 16;\n              return this.getTransaction(response.data.hash);\n            case 16:\n              txMeta = _context22.sent;\n              if (!(txMeta.status !== _api.Api.GetTransactionStatus.SUCCESS)) {\n                _context22.next = 19;\n                break;\n              }\n              throw new Error(\"Funding account \".concat(address, \" failed\"));\n            case 19:\n              meta = txMeta.resultMetaXdr;\n              _context22.next = 23;\n              break;\n            case 22:\n              meta = _stellarBase.xdr.TransactionMeta.fromXDR(response.data.result_meta_xdr, 'base64');\n            case 23:\n              sequence = findCreatedAccountSequenceInTransactionMeta(meta);\n              return _context22.abrupt(\"return\", new _stellarBase.Account(account, sequence));\n            case 27:\n              _context22.prev = 27;\n              _context22.t1 = _context22[\"catch\"](9);\n              if (!(((_error$response = _context22.t1.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 400)) {\n                _context22.next = 32;\n                break;\n              }\n              if (!((_error$response$detai = _context22.t1.response.detail) !== null && _error$response$detai !== void 0 && _error$response$detai.includes('createAccountAlreadyExist'))) {\n                _context22.next = 32;\n                break;\n              }\n              return _context22.abrupt(\"return\", this.getAccount(account));\n            case 32:\n              throw _context22.t1;\n            case 33:\n            case \"end\":\n              return _context22.stop();\n          }\n        }, _callee22, this, [[9, 27]]);\n      }));\n      function requestAirdrop(_x21, _x22) {\n        return _requestAirdrop.apply(this, arguments);\n      }\n      return requestAirdrop;\n    }())\n  }, {\n    key: \"getFeeStats\",\n    value: (function () {\n      var _getFeeStats = _asyncToGenerator(_regeneratorRuntime().mark(function _callee23() {\n        return _regeneratorRuntime().wrap(function _callee23$(_context23) {\n          while (1) switch (_context23.prev = _context23.next) {\n            case 0:\n              return _context23.abrupt(\"return\", jsonrpc.postObject(this.serverURL.toString(), 'getFeeStats'));\n            case 1:\n            case \"end\":\n              return _context23.stop();\n          }\n        }, _callee23, this);\n      }));\n      function getFeeStats() {\n        return _getFeeStats.apply(this, arguments);\n      }\n      return getFeeStats;\n    }())\n  }, {\n    key: \"getVersionInfo\",\n    value: (function () {\n      var _getVersionInfo = _asyncToGenerator(_regeneratorRuntime().mark(function _callee24() {\n        return _regeneratorRuntime().wrap(function _callee24$(_context24) {\n          while (1) switch (_context24.prev = _context24.next) {\n            case 0:\n              return _context24.abrupt(\"return\", jsonrpc.postObject(this.serverURL.toString(), 'getVersionInfo'));\n            case 1:\n            case \"end\":\n              return _context24.stop();\n          }\n        }, _callee24, this);\n      }));\n      function getVersionInfo() {\n        return _getVersionInfo.apply(this, arguments);\n      }\n      return getVersionInfo;\n    }())\n  }, {\n    key: \"getSACBalance\",\n    value: (function () {\n      var _getSACBalance = _asyncToGenerator(_regeneratorRuntime().mark(function _callee25(contractId, sac, networkPassphrase) {\n        var passphrase, sacId, key, ledgerKey, response, _response$entries$2, lastModifiedLedgerSeq, liveUntilLedgerSeq, val, entry;\n        return _regeneratorRuntime().wrap(function _callee25$(_context25) {\n          while (1) switch (_context25.prev = _context25.next) {\n            case 0:\n              if (_stellarBase.StrKey.isValidContract(contractId)) {\n                _context25.next = 2;\n                break;\n              }\n              throw new TypeError(\"expected contract ID, got \".concat(contractId));\n            case 2:\n              if (!(networkPassphrase !== null && networkPassphrase !== void 0)) {\n                _context25.next = 6;\n                break;\n              }\n              _context25.t0 = networkPassphrase;\n              _context25.next = 9;\n              break;\n            case 6:\n              _context25.next = 8;\n              return this.getNetwork().then(function (n) {\n                return n.passphrase;\n              });\n            case 8:\n              _context25.t0 = _context25.sent;\n            case 9:\n              passphrase = _context25.t0;\n              sacId = sac.contractId(passphrase);\n              key = _stellarBase.xdr.ScVal.scvVec([(0, _stellarBase.nativeToScVal)(\"Balance\", {\n                type: \"symbol\"\n              }), (0, _stellarBase.nativeToScVal)(contractId, {\n                type: \"address\"\n              })]);\n              ledgerKey = _stellarBase.xdr.LedgerKey.contractData(new _stellarBase.xdr.LedgerKeyContractData({\n                contract: new _stellarBase.Address(sacId).toScAddress(),\n                durability: _stellarBase.xdr.ContractDataDurability.persistent(),\n                key: key\n              }));\n              _context25.next = 15;\n              return this.getLedgerEntries(ledgerKey);\n            case 15:\n              response = _context25.sent;\n              if (!(response.entries.length === 0)) {\n                _context25.next = 18;\n                break;\n              }\n              return _context25.abrupt(\"return\", {\n                latestLedger: response.latestLedger\n              });\n            case 18:\n              _response$entries$2 = response.entries[0], lastModifiedLedgerSeq = _response$entries$2.lastModifiedLedgerSeq, liveUntilLedgerSeq = _response$entries$2.liveUntilLedgerSeq, val = _response$entries$2.val;\n              if (!(val.switch().value !== _stellarBase.xdr.LedgerEntryType.contractData().value)) {\n                _context25.next = 21;\n                break;\n              }\n              return _context25.abrupt(\"return\", {\n                latestLedger: response.latestLedger\n              });\n            case 21:\n              entry = (0, _stellarBase.scValToNative)(val.contractData().val());\n              return _context25.abrupt(\"return\", {\n                latestLedger: response.latestLedger,\n                balanceEntry: {\n                  liveUntilLedgerSeq: liveUntilLedgerSeq,\n                  lastModifiedLedgerSeq: lastModifiedLedgerSeq,\n                  amount: entry.amount.toString(),\n                  authorized: entry.authorized,\n                  clawback: entry.clawback\n                }\n              });\n            case 23:\n            case \"end\":\n              return _context25.stop();\n          }\n        }, _callee25, this);\n      }));\n      function getSACBalance(_x23, _x24, _x25) {\n        return _getSACBalance.apply(this, arguments);\n      }\n      return getSACBalance;\n    }())\n  }]);\n}();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@stellar/stellar-sdk/lib/rpc/server.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@stellar/stellar-sdk/lib/rpc/transaction.js":
/*!******************************************************************!*\
  !*** ./node_modules/@stellar/stellar-sdk/lib/rpc/transaction.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.assembleTransaction = assembleTransaction;\nvar _stellarBase = __webpack_require__(/*! @stellar/stellar-base */ \"(ssr)/./node_modules/@stellar/stellar-base/lib/index.js\");\nvar _api = __webpack_require__(/*! ./api */ \"(ssr)/./node_modules/@stellar/stellar-sdk/lib/rpc/api.js\");\nvar _parsers = __webpack_require__(/*! ./parsers */ \"(ssr)/./node_modules/@stellar/stellar-sdk/lib/rpc/parsers.js\");\nfunction isSorobanTransaction(tx) {\n  if (tx.operations.length !== 1) {\n    return false;\n  }\n  switch (tx.operations[0].type) {\n    case 'invokeHostFunction':\n    case 'extendFootprintTtl':\n    case 'restoreFootprint':\n      return true;\n    default:\n      return false;\n  }\n}\nfunction assembleTransaction(raw, simulation) {\n  if ('innerTransaction' in raw) {\n    return assembleTransaction(raw.innerTransaction, simulation);\n  }\n  if (!isSorobanTransaction(raw)) {\n    throw new TypeError('unsupported transaction: must contain exactly one ' + 'invokeHostFunction, extendFootprintTtl, or restoreFootprint ' + 'operation');\n  }\n  var success = (0, _parsers.parseRawSimulation)(simulation);\n  if (!_api.Api.isSimulationSuccess(success)) {\n    throw new Error(\"simulation incorrect: \".concat(JSON.stringify(success)));\n  }\n  var classicFeeNum = parseInt(raw.fee) || 0;\n  var minResourceFeeNum = parseInt(success.minResourceFee) || 0;\n  var txnBuilder = _stellarBase.TransactionBuilder.cloneFrom(raw, {\n    fee: (classicFeeNum + minResourceFeeNum).toString(),\n    sorobanData: success.transactionData.build(),\n    networkPassphrase: raw.networkPassphrase\n  });\n  if (raw.operations[0].type === 'invokeHostFunction') {\n    var _invokeOp$auth;\n    txnBuilder.clearOperations();\n    var invokeOp = raw.operations[0];\n    var existingAuth = (_invokeOp$auth = invokeOp.auth) !== null && _invokeOp$auth !== void 0 ? _invokeOp$auth : [];\n    txnBuilder.addOperation(_stellarBase.Operation.invokeHostFunction({\n      source: invokeOp.source,\n      func: invokeOp.func,\n      auth: existingAuth.length > 0 ? existingAuth : success.result.auth\n    }));\n  }\n  return txnBuilder;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHN0ZWxsYXIvc3RlbGxhci1zZGsvbGliL3JwYy90cmFuc2FjdGlvbi5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYiw4Q0FBNkM7QUFDN0M7QUFDQSxDQUFDLEVBQUM7QUFDRiwyQkFBMkI7QUFDM0IsbUJBQW1CLG1CQUFPLENBQUMsc0ZBQXVCO0FBQ2xELFdBQVcsbUJBQU8sQ0FBQyx1RUFBTztBQUMxQixlQUFlLG1CQUFPLENBQUMsK0VBQVc7QUFDbEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcVVNVQVJJT1xcRG9jdW1lbnRzXFxHaXRodWJcXEdhbGF4eUtKLXdhbGxldC0tLUhhY2tcXHdlYlxcbm9kZV9tb2R1bGVzXFxAc3RlbGxhclxcc3RlbGxhci1zZGtcXGxpYlxccnBjXFx0cmFuc2FjdGlvbi5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuYXNzZW1ibGVUcmFuc2FjdGlvbiA9IGFzc2VtYmxlVHJhbnNhY3Rpb247XG52YXIgX3N0ZWxsYXJCYXNlID0gcmVxdWlyZShcIkBzdGVsbGFyL3N0ZWxsYXItYmFzZVwiKTtcbnZhciBfYXBpID0gcmVxdWlyZShcIi4vYXBpXCIpO1xudmFyIF9wYXJzZXJzID0gcmVxdWlyZShcIi4vcGFyc2Vyc1wiKTtcbmZ1bmN0aW9uIGlzU29yb2JhblRyYW5zYWN0aW9uKHR4KSB7XG4gIGlmICh0eC5vcGVyYXRpb25zLmxlbmd0aCAhPT0gMSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBzd2l0Y2ggKHR4Lm9wZXJhdGlvbnNbMF0udHlwZSkge1xuICAgIGNhc2UgJ2ludm9rZUhvc3RGdW5jdGlvbic6XG4gICAgY2FzZSAnZXh0ZW5kRm9vdHByaW50VHRsJzpcbiAgICBjYXNlICdyZXN0b3JlRm9vdHByaW50JzpcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn1cbmZ1bmN0aW9uIGFzc2VtYmxlVHJhbnNhY3Rpb24ocmF3LCBzaW11bGF0aW9uKSB7XG4gIGlmICgnaW5uZXJUcmFuc2FjdGlvbicgaW4gcmF3KSB7XG4gICAgcmV0dXJuIGFzc2VtYmxlVHJhbnNhY3Rpb24ocmF3LmlubmVyVHJhbnNhY3Rpb24sIHNpbXVsYXRpb24pO1xuICB9XG4gIGlmICghaXNTb3JvYmFuVHJhbnNhY3Rpb24ocmF3KSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ3Vuc3VwcG9ydGVkIHRyYW5zYWN0aW9uOiBtdXN0IGNvbnRhaW4gZXhhY3RseSBvbmUgJyArICdpbnZva2VIb3N0RnVuY3Rpb24sIGV4dGVuZEZvb3RwcmludFR0bCwgb3IgcmVzdG9yZUZvb3RwcmludCAnICsgJ29wZXJhdGlvbicpO1xuICB9XG4gIHZhciBzdWNjZXNzID0gKDAsIF9wYXJzZXJzLnBhcnNlUmF3U2ltdWxhdGlvbikoc2ltdWxhdGlvbik7XG4gIGlmICghX2FwaS5BcGkuaXNTaW11bGF0aW9uU3VjY2VzcyhzdWNjZXNzKSkge1xuICAgIHRocm93IG5ldyBFcnJvcihcInNpbXVsYXRpb24gaW5jb3JyZWN0OiBcIi5jb25jYXQoSlNPTi5zdHJpbmdpZnkoc3VjY2VzcykpKTtcbiAgfVxuICB2YXIgY2xhc3NpY0ZlZU51bSA9IHBhcnNlSW50KHJhdy5mZWUpIHx8IDA7XG4gIHZhciBtaW5SZXNvdXJjZUZlZU51bSA9IHBhcnNlSW50KHN1Y2Nlc3MubWluUmVzb3VyY2VGZWUpIHx8IDA7XG4gIHZhciB0eG5CdWlsZGVyID0gX3N0ZWxsYXJCYXNlLlRyYW5zYWN0aW9uQnVpbGRlci5jbG9uZUZyb20ocmF3LCB7XG4gICAgZmVlOiAoY2xhc3NpY0ZlZU51bSArIG1pblJlc291cmNlRmVlTnVtKS50b1N0cmluZygpLFxuICAgIHNvcm9iYW5EYXRhOiBzdWNjZXNzLnRyYW5zYWN0aW9uRGF0YS5idWlsZCgpLFxuICAgIG5ldHdvcmtQYXNzcGhyYXNlOiByYXcubmV0d29ya1Bhc3NwaHJhc2VcbiAgfSk7XG4gIGlmIChyYXcub3BlcmF0aW9uc1swXS50eXBlID09PSAnaW52b2tlSG9zdEZ1bmN0aW9uJykge1xuICAgIHZhciBfaW52b2tlT3AkYXV0aDtcbiAgICB0eG5CdWlsZGVyLmNsZWFyT3BlcmF0aW9ucygpO1xuICAgIHZhciBpbnZva2VPcCA9IHJhdy5vcGVyYXRpb25zWzBdO1xuICAgIHZhciBleGlzdGluZ0F1dGggPSAoX2ludm9rZU9wJGF1dGggPSBpbnZva2VPcC5hdXRoKSAhPT0gbnVsbCAmJiBfaW52b2tlT3AkYXV0aCAhPT0gdm9pZCAwID8gX2ludm9rZU9wJGF1dGggOiBbXTtcbiAgICB0eG5CdWlsZGVyLmFkZE9wZXJhdGlvbihfc3RlbGxhckJhc2UuT3BlcmF0aW9uLmludm9rZUhvc3RGdW5jdGlvbih7XG4gICAgICBzb3VyY2U6IGludm9rZU9wLnNvdXJjZSxcbiAgICAgIGZ1bmM6IGludm9rZU9wLmZ1bmMsXG4gICAgICBhdXRoOiBleGlzdGluZ0F1dGgubGVuZ3RoID4gMCA/IGV4aXN0aW5nQXV0aCA6IHN1Y2Nlc3MucmVzdWx0LmF1dGhcbiAgICB9KSk7XG4gIH1cbiAgcmV0dXJuIHR4bkJ1aWxkZXI7XG59Il0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@stellar/stellar-sdk/lib/rpc/transaction.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@stellar/stellar-sdk/lib/stellartoml/index.js":
/*!********************************************************************!*\
  !*** ./node_modules/@stellar/stellar-sdk/lib/stellartoml/index.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.STELLAR_TOML_MAX_SIZE = exports.Resolver = exports.Api = void 0;\nvar _toml = _interopRequireDefault(__webpack_require__(/*! toml */ \"(ssr)/./node_modules/toml/index.js\"));\nvar _httpClient = __webpack_require__(/*! ../http-client */ \"(ssr)/./node_modules/@stellar/stellar-sdk/lib/http-client/index.js\");\nvar _config = __webpack_require__(/*! ../config */ \"(ssr)/./node_modules/@stellar/stellar-sdk/lib/config.js\");\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _regeneratorRuntime() { \"use strict\"; _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = \"function\" == typeof Symbol ? Symbol : {}, a = i.iterator || \"@@iterator\", c = i.asyncIterator || \"@@asyncIterator\", u = i.toStringTag || \"@@toStringTag\"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, \"\"); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, \"_invoke\", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: \"normal\", arg: t.call(e, r) }; } catch (t) { return { type: \"throw\", arg: t }; } } e.wrap = wrap; var h = \"suspendedStart\", l = \"suspendedYield\", f = \"executing\", s = \"completed\", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { [\"next\", \"throw\", \"return\"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if (\"throw\" !== c.type) { var u = c.arg, h = u.value; return h && \"object\" == _typeof(h) && n.call(h, \"__await\") ? e.resolve(h.__await).then(function (t) { invoke(\"next\", t, i, a); }, function (t) { invoke(\"throw\", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke(\"throw\", t, i, a); }); } a(c.arg); } var r; o(this, \"_invoke\", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw Error(\"Generator is already running\"); if (o === s) { if (\"throw\" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if (\"next\" === n.method) n.sent = n._sent = n.arg;else if (\"throw\" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else \"return\" === n.method && n.abrupt(\"return\", n.arg); o = f; var p = tryCatch(e, r, n); if (\"normal\" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } \"throw\" === p.type && (o = s, n.method = \"throw\", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, \"throw\" === n && e.iterator.return && (r.method = \"return\", r.arg = t, maybeInvokeDelegate(e, r), \"throw\" === r.method) || \"return\" !== n && (r.method = \"throw\", r.arg = new TypeError(\"The iterator does not provide a '\" + n + \"' method\")), y; var i = tryCatch(o, e.iterator, r.arg); if (\"throw\" === i.type) return r.method = \"throw\", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, \"return\" !== r.method && (r.method = \"next\", r.arg = t), r.delegate = null, y) : a : (r.method = \"throw\", r.arg = new TypeError(\"iterator result is not an object\"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = \"normal\", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: \"root\" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || \"\" === e) { var r = e[a]; if (r) return r.call(e); if (\"function\" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(_typeof(e) + \" is not iterable\"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, \"constructor\", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, \"constructor\", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, \"GeneratorFunction\"), e.isGeneratorFunction = function (t) { var e = \"function\" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || \"GeneratorFunction\" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, \"GeneratorFunction\")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, \"Generator\"), define(g, a, function () { return this; }), define(g, \"toString\", function () { return \"[object Generator]\"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) \"t\" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if (\"throw\" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = \"throw\", a.arg = e, r.next = n, o && (r.method = \"next\", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if (\"root\" === i.tryLoc) return handle(\"end\"); if (i.tryLoc <= this.prev) { var c = n.call(i, \"catchLoc\"), u = n.call(i, \"finallyLoc\"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw Error(\"try statement without catch or finally\"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, \"finallyLoc\") && this.prev < o.finallyLoc) { var i = o; break; } } i && (\"break\" === t || \"continue\" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = \"next\", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if (\"throw\" === t.type) throw t.arg; return \"break\" === t.type || \"continue\" === t.type ? this.next = t.arg : \"return\" === t.type ? (this.rval = this.arg = t.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, catch: function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if (\"throw\" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, \"next\" === this.method && (this.arg = t), y; } }, e; }\nfunction asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }\nfunction _asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, \"next\", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, \"throw\", n); } _next(void 0); }); }; }\nfunction _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\nfunction _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }\nfunction _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nvar STELLAR_TOML_MAX_SIZE = exports.STELLAR_TOML_MAX_SIZE = 100 * 1024;\nvar CancelToken = _httpClient.httpClient.CancelToken;\nvar Resolver = exports.Resolver = function () {\n  function Resolver() {\n    _classCallCheck(this, Resolver);\n  }\n  return _createClass(Resolver, null, [{\n    key: \"resolve\",\n    value: (function () {\n      var _resolve = _asyncToGenerator(_regeneratorRuntime().mark(function _callee(domain) {\n        var _opts$allowedRedirect;\n        var opts,\n          allowHttp,\n          timeout,\n          protocol,\n          _args = arguments;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              opts = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};\n              allowHttp = typeof opts.allowHttp === \"undefined\" ? _config.Config.isAllowHttp() : opts.allowHttp;\n              timeout = typeof opts.timeout === \"undefined\" ? _config.Config.getTimeout() : opts.timeout;\n              protocol = allowHttp ? \"http\" : \"https\";\n              return _context.abrupt(\"return\", _httpClient.httpClient.get(\"\".concat(protocol, \"://\").concat(domain, \"/.well-known/stellar.toml\"), {\n                maxRedirects: (_opts$allowedRedirect = opts.allowedRedirects) !== null && _opts$allowedRedirect !== void 0 ? _opts$allowedRedirect : 0,\n                maxContentLength: STELLAR_TOML_MAX_SIZE,\n                cancelToken: timeout ? new CancelToken(function (cancel) {\n                  return setTimeout(function () {\n                    return cancel(\"timeout of \".concat(timeout, \"ms exceeded\"));\n                  }, timeout);\n                }) : undefined,\n                timeout: timeout\n              }).then(function (response) {\n                try {\n                  var tomlObject = _toml.default.parse(response.data);\n                  return Promise.resolve(tomlObject);\n                } catch (e) {\n                  return Promise.reject(new Error(\"stellar.toml is invalid - Parsing error on line \".concat(e.line, \", column \").concat(e.column, \": \").concat(e.message)));\n                }\n              }).catch(function (err) {\n                if (err.message.match(/^maxContentLength size/)) {\n                  throw new Error(\"stellar.toml file exceeds allowed size of \".concat(STELLAR_TOML_MAX_SIZE));\n                } else {\n                  throw err;\n                }\n              }));\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee);\n      }));\n      function resolve(_x) {\n        return _resolve.apply(this, arguments);\n      }\n      return resolve;\n    }())\n  }]);\n}();\nvar Api;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@stellar/stellar-sdk/lib/stellartoml/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@stellar/stellar-sdk/lib/utils.js":
/*!********************************************************!*\
  !*** ./node_modules/@stellar/stellar-sdk/lib/utils.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.Utils = void 0;\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\nfunction _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }\nfunction _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nvar Utils = exports.Utils = function () {\n  function Utils() {\n    _classCallCheck(this, Utils);\n  }\n  return _createClass(Utils, null, [{\n    key: \"validateTimebounds\",\n    value: function validateTimebounds(transaction) {\n      var gracePeriod = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      if (!transaction.timeBounds) {\n        return false;\n      }\n      var now = Math.floor(Date.now() / 1000);\n      var _transaction$timeBoun = transaction.timeBounds,\n        minTime = _transaction$timeBoun.minTime,\n        maxTime = _transaction$timeBoun.maxTime;\n      return now >= Number.parseInt(minTime, 10) - gracePeriod && now <= Number.parseInt(maxTime, 10) + gracePeriod;\n    }\n  }, {\n    key: \"sleep\",\n    value: function sleep(ms) {\n      return new Promise(function (resolve) {\n        return setTimeout(resolve, ms);\n      });\n    }\n  }]);\n}();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHN0ZWxsYXIvc3RlbGxhci1zZGsvbGliL3V0aWxzLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLDhDQUE2QztBQUM3QztBQUNBLENBQUMsRUFBQztBQUNGLGFBQWE7QUFDYixzQkFBc0IsMkJBQTJCLG9HQUFvRyxtQkFBbUIsaUJBQWlCLHNIQUFzSDtBQUMvUyxpQ0FBaUM7QUFDakMsbUNBQW1DLGdCQUFnQixjQUFjLE9BQU8sY0FBYztBQUN0RixpQ0FBaUMscUhBQXFILGNBQWM7QUFDcEssNkJBQTZCLG1DQUFtQztBQUNoRSw4QkFBOEIsNENBQTRDLCtCQUErQixvQkFBb0IsbUNBQW1DLHNDQUFzQyx1RUFBdUU7QUFDN1EsWUFBWSxhQUFhO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0EsR0FBRztBQUNILENBQUMiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcVVNVQVJJT1xcRG9jdW1lbnRzXFxHaXRodWJcXEdhbGF4eUtKLXdhbGxldC0tLUhhY2tcXHdlYlxcbm9kZV9tb2R1bGVzXFxAc3RlbGxhclxcc3RlbGxhci1zZGtcXGxpYlxcdXRpbHMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLlV0aWxzID0gdm9pZCAwO1xuZnVuY3Rpb24gX3R5cGVvZihvKSB7IFwiQGJhYmVsL2hlbHBlcnMgLSB0eXBlb2ZcIjsgcmV0dXJuIF90eXBlb2YgPSBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIFN5bWJvbCAmJiBcInN5bWJvbFwiID09IHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPyBmdW5jdGlvbiAobykgeyByZXR1cm4gdHlwZW9mIG87IH0gOiBmdW5jdGlvbiAobykgeyByZXR1cm4gbyAmJiBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIFN5bWJvbCAmJiBvLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgbyAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2YgbzsgfSwgX3R5cGVvZihvKTsgfVxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGEsIG4pIHsgaWYgKCEoYSBpbnN0YW5jZW9mIG4pKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9XG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyhlLCByKSB7IGZvciAodmFyIHQgPSAwOyB0IDwgci5sZW5ndGg7IHQrKykgeyB2YXIgbyA9IHJbdF07IG8uZW51bWVyYWJsZSA9IG8uZW51bWVyYWJsZSB8fCAhMSwgby5jb25maWd1cmFibGUgPSAhMCwgXCJ2YWx1ZVwiIGluIG8gJiYgKG8ud3JpdGFibGUgPSAhMCksIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLCBfdG9Qcm9wZXJ0eUtleShvLmtleSksIG8pOyB9IH1cbmZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhlLCByLCB0KSB7IHJldHVybiByICYmIF9kZWZpbmVQcm9wZXJ0aWVzKGUucHJvdG90eXBlLCByKSwgdCAmJiBfZGVmaW5lUHJvcGVydGllcyhlLCB0KSwgT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsIFwicHJvdG90eXBlXCIsIHsgd3JpdGFibGU6ICExIH0pLCBlOyB9XG5mdW5jdGlvbiBfdG9Qcm9wZXJ0eUtleSh0KSB7IHZhciBpID0gX3RvUHJpbWl0aXZlKHQsIFwic3RyaW5nXCIpOyByZXR1cm4gXCJzeW1ib2xcIiA9PSBfdHlwZW9mKGkpID8gaSA6IGkgKyBcIlwiOyB9XG5mdW5jdGlvbiBfdG9QcmltaXRpdmUodCwgcikgeyBpZiAoXCJvYmplY3RcIiAhPSBfdHlwZW9mKHQpIHx8ICF0KSByZXR1cm4gdDsgdmFyIGUgPSB0W1N5bWJvbC50b1ByaW1pdGl2ZV07IGlmICh2b2lkIDAgIT09IGUpIHsgdmFyIGkgPSBlLmNhbGwodCwgciB8fCBcImRlZmF1bHRcIik7IGlmIChcIm9iamVjdFwiICE9IF90eXBlb2YoaSkpIHJldHVybiBpOyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQEB0b1ByaW1pdGl2ZSBtdXN0IHJldHVybiBhIHByaW1pdGl2ZSB2YWx1ZS5cIik7IH0gcmV0dXJuIChcInN0cmluZ1wiID09PSByID8gU3RyaW5nIDogTnVtYmVyKSh0KTsgfVxudmFyIFV0aWxzID0gZXhwb3J0cy5VdGlscyA9IGZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gVXRpbHMoKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFV0aWxzKTtcbiAgfVxuICByZXR1cm4gX2NyZWF0ZUNsYXNzKFV0aWxzLCBudWxsLCBbe1xuICAgIGtleTogXCJ2YWxpZGF0ZVRpbWVib3VuZHNcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gdmFsaWRhdGVUaW1lYm91bmRzKHRyYW5zYWN0aW9uKSB7XG4gICAgICB2YXIgZ3JhY2VQZXJpb2QgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IDA7XG4gICAgICBpZiAoIXRyYW5zYWN0aW9uLnRpbWVCb3VuZHMpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgdmFyIG5vdyA9IE1hdGguZmxvb3IoRGF0ZS5ub3coKSAvIDEwMDApO1xuICAgICAgdmFyIF90cmFuc2FjdGlvbiR0aW1lQm91biA9IHRyYW5zYWN0aW9uLnRpbWVCb3VuZHMsXG4gICAgICAgIG1pblRpbWUgPSBfdHJhbnNhY3Rpb24kdGltZUJvdW4ubWluVGltZSxcbiAgICAgICAgbWF4VGltZSA9IF90cmFuc2FjdGlvbiR0aW1lQm91bi5tYXhUaW1lO1xuICAgICAgcmV0dXJuIG5vdyA+PSBOdW1iZXIucGFyc2VJbnQobWluVGltZSwgMTApIC0gZ3JhY2VQZXJpb2QgJiYgbm93IDw9IE51bWJlci5wYXJzZUludChtYXhUaW1lLCAxMCkgKyBncmFjZVBlcmlvZDtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwic2xlZXBcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gc2xlZXAobXMpIHtcbiAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSkge1xuICAgICAgICByZXR1cm4gc2V0VGltZW91dChyZXNvbHZlLCBtcyk7XG4gICAgICB9KTtcbiAgICB9XG4gIH1dKTtcbn0oKTsiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@stellar/stellar-sdk/lib/utils.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@stellar/stellar-sdk/lib/webauth/errors.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@stellar/stellar-sdk/lib/webauth/errors.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.InvalidChallengeError = void 0;\nfunction _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }\nfunction _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nfunction _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\nfunction _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }\nfunction _possibleConstructorReturn(t, e) { if (e && (\"object\" == _typeof(e) || \"function\" == typeof e)) return e; if (void 0 !== e) throw new TypeError(\"Derived constructors may only return object or undefined\"); return _assertThisInitialized(t); }\nfunction _assertThisInitialized(e) { if (void 0 === e) throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); return e; }\nfunction _inherits(t, e) { if (\"function\" != typeof e && null !== e) throw new TypeError(\"Super expression must either be null or a function\"); t.prototype = Object.create(e && e.prototype, { constructor: { value: t, writable: !0, configurable: !0 } }), Object.defineProperty(t, \"prototype\", { writable: !1 }), e && _setPrototypeOf(t, e); }\nfunction _wrapNativeSuper(t) { var r = \"function\" == typeof Map ? new Map() : void 0; return _wrapNativeSuper = function _wrapNativeSuper(t) { if (null === t || !_isNativeFunction(t)) return t; if (\"function\" != typeof t) throw new TypeError(\"Super expression must either be null or a function\"); if (void 0 !== r) { if (r.has(t)) return r.get(t); r.set(t, Wrapper); } function Wrapper() { return _construct(t, arguments, _getPrototypeOf(this).constructor); } return Wrapper.prototype = Object.create(t.prototype, { constructor: { value: Wrapper, enumerable: !1, writable: !0, configurable: !0 } }), _setPrototypeOf(Wrapper, t); }, _wrapNativeSuper(t); }\nfunction _construct(t, e, r) { if (_isNativeReflectConstruct()) return Reflect.construct.apply(null, arguments); var o = [null]; o.push.apply(o, e); var p = new (t.bind.apply(t, o))(); return r && _setPrototypeOf(p, r.prototype), p; }\nfunction _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }\nfunction _isNativeFunction(t) { try { return -1 !== Function.toString.call(t).indexOf(\"[native code]\"); } catch (n) { return \"function\" == typeof t; } }\nfunction _setPrototypeOf(t, e) { return _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function (t, e) { return t.__proto__ = e, t; }, _setPrototypeOf(t, e); }\nfunction _getPrototypeOf(t) { return _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function (t) { return t.__proto__ || Object.getPrototypeOf(t); }, _getPrototypeOf(t); }\nvar InvalidChallengeError = exports.InvalidChallengeError = function (_Error) {\n  function InvalidChallengeError(message) {\n    var _this;\n    _classCallCheck(this, InvalidChallengeError);\n    var trueProto = (this instanceof InvalidChallengeError ? this.constructor : void 0).prototype;\n    _this = _callSuper(this, InvalidChallengeError, [message]);\n    _this.__proto__ = trueProto;\n    _this.constructor = InvalidChallengeError;\n    _this.name = \"InvalidChallengeError\";\n    return _this;\n  }\n  _inherits(InvalidChallengeError, _Error);\n  return _createClass(InvalidChallengeError);\n}(_wrapNativeSuper(Error));//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHN0ZWxsYXIvc3RlbGxhci1zZGsvbGliL3dlYmF1dGgvZXJyb3JzLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLHNCQUFzQiwyQkFBMkIsb0dBQW9HLG1CQUFtQixpQkFBaUIsc0hBQXNIO0FBQy9TLDhDQUE2QztBQUM3QztBQUNBLENBQUMsRUFBQztBQUNGLDZCQUE2QjtBQUM3QixtQ0FBbUMsZ0JBQWdCLGNBQWMsT0FBTyxjQUFjO0FBQ3RGLGlDQUFpQyxxSEFBcUgsY0FBYztBQUNwSyw2QkFBNkIsbUNBQW1DO0FBQ2hFLDhCQUE4Qiw0Q0FBNEMsK0JBQStCLG9CQUFvQixtQ0FBbUMsc0NBQXNDLHVFQUF1RTtBQUM3USxpQ0FBaUM7QUFDakMsK0JBQStCO0FBQy9CLDRDQUE0Qyx1RUFBdUUsbUdBQW1HO0FBQ3ROLHFDQUFxQyx5R0FBeUc7QUFDOUksMkJBQTJCLHFIQUFxSCxnREFBZ0QsZUFBZSw0Q0FBNEMsMkNBQTJDLGNBQWM7QUFDcFQsK0JBQStCLHVEQUF1RCx5REFBeUQsbURBQW1ELHVHQUF1RyxvQkFBb0IsK0JBQStCLHFCQUFxQixxQkFBcUIsc0VBQXNFLHdEQUF3RCxlQUFlLGtFQUFrRSxpQ0FBaUM7QUFDdG5CLCtCQUErQixrRkFBa0YsZ0JBQWdCLG9CQUFvQixvQ0FBb0M7QUFDekwsdUNBQXVDLE1BQU0scUZBQXFGLE1BQU0sYUFBYSwyRUFBMkUsYUFBYTtBQUM3TyxnQ0FBZ0MsTUFBTSxvRUFBb0UsWUFBWTtBQUN0SCxpQ0FBaUMsa0dBQWtHLDRCQUE0QjtBQUMvSiw4QkFBOEIsK0ZBQStGLGlEQUFpRDtBQUM5Syw0QkFBNEIsNkJBQTZCO0FBQ3pEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcVVNVQVJJT1xcRG9jdW1lbnRzXFxHaXRodWJcXEdhbGF4eUtKLXdhbGxldC0tLUhhY2tcXHdlYlxcbm9kZV9tb2R1bGVzXFxAc3RlbGxhclxcc3RlbGxhci1zZGtcXGxpYlxcd2ViYXV0aFxcZXJyb3JzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5mdW5jdGlvbiBfdHlwZW9mKG8pIHsgXCJAYmFiZWwvaGVscGVycyAtIHR5cGVvZlwiOyByZXR1cm4gX3R5cGVvZiA9IFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgU3ltYm9sICYmIFwic3ltYm9sXCIgPT0gdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA/IGZ1bmN0aW9uIChvKSB7IHJldHVybiB0eXBlb2YgbzsgfSA6IGZ1bmN0aW9uIChvKSB7IHJldHVybiBvICYmIFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgU3ltYm9sICYmIG8uY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvOyB9LCBfdHlwZW9mKG8pOyB9XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5JbnZhbGlkQ2hhbGxlbmdlRXJyb3IgPSB2b2lkIDA7XG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyhlLCByKSB7IGZvciAodmFyIHQgPSAwOyB0IDwgci5sZW5ndGg7IHQrKykgeyB2YXIgbyA9IHJbdF07IG8uZW51bWVyYWJsZSA9IG8uZW51bWVyYWJsZSB8fCAhMSwgby5jb25maWd1cmFibGUgPSAhMCwgXCJ2YWx1ZVwiIGluIG8gJiYgKG8ud3JpdGFibGUgPSAhMCksIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLCBfdG9Qcm9wZXJ0eUtleShvLmtleSksIG8pOyB9IH1cbmZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhlLCByLCB0KSB7IHJldHVybiByICYmIF9kZWZpbmVQcm9wZXJ0aWVzKGUucHJvdG90eXBlLCByKSwgdCAmJiBfZGVmaW5lUHJvcGVydGllcyhlLCB0KSwgT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsIFwicHJvdG90eXBlXCIsIHsgd3JpdGFibGU6ICExIH0pLCBlOyB9XG5mdW5jdGlvbiBfdG9Qcm9wZXJ0eUtleSh0KSB7IHZhciBpID0gX3RvUHJpbWl0aXZlKHQsIFwic3RyaW5nXCIpOyByZXR1cm4gXCJzeW1ib2xcIiA9PSBfdHlwZW9mKGkpID8gaSA6IGkgKyBcIlwiOyB9XG5mdW5jdGlvbiBfdG9QcmltaXRpdmUodCwgcikgeyBpZiAoXCJvYmplY3RcIiAhPSBfdHlwZW9mKHQpIHx8ICF0KSByZXR1cm4gdDsgdmFyIGUgPSB0W1N5bWJvbC50b1ByaW1pdGl2ZV07IGlmICh2b2lkIDAgIT09IGUpIHsgdmFyIGkgPSBlLmNhbGwodCwgciB8fCBcImRlZmF1bHRcIik7IGlmIChcIm9iamVjdFwiICE9IF90eXBlb2YoaSkpIHJldHVybiBpOyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQEB0b1ByaW1pdGl2ZSBtdXN0IHJldHVybiBhIHByaW1pdGl2ZSB2YWx1ZS5cIik7IH0gcmV0dXJuIChcInN0cmluZ1wiID09PSByID8gU3RyaW5nIDogTnVtYmVyKSh0KTsgfVxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGEsIG4pIHsgaWYgKCEoYSBpbnN0YW5jZW9mIG4pKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9XG5mdW5jdGlvbiBfY2FsbFN1cGVyKHQsIG8sIGUpIHsgcmV0dXJuIG8gPSBfZ2V0UHJvdG90eXBlT2YobyksIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHQsIF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKSA/IFJlZmxlY3QuY29uc3RydWN0KG8sIGUgfHwgW10sIF9nZXRQcm90b3R5cGVPZih0KS5jb25zdHJ1Y3RvcikgOiBvLmFwcGx5KHQsIGUpKTsgfVxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odCwgZSkgeyBpZiAoZSAmJiAoXCJvYmplY3RcIiA9PSBfdHlwZW9mKGUpIHx8IFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgZSkpIHJldHVybiBlOyBpZiAodm9pZCAwICE9PSBlKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiRGVyaXZlZCBjb25zdHJ1Y3RvcnMgbWF5IG9ubHkgcmV0dXJuIG9iamVjdCBvciB1bmRlZmluZWRcIik7IHJldHVybiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHQpOyB9XG5mdW5jdGlvbiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKGUpIHsgaWYgKHZvaWQgMCA9PT0gZSkgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyByZXR1cm4gZTsgfVxuZnVuY3Rpb24gX2luaGVyaXRzKHQsIGUpIHsgaWYgKFwiZnVuY3Rpb25cIiAhPSB0eXBlb2YgZSAmJiBudWxsICE9PSBlKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb25cIik7IHQucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShlICYmIGUucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiB0LCB3cml0YWJsZTogITAsIGNvbmZpZ3VyYWJsZTogITAgfSB9KSwgT2JqZWN0LmRlZmluZVByb3BlcnR5KHQsIFwicHJvdG90eXBlXCIsIHsgd3JpdGFibGU6ICExIH0pLCBlICYmIF9zZXRQcm90b3R5cGVPZih0LCBlKTsgfVxuZnVuY3Rpb24gX3dyYXBOYXRpdmVTdXBlcih0KSB7IHZhciByID0gXCJmdW5jdGlvblwiID09IHR5cGVvZiBNYXAgPyBuZXcgTWFwKCkgOiB2b2lkIDA7IHJldHVybiBfd3JhcE5hdGl2ZVN1cGVyID0gZnVuY3Rpb24gX3dyYXBOYXRpdmVTdXBlcih0KSB7IGlmIChudWxsID09PSB0IHx8ICFfaXNOYXRpdmVGdW5jdGlvbih0KSkgcmV0dXJuIHQ7IGlmIChcImZ1bmN0aW9uXCIgIT0gdHlwZW9mIHQpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvblwiKTsgaWYgKHZvaWQgMCAhPT0gcikgeyBpZiAoci5oYXModCkpIHJldHVybiByLmdldCh0KTsgci5zZXQodCwgV3JhcHBlcik7IH0gZnVuY3Rpb24gV3JhcHBlcigpIHsgcmV0dXJuIF9jb25zdHJ1Y3QodCwgYXJndW1lbnRzLCBfZ2V0UHJvdG90eXBlT2YodGhpcykuY29uc3RydWN0b3IpOyB9IHJldHVybiBXcmFwcGVyLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUodC5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IFdyYXBwZXIsIGVudW1lcmFibGU6ICExLCB3cml0YWJsZTogITAsIGNvbmZpZ3VyYWJsZTogITAgfSB9KSwgX3NldFByb3RvdHlwZU9mKFdyYXBwZXIsIHQpOyB9LCBfd3JhcE5hdGl2ZVN1cGVyKHQpOyB9XG5mdW5jdGlvbiBfY29uc3RydWN0KHQsIGUsIHIpIHsgaWYgKF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKSkgcmV0dXJuIFJlZmxlY3QuY29uc3RydWN0LmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7IHZhciBvID0gW251bGxdOyBvLnB1c2guYXBwbHkobywgZSk7IHZhciBwID0gbmV3ICh0LmJpbmQuYXBwbHkodCwgbykpKCk7IHJldHVybiByICYmIF9zZXRQcm90b3R5cGVPZihwLCByLnByb3RvdHlwZSksIHA7IH1cbmZ1bmN0aW9uIF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKSB7IHRyeSB7IHZhciB0ID0gIUJvb2xlYW4ucHJvdG90eXBlLnZhbHVlT2YuY2FsbChSZWZsZWN0LmNvbnN0cnVjdChCb29sZWFuLCBbXSwgZnVuY3Rpb24gKCkge30pKTsgfSBjYXRjaCAodCkge30gcmV0dXJuIChfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0ID0gZnVuY3Rpb24gX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpIHsgcmV0dXJuICEhdDsgfSkoKTsgfVxuZnVuY3Rpb24gX2lzTmF0aXZlRnVuY3Rpb24odCkgeyB0cnkgeyByZXR1cm4gLTEgIT09IEZ1bmN0aW9uLnRvU3RyaW5nLmNhbGwodCkuaW5kZXhPZihcIltuYXRpdmUgY29kZV1cIik7IH0gY2F0Y2ggKG4pIHsgcmV0dXJuIFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgdDsgfSB9XG5mdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YodCwgZSkgeyByZXR1cm4gX3NldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mLmJpbmQoKSA6IGZ1bmN0aW9uICh0LCBlKSB7IHJldHVybiB0Ll9fcHJvdG9fXyA9IGUsIHQ7IH0sIF9zZXRQcm90b3R5cGVPZih0LCBlKTsgfVxuZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKHQpIHsgcmV0dXJuIF9nZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5nZXRQcm90b3R5cGVPZi5iaW5kKCkgOiBmdW5jdGlvbiAodCkgeyByZXR1cm4gdC5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKHQpOyB9LCBfZ2V0UHJvdG90eXBlT2YodCk7IH1cbnZhciBJbnZhbGlkQ2hhbGxlbmdlRXJyb3IgPSBleHBvcnRzLkludmFsaWRDaGFsbGVuZ2VFcnJvciA9IGZ1bmN0aW9uIChfRXJyb3IpIHtcbiAgZnVuY3Rpb24gSW52YWxpZENoYWxsZW5nZUVycm9yKG1lc3NhZ2UpIHtcbiAgICB2YXIgX3RoaXM7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEludmFsaWRDaGFsbGVuZ2VFcnJvcik7XG4gICAgdmFyIHRydWVQcm90byA9ICh0aGlzIGluc3RhbmNlb2YgSW52YWxpZENoYWxsZW5nZUVycm9yID8gdGhpcy5jb25zdHJ1Y3RvciA6IHZvaWQgMCkucHJvdG90eXBlO1xuICAgIF90aGlzID0gX2NhbGxTdXBlcih0aGlzLCBJbnZhbGlkQ2hhbGxlbmdlRXJyb3IsIFttZXNzYWdlXSk7XG4gICAgX3RoaXMuX19wcm90b19fID0gdHJ1ZVByb3RvO1xuICAgIF90aGlzLmNvbnN0cnVjdG9yID0gSW52YWxpZENoYWxsZW5nZUVycm9yO1xuICAgIF90aGlzLm5hbWUgPSBcIkludmFsaWRDaGFsbGVuZ2VFcnJvclwiO1xuICAgIHJldHVybiBfdGhpcztcbiAgfVxuICBfaW5oZXJpdHMoSW52YWxpZENoYWxsZW5nZUVycm9yLCBfRXJyb3IpO1xuICByZXR1cm4gX2NyZWF0ZUNsYXNzKEludmFsaWRDaGFsbGVuZ2VFcnJvcik7XG59KF93cmFwTmF0aXZlU3VwZXIoRXJyb3IpKTsiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@stellar/stellar-sdk/lib/webauth/errors.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@stellar/stellar-sdk/lib/webauth/index.js":
/*!****************************************************************!*\
  !*** ./node_modules/@stellar/stellar-sdk/lib/webauth/index.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nvar _exportNames = {\n  InvalidChallengeError: true\n};\nObject.defineProperty(exports, \"InvalidChallengeError\", ({\n  enumerable: true,\n  get: function get() {\n    return _errors.InvalidChallengeError;\n  }\n}));\nvar _utils = __webpack_require__(/*! ./utils */ \"(ssr)/./node_modules/@stellar/stellar-sdk/lib/webauth/utils.js\");\nObject.keys(_utils).forEach(function (key) {\n  if (key === \"default\" || key === \"__esModule\") return;\n  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;\n  if (key in exports && exports[key] === _utils[key]) return;\n  Object.defineProperty(exports, key, {\n    enumerable: true,\n    get: function get() {\n      return _utils[key];\n    }\n  });\n});\nvar _errors = __webpack_require__(/*! ./errors */ \"(ssr)/./node_modules/@stellar/stellar-sdk/lib/webauth/errors.js\");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHN0ZWxsYXIvc3RlbGxhci1zZGsvbGliL3dlYmF1dGgvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsOENBQTZDO0FBQzdDO0FBQ0EsQ0FBQyxFQUFDO0FBQ0Y7QUFDQTtBQUNBO0FBQ0EseURBQXdEO0FBQ3hEO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQyxFQUFDO0FBQ0YsYUFBYSxtQkFBTyxDQUFDLCtFQUFTO0FBQzlCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSCxDQUFDO0FBQ0QsY0FBYyxtQkFBTyxDQUFDLGlGQUFVIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXFVTVUFSSU9cXERvY3VtZW50c1xcR2l0aHViXFxHYWxheHlLSi13YWxsZXQtLS1IYWNrXFx3ZWJcXG5vZGVfbW9kdWxlc1xcQHN0ZWxsYXJcXHN0ZWxsYXItc2RrXFxsaWJcXHdlYmF1dGhcXGluZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xudmFyIF9leHBvcnROYW1lcyA9IHtcbiAgSW52YWxpZENoYWxsZW5nZUVycm9yOiB0cnVlXG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiSW52YWxpZENoYWxsZW5nZUVycm9yXCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIF9lcnJvcnMuSW52YWxpZENoYWxsZW5nZUVycm9yO1xuICB9XG59KTtcbnZhciBfdXRpbHMgPSByZXF1aXJlKFwiLi91dGlsc1wiKTtcbk9iamVjdC5rZXlzKF91dGlscykuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gIGlmIChrZXkgPT09IFwiZGVmYXVsdFwiIHx8IGtleSA9PT0gXCJfX2VzTW9kdWxlXCIpIHJldHVybjtcbiAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChfZXhwb3J0TmFtZXMsIGtleSkpIHJldHVybjtcbiAgaWYgKGtleSBpbiBleHBvcnRzICYmIGV4cG9ydHNba2V5XSA9PT0gX3V0aWxzW2tleV0pIHJldHVybjtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIGtleSwge1xuICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gX3V0aWxzW2tleV07XG4gICAgfVxuICB9KTtcbn0pO1xudmFyIF9lcnJvcnMgPSByZXF1aXJlKFwiLi9lcnJvcnNcIik7Il0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@stellar/stellar-sdk/lib/webauth/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@stellar/stellar-sdk/lib/webauth/utils.js":
/*!****************************************************************!*\
  !*** ./node_modules/@stellar/stellar-sdk/lib/webauth/utils.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.buildChallengeTx = buildChallengeTx;\nexports.gatherTxSigners = gatherTxSigners;\nexports.readChallengeTx = readChallengeTx;\nexports.verifyChallengeTxSigners = verifyChallengeTxSigners;\nexports.verifyChallengeTxThreshold = verifyChallengeTxThreshold;\nexports.verifyTxSignedBy = verifyTxSignedBy;\nvar _randombytes = _interopRequireDefault(__webpack_require__(/*! randombytes */ \"(ssr)/./node_modules/randombytes/index.js\"));\nvar _stellarBase = __webpack_require__(/*! @stellar/stellar-base */ \"(ssr)/./node_modules/@stellar/stellar-base/lib/index.js\");\nvar _utils = __webpack_require__(/*! ../utils */ \"(ssr)/./node_modules/@stellar/stellar-sdk/lib/utils.js\");\nvar _errors = __webpack_require__(/*! ./errors */ \"(ssr)/./node_modules/@stellar/stellar-sdk/lib/webauth/errors.js\");\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }\nfunction _toConsumableArray(r) { return _arrayWithoutHoles(r) || _iterableToArray(r) || _unsupportedIterableToArray(r) || _nonIterableSpread(); }\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _arrayWithoutHoles(r) { if (Array.isArray(r)) return _arrayLikeToArray(r); }\nfunction _createForOfIteratorHelper(r, e) { var t = \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"]; if (!t) { if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && \"number\" == typeof r.length) { t && (r = t); var _n = 0, F = function F() {}; return { s: F, n: function n() { return _n >= r.length ? { done: !0 } : { done: !1, value: r[_n++] }; }, e: function e(r) { throw r; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var o, a = !0, u = !1; return { s: function s() { t = t.call(r); }, n: function n() { var r = t.next(); return a = r.done, r; }, e: function e(r) { u = !0, o = r; }, f: function f() { try { a || null == t.return || t.return(); } finally { if (u) throw o; } } }; }\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _toArray(r) { return _arrayWithHoles(r) || _iterableToArray(r) || _unsupportedIterableToArray(r) || _nonIterableRest(); }\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _unsupportedIterableToArray(r, a) { if (r) { if (\"string\" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return \"Object\" === t && r.constructor && (t = r.constructor.name), \"Map\" === t || \"Set\" === t ? Array.from(r) : \"Arguments\" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }\nfunction _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }\nfunction _iterableToArray(r) { if (\"undefined\" != typeof Symbol && null != r[Symbol.iterator] || null != r[\"@@iterator\"]) return Array.from(r); }\nfunction _arrayWithHoles(r) { if (Array.isArray(r)) return r; }\nfunction buildChallengeTx(serverKeypair, clientAccountID, homeDomain) {\n  var timeout = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 300;\n  var networkPassphrase = arguments.length > 4 ? arguments[4] : undefined;\n  var webAuthDomain = arguments.length > 5 ? arguments[5] : undefined;\n  var memo = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : null;\n  var clientDomain = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : null;\n  var clientSigningKey = arguments.length > 8 && arguments[8] !== undefined ? arguments[8] : null;\n  if (clientAccountID.startsWith(\"M\") && memo) {\n    throw Error(\"memo cannot be used if clientAccountID is a muxed account\");\n  }\n  var account = new _stellarBase.Account(serverKeypair.publicKey(), \"-1\");\n  var now = Math.floor(Date.now() / 1000);\n  var value = (0, _randombytes.default)(48).toString(\"base64\");\n  var builder = new _stellarBase.TransactionBuilder(account, {\n    fee: _stellarBase.BASE_FEE,\n    networkPassphrase: networkPassphrase,\n    timebounds: {\n      minTime: now,\n      maxTime: now + timeout\n    }\n  }).addOperation(_stellarBase.Operation.manageData({\n    name: \"\".concat(homeDomain, \" auth\"),\n    value: value,\n    source: clientAccountID\n  })).addOperation(_stellarBase.Operation.manageData({\n    name: \"web_auth_domain\",\n    value: webAuthDomain,\n    source: account.accountId()\n  }));\n  if (clientDomain) {\n    if (!clientSigningKey) {\n      throw Error(\"clientSigningKey is required if clientDomain is provided\");\n    }\n    builder.addOperation(_stellarBase.Operation.manageData({\n      name: \"client_domain\",\n      value: clientDomain,\n      source: clientSigningKey\n    }));\n  }\n  if (memo) {\n    builder.addMemo(_stellarBase.Memo.id(memo));\n  }\n  var transaction = builder.build();\n  transaction.sign(serverKeypair);\n  return transaction.toEnvelope().toXDR(\"base64\").toString();\n}\nfunction readChallengeTx(challengeTx, serverAccountID, networkPassphrase, homeDomains, webAuthDomain) {\n  var _transaction$timeBoun;\n  if (serverAccountID.startsWith(\"M\")) {\n    throw Error(\"Invalid serverAccountID: multiplexed accounts are not supported.\");\n  }\n  var transaction;\n  try {\n    transaction = new _stellarBase.Transaction(challengeTx, networkPassphrase);\n  } catch (_unused) {\n    try {\n      transaction = new _stellarBase.FeeBumpTransaction(challengeTx, networkPassphrase);\n    } catch (_unused2) {\n      throw new _errors.InvalidChallengeError(\"Invalid challenge: unable to deserialize challengeTx transaction string\");\n    }\n    throw new _errors.InvalidChallengeError(\"Invalid challenge: expected a Transaction but received a FeeBumpTransaction\");\n  }\n  var sequence = Number.parseInt(transaction.sequence, 10);\n  if (sequence !== 0) {\n    throw new _errors.InvalidChallengeError(\"The transaction sequence number should be zero\");\n  }\n  if (transaction.source !== serverAccountID) {\n    throw new _errors.InvalidChallengeError(\"The transaction source account is not equal to the server's account\");\n  }\n  if (transaction.operations.length < 1) {\n    throw new _errors.InvalidChallengeError(\"The transaction should contain at least one operation\");\n  }\n  var _transaction$operatio = _toArray(transaction.operations),\n    operation = _transaction$operatio[0],\n    subsequentOperations = _transaction$operatio.slice(1);\n  if (!operation.source) {\n    throw new _errors.InvalidChallengeError(\"The transaction's operation should contain a source account\");\n  }\n  var clientAccountID = operation.source;\n  var memo = null;\n  if (transaction.memo.type !== _stellarBase.MemoNone) {\n    if (clientAccountID.startsWith(\"M\")) {\n      throw new _errors.InvalidChallengeError(\"The transaction has a memo but the client account ID is a muxed account\");\n    }\n    if (transaction.memo.type !== _stellarBase.MemoID) {\n      throw new _errors.InvalidChallengeError(\"The transaction's memo must be of type `id`\");\n    }\n    memo = transaction.memo.value;\n  }\n  if (operation.type !== \"manageData\") {\n    throw new _errors.InvalidChallengeError(\"The transaction's operation type should be 'manageData'\");\n  }\n  if (transaction.timeBounds && Number.parseInt((_transaction$timeBoun = transaction.timeBounds) === null || _transaction$timeBoun === void 0 ? void 0 : _transaction$timeBoun.maxTime, 10) === _stellarBase.TimeoutInfinite) {\n    throw new _errors.InvalidChallengeError(\"The transaction requires non-infinite timebounds\");\n  }\n  if (!_utils.Utils.validateTimebounds(transaction, 60 * 5)) {\n    throw new _errors.InvalidChallengeError(\"The transaction has expired\");\n  }\n  if (operation.value === undefined) {\n    throw new _errors.InvalidChallengeError(\"The transaction's operation values should not be null\");\n  }\n  if (!operation.value) {\n    throw new _errors.InvalidChallengeError(\"The transaction's operation value should not be null\");\n  }\n  if (Buffer.from(operation.value.toString(), \"base64\").length !== 48) {\n    throw new _errors.InvalidChallengeError(\"The transaction's operation value should be a 64 bytes base64 random string\");\n  }\n  if (!homeDomains) {\n    throw new _errors.InvalidChallengeError(\"Invalid homeDomains: a home domain must be provided for verification\");\n  }\n  var matchedHomeDomain;\n  if (typeof homeDomains === \"string\") {\n    if (\"\".concat(homeDomains, \" auth\") === operation.name) {\n      matchedHomeDomain = homeDomains;\n    }\n  } else if (Array.isArray(homeDomains)) {\n    matchedHomeDomain = homeDomains.find(function (domain) {\n      return \"\".concat(domain, \" auth\") === operation.name;\n    });\n  } else {\n    throw new _errors.InvalidChallengeError(\"Invalid homeDomains: homeDomains type is \".concat(_typeof(homeDomains), \" but should be a string or an array\"));\n  }\n  if (!matchedHomeDomain) {\n    throw new _errors.InvalidChallengeError(\"Invalid homeDomains: the transaction's operation key name does not match the expected home domain\");\n  }\n  var _iterator = _createForOfIteratorHelper(subsequentOperations),\n    _step;\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var op = _step.value;\n      if (op.type !== \"manageData\") {\n        throw new _errors.InvalidChallengeError(\"The transaction has operations that are not of type 'manageData'\");\n      }\n      if (op.source !== serverAccountID && op.name !== \"client_domain\") {\n        throw new _errors.InvalidChallengeError(\"The transaction has operations that are unrecognized\");\n      }\n      if (op.name === \"web_auth_domain\") {\n        if (op.value === undefined) {\n          throw new _errors.InvalidChallengeError(\"'web_auth_domain' operation value should not be null\");\n        }\n        if (op.value.compare(Buffer.from(webAuthDomain))) {\n          throw new _errors.InvalidChallengeError(\"'web_auth_domain' operation value does not match \".concat(webAuthDomain));\n        }\n      }\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n  if (!verifyTxSignedBy(transaction, serverAccountID)) {\n    throw new _errors.InvalidChallengeError(\"Transaction not signed by server: '\".concat(serverAccountID, \"'\"));\n  }\n  return {\n    tx: transaction,\n    clientAccountID: clientAccountID,\n    matchedHomeDomain: matchedHomeDomain,\n    memo: memo\n  };\n}\nfunction verifyChallengeTxThreshold(challengeTx, serverAccountID, networkPassphrase, threshold, signerSummary, homeDomains, webAuthDomain) {\n  var signers = signerSummary.map(function (signer) {\n    return signer.key;\n  });\n  var signersFound = verifyChallengeTxSigners(challengeTx, serverAccountID, networkPassphrase, signers, homeDomains, webAuthDomain);\n  var weight = 0;\n  var _loop = function _loop() {\n    var _signerSummary$find;\n    var signer = _signersFound[_i];\n    var sigWeight = ((_signerSummary$find = signerSummary.find(function (s) {\n      return s.key === signer;\n    })) === null || _signerSummary$find === void 0 ? void 0 : _signerSummary$find.weight) || 0;\n    weight += sigWeight;\n  };\n  for (var _i = 0, _signersFound = signersFound; _i < _signersFound.length; _i++) {\n    _loop();\n  }\n  if (weight < threshold) {\n    throw new _errors.InvalidChallengeError(\"signers with weight \".concat(weight, \" do not meet threshold \").concat(threshold, \"\\\"\"));\n  }\n  return signersFound;\n}\nfunction verifyChallengeTxSigners(challengeTx, serverAccountID, networkPassphrase, signers, homeDomains, webAuthDomain) {\n  var _readChallengeTx = readChallengeTx(challengeTx, serverAccountID, networkPassphrase, homeDomains, webAuthDomain),\n    tx = _readChallengeTx.tx;\n  var serverKP;\n  try {\n    serverKP = _stellarBase.Keypair.fromPublicKey(serverAccountID);\n  } catch (err) {\n    throw new Error(\"Couldn't infer keypair from the provided 'serverAccountID': \".concat(err.message));\n  }\n  var clientSigners = new Set();\n  var _iterator2 = _createForOfIteratorHelper(signers),\n    _step2;\n  try {\n    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n      var _signer = _step2.value;\n      if (_signer === serverKP.publicKey()) {\n        continue;\n      }\n      if (_signer.charAt(0) !== \"G\") {\n        continue;\n      }\n      clientSigners.add(_signer);\n    }\n  } catch (err) {\n    _iterator2.e(err);\n  } finally {\n    _iterator2.f();\n  }\n  if (clientSigners.size === 0) {\n    throw new _errors.InvalidChallengeError(\"No verifiable client signers provided, at least one G... address must be provided\");\n  }\n  var clientSigningKey;\n  var _iterator3 = _createForOfIteratorHelper(tx.operations),\n    _step3;\n  try {\n    for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n      var op = _step3.value;\n      if (op.type === \"manageData\" && op.name === \"client_domain\") {\n        if (clientSigningKey) {\n          throw new _errors.InvalidChallengeError(\"Found more than one client_domain operation\");\n        }\n        clientSigningKey = op.source;\n      }\n    }\n  } catch (err) {\n    _iterator3.e(err);\n  } finally {\n    _iterator3.f();\n  }\n  var allSigners = [serverKP.publicKey()].concat(_toConsumableArray(Array.from(clientSigners)));\n  if (clientSigningKey) {\n    allSigners.push(clientSigningKey);\n  }\n  var signersFound = gatherTxSigners(tx, allSigners);\n  var serverSignatureFound = false;\n  var clientSigningKeySignatureFound = false;\n  for (var _i2 = 0, _signersFound2 = signersFound; _i2 < _signersFound2.length; _i2++) {\n    var signer = _signersFound2[_i2];\n    if (signer === serverKP.publicKey()) {\n      serverSignatureFound = true;\n    }\n    if (signer === clientSigningKey) {\n      clientSigningKeySignatureFound = true;\n    }\n  }\n  if (!serverSignatureFound) {\n    throw new _errors.InvalidChallengeError(\"Transaction not signed by server: '\".concat(serverKP.publicKey(), \"'\"));\n  }\n  if (clientSigningKey && !clientSigningKeySignatureFound) {\n    throw new _errors.InvalidChallengeError(\"Transaction not signed by the source account of the 'client_domain' \" + \"ManageData operation\");\n  }\n  if (signersFound.length === 1) {\n    throw new _errors.InvalidChallengeError(\"None of the given signers match the transaction signatures\");\n  }\n  if (signersFound.length !== tx.signatures.length) {\n    throw new _errors.InvalidChallengeError(\"Transaction has unrecognized signatures\");\n  }\n  signersFound.splice(signersFound.indexOf(serverKP.publicKey()), 1);\n  if (clientSigningKey) {\n    signersFound.splice(signersFound.indexOf(clientSigningKey), 1);\n  }\n  return signersFound;\n}\nfunction verifyTxSignedBy(transaction, accountID) {\n  return gatherTxSigners(transaction, [accountID]).length !== 0;\n}\nfunction gatherTxSigners(transaction, signers) {\n  var hashedSignatureBase = transaction.hash();\n  var txSignatures = _toConsumableArray(transaction.signatures);\n  var signersFound = new Set();\n  var _iterator4 = _createForOfIteratorHelper(signers),\n    _step4;\n  try {\n    for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n      var signer = _step4.value;\n      if (txSignatures.length === 0) {\n        break;\n      }\n      var keypair = void 0;\n      try {\n        keypair = _stellarBase.Keypair.fromPublicKey(signer);\n      } catch (err) {\n        throw new _errors.InvalidChallengeError(\"Signer is not a valid address: \".concat(err.message));\n      }\n      for (var i = 0; i < txSignatures.length; i++) {\n        var decSig = txSignatures[i];\n        if (!decSig.hint().equals(keypair.signatureHint())) {\n          continue;\n        }\n        if (keypair.verify(hashedSignatureBase, decSig.signature())) {\n          signersFound.add(signer);\n          txSignatures.splice(i, 1);\n          break;\n        }\n      }\n    }\n  } catch (err) {\n    _iterator4.e(err);\n  } finally {\n    _iterator4.f();\n  }\n  return Array.from(signersFound);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@stellar/stellar-sdk/lib/webauth/utils.js\n");

/***/ })

};
;