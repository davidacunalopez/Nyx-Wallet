// This file is generated automatically by Next.js
// Do not edit this file manually
// This file validates that all pages and layouts export the correct types

import type { AppRoutes, LayoutRoutes, ParamMap, AppRouteHandlerRoutes } from "./routes.js"
import type { ResolvingMetadata, ResolvingViewport } from "next/dist/lib/metadata/types/metadata-interface.js"
import type { NextRequest } from 'next/server.js'

type AppPageConfig<Route extends AppRoutes = AppRoutes> = {
  default: React.ComponentType<{ params: Promise<ParamMap[Route]> } & any> | ((props: { params: Promise<ParamMap[Route]> } & any) => React.ReactNode | Promise<React.ReactNode> | never | void | Promise<void>)
  generateStaticParams?: (props: { params: ParamMap[Route] }) => Promise<any[]> | any[]
  generateMetadata?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingMetadata
  ) => Promise<any> | any
  generateViewport?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingViewport
  ) => Promise<any> | any
  metadata?: any
  viewport?: any
}

type LayoutConfig<Route extends LayoutRoutes = LayoutRoutes> = {
  default: React.ComponentType<LayoutProps<Route>> | ((props: LayoutProps<Route>) => React.ReactNode | Promise<React.ReactNode> | never | void | Promise<void>)
  generateStaticParams?: (props: { params: ParamMap[Route] }) => Promise<any[]> | any[]
  generateMetadata?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingMetadata
  ) => Promise<any> | any
  generateViewport?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingViewport
  ) => Promise<any> | any
  metadata?: any
  viewport?: any
}

type RouteHandlerConfig<Route extends AppRouteHandlerRoutes = AppRouteHandlerRoutes> = {
  GET?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response> | Response | Promise<void> | void
  POST?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response> | Response | Promise<void> | void
  PUT?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response> | Response | Promise<void> | void
  PATCH?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response> | Response | Promise<void> | void
  DELETE?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response> | Response | Promise<void> | void
  HEAD?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response> | Response | Promise<void> | void
  OPTIONS?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response> | Response | Promise<void> | void
}


// Validate ..\..\src\app\automation\page.tsx
{
  const handler = {} as typeof import("..\\..\\src\\app\\automation\\page.js")
  handler satisfies AppPageConfig<"/automation">
}

// Validate ..\..\src\app\cryptocurrency-converter\page.tsx
{
  const handler = {} as typeof import("..\\..\\src\\app\\cryptocurrency-converter\\page.js")
  handler satisfies AppPageConfig<"/cryptocurrency-converter">
}

// Validate ..\..\src\app\dashboard\page.tsx
{
  const handler = {} as typeof import("..\\..\\src\\app\\dashboard\\page.js")
  handler satisfies AppPageConfig<"/dashboard">
}

// Validate ..\..\src\app\education-center\page.tsx
{
  const handler = {} as typeof import("..\\..\\src\\app\\education-center\\page.js")
  handler satisfies AppPageConfig<"/education-center">
}

// Validate ..\..\src\app\invisible-wallet\page.tsx
{
  const handler = {} as typeof import("..\\..\\src\\app\\invisible-wallet\\page.js")
  handler satisfies AppPageConfig<"/invisible-wallet">
}

// Validate ..\..\src\app\offline\page.tsx
{
  const handler = {} as typeof import("..\\..\\src\\app\\offline\\page.js")
  handler satisfies AppPageConfig<"/offline">
}

// Validate ..\..\src\app\page.tsx
{
  const handler = {} as typeof import("..\\..\\src\\app\\page.js")
  handler satisfies AppPageConfig<"/">
}

// Validate ..\..\src\app\portfolio-analytics\page.tsx
{
  const handler = {} as typeof import("..\\..\\src\\app\\portfolio-analytics\\page.js")
  handler satisfies AppPageConfig<"/portfolio-analytics">
}

// Validate ..\..\src\app\proof-ownership\page.tsx
{
  const handler = {} as typeof import("..\\..\\src\\app\\proof-ownership\\page.js")
  handler satisfies AppPageConfig<"/proof-ownership">
}

// Validate ..\..\src\app\recover\page.tsx
{
  const handler = {} as typeof import("..\\..\\src\\app\\recover\\page.js")
  handler satisfies AppPageConfig<"/recover">
}

// Validate ..\..\src\app\send-receive\page.tsx
{
  const handler = {} as typeof import("..\\..\\src\\app\\send-receive\\page.js")
  handler satisfies AppPageConfig<"/send-receive">
}

// Validate ..\..\src\app\settings\page.tsx
{
  const handler = {} as typeof import("..\\..\\src\\app\\settings\\page.js")
  handler satisfies AppPageConfig<"/settings">
}

// Validate ..\..\src\app\signature-tools\page.tsx
{
  const handler = {} as typeof import("..\\..\\src\\app\\signature-tools\\page.js")
  handler satisfies AppPageConfig<"/signature-tools">
}

// Validate ..\..\src\app\strategy-simulator\page.tsx
{
  const handler = {} as typeof import("..\\..\\src\\app\\strategy-simulator\\page.js")
  handler satisfies AppPageConfig<"/strategy-simulator">
}

// Validate ..\..\src\app\support\page.tsx
{
  const handler = {} as typeof import("..\\..\\src\\app\\support\\page.js")
  handler satisfies AppPageConfig<"/support">
}

// Validate ..\..\src\app\test-offline\page.tsx
{
  const handler = {} as typeof import("..\\..\\src\\app\\test-offline\\page.js")
  handler satisfies AppPageConfig<"/test-offline">
}

// Validate ..\..\src\app\test-wallet\page.tsx
{
  const handler = {} as typeof import("..\\..\\src\\app\\test-wallet\\page.js")
  handler satisfies AppPageConfig<"/test-wallet">
}

// Validate ..\..\src\app\transactions\page.tsx
{
  const handler = {} as typeof import("..\\..\\src\\app\\transactions\\page.js")
  handler satisfies AppPageConfig<"/transactions">
}

// Validate ..\..\src\app\widget-configuration\page.tsx
{
  const handler = {} as typeof import("..\\..\\src\\app\\widget-configuration\\page.js")
  handler satisfies AppPageConfig<"/widget-configuration">
}

// Validate ..\..\src\app\api\crypto\binance\route.ts
{
  const handler = {} as typeof import("..\\..\\src\\app\\api\\crypto\\binance\\route.js")
  handler satisfies RouteHandlerConfig<"/api/crypto/binance">
}

// Validate ..\..\src\app\api\crypto\coingecko\route.ts
{
  const handler = {} as typeof import("..\\..\\src\\app\\api\\crypto\\coingecko\\route.js")
  handler satisfies RouteHandlerConfig<"/api/crypto/coingecko">
}

// Validate ..\..\src\app\api\crypto\cryptocompare\route.ts
{
  const handler = {} as typeof import("..\\..\\src\\app\\api\\crypto\\cryptocompare\\route.js")
  handler satisfies RouteHandlerConfig<"/api/crypto/cryptocompare">
}





// Validate ..\..\src\app\layout.tsx
{
  const handler = {} as typeof import("..\\..\\src\\app\\layout.js")
  handler satisfies LayoutConfig<"/">
}
